[
  {
    "title": "CancelImageCreation",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imageBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image whose creation you want to cancel."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imageBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image whose creation has been cancelled."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateComponent",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "changeDescription": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token of the component."
      },
      "data": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 16000.",
        "pattern": "[^\\x00]+",
        "required": "No",
        "desc": "The data of the component. Used to specify the data inline. Either data or uri can be used to specify the data within the component."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the component. Describes the contents of the component."
      },
      "kmsKeyId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The ID of the KMS key that should be used to encrypt this component."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the component."
      },
      "platform": {
        "type": "String",
        "required": "Yes",
        "desc": "The platform of the component."
      },
      "semanticVersion": {
        "type": "String",
        "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
        "required": "Yes",
        "desc": "The semantic version of the component. This version follows the semantic version syntax. For example, major.minor.patch. This could be versioned like software (2.0.1) or like a date (2019.12.01)."
      },
      "supportedOsVersions": {
        "type": "Array of strings",
        "length": "Minimum length of 1.",
        "required": "No",
        "desc": "The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the parent image OS version during image recipe creation."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the component."
      },
      "uri": {
        "type": "String",
        "required": "No",
        "desc": "The uri of the component. Must be an S3 URL and the requester must have permission to access the S3 bucket. If you use S3, you can specify component content up to your service quota. Either data or uri can be used to specify the data within the component."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "componentBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the component that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidParameterCombinationException": {
        "statusCode": "400",
        "desc": "You have specified two or more mutually exclusive parameters. Review the error message for details."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "InvalidVersionNumberException": {
        "statusCode": "400",
        "desc": "Your version number is out of bounds or does not follow the required syntax."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateContainerRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The client token used to make this request idempotent."
      },
      "components": {
        "type": "Array of ComponentConfiguration objects",
        "required": "Yes",
        "desc": "Components for build and test that are included in the container recipe."
      },
      "containerType": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of container to create."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the container recipe."
      },
      "dockerfileTemplateData": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 16000.",
        "pattern": "[^\\x00]+",
        "required": "Yes",
        "desc": "The Dockerfile template used to build your image as an inline data blob."
      },
      "dockerfileTemplateUri": {
        "type": "String",
        "required": "No",
        "desc": "The S3 URI for the Dockerfile that will be used to build your container image."
      },
      "imageOsVersionOverride": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "Specifies the operating system version for the source image."
      },
      "kmsKeyId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "Identifies which KMS key is used to encrypt the container image."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the container recipe."
      },
      "parentImage": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "Yes",
        "desc": "The source image for the container recipe."
      },
      "platformOverride": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the operating system platform when you use a custom source image."
      },
      "semanticVersion": {
        "type": "String",
        "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
        "required": "Yes",
        "desc": "The semantic version of the container recipe (<major>.<minor>.<patch>)."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "Tags that are attached to the container recipe."
      },
      "targetRepository": {
        "type": "TargetContainerRepository object",
        "required": "Yes",
        "desc": "The destination repository for the container image."
      },
      "workingDirectory": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The working directory for use during build and test workflows."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The client token used to make this request idempotent."
      },
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "Returns the Amazon Resource Name (ARN) of the container recipe that the request created."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "InvalidVersionNumberException": {
        "statusCode": "400",
        "desc": "Your version number is out of bounds or does not follow the required syntax."
      },
      "ResourceAlreadyExistsException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to create already exists."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateDistributionConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token of the distribution configuration."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the distribution configuration."
      },
      "distributions": {
        "type": "Array of Distribution objects",
        "required": "Yes",
        "desc": "The distributions of the distribution configuration."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the distribution configuration."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the distribution configuration."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidParameterCombinationException": {
        "statusCode": "400",
        "desc": "You have specified two or more mutually exclusive parameters. Review the error message for details."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceAlreadyExistsException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to create already exists."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateImage",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline."
      },
      "enhancedImageMetadataEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default."
      },
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed."
      },
      "imageTestsConfiguration": {
        "type": "ImageTestsConfiguration object",
        "required": "No",
        "desc": "The image tests configuration of the image."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the image."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imageBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateImagePipeline",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the container recipe that is used to configure images created by this container pipeline."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the image pipeline."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images created by this image pipeline."
      },
      "enhancedImageMetadataEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default."
      },
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that will be used to configure images created by this image pipeline."
      },
      "imageTestsConfiguration": {
        "type": "ImageTestsConfiguration object",
        "required": "No",
        "desc": "The image test configuration of the image pipeline."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images created by this image pipeline."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the image pipeline."
      },
      "schedule": {
        "type": "Schedule object",
        "required": "No",
        "desc": "The schedule of the image pipeline."
      },
      "status": {
        "type": "String",
        "required": "No",
        "desc": "The status of the image pipeline."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the image pipeline."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceAlreadyExistsException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to create already exists."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateImageRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "blockDeviceMappings": {
        "type": "Array of InstanceBlockDeviceMapping objects",
        "required": "No",
        "desc": "The block device mappings of the image recipe."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "components": {
        "type": "Array of ComponentConfiguration objects",
        "required": "Yes",
        "desc": "The components of the image recipe."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the image recipe."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the image recipe."
      },
      "parentImage": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "Yes",
        "desc": "The parent image of the image recipe. The value of the string can be the ARN of the parent image or an AMI ID. The format for the ARN follows this example: arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/xxxx.x.x. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder."
      },
      "semanticVersion": {
        "type": "String",
        "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
        "required": "Yes",
        "desc": "The semantic version of the image recipe."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the image recipe."
      },
      "workingDirectory": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The working directory to be used during build and test workflows."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "InvalidVersionNumberException": {
        "statusCode": "400",
        "desc": "Your version number is out of bounds or does not follow the required syntax."
      },
      "ResourceAlreadyExistsException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to create already exists."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "CreateInfrastructureConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the infrastructure configuration."
      },
      "instanceProfileName": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "Yes",
        "desc": "The instance profile to associate with the instance used to customize your EC2 AMI."
      },
      "instanceTypes": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability."
      },
      "keyPair": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The key pair of the infrastructure configuration. This can be used to log on to and debug the instance used to create your image."
      },
      "logging": {
        "type": "Logging object",
        "required": "No",
        "desc": "The logging configuration of the infrastructure configuration."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the infrastructure configuration."
      },
      "resourceTags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags attached to the resource created by Image Builder."
      },
      "securityGroupIds": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The security group IDs to associate with the instance used to customize your EC2 AMI."
      },
      "snsTopicArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:sns:[^:]+:\\d{12}:[a-zA-Z0-9-_]{1,256}$",
        "required": "No",
        "desc": "The SNS topic on which to send image build events."
      },
      "subnetId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The subnet ID in which to place the instance used to customize your EC2 AMI."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the infrastructure configuration."
      },
      "terminateInstanceOnFailure": {
        "type": "Boolean",
        "required": "No",
        "desc": "The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceAlreadyExistsException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to create already exists."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceQuotaExceededException": {
        "statusCode": "402",
        "desc": "You have exceeded the number of permitted resources or operations for this service. For service quotas, see EC2 Image Builder endpoints and quotas."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteComponent",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "componentBuildVersionArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the component build version to delete."
      }
    },
    "res": {
      "componentBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the component build version that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteContainerRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "containerRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the container recipe to delete."
      }
    },
    "res": {
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the container recipe that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteDistributionConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "distributionConfigurationArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration to delete."
      }
    },
    "res": {
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteImage",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageBuildVersionArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image to delete."
      }
    },
    "res": {
      "imageBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteImagePipeline",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imagePipelineArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline to delete."
      }
    },
    "res": {
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteImageRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image recipe to delete."
      }
    },
    "res": {
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "DeleteInfrastructureConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "infrastructureConfigurationArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration to delete."
      }
    },
    "res": {
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that was deleted."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceDependencyException": {
        "statusCode": "400",
        "desc": "You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetComponent",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "componentBuildVersionArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/(?:(?:(\\d+|x)\\.(\\d+|x)\\.(\\d+|x))|(?:\\d+\\.\\d+\\.\\d+/\\d+))$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the component that you want to retrieve. Regex requires \"/\\d+$\" suffix."
      }
    },
    "res": {
      "component": {
        "type": "Component object",
        "desc": "The component object associated with the specified ARN."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetComponentPolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "componentArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the component whose policy you want to retrieve."
      }
    },
    "res": {
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "desc": "The component policy."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetContainerRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "containerRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the container recipe to retrieve."
      }
    },
    "res": {
      "containerRecipe": {
        "type": "ContainerRecipe object",
        "desc": "The container recipe object that is returned."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetContainerRecipePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "containerRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the container recipe for the policy being requested."
      }
    },
    "res": {
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "desc": "The container recipe policy object that is returned."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetDistributionConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "distributionConfigurationArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that you want to retrieve."
      }
    },
    "res": {
      "distributionConfiguration": {
        "type": "DistributionConfiguration object",
        "desc": "The distribution configuration object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetImage",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageBuildVersionArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/(?:(?:(\\d+|x)\\.(\\d+|x)\\.(\\d+|x))|(?:\\d+\\.\\d+\\.\\d+/\\d+))$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image that you want to retrieve."
      }
    },
    "res": {
      "image": {
        "type": "Image object",
        "desc": "The image object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetImagePipeline",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imagePipelineArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that you want to retrieve."
      }
    },
    "res": {
      "imagePipeline": {
        "type": "ImagePipeline object",
        "desc": "The image pipeline object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetImagePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image whose policy you want to retrieve."
      }
    },
    "res": {
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "desc": "The image policy object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetImageRecipe",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that you want to retrieve."
      }
    },
    "res": {
      "imageRecipe": {
        "type": "ImageRecipe object",
        "desc": "The image recipe object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetImageRecipePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageRecipeArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image recipe whose policy you want to retrieve."
      }
    },
    "res": {
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "desc": "The image recipe policy object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "GetInfrastructureConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "infrastructureConfigurationArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that you want to retrieve."
      }
    },
    "res": {
      "infrastructureConfiguration": {
        "type": "InfrastructureConfiguration object",
        "desc": "The infrastructure configuration object."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ImportComponent",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "changeDescription": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token of the component."
      },
      "data": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The data of the component. Used to specify the data inline. Either data or uri can be used to specify the data within the component."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the component. Describes the contents of the component."
      },
      "format": {
        "type": "String",
        "required": "Yes",
        "desc": "The format of the resource that you want to import as a component."
      },
      "kmsKeyId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The ID of the KMS key that should be used to encrypt this component."
      },
      "name": {
        "type": "String",
        "pattern": "^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$",
        "required": "Yes",
        "desc": "The name of the component."
      },
      "platform": {
        "type": "String",
        "required": "Yes",
        "desc": "The platform of the component."
      },
      "semanticVersion": {
        "type": "String",
        "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
        "required": "Yes",
        "desc": "The semantic version of the component. This version follows the semantic version syntax. For example, major.minor.patch. This could be versioned like software (2.0.1) or like a date (2019.12.01)."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags of the component."
      },
      "type": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of the component denotes whether the component is used to build the image or only to test it."
      },
      "uri": {
        "type": "String",
        "required": "No",
        "desc": "The uri of the component. Must be an S3 URL and the requester must have permission to access the S3 bucket. If you use S3, you can specify component content up to your service quota. Either data or uri can be used to specify the data within the component."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "componentBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the imported component."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidParameterCombinationException": {
        "statusCode": "400",
        "desc": "You have specified two or more mutually exclusive parameters. Review the error message for details."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "InvalidVersionNumberException": {
        "statusCode": "400",
        "desc": "Your version number is out of bounds or does not follow the required syntax."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListComponentBuildVersions",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "componentVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The component version Amazon Resource Name (ARN) whose versions you want to list."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "componentSummaryList": {
        "type": "Array of ComponentSummary objects",
        "desc": "The list of component summaries for the specified semantic version."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListComponents",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "byName": {
        "type": "Boolean",
        "required": "No",
        "desc": "Returns the list of component build versions for the specified semantic version."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      },
      "owner": {
        "type": "String",
        "required": "No",
        "desc": "The owner defines which components you want to list. By default, this request will only show components owned by your account. You can use this field to specify if you want to view components owned by yourself, by Amazon, or those components that have been shared with you by other customers."
      }
    },
    "res": {
      "componentVersionList": {
        "type": "Array of ComponentVersion objects",
        "desc": "The list of component semantic versions."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListContainerRecipes",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "Request filters that are used to narrow the list of container images that are returned."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in the list."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "Provides a token for pagination, which determines where to begin the next set of results when the current set reaches the maximum for one request."
      },
      "owner": {
        "type": "String",
        "required": "No",
        "desc": "Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account."
      }
    },
    "res": {
      "containerRecipeSummaryList": {
        "type": "Array of ContainerRecipeSummary objects",
        "desc": "The list of container recipes returned for the request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The next token field is used for paginated responses. When this is not empty, there are additional container recipes that the service has not included in this response. Use this token with the next request to retrieve additional list items."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListDistributionConfigurations",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "distributionConfigurationSummaryList": {
        "type": "Array of DistributionConfigurationSummary objects",
        "desc": "The list of distributions."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListImageBuildVersions",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "imageVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image whose build versions you want to retrieve."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "imageSummaryList": {
        "type": "Array of ImageSummary objects",
        "desc": "The list of image build versions."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListImagePipelineImages",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline whose images you want to view."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "imageSummaryList": {
        "type": "Array of ImageSummary objects",
        "desc": "The list of images built by this pipeline."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListImagePipelines",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "imagePipelineList": {
        "type": "Array of ImagePipeline objects",
        "desc": "The list of image pipelines."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListImageRecipes",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      },
      "owner": {
        "type": "String",
        "required": "No",
        "desc": "The owner defines which image recipes you want to list. By default, this request will only show image recipes owned by your account. You can use this field to specify if you want to view image recipes owned by yourself, by Amazon, or those image recipes that have been shared with you by other customers."
      }
    },
    "res": {
      "imageRecipeSummaryList": {
        "type": "Array of ImageRecipeSummary objects",
        "desc": "The list of image pipelines."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListImages",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "byName": {
        "type": "Boolean",
        "required": "No",
        "desc": "Requests a list of images with a specific recipe name."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "includeDeprecated": {
        "type": "Boolean",
        "required": "No",
        "desc": "Includes deprecated images in the response list."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      },
      "owner": {
        "type": "String",
        "required": "No",
        "desc": "The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers."
      }
    },
    "res": {
      "imageVersionList": {
        "type": "Array of ImageVersion objects",
        "desc": "The list of image semantic versions."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListInfrastructureConfigurations",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "filters": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "maxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum items to return in a request."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "required": "No",
        "desc": "A token to specify where to start paginating. This is the NextToken from a previously truncated response."
      }
    },
    "res": {
      "infrastructureConfigurationSummaryList": {
        "type": "Array of InfrastructureConfigurationSummary objects",
        "desc": "The list of infrastructure configurations."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 65535.",
        "desc": "The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidPaginationTokenException": {
        "statusCode": "400",
        "desc": "You have provided an invalid pagination token in your request."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "ListTagsForResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline)/[a-z0-9-_]+(?:/(?:(?:x|\\d+)\\.(?:x|\\d+)\\.(?:x|\\d+))(?:/\\d+)?)?$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve."
      }
    },
    "res": {
      "tags": {
        "type": "String to string map",
        "desc": "The tags for the specified resource."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InvalidParameterException": {
        "statusCode": "400",
        "desc": "The specified parameter is invalid. Review the available parameters for the API request."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      }
    }
  },
  {
    "title": "PutComponentPolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "componentArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the component that this policy should be applied to."
      },
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "required": "Yes",
        "desc": "The policy to apply."
      }
    },
    "res": {
      "componentArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):component/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the component that this policy was applied to."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidParameterValueException": {
        "statusCode": "400",
        "desc": "The value that you provided for the specified parameter is invalid."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "PutContainerRecipePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the container recipe that this policy should be applied to."
      },
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "required": "Yes",
        "desc": "The policy to apply to the container recipe."
      }
    },
    "res": {
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the container recipe that this policy was applied to."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidParameterValueException": {
        "statusCode": "400",
        "desc": "The value that you provided for the specified parameter is invalid."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "PutImagePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image that this policy should be applied to."
      },
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "required": "Yes",
        "desc": "The policy to apply."
      }
    },
    "res": {
      "imageArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image that this policy was applied to."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidParameterValueException": {
        "statusCode": "400",
        "desc": "The value that you provided for the specified parameter is invalid."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "PutImageRecipePolicy",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that this policy should be applied to."
      },
      "policy": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 30000.",
        "required": "Yes",
        "desc": "The policy to apply."
      }
    },
    "res": {
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that this policy was applied to."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "InvalidParameterValueException": {
        "statusCode": "400",
        "desc": "The value that you provided for the specified parameter is invalid."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "StartImagePipelineExecution",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that you want to manually invoke."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imageBuildVersionArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+/\\d+$",
        "desc": "The Amazon Resource Name (ARN) of the image that was created by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "TagResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline)/[a-z0-9-_]+(?:/(?:(?:x|\\d+)\\.(?:x|\\d+)\\.(?:x|\\d+))(?:/\\d+)?)?$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the resource that you want to tag."
      },
      "tags": {
        "type": "String to string map",
        "required": "Yes",
        "desc": "The tags to apply to the resource."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InvalidParameterException": {
        "statusCode": "400",
        "desc": "The specified parameter is invalid. Review the available parameters for the API request."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      }
    }
  },
  {
    "title": "UntagResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline)/[a-z0-9-_]+(?:/(?:(?:x|\\d+)\\.(?:x|\\d+)\\.(?:x|\\d+))(?:/\\d+)?)?$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the resource that you want to untag."
      },
      "tagKeys": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
        "required": "Yes",
        "desc": "The tag keys to remove from the resource. Array Members: Minimum number of 1 item. Maximum number of 50 items."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InvalidParameterException": {
        "statusCode": "400",
        "desc": "The specified parameter is invalid. Review the available parameters for the API request."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "At least one of the resources referenced by your request does not exist."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      }
    }
  },
  {
    "title": "UpdateDistributionConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token of the distribution configuration."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the distribution configuration."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that you want to update."
      },
      "distributions": {
        "type": "Array of Distribution objects",
        "required": "Yes",
        "desc": "The distributions of the distribution configuration."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that was updated by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidParameterCombinationException": {
        "statusCode": "400",
        "desc": "You have specified two or more mutually exclusive parameters. Review the error message for details."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "UpdateImagePipeline",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "containerRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):container-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the container pipeline to update."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the image pipeline."
      },
      "distributionConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):distribution-configuration/[a-z0-9-_]+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images updated by this image pipeline."
      },
      "enhancedImageMetadataEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default."
      },
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that you want to update."
      },
      "imageRecipeArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-recipe/[a-z0-9-_]+/\\d+\\.\\d+\\.\\d+$",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline."
      },
      "imageTestsConfiguration": {
        "type": "ImageTestsConfiguration object",
        "required": "No",
        "desc": "The image test configuration of the image pipeline."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images updated by this image pipeline."
      },
      "schedule": {
        "type": "Schedule object",
        "required": "No",
        "desc": "The schedule of the image pipeline."
      },
      "status": {
        "type": "String",
        "required": "No",
        "desc": "The status of the image pipeline."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "imagePipelineArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):image-pipeline/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the image pipeline that was updated by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  },
  {
    "title": "UpdateInfrastructureConfiguration",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "required": "Yes",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The description of the infrastructure configuration."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that you want to update."
      },
      "instanceProfileName": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "Yes",
        "desc": "The instance profile to associate with the instance used to customize your EC2 AMI."
      },
      "instanceTypes": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability."
      },
      "keyPair": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The key pair of the infrastructure configuration. This can be used to log on to and debug the instance used to create your image."
      },
      "logging": {
        "type": "Logging object",
        "required": "No",
        "desc": "The logging configuration of the infrastructure configuration."
      },
      "resourceTags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags attached to the resource created by Image Builder."
      },
      "securityGroupIds": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The security group IDs to associate with the instance used to customize your EC2 AMI."
      },
      "snsTopicArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:sns:[^:]+:\\d{12}:[a-zA-Z0-9-_]{1,256}$",
        "required": "No",
        "desc": "The SNS topic on which to send image build events."
      },
      "subnetId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The subnet ID to place the instance used to customize your EC2 AMI in."
      },
      "terminateInstanceOnFailure": {
        "type": "Boolean",
        "required": "No",
        "desc": "The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 36.",
        "desc": "The idempotency token used to make this request idempotent."
      },
      "infrastructureConfigurationArn": {
        "type": "String",
        "pattern": "^arn:aws[^:]*:imagebuilder:[^:]+:(?:\\d{12}|aws):infrastructure-configuration/[a-z0-9-_]+$",
        "desc": "The Amazon Resource Name (ARN) of the infrastructure configuration that was updated by this request."
      },
      "requestId": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The request ID that uniquely identifies this request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "CallRateLimitExceededException": {
        "statusCode": "429",
        "desc": "You have exceeded the permitted request rate for the specific operation."
      },
      "ClientException": {
        "statusCode": "400",
        "desc": "These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier."
      },
      "ForbiddenException": {
        "statusCode": "403",
        "desc": "You are not authorized to perform the requested operation."
      },
      "IdempotentParameterMismatchException": {
        "statusCode": "400",
        "desc": "You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token."
      },
      "InvalidRequestException": {
        "statusCode": "400",
        "desc": "You have made a request for an action that is not supported by the service."
      },
      "ResourceInUseException": {
        "statusCode": "400",
        "desc": "The resource that you are trying to operate on is currently in use. Review the message details and retry later."
      },
      "ServiceException": {
        "statusCode": "500",
        "desc": "This exception is thrown when the service encounters an unrecoverable exception."
      },
      "ServiceUnavailableException": {
        "statusCode": "503",
        "desc": "The service is unable to process your request at this time."
      }
    }
  }
]