[
  {
    "title": "AssociateAssessmentReportEvidenceFolder",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "evidenceFolderId": {
        "type": "String",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which evidence is stored."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "BatchAssociateAssessmentReportEvidence",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The unique identifier for the specified assessment."
      },
      "evidenceFolderId": {
        "type": "String",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which the evidence is stored."
      },
      "evidenceIds": {
        "type": "Array of strings",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The list of evidence identifiers."
      }
    },
    "res": {
      "errors": {
        "type": "Array of AssessmentReportEvidenceError objects",
        "desc": "A list of errors returned by the BatchAssociateAssessmentReportEvidence API."
      },
      "evidenceIds": {
        "type": "Array of strings",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "desc": "The identifier for the evidence."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "BatchCreateDelegationByAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "createDelegationRequests": {
        "type": "Array of CreateDelegationRequest objects",
        "required": "Yes",
        "desc": "The API request to batch create delegations in AWS Audit Manager."
      }
    },
    "res": {
      "delegations": {
        "type": "Array of Delegation objects",
        "desc": "The delegations associated with the assessment."
      },
      "errors": {
        "type": "Array of BatchCreateDelegationByAssessmentError objects",
        "desc": "A list of errors returned by the BatchCreateDelegationByAssessment API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "BatchDeleteDelegationByAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "delegationIds": {
        "type": "Array of strings",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifiers for the specified delegations."
      }
    },
    "res": {
      "errors": {
        "type": "Array of BatchDeleteDelegationByAssessmentError objects",
        "desc": "A list of errors returned by the BatchDeleteDelegationByAssessment API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "BatchDisassociateAssessmentReportEvidence",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "evidenceFolderId": {
        "type": "String",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which evidence is stored."
      },
      "evidenceIds": {
        "type": "Array of strings",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The list of evidence identifiers."
      }
    },
    "res": {
      "errors": {
        "type": "Array of AssessmentReportEvidenceError objects",
        "desc": "A list of errors returned by the BatchDisassociateAssessmentReportEvidence API."
      },
      "evidenceIds": {
        "type": "Array of strings",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "desc": "The identifier for the evidence."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "BatchImportEvidenceToAssessmentControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "manualEvidence": {
        "type": "Array of ManualEvidence objects",
        "required": "Yes",
        "desc": "The list of manual evidence objects."
      }
    },
    "res": {
      "errors": {
        "type": "Array of BatchImportEvidenceToAssessmentControlError objects",
        "desc": "A list of errors returned by the BatchImportEvidenceToAssessmentControl API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "CreateAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentReportsDestination": {
        "type": "AssessmentReportsDestination object",
        "required": "Yes",
        "desc": "The assessment report storage destination for the specified assessment that is being created."
      },
      "description": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The optional description of the assessment to be created."
      },
      "frameworkId": {
        "type": "String",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified framework."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The name of the assessment to be created."
      },
      "roles": {
        "type": "Array of Role objects",
        "required": "Yes",
        "desc": "The list of roles for the specified assessment."
      },
      "scope": {
        "type": "Scope object",
        "required": "Yes",
        "desc": "The wrapper that contains the AWS accounts and AWS services in scope for the assessment."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags associated with the assessment."
      }
    },
    "res": {
      "assessment": {
        "type": "Assessment object",
        "desc": "An entity that defines the scope of audit evidence collected by AWS Audit Manager. An AWS Audit Manager assessment is an implementation of an AWS Audit Manager framework."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "CreateAssessmentFramework",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "complianceType": {
        "type": "String",
        "length": "Maximum length of 100.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The compliance type that the new custom framework supports, such as CIS or HIPAA."
      },
      "controlSets": {
        "type": "Array of CreateAssessmentFrameworkControlSet objects",
        "required": "Yes",
        "desc": "The control sets to be associated with the framework."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "An optional description for the new custom framework."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The name of the new custom framework."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags associated with the framework."
      }
    },
    "res": {
      "framework": {
        "type": "Framework object",
        "desc": "The name of the new framework returned by the CreateAssessmentFramework API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "CreateAssessmentReport",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "description": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The description of the assessment report."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[a-zA-Z0-9-_\\.]+$",
        "required": "Yes",
        "desc": "The name of the new assessment report."
      }
    },
    "res": {
      "assessmentReport": {
        "type": "AssessmentReport object",
        "desc": "The new assessment report returned by the CreateAssessmentReport API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "CreateControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "actionPlanInstructions": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The recommended actions to carry out if the control is not fulfilled."
      },
      "actionPlanTitle": {
        "type": "String",
        "length": "Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The title of the action plan for remediating the control."
      },
      "controlMappingSources": {
        "type": "Array of CreateControlMappingSource objects",
        "required": "Yes",
        "desc": "The data mapping sources for the specified control."
      },
      "description": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The description of the control."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The name of the control."
      },
      "tags": {
        "type": "String to string map",
        "required": "No",
        "desc": "The tags associated with the control."
      },
      "testingInformation": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The steps to follow to determine if the control has been satisfied."
      }
    },
    "res": {
      "control": {
        "type": "Control object",
        "desc": "The new control returned by the CreateControl API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeleteAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeleteAssessmentFramework",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "frameworkId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified framework."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeleteAssessmentReport",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "assessmentReportId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The unique identifier for the assessment report."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeleteControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeregisterAccount",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      }
    },
    "res": {
      "status": {
        "type": "String",
        "desc": "The registration status of the account."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DeregisterOrganizationAdminAccount",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "adminAccountId": {
        "type": "String",
        "length": "Fixed length of 12.",
        "pattern": "^[0-9]{12}$",
        "required": "No",
        "desc": "The identifier for the specified administrator account."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "DisassociateAssessmentReportEvidenceFolder",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "evidenceFolderId": {
        "type": "String",
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which evidence is stored."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetAccountStatus",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      }
    },
    "res": {
      "status": {
        "type": "String",
        "desc": "The status of the specified AWS account."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      }
    }
  },
  {
    "title": "GetAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      }
    },
    "res": {
      "assessment": {
        "type": "Assessment object",
        "desc": "An entity that defines the scope of audit evidence collected by AWS Audit Manager. An AWS Audit Manager assessment is an implementation of an AWS Audit Manager framework."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetAssessmentFramework",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "frameworkId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified framework."
      }
    },
    "res": {
      "framework": {
        "type": "Framework object",
        "desc": "The framework returned by the GetAssessmentFramework API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetAssessmentReportUrl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "assessmentReportId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the assessment report."
      }
    },
    "res": {
      "preSignedUrl": {
        "type": "URL object",
        "desc": "A uniform resource locator, used as a unique identifier to locate a resource on the internet."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetChangeLogs",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "desc": "The identifier for the specified control."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "desc": "The identifier for the specified control set."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "changeLogs": {
        "type": "Array of ChangeLog objects",
        "desc": "The list of user activity for the control."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      }
    },
    "res": {
      "control": {
        "type": "Control object",
        "desc": "The name of the control returned by the GetControl API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetDelegations",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "delegations": {
        "type": "Array of DelegationMetadata objects",
        "desc": "The list of delegations returned by the GetDelegations API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetEvidence",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "evidenceFolderId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which the evidence is stored."
      },
      "evidenceId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the evidence."
      }
    },
    "res": {
      "evidence": {
        "type": "Evidence object",
        "desc": "The evidence returned by the GetEvidenceResponse API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetEvidenceByEvidenceFolder",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the control set."
      },
      "evidenceFolderId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The unique identifier for the folder in which the evidence is stored."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "evidence": {
        "type": "Array of Evidence objects",
        "desc": "The list of evidence returned by the GetEvidenceByEvidenceFolder API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetEvidenceFolder",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "evidenceFolderId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the folder in which the evidence is stored."
      }
    },
    "res": {
      "evidenceFolder": {
        "type": "AssessmentEvidenceFolder object",
        "desc": "The folder in which evidence is stored."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetEvidenceFoldersByAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "evidenceFolders": {
        "type": "Array of AssessmentEvidenceFolder objects",
        "desc": "The list of evidence folders returned by the GetEvidenceFoldersByAssessment API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetEvidenceFoldersByAssessmentControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "evidenceFolders": {
        "type": "Array of AssessmentEvidenceFolder objects",
        "desc": "The list of evidence folders returned by the GetEvidenceFoldersByAssessmentControl API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetOrganizationAdminAccount",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      }
    },
    "res": {
      "adminAccountId": {
        "type": "String",
        "length": "Fixed length of 12.",
        "pattern": "^[0-9]{12}$",
        "desc": "The identifier for the specified administrator account."
      },
      "organizationId": {
        "type": "String",
        "length": "Minimum length of 12. Maximum length of 34.",
        "pattern": "o-[a-z0-9]{10,32}",
        "desc": "The identifier for the specified organization."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetServicesInScope",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      }
    },
    "res": {
      "serviceMetadata": {
        "type": "Array of ServiceMetadata objects",
        "desc": "The metadata associated with the aAWS service."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "GetSettings",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "attribute": {
        "required": "Yes",
        "desc": "The list of SettingAttribute enum values. Valid Values: ALL | IS_AWS_ORG_ENABLED | SNS_TOPIC | DEFAULT_ASSESSMENT_REPORTS_DESTINATION | DEFAULT_PROCESS_OWNERS"
      }
    },
    "res": {
      "settings": {
        "type": "Settings object",
        "desc": "The settings object that holds all supported AWS Audit Manager settings."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      }
    }
  },
  {
    "title": "ListAssessmentFrameworks",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "frameworkType": {
        "required": "Yes",
        "desc": "The type of framework, such as standard or custom. Valid Values: Standard | Custom"
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "frameworkMetadataList": {
        "type": "Array of AssessmentFrameworkMetadata objects",
        "desc": "The list of metadata objects for the specified framework."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListAssessmentReports",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "assessmentReports": {
        "type": "Array of AssessmentReportMetadata objects",
        "desc": "The list of assessment reports returned by the ListAssessmentReports API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListAssessments",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "assessmentMetadata": {
        "type": "Array of AssessmentMetadataItem objects",
        "desc": "The metadata associated with the assessment."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListControls",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "controlType": {
        "required": "Yes",
        "desc": "The type of control, such as standard or custom. Valid Values: Standard | Custom"
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "controlMetadataList": {
        "type": "Array of ControlMetadata objects",
        "desc": "The list of control metadata objects returned by the ListControls API."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListKeywordsForDataSource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      },
      "source": {
        "required": "Yes",
        "desc": "The control mapping data source to which the keywords apply. Valid Values: AWS_Cloudtrail | AWS_Config | AWS_Security_Hub | AWS_API_Call | MANUAL"
      }
    },
    "res": {
      "keywords": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 100.",
        "pattern": "^[a-zA-Z_0-9-\\s().]+$",
        "desc": "The list of keywords for the specified event mapping source."
      },
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListNotifications",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "maxResults": {
        "desc": "Represents the maximum number of results per page, or per API request call. Valid Range: Minimum value of 1. Maximum value of 1000."
      },
      "nextToken": {
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[A-Za-z0-9+\\/=]*$",
        "desc": "The pagination token used to fetch the next set of results."
      },
      "notifications": {
        "type": "Array of Notification objects",
        "desc": "The returned list of notifications."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ListTagsForResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "length": "Minimum length of 20. Maximum length of 2048.",
        "pattern": "^arn:.*:auditmanager:.*",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the specified resource."
      }
    },
    "res": {
      "tags": {
        "type": "String to string map",
        "desc": "The list of tags returned by the ListTagsForResource API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "RegisterAccount",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "delegatedAdminAccount": {
        "type": "String",
        "length": "Fixed length of 12.",
        "pattern": "^[0-9]{12}$",
        "required": "No",
        "desc": "The delegated administrator account for AWS Audit Manager."
      },
      "kmsKey": {
        "type": "String",
        "length": "Minimum length of 7. Maximum length of 2048.",
        "pattern": "^arn:.*:kms:.*|DEFAULT",
        "required": "No",
        "desc": "The AWS KMS key details."
      }
    },
    "res": {
      "status": {
        "type": "String",
        "desc": "The status of the account registration request."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "RegisterOrganizationAdminAccount",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "adminAccountId": {
        "type": "String",
        "length": "Fixed length of 12.",
        "pattern": "^[0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified delegated administrator account."
      }
    },
    "res": {
      "adminAccountId": {
        "type": "String",
        "length": "Fixed length of 12.",
        "pattern": "^[0-9]{12}$",
        "desc": "The identifier for the specified delegated administrator account."
      },
      "organizationId": {
        "type": "String",
        "length": "Minimum length of 12. Maximum length of 34.",
        "pattern": "o-[a-z0-9]{10,32}",
        "desc": "The identifier for the specified AWS organization."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "TagResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "length": "Minimum length of 20. Maximum length of 2048.",
        "pattern": "^arn:.*:auditmanager:.*",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the specified resource."
      },
      "tags": {
        "type": "String to string map",
        "required": "Yes",
        "desc": "The tags to be associated with the resource."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UntagResource",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "resourceArn": {
        "length": "Minimum length of 20. Maximum length of 2048.",
        "pattern": "^arn:.*:auditmanager:.*",
        "required": "Yes",
        "desc": "The Amazon Resource Name (ARN) of the specified resource."
      },
      "tagKeys": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
        "required": "Yes",
        "desc": "The name or key of the tag. Array Members: Minimum number of 1 item. Maximum number of 50 items."
      }
    },
    "res": {},
    "err": {
      "AccessDeniedException": {
        "statusCode": "400",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateAssessment",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "assessmentDescription": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The description of the specified assessment."
      },
      "assessmentName": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The name of the specified assessment to be updated."
      },
      "assessmentReportsDestination": {
        "type": "AssessmentReportsDestination object",
        "required": "No",
        "desc": "The assessment report storage destination for the specified assessment that is being updated."
      },
      "roles": {
        "type": "Array of Role objects",
        "required": "No",
        "desc": "The list of roles for the specified assessment."
      },
      "scope": {
        "type": "Scope object",
        "required": "Yes",
        "desc": "The scope of the specified assessment."
      }
    },
    "res": {
      "assessment": {
        "type": "Assessment object",
        "desc": "The response object (name of the updated assessment) for the UpdateAssessmentRequest API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateAssessmentControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      },
      "controlSetId": {
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "commentBody": {
        "type": "String",
        "length": "Maximum length of 500.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The comment body text for the specified control."
      },
      "controlStatus": {
        "type": "String",
        "required": "No",
        "desc": "The status of the specified control."
      }
    },
    "res": {
      "control": {
        "type": "AssessmentControl object",
        "desc": "The name of the updated control set returned by the UpdateAssessmentControl API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateAssessmentControlSetStatus",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "controlSetId": {
        "length": "Minimum length of 0. Maximum length of 2048.",
        "pattern": ".*",
        "required": "Yes",
        "desc": "The identifier for the specified control set."
      },
      "comment": {
        "type": "String",
        "length": "Maximum length of 350.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The comment related to the status update."
      },
      "status": {
        "type": "String",
        "required": "Yes",
        "desc": "The status of the control set that is being updated."
      }
    },
    "res": {
      "controlSet": {
        "type": "AssessmentControlSet object",
        "desc": "The name of the updated control set returned by the UpdateAssessmentControlSetStatus API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateAssessmentFramework",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "frameworkId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified framework."
      },
      "complianceType": {
        "type": "String",
        "length": "Maximum length of 100.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The compliance type that the new custom framework supports, such as CIS or HIPAA."
      },
      "controlSets": {
        "type": "Array of UpdateAssessmentFrameworkControlSet objects",
        "required": "Yes",
        "desc": "The control sets associated with the framework."
      },
      "description": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The description of the framework that is to be updated."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The name of the framework to be updated."
      }
    },
    "res": {
      "framework": {
        "type": "Framework object",
        "desc": "The name of the specified framework."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateAssessmentStatus",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "assessmentId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified assessment."
      },
      "status": {
        "type": "String",
        "required": "Yes",
        "desc": "The current status of the specified assessment."
      }
    },
    "res": {
      "assessment": {
        "type": "Assessment object",
        "desc": "The name of the updated assessment returned by the UpdateAssessmentStatus API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateControl",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "controlId": {
        "length": "Fixed length of 36.",
        "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
        "required": "Yes",
        "desc": "The identifier for the specified control."
      },
      "actionPlanInstructions": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The recommended actions to carry out if the control is not fulfilled."
      },
      "actionPlanTitle": {
        "type": "String",
        "length": "Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The title of the action plan for remediating the control."
      },
      "controlMappingSources": {
        "type": "Array of ControlMappingSource objects",
        "required": "Yes",
        "desc": "The data mapping sources for the specified control."
      },
      "description": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The optional description of the control."
      },
      "name": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 300.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "Yes",
        "desc": "The name of the control to be updated."
      },
      "testingInformation": {
        "type": "String",
        "length": "Maximum length of 1000.",
        "pattern": "^[\\w\\W\\s\\S]*$",
        "required": "No",
        "desc": "The steps that to follow to determine if the control has been satisfied."
      }
    },
    "res": {
      "control": {
        "type": "Control object",
        "desc": "The name of the updated control set returned by the UpdateControl API."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "UpdateSettings",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "defaultAssessmentReportsDestination": {
        "type": "AssessmentReportsDestination object",
        "required": "No",
        "desc": "The default storage destination for assessment reports."
      },
      "defaultProcessOwners": {
        "type": "Array of Role objects",
        "required": "No",
        "desc": "A list of the default audit owners."
      },
      "kmsKey": {
        "type": "String",
        "length": "Minimum length of 7. Maximum length of 2048.",
        "pattern": "^arn:.*:kms:.*|DEFAULT",
        "required": "No",
        "desc": "The AWS KMS key details."
      },
      "snsTopic": {
        "type": "String",
        "length": "Minimum length of 20. Maximum length of 2048.",
        "pattern": "^arn:.*:sns:.*",
        "required": "No",
        "desc": "The Amazon Simple Notification Service (Amazon SNS) topic to which AWS Audit Manager sends notifications."
      }
    },
    "res": {
      "settings": {
        "type": "Settings object",
        "desc": "The current list of settings."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  },
  {
    "title": "ValidateAssessmentReportIntegrity",
    "req": {
      "Action": {
        "type": "string",
        "required": "Yes",
        "desc": "The action to be performed."
      },
      "Version": {
        "type": "string",
        "required": "Yes",
        "desc": "The API version that the request is written for, expressed in the format YYYY-MM-DD."
      },
      "X-Amz-Algorithm": {
        "type": "string",
        "required": "Conditional",
        "desc": "The hash algorithm that you used to create the request signature. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Credential": {
        "type": "string",
        "required": "Conditional",
        "desc": "The credential scope value, which is a string that includes your access key, the date, the region you are targeting, the service you are requesting, and a termination string (\"aws4_request\"). The value is expressed in the following format: access_key/YYYYMMDD/region/service/aws4_request. For more information, see Task 2: Create a String to Sign for Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-Date": {
        "type": "string",
        "required": "Conditional",
        "desc": "The date that is used to create the signature. The format must be ISO 8601 basic format (YYYYMMDD'T'HHMMSS'Z'). For example, the following date time is a valid X-Amz-Date value: 20120325T120000Z. Condition: X-Amz-Date is optional for all requests; it can be used to override the date used for signing requests. If the Date header is specified in the ISO 8601 basic format, X-Amz-Date is not required. When X-Amz-Date is used, it always overrides the value of the Date header. For more information, see Handling Dates in Signature Version 4 in the Amazon Web Services General Reference."
      },
      "X-Amz-Security-Token": {
        "type": "string",
        "required": "Conditional",
        "desc": "The temporary security token that was obtained through a call to AWS Security Token Service (AWS STS). For a list of services that support temporary security credentials from AWS Security Token Service, go to AWS Services That Work with IAM in the IAM User Guide. Condition: If you're using temporary security credentials from the AWS Security Token Service, you must include the security token."
      },
      "X-Amz-Signature": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies the hex-encoded signature that was calculated from the string to sign and the derived signing key. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "X-Amz-SignedHeaders": {
        "type": "string",
        "required": "Conditional",
        "desc": "Specifies all the HTTP headers that were included as part of the canonical request. For more information about specifying signed headers, see Task 1: Create a Canonical Request For Signature Version 4 in the Amazon Web Services General Reference. Condition: Specify this parameter when you include authentication information in a query string instead of in the HTTP authorization header."
      },
      "s3RelativePath": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "pattern": "^(S|s)3:\\/\\/[a-zA-Z0-9-_\\/.]+$",
        "required": "Yes",
        "desc": "The relative path of the specified Amazon S3 bucket in which the assessment report is stored."
      }
    },
    "res": {
      "signatureAlgorithm": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 2048.",
        "pattern": ".*",
        "desc": "The signature algorithm used to code sign the assessment report file."
      },
      "signatureDateTime": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 2048.",
        "pattern": ".*",
        "desc": "The date and time signature that specifies when the assessment report was created."
      },
      "signatureKeyId": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 2048.",
        "pattern": ".*",
        "desc": "The unique identifier for the validation signature key."
      },
      "signatureValid": {
        "type": "Boolean",
        "desc": "Specifies whether the signature key is valid."
      },
      "validationErrors": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 2048.",
        "pattern": ".*\\S.*",
        "desc": "Represents any errors that occurred when validating the assessment report."
      }
    },
    "err": {
      "AccessDeniedException": {
        "statusCode": "403",
        "desc": "You do not have sufficient access to perform this action."
      },
      "IncompleteSignature": {
        "statusCode": "400",
        "desc": "The request signature does not conform to AWS standards."
      },
      "InternalFailure": {
        "statusCode": "500",
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      },
      "InvalidAction": {
        "statusCode": "400",
        "desc": "The action or operation requested is invalid. Verify that the action is typed correctly."
      },
      "InvalidClientTokenId": {
        "statusCode": "403",
        "desc": "The X.509 certificate or AWS access key ID provided does not exist in our records."
      },
      "InvalidParameterCombination": {
        "statusCode": "400",
        "desc": "Parameters that must not be used together were used together."
      },
      "InvalidParameterValue": {
        "statusCode": "400",
        "desc": "An invalid or out-of-range value was supplied for the input parameter."
      },
      "InvalidQueryParameter": {
        "statusCode": "400",
        "desc": "The AWS query string is malformed or does not adhere to AWS standards."
      },
      "MalformedQueryString": {
        "statusCode": "404",
        "desc": "The query string contains a syntax error."
      },
      "MissingAction": {
        "statusCode": "400",
        "desc": "The request is missing an action or a required parameter."
      },
      "MissingAuthenticationToken": {
        "statusCode": "403",
        "desc": "The request must contain either a valid (registered) AWS access key ID or X.509 certificate."
      },
      "MissingParameter": {
        "statusCode": "400",
        "desc": "A required parameter for the specified action is not supplied."
      },
      "NotAuthorized": {
        "statusCode": "400",
        "desc": "You do not have permission to perform this action."
      },
      "OptInRequired": {
        "statusCode": "403",
        "desc": "The AWS access key ID needs a subscription for the service."
      },
      "RequestExpired": {
        "statusCode": "400",
        "desc": "The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future."
      },
      "ServiceUnavailable": {
        "statusCode": "503",
        "desc": "The request has failed due to a temporary failure of the server."
      },
      "ThrottlingException": {
        "statusCode": "400",
        "desc": "The request was denied due to request throttling."
      },
      "ValidationError": {
        "statusCode": "400",
        "desc": "The input fails to satisfy the constraints specified by an AWS service."
      },
      "InternalServerException": {
        "statusCode": "500",
        "desc": "An internal service error occurred during the processing of your request. Try again later."
      },
      "ResourceNotFoundException": {
        "statusCode": "404",
        "desc": "The resource specified in the request cannot be found."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "The request has invalid or missing parameters."
      }
    }
  }
]