[
  {
    "title": "AddClientIDToOpenIDConnectProvider",
    "req": {
      "ClientID": {
        "desc": "The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.",
        "type": "String",
        "required": "yes"
      },
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to add the client ID to. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders operation.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "AddRoleToInstanceProfile",
    "req": {
      "InstanceProfileName": {
        "desc": "The name of the instance profile to update.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role to add.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "AddUserToGroup",
    "req": {
      "GroupName": {
        "desc": "The name of the group to update.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user to add.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "AttachGroupPolicy",
    "req": {
      "GroupName": {
        "desc": "The name (friendly name, not ARN) of the group to attach the policy to.",
        "type": "String",
        "required": "yes"
      },
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to attach.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PolicyNotAttachable": {
        "desc": "The request failed because AWS service role policies can only be attached to the service-linked role for that service.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "AttachRolePolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to attach.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name (friendly name, not ARN) of the role to attach the policy to.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PolicyNotAttachable": {
        "desc": "The request failed because AWS service role policies can only be attached to the service-linked role for that service.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "AttachUserPolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to attach.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name (friendly name, not ARN) of the IAM user to attach the policy to.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PolicyNotAttachable": {
        "desc": "The request failed because AWS service role policies can only be attached to the service-linked role for that service.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "ChangePassword",
    "req": {
      "NewPassword": {
        "desc": "The new password. The new password must conform to the AWS account's password policy, if one exists.",
        "type": "String",
        "required": "yes"
      },
      "OldPassword": {
        "desc": "The IAM user's current password.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "InvalidUserType": {
        "desc": "The request was rejected because the type of user for the transaction was incorrect.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PasswordPolicyViolation": {
        "desc": "The request was rejected because the provided password did not meet the requirements imposed by the account password policy.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "CreateAccessKey",
    "req": {
      "UserName": {
        "desc": "The name of the IAM user that the new key will belong to.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "AccessKey": {
        "desc": "A structure with details about the access key.",
        "type": "AccessKey object"
      }
    }
  },
  {
    "title": "CreateAccountAlias",
    "req": {
      "AccountAlias": {
        "desc": "The account alias to create.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "CreateGroup",
    "req": {
      "GroupName": {
        "desc": "The name of the group to create. Do not include the path in this value.",
        "type": "String",
        "required": "yes"
      },
      "Path": {
        "desc": "The path to the group. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "Group": {
        "desc": "A structure containing details about the new group.",
        "type": "Group object"
      }
    }
  },
  {
    "title": "CreateInstanceProfile",
    "req": {
      "InstanceProfileName": {
        "desc": "The name of the instance profile to create.",
        "type": "String",
        "required": "yes"
      },
      "Path": {
        "desc": "The path to the instance profile. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "InstanceProfile": {
        "desc": "A structure containing details about the new instance profile.",
        "type": "InstanceProfile object"
      }
    }
  },
  {
    "title": "CreateLoginProfile",
    "req": {
      "Password": {
        "desc": "The new password for the user.",
        "type": "String",
        "required": "yes"
      },
      "PasswordResetRequired": {
        "desc": "Specifies whether the user is required to set a new password on next sign-in.",
        "type": "Boolean",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the IAM user to create a password for. The user must already exist.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LoginProfile": {
        "desc": "A structure containing the user name and password create date.",
        "type": "LoginProfile object"
      }
    }
  },
  {
    "title": "CreateOpenIDConnectProvider",
    "req": {
      "ClientIDList.member.N": {
        "desc": "A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.)",
        "type": "Array of strings",
        "required": "no"
      },
      "ThumbprintList.member.N": {
        "desc": "A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates.",
        "type": "Array of strings",
        "required": "yes"
      },
      "Url": {
        "desc": "The URL of the identity provider. The URL must begin with https:// and should correspond to the iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the new IAM OpenID Connect provider that is created. For more information, see OpenIDConnectProviderListEntry.",
        "type": "String"
      }
    }
  },
  {
    "title": "CreatePolicy",
    "req": {
      "Description": {
        "desc": "A friendly description of the policy.",
        "type": "String",
        "required": "no"
      },
      "Path": {
        "desc": "The path for the policy.",
        "type": "String",
        "required": "no"
      },
      "PolicyDocument": {
        "desc": "The JSON policy document that you want to use as the content for the new policy.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The friendly name of the policy.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Policy": {
        "desc": "A structure containing details about the new policy.",
        "type": "Policy object"
      }
    }
  },
  {
    "title": "CreatePolicyVersion",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new version.",
        "type": "String",
        "required": "yes"
      },
      "PolicyDocument": {
        "desc": "The JSON policy document that you want to use as the content for this new version of the policy.",
        "type": "String",
        "required": "yes"
      },
      "SetAsDefault": {
        "desc": "Specifies whether to set this version as the policy's default version.",
        "type": "Boolean",
        "required": "no"
      }
    },
    "res": {
      "PolicyVersion": {
        "desc": "A structure containing details about the new policy version.",
        "type": "PolicyVersion object"
      }
    }
  },
  {
    "title": "CreateRole",
    "req": {
      "AssumeRolePolicyDocument": {
        "desc": "The trust relationship policy document that grants an entity permission to assume the role.",
        "type": "String",
        "required": "yes"
      },
      "Description": {
        "desc": "A description of the role.",
        "type": "String",
        "required": "no"
      },
      "MaxSessionDuration": {
        "desc": "The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.",
        "type": "Integer",
        "required": "no"
      },
      "Path": {
        "desc": "The path to the role. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      },
      "PermissionsBoundary": {
        "desc": "The ARN of the policy that is used to set the permissions boundary for the role.",
        "type": "String",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name of the role to create.",
        "type": "String",
        "required": "yes"
      },
      "Tags.member.N": {
        "desc": "A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see Tagging IAM Identities in the IAM User Guide.",
        "type": "Array of Tag objects",
        "required": "no"
      }
    },
    "res": {
      "Role": {
        "desc": "A structure containing details about the new role.",
        "type": "Role object"
      }
    }
  },
  {
    "title": "CreateSAMLProvider",
    "req": {
      "Name": {
        "desc": "The name of the provider to create.",
        "type": "String",
        "required": "yes"
      },
      "SAMLMetadataDocument": {
        "desc": "An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "SAMLProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.",
        "type": "String"
      }
    }
  },
  {
    "title": "CreateServiceLinkedRole",
    "req": {
      "AWSServiceName": {
        "desc": "The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: elasticbeanstalk.amazonaws.com.",
        "type": "String",
        "required": "yes"
      },
      "CustomSuffix": {
        "desc": "A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different CustomSuffix for each request. Otherwise the request fails with a duplicate role name error. For example, you could add -1 or -debug to the suffix.",
        "type": "String",
        "required": "no"
      },
      "Description": {
        "desc": "The description of the role.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "Role": {
        "desc": "A Role object that contains details about the newly created role.",
        "type": "Role object"
      }
    }
  },
  {
    "title": "CreateServiceSpecificCredential",
    "req": {
      "ServiceName": {
        "desc": "The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ServiceSpecificCredential": {
        "desc": "A structure that contains information about the newly created service-specific credential.",
        "type": "ServiceSpecificCredential object"
      }
    }
  },
  {
    "title": "CreateUser",
    "req": {
      "Path": {
        "desc": "The path for the user name. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      },
      "PermissionsBoundary": {
        "desc": "The ARN of the policy that is used to set the permissions boundary for the user.",
        "type": "String",
        "required": "no"
      },
      "Tags.member.N": {
        "desc": "A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see Tagging IAM Identities in the IAM User Guide.",
        "type": "Array of Tag objects",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user to create.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "User": {
        "desc": "A structure with details about the new IAM user.",
        "type": "User object"
      }
    }
  },
  {
    "title": "CreateVirtualMFADevice",
    "req": {
      "Path": {
        "desc": "The path for the virtual MFA device. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      },
      "VirtualMFADeviceName": {
        "desc": "The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "VirtualMFADevice": {
        "desc": "A structure containing details about the new virtual MFA device.",
        "type": "VirtualMFADevice object"
      }
    }
  },
  {
    "title": "DeactivateMFADevice",
    "req": {
      "SerialNumber": {
        "desc": "The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user whose MFA device you want to deactivate.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteAccessKey",
    "req": {
      "AccessKeyId": {
        "desc": "The access key ID for the access key ID and secret access key you want to delete.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user whose access key pair you want to delete.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteAccountAlias",
    "req": {
      "AccountAlias": {
        "desc": "The name of the account alias to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteAccountPasswordPolicy",
    "req": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded."
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource."
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure."
      }
    },
    "res": {}
  },
  {
    "title": "DeleteGroup",
    "req": {
      "GroupName": {
        "desc": "The name of the IAM group to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteGroupPolicy",
    "req": {
      "GroupName": {
        "desc": "The name (friendly name, not ARN) identifying the group that the policy is embedded in.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The name identifying the policy document to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteInstanceProfile",
    "req": {
      "InstanceProfileName": {
        "desc": "The name of the instance profile to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteLoginProfile",
    "req": {
      "UserName": {
        "desc": "The name of the user whose password you want to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteOpenIDConnectProvider",
    "req": {
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You can get a list of OpenID Connect provider resource ARNs by using the ListOpenIDConnectProviders operation.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeletePolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeletePolicyVersion",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a version.",
        "type": "String",
        "required": "yes"
      },
      "VersionId": {
        "desc": "The policy version to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteRole",
    "req": {
      "RoleName": {
        "desc": "The name of the role to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "String"
      },
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteRolePermissionsBoundary",
    "req": {
      "RoleName": {
        "desc": "The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteRolePolicy",
    "req": {
      "PolicyName": {
        "desc": "The name of the inline policy to delete from the specified IAM role.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name (friendly name, not ARN) identifying the role that the policy is embedded in.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteSAMLProvider",
    "req": {
      "SAMLProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the SAML provider to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteServerCertificate",
    "req": {
      "ServerCertificateName": {
        "desc": "The name of the server certificate you want to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteServiceLinkedRole",
    "req": {
      "RoleName": {
        "desc": "The name of the service-linked role to be deleted.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeletionTaskId": {
        "desc": "The deletion task identifier that you can use to check the status of the deletion. This identifier is returned in the format task/aws-service-role/<service-principal-name>/<role-name>/<task-uuid>.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteServiceSpecificCredential",
    "req": {
      "ServiceSpecificCredentialId": {
        "desc": "The unique identifier of the service-specific credential. You can get this value by calling ListServiceSpecificCredentials.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteSigningCertificate",
    "req": {
      "CertificateId": {
        "desc": "The ID of the signing certificate to delete.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user the signing certificate belongs to.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteSSHPublicKey",
    "req": {
      "SSHPublicKeyId": {
        "desc": "The unique identifier for the SSH public key.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the SSH public key.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteUser",
    "req": {
      "UserName": {
        "desc": "The name of the user to delete.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "String"
      },
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteUserPermissionsBoundary",
    "req": {
      "UserName": {
        "desc": "The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteUserPolicy",
    "req": {
      "PolicyName": {
        "desc": "The name identifying the policy document to delete.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name (friendly name, not ARN) identifying the user that the policy is embedded in.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DeleteVirtualMFADevice",
    "req": {
      "SerialNumber": {
        "desc": "The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "DeleteConflict": {
        "desc": "The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DetachGroupPolicy",
    "req": {
      "GroupName": {
        "desc": "The name (friendly name, not ARN) of the IAM group to detach the policy from.",
        "type": "String",
        "required": "yes"
      },
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to detach.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "DetachRolePolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to detach.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name (friendly name, not ARN) of the IAM role to detach the policy from.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "DetachUserPolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy you want to detach.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name (friendly name, not ARN) of the IAM user to detach the policy from.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "EnableMFADevice",
    "req": {
      "AuthenticationCode1": {
        "desc": "An authentication code emitted by the device.",
        "type": "String",
        "required": "yes"
      },
      "AuthenticationCode2": {
        "desc": "A subsequent authentication code emitted by the device.",
        "type": "String",
        "required": "yes"
      },
      "SerialNumber": {
        "desc": "The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user for whom you want to enable the MFA device.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "InvalidAuthenticationCode": {
        "desc": "The request was rejected because the authentication code was not recognized. The error message describes the specific error.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "GenerateCredentialReport",
    "req": {
      "Description": {
        "desc": "Information about the credential report.",
        "type": "String"
      },
      "State": {
        "desc": "Information about the state of the credential report.",
        "type": "String",
        "values": [
          "started",
          "inprogress",
          "complete"
        ]
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String",
        "values": [
          "started",
          "inprogress",
          "complete"
        ]
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String",
        "values": [
          "started",
          "inprogress",
          "complete"
        ]
      }
    }
  },
  {
    "title": "GenerateOrganizationsAccessReport",
    "req": {
      "EntityPath": {
        "desc": "The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is 123456789012 and its parent OU ID is ou-rge0-awsabcde. The organization root ID is r-f6g7h8i9j0example and your organization ID is o-a1b2c3d4e5. Your entity path is o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012.",
        "type": "String",
        "required": "yes"
      },
      "OrganizationsPolicyId": {
        "desc": "The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "JobId": {
        "desc": "The job identifier that you can use in the GetOrganizationsAccessReport operation.",
        "type": "String"
      }
    }
  },
  {
    "title": "GenerateServiceLastAccessedDetails",
    "req": {
      "Arn": {
        "desc": "The ARN of the IAM resource (user, group, role, or managed policy) used to generate information about when the resource was last used in an attempt to access an AWS service.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "JobId": {
        "desc": "The JobId that you can use in the GetServiceLastAccessedDetails or GetServiceLastAccessedDetailsWithEntities operations. The JobId returned by GenerateServiceLastAccessedDetail must be used by the same role within a session, or by the same user when used to call GetServiceLastAccessedDetail.",
        "type": "String"
      }
    }
  },
  {
    "title": "GetAccessKeyLastUsed",
    "req": {
      "AccessKeyId": {
        "desc": "The identifier of an access key.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "AccessKeyLastUsed": {
        "desc": "Contains information about the last time the access key was used.",
        "type": "AccessKeyLastUsed object"
      },
      "UserName": {
        "desc": "The name of the AWS IAM user that owns this access key.",
        "type": "String"
      }
    }
  },
  {
    "title": "GetAccountAuthorizationDetails",
    "req": {
      "Filter.member.N": {
        "desc": "A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value LocalManagedPolicy to include customer managed policies.",
        "type": "Array of strings",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      }
    },
    "res": {
      "GroupDetailList.member.N": {
        "desc": "A list containing information about IAM groups.",
        "type": "Array of GroupDetail objects",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "Policies.member.N": {
        "desc": "A list containing information about managed policies.",
        "type": "Array of ManagedPolicyDetail objects",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "RoleDetailList.member.N": {
        "desc": "A list containing information about IAM roles.",
        "type": "Array of RoleDetail objects",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "UserDetailList.member.N": {
        "desc": "A list containing information about IAM users.",
        "type": "Array of UserDetail objects",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      }
    }
  },
  {
    "title": "GetAccountPasswordPolicy",
    "req": {
      "PasswordPolicy": {
        "desc": "A structure that contains details about the account's password policy.",
        "type": "PasswordPolicy object"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "PasswordPolicy object"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "PasswordPolicy object"
      }
    }
  },
  {
    "title": "GetAccountSummary",
    "req": {
      "SummaryMap.entry.N.value (value)": {
        "desc": "A set of key–value pairs containing information about IAM entity usage and IAM quotas.",
        "type": "String to integer map"
      }
    },
    "res": {
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String to integer map"
      }
    }
  },
  {
    "title": "GetContextKeysForCustomPolicy",
    "req": {
      "PolicyInputList.member.N": {
        "desc": "A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.",
        "type": "Array of strings",
        "required": "yes"
      }
    },
    "res": {
      "ContextKeyNames.member.N": {
        "desc": "The list of context keys that are referenced in the input policies.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "GetContextKeysForPrincipalPolicy",
    "req": {
      "PolicyInputList.member.N": {
        "desc": "An optional list of additional policies for which you want the list of context keys that are referenced.",
        "type": "Array of strings",
        "required": "no"
      },
      "PolicySourceArn": {
        "desc": "The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies that are attached to the user. The list also includes all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ContextKeyNames.member.N": {
        "desc": "The list of context keys that are referenced in the input policies.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "GetCredentialReport",
    "req": {
      "Content": {
        "desc": "Contains the credential report. The report is Base64-encoded.",
        "type": "Base64-encoded binary data object"
      },
      "GeneratedTime": {
        "desc": "The date and time when the credential report was created, in ISO 8601 date-time format.",
        "type": "Timestamp"
      },
      "ReportFormat": {
        "desc": "The format (MIME type) of the credential report.",
        "type": "String",
        "values": [
          "text/csv"
        ]
      }
    },
    "res": {
      "ReportExpired": {
        "desc": "The request was rejected because the most recent credential report has expired. To generate a new credential report, use GenerateCredentialReport. For more information about credential report expiration, see Getting Credential Reports in the IAM User Guide.",
        "type": "String",
        "values": [
          "text/csv"
        ]
      },
      "ReportInProgress": {
        "desc": "The request was rejected because the credential report is still being generated.",
        "type": "String",
        "values": [
          "text/csv"
        ]
      },
      "ReportNotPresent": {
        "desc": "The request was rejected because the credential report does not exist. To generate a credential report, use GenerateCredentialReport.",
        "type": "String",
        "values": [
          "text/csv"
        ]
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String",
        "values": [
          "text/csv"
        ]
      }
    }
  },
  {
    "title": "GetGroup",
    "req": {
      "GroupName": {
        "desc": "The name of the group.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      }
    },
    "res": {
      "Group": {
        "desc": "A structure that contains details about the group.",
        "type": "Group object"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Users.member.N": {
        "desc": "A list of users in the group.",
        "type": "Array of User objects"
      }
    }
  },
  {
    "title": "GetGroupPolicy",
    "req": {
      "GroupName": {
        "desc": "The name of the group the policy is associated with.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The name of the policy document to get.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "GroupName": {
        "desc": "The group the policy is associated with.",
        "type": "String"
      },
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String"
      },
      "PolicyName": {
        "desc": "The name of the policy.",
        "type": "String"
      }
    }
  },
  {
    "title": "GetInstanceProfile",
    "req": {
      "InstanceProfileName": {
        "desc": "The name of the instance profile to get information about.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InstanceProfile": {
        "desc": "A structure containing details about the instance profile.",
        "type": "InstanceProfile object"
      }
    }
  },
  {
    "title": "GetLoginProfile",
    "req": {
      "UserName": {
        "desc": "The name of the user whose login profile you want to retrieve.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LoginProfile": {
        "desc": "A structure containing the user name and password create date for the user.",
        "type": "LoginProfile object"
      }
    }
  },
  {
    "title": "GetOpenIDConnectProvider",
    "req": {
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get information for. You can get a list of OIDC provider resource ARNs by using the ListOpenIDConnectProviders operation.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ClientIDList.member.N": {
        "desc": "A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object. For more information, see CreateOpenIDConnectProvider.",
        "type": "Array of strings"
      },
      "CreateDate": {
        "desc": "The date and time when the IAM OIDC provider resource object was created in the AWS account.",
        "type": "Timestamp"
      },
      "ThumbprintList.member.N": {
        "desc": "A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object. For more information, see CreateOpenIDConnectProvider.",
        "type": "Array of strings"
      },
      "Url": {
        "desc": "The URL that the IAM OIDC provider resource object is associated with. For more information, see CreateOpenIDConnectProvider.",
        "type": "String"
      }
    }
  },
  {
    "title": "GetOrganizationsAccessReport",
    "req": {
      "JobId": {
        "desc": "The identifier of the request generated by the GenerateOrganizationsAccessReport operation.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "SortKey": {
        "desc": "The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.",
        "type": "String",
        "required": "no",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      }
    },
    "res": {
      "AccessDetails.member.N": {
        "desc": "An object that contains details about the most recent attempt to access the service.",
        "type": "Array of AccessDetail objects",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      },
      "ErrorDetails": {
        "desc": "Contains information about the reason that the operation failed.",
        "type": "ErrorDetails object",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      },
      "JobCompletionDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the generated report job was completed or failed.",
        "type": "Timestamp",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      },
      "JobCreationDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the report job was created.",
        "type": "Timestamp",
        "values": [
          "service_namespace_ascending",
          "service_namespace_descending",
          "last_authenticated_time_ascending"
        ]
      },
      "JobStatus": {
        "desc": "The status of the job.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "NumberOfServicesAccessible": {
        "desc": "The number of services that the applicable SCPs allow account principals to access.",
        "type": "Integer",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "NumberOfServicesNotAccessed": {
        "desc": "The number of services that account principals are allowed but did not attempt to access.",
        "type": "Integer",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      }
    }
  },
  {
    "title": "GetPolicy",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the managed policy that you want information about.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Policy": {
        "desc": "A structure containing details about the policy.",
        "type": "Policy object"
      }
    }
  },
  {
    "title": "GetPolicyVersion",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the managed policy that you want information about.",
        "type": "String",
        "required": "yes"
      },
      "VersionId": {
        "desc": "Identifies the policy version to retrieve.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "PolicyVersion": {
        "desc": "A structure containing details about the policy version.",
        "type": "PolicyVersion object"
      }
    }
  },
  {
    "title": "GetRole",
    "req": {
      "RoleName": {
        "desc": "The name of the IAM role to get information about.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Role": {
        "desc": "A structure containing details about the IAM role.",
        "type": "Role object"
      }
    }
  },
  {
    "title": "GetRolePolicy",
    "req": {
      "PolicyName": {
        "desc": "The name of the policy document to get.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role associated with the policy.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String"
      },
      "PolicyName": {
        "desc": "The name of the policy.",
        "type": "String"
      },
      "RoleName": {
        "desc": "The role the policy is associated with.",
        "type": "String"
      }
    }
  },
  {
    "title": "GetSAMLProvider",
    "req": {
      "SAMLProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get information about.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "CreateDate": {
        "desc": "The date and time when the SAML provider was created.",
        "type": "Timestamp"
      },
      "SAMLMetadataDocument": {
        "desc": "The XML metadata document that includes information about an identity provider.",
        "type": "String"
      },
      "ValidUntil": {
        "desc": "The expiration date and time for the SAML provider.",
        "type": "Timestamp"
      }
    }
  },
  {
    "title": "GetServerCertificate",
    "req": {
      "ServerCertificateName": {
        "desc": "The name of the server certificate you want to retrieve information about.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ServerCertificate": {
        "desc": "A structure containing details about the server certificate.",
        "type": "ServerCertificate object"
      }
    }
  },
  {
    "title": "GetServiceLastAccessedDetails",
    "req": {
      "JobId": {
        "desc": "The ID of the request generated by the GenerateServiceLastAccessedDetails operation. The JobId returned by GenerateServiceLastAccessedDetail must be used by the same role within a session, or by the same user when used to call GetServiceLastAccessedDetail.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      }
    },
    "res": {
      "Error": {
        "desc": "An object that contains details about the reason the operation failed.",
        "type": "ErrorDetails object"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "JobCompletionDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the generated report job was completed or failed.",
        "type": "Timestamp"
      },
      "JobCreationDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the report job was created.",
        "type": "Timestamp"
      },
      "JobStatus": {
        "desc": "The status of the job.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "ServicesLastAccessed.member.N": {
        "desc": "A ServiceLastAccessed object that contains details about the most recent attempt to access the service.",
        "type": "Array of ServiceLastAccessed objects",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      }
    }
  },
  {
    "title": "GetServiceLastAccessedDetailsWithEntities",
    "req": {
      "JobId": {
        "desc": "The ID of the request generated by the GenerateServiceLastAccessedDetails operation.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "ServiceNamespace": {
        "desc": "The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityDetailsList.member.N": {
        "desc": "An EntityDetailsList object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified AWS service.",
        "type": "Array of EntityDetails objects"
      },
      "Error": {
        "desc": "An object that contains details about the reason the operation failed.",
        "type": "ErrorDetails object"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "JobCompletionDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the generated report job was completed or failed.",
        "type": "Timestamp"
      },
      "JobCreationDate": {
        "desc": "The date and time, in ISO 8601 date-time format, when the report job was created.",
        "type": "Timestamp"
      },
      "JobStatus": {
        "desc": "The status of the job.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "in_progress",
          "completed",
          "failed"
        ]
      }
    }
  },
  {
    "title": "GetServiceLinkedRoleDeletionStatus",
    "req": {
      "DeletionTaskId": {
        "desc": "The deletion task identifier. This identifier is returned by the DeleteServiceLinkedRole operation in the format task/aws-service-role/<service-principal-name>/<role-name>/<task-uuid>.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Reason": {
        "desc": "An object that contains details about the reason the deletion failed.",
        "type": "DeletionTaskFailureReasonType object"
      },
      "Status": {
        "desc": "The status of the deletion.",
        "type": "String",
        "values": [
          "succeeded",
          "in_progress",
          "failed",
          "not_started"
        ]
      }
    }
  },
  {
    "title": "GetSSHPublicKey",
    "req": {
      "Encoding": {
        "desc": "Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM.",
        "type": "String",
        "required": "yes",
        "values": [
          "ssh",
          "pem"
        ]
      },
      "SSHPublicKeyId": {
        "desc": "The unique identifier for the SSH public key.",
        "type": "String",
        "required": "yes",
        "values": [
          "ssh",
          "pem"
        ]
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the SSH public key.",
        "type": "String",
        "required": "yes",
        "values": [
          "ssh",
          "pem"
        ]
      }
    },
    "res": {
      "SSHPublicKey": {
        "desc": "A structure containing details about the SSH public key.",
        "type": "SSHPublicKey object",
        "values": [
          "ssh",
          "pem"
        ]
      }
    }
  },
  {
    "title": "GetUser",
    "req": {
      "UserName": {
        "desc": "The name of the user to get information about.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "User": {
        "desc": "A structure containing details about the IAM user.",
        "type": "User object"
      }
    }
  },
  {
    "title": "GetUserPolicy",
    "req": {
      "PolicyName": {
        "desc": "The name of the policy document to get.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user who the policy is associated with.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String"
      },
      "PolicyName": {
        "desc": "The name of the policy.",
        "type": "String"
      },
      "UserName": {
        "desc": "The user the policy is associated with.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListAccessKeys",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "AccessKeyMetadata.member.N": {
        "desc": "A list of objects containing metadata about the access keys.",
        "type": "Array of AccessKeyMetadata objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListAccountAliases",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      }
    },
    "res": {
      "AccountAliases.member.N": {
        "desc": "A list of aliases associated with the account. AWS supports only one alias per account.",
        "type": "Array of strings"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListAttachedGroupPolicies",
    "req": {
      "GroupName": {
        "desc": "The name (friendly name, not ARN) of the group to list attached policies for.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "AttachedPolicies.member.N": {
        "desc": "A list of the attached policies.",
        "type": "Array of AttachedPolicy objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListAttachedRolePolicies",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.",
        "type": "String",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name (friendly name, not ARN) of the role to list attached policies for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "AttachedPolicies.member.N": {
        "desc": "A list of the attached policies.",
        "type": "Array of AttachedPolicy objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListAttachedUserPolicies",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.",
        "type": "String",
        "required": "no"
      },
      "UserName": {
        "desc": "The name (friendly name, not ARN) of the user to list attached policies for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "AttachedPolicies.member.N": {
        "desc": "A list of the attached policies.",
        "type": "Array of AttachedPolicy objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListEntitiesForPolicy",
    "req": {
      "EntityFilter": {
        "desc": "The entity type to use for filtering the results.",
        "type": "String",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.",
        "type": "String",
        "required": "no",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.",
        "type": "String",
        "required": "yes",
        "values": [
          "user",
          "role",
          "group",
          "localmanagedpolicy",
          "awsmanagedpolicy"
        ]
      },
      "PolicyUsageFilter": {
        "desc": "The policy usage method to use for filtering the results.",
        "type": "String",
        "required": "no",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      },
      "PolicyGroups.member.N": {
        "desc": "A list of IAM groups that the policy is attached to.",
        "type": "Array of PolicyGroup objects",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      },
      "PolicyRoles.member.N": {
        "desc": "A list of IAM roles that the policy is attached to.",
        "type": "Array of PolicyRole objects",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      },
      "PolicyUsers.member.N": {
        "desc": "A list of IAM users that the policy is attached to.",
        "type": "Array of PolicyUser objects",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      }
    }
  },
  {
    "title": "ListGroupPolicies",
    "req": {
      "GroupName": {
        "desc": "The name of the group to list policies for.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "PolicyNames.member.N": {
        "desc": "A list of policy names.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "ListGroups",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. For example, the prefix /division_abc/subdivision_xyz/ gets all groups whose path starts with /division_abc/subdivision_xyz/.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "Groups.member.N": {
        "desc": "A list of groups.",
        "type": "Array of Group objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListGroupsForUser",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user to list groups for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Groups.member.N": {
        "desc": "A list of groups.",
        "type": "Array of Group objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListInstanceProfiles",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all instance profiles whose path starts with /application_abc/component_xyz/.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "InstanceProfiles.member.N": {
        "desc": "A list of instance profiles.",
        "type": "Array of InstanceProfile objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListInstanceProfilesForRole",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name of the role to list instance profiles for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InstanceProfiles.member.N": {
        "desc": "A list of instance profiles.",
        "type": "Array of InstanceProfile objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListMFADevices",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user whose MFA devices you want to list.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "MFADevices.member.N": {
        "desc": "A list of MFA devices.",
        "type": "Array of MFADevice objects"
      }
    }
  },
  {
    "title": "ListOpenIDConnectProviders",
    "req": {
      "OpenIDConnectProviderList.member.N": {
        "desc": "The list of IAM OIDC provider resource objects defined in the AWS account.",
        "type": "Array of OpenIDConnectProviderListEntry objects"
      }
    },
    "res": {
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Array of OpenIDConnectProviderListEntry objects"
      }
    }
  },
  {
    "title": "ListPolicies",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "OnlyAttached": {
        "desc": "A flag to filter the results to only the attached policies.",
        "type": "Boolean",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\\u0021) through the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.",
        "type": "String",
        "required": "no"
      },
      "PolicyUsageFilter": {
        "desc": "The policy usage method to use for filtering the results.",
        "type": "String",
        "required": "no",
        "values": [
          "permissionspolicy",
          "permissionsboundary"
        ]
      },
      "Scope": {
        "desc": "The scope to use for filtering the results.",
        "type": "String",
        "required": "no",
        "values": [
          "all",
          "aws",
          "local"
        ]
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean",
        "values": [
          "all",
          "aws",
          "local"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "all",
          "aws",
          "local"
        ]
      },
      "Policies.member.N": {
        "desc": "A list of policies.",
        "type": "Array of Policy objects",
        "values": [
          "all",
          "aws",
          "local"
        ]
      }
    }
  },
  {
    "title": "ListPoliciesGrantingServiceAccess",
    "req": {
      "Arn": {
        "desc": "The ARN of the IAM identity (user, group, or role) whose policies you want to list.",
        "type": "String",
        "required": "yes"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "ServiceNamespaces.member.N": {
        "desc": "The service namespace for the AWS services whose policies you want to list.",
        "type": "Array of strings",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "PoliciesGrantingServiceAccess.member.N": {
        "desc": "A ListPoliciesGrantingServiceAccess object that contains details about the permissions policies attached to the specified identity (user, group, or role).",
        "type": "Array of ListPoliciesGrantingServiceAccessEntry objects"
      }
    }
  },
  {
    "title": "ListPolicyVersions",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Versions.member.N": {
        "desc": "A list of policy versions.",
        "type": "Array of PolicyVersion objects"
      }
    }
  },
  {
    "title": "ListRolePolicies",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name of the role to list policies for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "PolicyNames.member.N": {
        "desc": "A list of policy names.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "ListRoles",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all roles whose path starts with /application_abc/component_xyz/.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Roles.member.N": {
        "desc": "A list of roles.",
        "type": "Array of Role objects"
      }
    }
  },
  {
    "title": "ListRoleTags",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name of the IAM role for which you want to see the list of tags.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can use the Marker request parameter to make a subsequent pagination request that retrieves more items. Note that IAM might return fewer than the MaxItems number of results even when more results are available. Check IsTruncated after every call to ensure that you receive all of your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Tags.member.N": {
        "desc": "The list of tags currently that is attached to the role. Each tag consists of a key name and an associated value. If no tags are attached to the specified role, the response contains an empty list.",
        "type": "Array of Tag objects"
      }
    }
  },
  {
    "title": "ListSAMLProviders",
    "req": {
      "SAMLProviderList.member.N": {
        "desc": "The list of SAML provider resource objects defined in IAM for this AWS account.",
        "type": "Array of SAMLProviderListEntry objects"
      }
    },
    "res": {
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Array of SAMLProviderListEntry objects"
      }
    }
  },
  {
    "title": "ListServerCertificates",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. For example: /company/servercerts would get all server certificates for which the path starts with /company/servercerts.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "ServerCertificateMetadataList.member.N": {
        "desc": "A list of server certificates.",
        "type": "Array of ServerCertificateMetadata objects"
      }
    }
  },
  {
    "title": "ListServiceSpecificCredentials",
    "req": {
      "ServiceName": {
        "desc": "Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.",
        "type": "String",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "ServiceSpecificCredentials.member.N": {
        "desc": "A list of structures that each contain details about a service-specific credential.",
        "type": "Array of ServiceSpecificCredentialMetadata objects"
      }
    }
  },
  {
    "title": "ListSigningCertificates",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the IAM user whose signing certificates you want to examine.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "Certificates.member.N": {
        "desc": "A list of the user's signing certificate information.",
        "type": "Array of SigningCertificate objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "ListSSHPublicKeys",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the IAM user to list SSH public keys for. If none is specified, the UserName field is determined implicitly based on the AWS access key used to sign the request.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "SSHPublicKeys.member.N": {
        "desc": "A list of the SSH public keys assigned to IAM user.",
        "type": "Array of SSHPublicKeyMetadata objects"
      }
    }
  },
  {
    "title": "ListUserPolicies",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user to list policies for.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "PolicyNames.member.N": {
        "desc": "A list of policy names.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "ListUsers",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PathPrefix": {
        "desc": "The path prefix for filtering the results. For example: /division_abc/subdivision_xyz/, which would get all user names whose path starts with /division_abc/subdivision_xyz/.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Users.member.N": {
        "desc": "A list of users.",
        "type": "Array of User objects"
      }
    }
  },
  {
    "title": "ListUserTags",
    "req": {
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the IAM user whose tags you want to see.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can use the Marker request parameter to make a subsequent pagination request that retrieves more items. Note that IAM might return fewer than the MaxItems number of results even when more results are available. Check IsTruncated after every call to ensure that you receive all of your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      },
      "Tags.member.N": {
        "desc": "The list of tags that are currently attached to the user. Each tag consists of a key name and an associated value. If no tags are attached to the specified user, the response contains an empty list.",
        "type": "Array of Tag objects"
      }
    }
  },
  {
    "title": "ListVirtualMFADevices",
    "req": {
      "AssignmentStatus": {
        "desc": "The status (Unassigned or Assigned) of the devices to list. If you do not specify an AssignmentStatus, the operation defaults to Any, which lists both assigned and unassigned virtual MFA devices.,",
        "type": "String",
        "required": "no",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      }
    },
    "res": {
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      },
      "VirtualMFADevices.member.N": {
        "desc": "The list of virtual MFA devices in the current account that match the AssignmentStatus value that was passed in the request.",
        "type": "Array of VirtualMFADevice objects",
        "values": [
          "assigned",
          "unassigned",
          "any"
        ]
      }
    }
  },
  {
    "title": "PutGroupPolicy",
    "req": {
      "GroupName": {
        "desc": "The name of the group to associate the policy with.",
        "type": "String",
        "required": "yes"
      },
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The name of the policy document.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "MalformedPolicyDocument": {
        "desc": "The request was rejected because the policy document was malformed. The error message describes the specific error.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "PutRolePermissionsBoundary",
    "req": {
      "PermissionsBoundary": {
        "desc": "The ARN of the policy that is used to set the permissions boundary for the role.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PolicyNotAttachable": {
        "desc": "The request failed because AWS service role policies can only be attached to the service-linked role for that service.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "PutRolePolicy",
    "req": {
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The name of the policy document.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role to associate the policy with.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "MalformedPolicyDocument": {
        "desc": "The request was rejected because the policy document was malformed. The error message describes the specific error.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "PutUserPermissionsBoundary",
    "req": {
      "PermissionsBoundary": {
        "desc": "The ARN of the policy that is used to set the permissions boundary for the user.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PolicyNotAttachable": {
        "desc": "The request failed because AWS service role policies can only be attached to the service-linked role for that service.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "PutUserPolicy",
    "req": {
      "PolicyDocument": {
        "desc": "The policy document.",
        "type": "String",
        "required": "yes"
      },
      "PolicyName": {
        "desc": "The name of the policy document.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user to associate the policy with.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "MalformedPolicyDocument": {
        "desc": "The request was rejected because the policy document was malformed. The error message describes the specific error.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "RemoveClientIDFromOpenIDConnectProvider",
    "req": {
      "ClientID": {
        "desc": "The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see CreateOpenIDConnectProvider.",
        "type": "String",
        "required": "yes"
      },
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the client ID from. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders operation.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "RemoveRoleFromInstanceProfile",
    "req": {
      "InstanceProfileName": {
        "desc": "The name of the instance profile to update.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role to remove.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "RemoveUserFromGroup",
    "req": {
      "GroupName": {
        "desc": "The name of the group to update.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user to remove.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "ResetServiceSpecificCredential",
    "req": {
      "ServiceSpecificCredentialId": {
        "desc": "The unique identifier of the service-specific credential.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "ServiceSpecificCredential": {
        "desc": "A structure with details about the updated service-specific credential, including the new password.",
        "type": "ServiceSpecificCredential object"
      }
    }
  },
  {
    "title": "ResyncMFADevice",
    "req": {
      "AuthenticationCode1": {
        "desc": "An authentication code emitted by the device.",
        "type": "String",
        "required": "yes"
      },
      "AuthenticationCode2": {
        "desc": "A subsequent authentication code emitted by the device.",
        "type": "String",
        "required": "yes"
      },
      "SerialNumber": {
        "desc": "Serial number that uniquely identifies the MFA device.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user whose MFA device you want to resynchronize.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidAuthenticationCode": {
        "desc": "The request was rejected because the authentication code was not recognized. The error message describes the specific error.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "SetDefaultPolicyVersion",
    "req": {
      "PolicyArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM policy whose default version you want to set.",
        "type": "String",
        "required": "yes"
      },
      "VersionId": {
        "desc": "The version of the policy to set as the default (operative) version.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "SetSecurityTokenServicePreferences",
    "req": {
      "GlobalEndpointTokenVersion": {
        "desc": "The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.",
        "type": "String",
        "required": "yes",
        "values": [
          "v1token",
          "v2token"
        ]
      }
    },
    "res": {
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String",
        "values": [
          "v1token",
          "v2token"
        ]
      }
    }
  },
  {
    "title": "SimulateCustomPolicy",
    "req": {
      "ActionNames.member.N": {
        "desc": "A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as iam:CreateUser. This operation does not support using wildcards (*) in an action name.",
        "type": "Array of strings",
        "required": "yes"
      },
      "CallerArn": {
        "desc": "The ARN of the IAM user that you want to use as the simulated caller of the API operations. CallerArn is required if you include a ResourcePolicy so that the policy's Principal element has a value to use in evaluating the policy.",
        "type": "String",
        "required": "no"
      },
      "ContextEntries.member.N": {
        "desc": "A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.",
        "type": "Array of ContextEntry objects",
        "required": "no"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PermissionsBoundaryPolicyInputList.member.N": {
        "desc": "The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see Permissions Boundaries for IAM Entities in the IAM User Guide. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.",
        "type": "Array of strings",
        "required": "no"
      },
      "PolicyInputList.member.N": {
        "desc": "A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the ResourcePolicy parameter. The policies cannot be \"scope-down\" policies, such as you could include in a call to GetFederationToken or one of the AssumeRole API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.",
        "type": "Array of strings",
        "required": "yes"
      },
      "ResourceArns.member.N": {
        "desc": "A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.",
        "type": "Array of strings",
        "required": "no"
      },
      "ResourceHandlingOption": {
        "desc": "Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.",
        "type": "String",
        "required": "no"
      },
      "ResourceOwner": {
        "desc": "An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn.",
        "type": "String",
        "required": "no"
      },
      "ResourcePolicy": {
        "desc": "A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "EvaluationResults.member.N": {
        "desc": "The results of the simulation.",
        "type": "Array of EvaluationResult objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "SimulatePrincipalPolicy",
    "req": {
      "ActionNames.member.N": {
        "desc": "A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as iam:CreateUser.",
        "type": "Array of strings",
        "required": "yes"
      },
      "CallerArn": {
        "desc": "The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a CallerArn, it defaults to the ARN of the user that you specify in PolicySourceArn, if you specified a user. If you include both a PolicySourceArn (for example, arn:aws:iam::123456789012:user/David) and a CallerArn (for example, arn:aws:iam::123456789012:user/Bob), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.",
        "type": "String",
        "required": "no"
      },
      "ContextEntries.member.N": {
        "desc": "A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.",
        "type": "Array of ContextEntry objects",
        "required": "no"
      },
      "Marker": {
        "desc": "Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.",
        "type": "String",
        "required": "no"
      },
      "MaxItems": {
        "desc": "Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true.",
        "type": "Integer",
        "required": "no"
      },
      "PermissionsBoundaryPolicyInputList.member.N": {
        "desc": "The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see Permissions Boundaries for IAM Entities in the IAM User Guide. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.",
        "type": "Array of strings",
        "required": "no"
      },
      "PolicyInputList.member.N": {
        "desc": "An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.",
        "type": "Array of strings",
        "required": "no"
      },
      "PolicySourceArn": {
        "desc": "The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to.",
        "type": "String",
        "required": "yes"
      },
      "ResourceArns.member.N": {
        "desc": "A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.",
        "type": "Array of strings",
        "required": "no"
      },
      "ResourceHandlingOption": {
        "desc": "Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.",
        "type": "String",
        "required": "no"
      },
      "ResourceOwner": {
        "desc": "An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn.",
        "type": "String",
        "required": "no"
      },
      "ResourcePolicy": {
        "desc": "A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "EvaluationResults.member.N": {
        "desc": "The results of the simulation.",
        "type": "Array of EvaluationResult objects"
      },
      "IsTruncated": {
        "desc": "A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all your results.",
        "type": "Boolean"
      },
      "Marker": {
        "desc": "When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.",
        "type": "String"
      }
    }
  },
  {
    "title": "TagRole",
    "req": {
      "RoleName": {
        "desc": "The name of the role that you want to add tags to.",
        "type": "String",
        "required": "yes"
      },
      "Tags.member.N": {
        "desc": "The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.",
        "type": "Array of Tag objects",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "Array of Tag objects"
      },
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "Array of Tag objects"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "Array of Tag objects"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "Array of Tag objects"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Array of Tag objects"
      }
    }
  },
  {
    "title": "TagUser",
    "req": {
      "Tags.member.N": {
        "desc": "The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.",
        "type": "Array of Tag objects",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user that you want to add tags to.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "String"
      },
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UntagRole",
    "req": {
      "RoleName": {
        "desc": "The name of the IAM role from which you want to remove tags.",
        "type": "String",
        "required": "yes"
      },
      "TagKeys.member.N": {
        "desc": "A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.",
        "type": "Array of strings",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "Array of strings"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "Array of strings"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "UntagUser",
    "req": {
      "TagKeys.member.N": {
        "desc": "A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.",
        "type": "Array of strings",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user from which you want to remove tags.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateAccessKey",
    "req": {
      "AccessKeyId": {
        "desc": "The access key ID of the secret access key you want to update.",
        "type": "String",
        "required": "yes"
      },
      "Status": {
        "desc": "The status you want to assign to the secret access key. Active means that the key can be used for API calls to AWS, while Inactive means that the key cannot be used.",
        "type": "String",
        "required": "yes",
        "values": [
          "active",
          "inactive"
        ]
      },
      "UserName": {
        "desc": "The name of the user whose key you want to update.",
        "type": "String",
        "required": "no",
        "values": [
          "active",
          "inactive"
        ]
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      }
    }
  },
  {
    "title": "UpdateAccountPasswordPolicy",
    "req": {
      "AllowUsersToChangePassword": {
        "desc": "Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see Letting IAM Users Change Their Own Passwords in the IAM User Guide.",
        "type": "Boolean",
        "required": "no"
      },
      "HardExpiry": {
        "desc": "Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.",
        "type": "Boolean",
        "required": "no"
      },
      "MaxPasswordAge": {
        "desc": "The number of days that an IAM user password is valid.",
        "type": "Integer",
        "required": "no"
      },
      "MinimumPasswordLength": {
        "desc": "The minimum number of characters allowed in an IAM user password.",
        "type": "Integer",
        "required": "no"
      },
      "PasswordReusePrevention": {
        "desc": "Specifies the number of previous passwords that IAM users are prevented from reusing.",
        "type": "Integer",
        "required": "no"
      },
      "RequireLowercaseCharacters": {
        "desc": "Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).",
        "type": "Boolean",
        "required": "no"
      },
      "RequireNumbers": {
        "desc": "Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).",
        "type": "Boolean",
        "required": "no"
      },
      "RequireSymbols": {
        "desc": "Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:",
        "type": "Boolean",
        "required": "no"
      },
      "RequireUppercaseCharacters": {
        "desc": "Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).",
        "type": "Boolean",
        "required": "no"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "Boolean"
      },
      "MalformedPolicyDocument": {
        "desc": "The request was rejected because the policy document was malformed. The error message describes the specific error.",
        "type": "Boolean"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "Boolean"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Boolean"
      }
    }
  },
  {
    "title": "UpdateAssumeRolePolicy",
    "req": {
      "PolicyDocument": {
        "desc": "The policy that grants an entity permission to assume the role.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role to update with the new policy.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "MalformedPolicyDocument": {
        "desc": "The request was rejected because the policy document was malformed. The error message describes the specific error.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateGroup",
    "req": {
      "GroupName": {
        "desc": "Name of the IAM group to update. If you're changing the name of the group, this is the original name.",
        "type": "String",
        "required": "yes"
      },
      "NewGroupName": {
        "desc": "New name for the IAM group. Only include this if changing the group's name.",
        "type": "String",
        "required": "no"
      },
      "NewPath": {
        "desc": "New path for the IAM group. Only include this if changing the group's path.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateLoginProfile",
    "req": {
      "Password": {
        "desc": "The new password for the specified IAM user.",
        "type": "String",
        "required": "no"
      },
      "PasswordResetRequired": {
        "desc": "Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.",
        "type": "Boolean",
        "required": "no"
      },
      "UserName": {
        "desc": "The name of the user whose password you want to update.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "PasswordPolicyViolation": {
        "desc": "The request was rejected because the provided password did not meet the requirements imposed by the account password policy.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateOpenIDConnectProviderThumbprint",
    "req": {
      "OpenIDConnectProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders operation.",
        "type": "String",
        "required": "yes"
      },
      "ThumbprintList.member.N": {
        "desc": "A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see CreateOpenIDConnectProvider.",
        "type": "Array of strings",
        "required": "yes"
      }
    },
    "res": {
      "InvalidInput": {
        "desc": "The request was rejected because an invalid or out-of-range value was supplied for an input parameter.",
        "type": "Array of strings"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "Array of strings"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "Array of strings"
      }
    }
  },
  {
    "title": "UpdateRole",
    "req": {
      "Description": {
        "desc": "The new description that you want to apply to the specified role.",
        "type": "String",
        "required": "no"
      },
      "MaxSessionDuration": {
        "desc": "The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.",
        "type": "Integer",
        "required": "no"
      },
      "RoleName": {
        "desc": "The name of the role that you want to modify.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      },
      "UnmodifiableEntity": {
        "desc": "The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateRoleDescription",
    "req": {
      "Description": {
        "desc": "The new description that you want to apply to the specified role.",
        "type": "String",
        "required": "yes"
      },
      "RoleName": {
        "desc": "The name of the role that you want to modify.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "Role": {
        "desc": "A structure that contains details about the modified role.",
        "type": "Role object"
      }
    }
  },
  {
    "title": "UpdateSAMLProvider",
    "req": {
      "SAMLMetadataDocument": {
        "desc": "An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.",
        "type": "String",
        "required": "yes"
      },
      "SAMLProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the SAML provider to update.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "SAMLProviderArn": {
        "desc": "The Amazon Resource Name (ARN) of the SAML provider that was updated.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateServerCertificate",
    "req": {
      "NewPath": {
        "desc": "The new path for the server certificate. Include this only if you are updating the server certificate's path.",
        "type": "String",
        "required": "no"
      },
      "NewServerCertificateName": {
        "desc": "The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.",
        "type": "String",
        "required": "no"
      },
      "ServerCertificateName": {
        "desc": "The name of the server certificate that you want to update.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UpdateServiceSpecificCredential",
    "req": {
      "ServiceSpecificCredentialId": {
        "desc": "The unique identifier of the service-specific credential.",
        "type": "String",
        "required": "yes"
      },
      "Status": {
        "desc": "The status to be assigned to the service-specific credential.",
        "type": "String",
        "required": "yes",
        "values": [
          "active",
          "inactive"
        ]
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.",
        "type": "String",
        "required": "no",
        "values": [
          "active",
          "inactive"
        ]
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      }
    }
  },
  {
    "title": "UpdateSigningCertificate",
    "req": {
      "CertificateId": {
        "desc": "The ID of the signing certificate you want to update.",
        "type": "String",
        "required": "yes"
      },
      "Status": {
        "desc": "The status you want to assign to the certificate. Active means that the certificate can be used for API calls to AWS Inactive means that the certificate cannot be used.",
        "type": "String",
        "required": "yes",
        "values": [
          "active",
          "inactive"
        ]
      },
      "UserName": {
        "desc": "The name of the IAM user the signing certificate belongs to.",
        "type": "String",
        "required": "no",
        "values": [
          "active",
          "inactive"
        ]
      }
    },
    "res": {
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      }
    }
  },
  {
    "title": "UpdateSSHPublicKey",
    "req": {
      "SSHPublicKeyId": {
        "desc": "The unique identifier for the SSH public key.",
        "type": "String",
        "required": "yes"
      },
      "Status": {
        "desc": "The status to assign to the SSH public key. Active means that the key can be used for authentication with an AWS CodeCommit repository. Inactive means that the key cannot be used.",
        "type": "String",
        "required": "yes",
        "values": [
          "active",
          "inactive"
        ]
      },
      "UserName": {
        "desc": "The name of the IAM user associated with the SSH public key.",
        "type": "String",
        "required": "yes",
        "values": [
          "active",
          "inactive"
        ]
      }
    },
    "res": {
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String",
        "values": [
          "active",
          "inactive"
        ]
      }
    }
  },
  {
    "title": "UpdateUser",
    "req": {
      "NewPath": {
        "desc": "New path for the IAM user. Include this parameter only if you're changing the user's path.",
        "type": "String",
        "required": "no"
      },
      "NewUserName": {
        "desc": "New name for the user. Include this parameter only if you're changing the user's name.",
        "type": "String",
        "required": "no"
      },
      "UserName": {
        "desc": "Name of the user to update. If you're changing the name of the user, this is the original user name.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ConcurrentModification": {
        "desc": "The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.",
        "type": "String"
      },
      "EntityAlreadyExists": {
        "desc": "The request was rejected because it attempted to create a resource that already exists.",
        "type": "String"
      },
      "EntityTemporarilyUnmodifiable": {
        "desc": "The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.",
        "type": "String"
      },
      "LimitExceeded": {
        "desc": "The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.",
        "type": "String"
      },
      "NoSuchEntity": {
        "desc": "The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.",
        "type": "String"
      },
      "ServiceFailure": {
        "desc": "The request processing has failed because of an unknown error, exception or failure.",
        "type": "String"
      }
    }
  },
  {
    "title": "UploadServerCertificate",
    "req": {
      "CertificateBody": {
        "desc": "The contents of the public key certificate in PEM-encoded format.",
        "type": "String",
        "required": "yes"
      },
      "CertificateChain": {
        "desc": "The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.",
        "type": "String",
        "required": "no"
      },
      "Path": {
        "desc": "The path for the server certificate. For more information about paths, see IAM Identifiers in the IAM User Guide.",
        "type": "String",
        "required": "no"
      },
      "PrivateKey": {
        "desc": "The contents of the private key in PEM-encoded format.",
        "type": "String",
        "required": "yes"
      },
      "ServerCertificateName": {
        "desc": "The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "ServerCertificateMetadata": {
        "desc": "The meta information of the uploaded server certificate without its certificate body, certificate chain, and private key.",
        "type": "ServerCertificateMetadata object"
      }
    }
  },
  {
    "title": "UploadSigningCertificate",
    "req": {
      "CertificateBody": {
        "desc": "The contents of the signing certificate.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the user the signing certificate is for.",
        "type": "String",
        "required": "no"
      }
    },
    "res": {
      "Certificate": {
        "desc": "Information about the certificate.",
        "type": "SigningCertificate object"
      }
    }
  },
  {
    "title": "UploadSSHPublicKey",
    "req": {
      "SSHPublicKeyBody": {
        "desc": "The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.",
        "type": "String",
        "required": "yes"
      },
      "UserName": {
        "desc": "The name of the IAM user to associate the SSH public key with.",
        "type": "String",
        "required": "yes"
      }
    },
    "res": {
      "SSHPublicKey": {
        "desc": "Contains information about the SSH public key.",
        "type": "SSHPublicKey object"
      }
    }
  }
]
