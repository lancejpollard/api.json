[
  {
    "title": "CreateAccessPoint",
    "req": {
      "ClientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 64.",
        "required": "Yes",
        "desc": "A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation."
      },
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the EFS file system that the access point provides access to."
      },
      "PosixUser": {
        "type": "PosixUser object",
        "required": "No",
        "desc": "The operating system user and group applied to all file system requests made using the access point."
      },
      "RootDirectory": {
        "type": "RootDirectory object",
        "required": "No",
        "desc": "Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory > Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo. Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "required": "No",
        "desc": "Creates tags associated with the access point. Each tag is a key-value pair."
      }
    },
    "res": {
      "AccessPointArn": {
        "type": "String",
        "desc": "The unique Amazon Resource Name (ARN) associated with the access point."
      },
      "AccessPointId": {
        "type": "String",
        "desc": "The ID of the access point, assigned by Amazon EFS."
      },
      "ClientToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 64.",
        "desc": "The opaque string specified in the request to ensure idempotent creation."
      },
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "The ID of the EFS file system that the access point applies to."
      },
      "LifeCycleState": {
        "type": "String",
        "desc": "Identifies the lifecycle phase of the access point."
      },
      "Name": {
        "type": "String",
        "desc": "The name of the access point. This is the value of the Name tag."
      },
      "OwnerId": {
        "type": "String",
        "length": "Maximum length of 14.",
        "pattern": "^(\\d{12})|(\\d{4}-\\d{4}-\\d{4})$",
        "desc": "Identified the AWS account that owns the access point resource."
      },
      "PosixUser": {
        "type": "PosixUser object",
        "desc": "The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point."
      },
      "RootDirectory": {
        "type": "RootDirectory object",
        "desc": "The directory on the Amazon EFS file system that the access point exposes as the root directory to NFS clients using the access point."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "desc": "The tags associated with the access point, presented as an array of Tag objects."
      }
    },
    "err": {
      "AccessPointAlreadyExists": {
        "statusCode": "409",
        "desc": "Returned if the access point you are trying to create already exists, with the creation token you provided in the request."
      },
      "AccessPointLimitExceeded": {
        "statusCode": "403",
        "desc": "Returned if the AWS account has already created the maximum number of access points allowed per file system."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "CreateFileSystem",
    "req": {
      "CreationToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 64.",
        "pattern": ".+",
        "required": "Yes",
        "desc": "A string of up to 64 ASCII characters. Amazon EFS uses this to ensure idempotent creation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying CreateFileSystem:KmsKeyId for an existing AWS Key Management Service (AWS KMS) customer master key (CMK). If you don't specify a CMK, then the default CMK for Amazon EFS, /aws/elasticfilesystem, is used to protect the encrypted file system."
      },
      "KmsKeyId": {
        "type": "String",
        "length": "Maximum length of 2048.",
        "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|alias/[a-zA-Z0-9/_-]+|(arn:aws[-a-z]*:kms:[a-z0-9-]+:\\d{12}:((key/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|(alias/[a-zA-Z0-9/_-]+))))$",
        "required": "No",
        "desc": "The ID of the AWS KMS CMK to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault CMK. If this parameter is not specified, the default CMK for Amazon EFS is used. This ID can be in one of the following formats: If KmsKeyId is specified, the CreateFileSystem:Encrypted parameter must be set to true."
      },
      "PerformanceMode": {
        "type": "String",
        "required": "No",
        "desc": "The performance mode of the file system. We recommend generalPurpose performance mode for most file systems. File systems using the maxIO performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created."
      },
      "ProvisionedThroughputInMibps": {
        "type": "Double",
        "required": "No",
        "desc": "The throughput, measured in MiB/s, that you want to provision for a file system that you're creating. Valid values are 1-1024. Required if ThroughputMode is set to provisioned. The upper limit for throughput is 1024 MiB/s. You can get this limit increased by contacting AWS Support. For more information, see Amazon EFS Limits That You Can Increase in the Amazon EFS User Guide."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "required": "No",
        "desc": "A value that specifies to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a \"Key\":\"Name\",\"Value\":\"{value}\" key-value pair."
      },
      "ThroughputMode": {
        "type": "String",
        "required": "No",
        "desc": "The throughput mode for the file system to be created. There are two throughput modes to choose from for your file system: bursting and provisioned. If you set ThroughputMode to provisioned, you must also set a value for ProvisionedThroughPutInMibps. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as itâ€™s been more than 24 hours since the last decrease or throughput mode change. For more, see Specifying Throughput with Provisioned Mode in the Amazon EFS User Guide."
      }
    },
    "res": {
      "CreationTime": {
        "type": "Timestamp",
        "desc": "The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z)."
      },
      "CreationToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 64.",
        "pattern": ".+",
        "desc": "The opaque string specified in the request."
      },
      "Encrypted": {
        "type": "Boolean",
        "desc": "A Boolean value that, if true, indicates that the file system is encrypted."
      },
      "FileSystemArn": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) for the EFS file system, in the format arn:aws:elasticfilesystem:region:account-id:file-system/file-system-id . Example with sample data: arn:aws:elasticfilesystem:us-west-2:1111333322228888:file-system/fs-01234567"
      },
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "The ID of the file system, assigned by Amazon EFS."
      },
      "KmsKeyId": {
        "type": "String",
        "length": "Maximum length of 2048.",
        "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|alias/[a-zA-Z0-9/_-]+|(arn:aws[-a-z]*:kms:[a-z0-9-]+:\\d{12}:((key/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|(alias/[a-zA-Z0-9/_-]+))))$",
        "desc": "The ID of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system."
      },
      "LifeCycleState": {
        "type": "String",
        "desc": "The lifecycle phase of the file system."
      },
      "Name": {
        "type": "String",
        "length": "Maximum length of 256.",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "desc": "You can add tags to a file system, including a Name tag. For more information, see CreateFileSystem. If the file system has a Name tag, Amazon EFS returns the value in this field."
      },
      "NumberOfMountTargets": {
        "type": "Integer",
        "desc": "The current number of mount targets that the file system has. For more information, see CreateMountTarget."
      },
      "OwnerId": {
        "type": "String",
        "length": "Maximum length of 14.",
        "pattern": "^(\\d{12})|(\\d{4}-\\d{4}-\\d{4})$",
        "desc": "The AWS account that created the file system. If the file system was created by an IAM user, the parent account to which the user belongs is the owner."
      },
      "PerformanceMode": {
        "type": "String",
        "desc": "The performance mode of the file system."
      },
      "ProvisionedThroughputInMibps": {
        "type": "Double",
        "desc": "The throughput, measured in MiB/s, that you want to provision for a file system. Valid values are 1-1024. Required if ThroughputMode is set to provisioned. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see Amazon EFS Limits That You Can Increase in the Amazon EFS User Guide."
      },
      "SizeInBytes": {
        "type": "FileSystemSize object",
        "desc": "The latest known metered size (in bytes) of data stored in the file system, in its Value field, and the time at which that size was determined in its Timestamp field. The Timestamp value is the integer number of seconds since 1970-01-01T00:00:00Z. The SizeInBytes value doesn't represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, SizeInBytes represents actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not the exact size that the file system was at any point in time."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "desc": "The tags associated with the file system, presented as an array of Tag objects."
      },
      "ThroughputMode": {
        "type": "String",
        "desc": "The throughput mode for a file system. There are two throughput modes to choose from for your file system: bursting and provisioned. If you set ThroughputMode to provisioned, you must also set a value for ProvisionedThroughPutInMibps. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as itâ€™s been more than 24 hours since the last decrease or throughput mode change."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemAlreadyExists": {
        "statusCode": "409",
        "desc": "Returned if the file system you are trying to create already exists, with the creation token you provided."
      },
      "FileSystemLimitExceeded": {
        "statusCode": "403",
        "desc": "Returned if the AWS account has already created the maximum number of file systems allowed per account."
      },
      "InsufficientThroughputCapacity": {
        "statusCode": "503",
        "desc": "Returned if there's not enough capacity to provision additional throughput. This value might be returned when you try to create a file system in provisioned throughput mode, when you attempt to increase the provisioned throughput of an existing file system, or when you attempt to change an existing file system from bursting to provisioned throughput mode."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "ThroughputLimitExceeded": {
        "statusCode": "400",
        "desc": "Returned if the throughput mode or amount of provisioned throughput can't be changed because the throughput limit of 1024 MiB/s has been reached."
      }
    }
  },
  {
    "title": "CreateMountTarget",
    "req": {
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system for which to create the mount target."
      },
      "IpAddress": {
        "type": "String",
        "length": "Minimum length of 7. Maximum length of 15.",
        "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$",
        "required": "No",
        "desc": "Valid IPv4 address within the address range of the specified subnet."
      },
      "SecurityGroups": {
        "type": "Array of strings",
        "length": "Minimum length of 11. Maximum length of 43.",
        "pattern": "^sg-[0-9a-f]{8,40}",
        "required": "No",
        "desc": "Up to five VPC security group IDs, of the form sg-xxxxxxxx. These must be for the same VPC as subnet specified."
      },
      "SubnetId": {
        "type": "String",
        "length": "Minimum length of 15. Maximum length of 47.",
        "pattern": "^subnet-[0-9a-f]{8,40}$",
        "required": "Yes",
        "desc": "The ID of the subnet to add the mount target in."
      }
    },
    "res": {
      "AvailabilityZoneId": {
        "type": "String",
        "desc": "The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in. For example, use1-az1 is an AZ ID for the us-east-1 Region and it has the same location in every AWS account."
      },
      "AvailabilityZoneName": {
        "type": "String",
        "desc": "The name of the Availability Zone (AZ) that the mount target resides in. AZs are independently mapped to names for each AWS account. For example, the Availability Zone us-east-1a for your AWS account might not be the same location as us-east-1a for another AWS account."
      },
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "The ID of the file system for which the mount target is intended."
      },
      "IpAddress": {
        "type": "String",
        "length": "Minimum length of 7. Maximum length of 15.",
        "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$",
        "desc": "Address at which the file system can be mounted by using the mount target."
      },
      "LifeCycleState": {
        "type": "String",
        "desc": "Lifecycle state of the mount target."
      },
      "MountTargetId": {
        "type": "String",
        "length": "Minimum length of 13. Maximum length of 45.",
        "pattern": "^fsmt-[0-9a-f]{8,40}$",
        "desc": "System-assigned mount target ID."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "desc": "The ID of the network interface that Amazon EFS created when it created the mount target."
      },
      "OwnerId": {
        "type": "String",
        "length": "Maximum length of 14.",
        "pattern": "^(\\d{12})|(\\d{4}-\\d{4}-\\d{4})$",
        "desc": "AWS account ID that owns the resource."
      },
      "SubnetId": {
        "type": "String",
        "length": "Minimum length of 15. Maximum length of 47.",
        "pattern": "^subnet-[0-9a-f]{8,40}$",
        "desc": "The ID of the mount target's subnet."
      },
      "VpcId": {
        "type": "String",
        "desc": "The Virtual Private Cloud (VPC) ID that the mount target is configured in."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "IpAddressInUse": {
        "statusCode": "409",
        "desc": "Returned if the request specified an IpAddress that is already in use in the subnet."
      },
      "MountTargetConflict": {
        "statusCode": "409",
        "desc": "Returned if the mount target would violate one of the specified restrictions based on the file system's existing mount targets."
      },
      "NetworkInterfaceLimitExceeded": {
        "statusCode": "409",
        "desc": "The calling account has reached the limit for elastic network interfaces for the specific AWS Region. The client should try to delete some elastic network interfaces or get the account limit raised. For more information, see Amazon VPC Limits in the Amazon VPC User Guide (see the Network interfaces per VPC entry in the table)."
      },
      "NoFreeAddressesInSubnet": {
        "statusCode": "409",
        "desc": "Returned if IpAddress was not specified in the request and there are no free IP addresses in the subnet."
      },
      "SecurityGroupLimitExceeded": {
        "statusCode": "400",
        "desc": "Returned if the size of SecurityGroups specified in the request is greater than five."
      },
      "SecurityGroupNotFound": {
        "statusCode": "400",
        "desc": "Returned if one of the specified security groups doesn't exist in the subnet's VPC."
      },
      "SubnetNotFound": {
        "statusCode": "400",
        "desc": "Returned if there is no subnet with ID SubnetId provided in the request."
      },
      "UnsupportedAvailabilityZone": {
        "statusCode": "400",
        "desc": ""
      }
    }
  },
  {
    "title": "CreateTags",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system whose tags you want to modify (String). This operation modifies the tags only, not the file system."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "required": "Yes",
        "desc": "An array of Tag objects to add. Each Tag object is a key-value pair."
      }
    },
    "res": {},
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DeleteAccessPoint",
    "req": {
      "AccessPointId": {
        "required": "Yes",
        "desc": "The ID of the access point that you want to delete."
      }
    },
    "res": {},
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DeleteFileSystem",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system you want to delete."
      }
    },
    "res": {},
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemInUse": {
        "statusCode": "409",
        "desc": "Returned if a file system has mount targets."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DeleteFileSystemPolicy",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "Specifies the EFS file system for which to delete the FileSystemPolicy."
      }
    },
    "res": {},
    "err": {
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DeleteMountTarget",
    "req": {
      "MountTargetId": {
        "length": "Minimum length of 13. Maximum length of 45.",
        "pattern": "^fsmt-[0-9a-f]{8,40}$",
        "required": "Yes",
        "desc": "The ID of the mount target to delete (String)."
      }
    },
    "res": {},
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "DependencyTimeout": {
        "statusCode": "504",
        "desc": "The service timed out trying to fulfill the request, and the client should try the call again."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "MountTargetNotFound": {
        "statusCode": "404",
        "desc": "Returned if there is no mount target with the specified ID found in the caller's account."
      }
    }
  },
  {
    "title": "DeleteTags",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system whose tags you want to delete (String)."
      },
      "TagKeys": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": "^(?![aA]{1}[wW]{1}[sS]{1}:)([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
        "required": "Yes",
        "desc": "A list of tag keys to delete."
      }
    },
    "res": {},
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DescribeAccessPoints",
    "req": {
      "AccessPointId": {
        "desc": "(Optional) Specifies an EFS access point to describe in the response; mutually exclusive with FileSystemId."
      },
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "(Optional) If you provide a FileSystemId, EFS returns all access points for that file system; mutually exclusive with AccessPointId."
      },
      "MaxResults": {
        "desc": "(Optional) When retrieving all access points for a file system, you can optionally specify the MaxItems parameter to limit the number of objects returned in a response. The default value is 100. Valid Range: Minimum value of 1."
      },
      "NextToken": {
        "desc": "NextToken is present if the response is paginated. You can use NextMarker in the subsequent request to fetch the next page of access point descriptions."
      }
    },
    "res": {
      "AccessPoints": {
        "type": "Array of AccessPointDescription objects",
        "desc": "An array of access point descriptions."
      },
      "NextToken": {
        "type": "String",
        "desc": "Present if there are more access points than returned in the response. You can use the NextMarker in the subsequent request to fetch the additional descriptions."
      }
    },
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DescribeBackupPolicy",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "Specifies which EFS file system to retrieve the BackupPolicy for."
      }
    },
    "res": {
      "BackupPolicy": {
        "type": "BackupPolicy object",
        "desc": "Describes the file system's backup policy, indicating whether automatic backups are turned on or off.."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "PolicyNotFound": {
        "statusCode": "404",
        "desc": "Returned if the default file system policy is in effect for the EFS file system specified."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "Returned if the AWS Backup service is not available in the region that the request was made."
      }
    }
  },
  {
    "title": "DescribeFileSystemPolicy",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "Specifies which EFS file system to retrieve the FileSystemPolicy for."
      }
    },
    "res": {
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "Specifies the EFS file system to which the FileSystemPolicy applies."
      },
      "Policy": {
        "type": "String",
        "desc": "The JSON formatted FileSystemPolicy for the EFS file system."
      }
    },
    "err": {
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "PolicyNotFound": {
        "statusCode": "404",
        "desc": "Returned if the default file system policy is in effect for the EFS file system specified."
      }
    }
  },
  {
    "title": "DescribeFileSystems",
    "req": {
      "CreationToken": {
        "length": "Minimum length of 1. Maximum length of 64.",
        "pattern": ".+",
        "desc": "(Optional) Restricts the list to the file system with this creation token (String). You specify a creation token when you create an Amazon EFS file system."
      },
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "(Optional) ID of the file system whose description you want to retrieve (String)."
      },
      "Marker": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "(Optional) Opaque pagination token returned from a previous DescribeFileSystems operation (String). If present, specifies to continue the list from where the returning call had left off."
      },
      "MaxItems": {
        "desc": "(Optional) Specifies the maximum number of file systems to return in the response (integer). This number is automatically set to 100. The response is paginated at 100 per page if you have more than 100 file systems. Valid Range: Minimum value of 1."
      }
    },
    "res": {
      "FileSystems": {
        "type": "Array of FileSystemDescription objects",
        "desc": "An array of file system descriptions."
      },
      "Marker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "Present if provided by caller in the request (String)."
      },
      "NextMarker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "Present if there are more file systems than returned in the response (String). You can use the NextMarker in the subsequent request to fetch the descriptions."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DescribeLifecycleConfiguration",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system whose LifecycleConfiguration object you want to retrieve (String)."
      }
    },
    "res": {
      "LifecyclePolicies": {
        "type": "Array of LifecyclePolicy objects",
        "desc": "An array of lifecycle management policies. Currently, EFS supports a maximum of one policy per file system."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "DescribeMountTargets",
    "req": {
      "AccessPointId": {
        "desc": "(Optional) The ID of the access point whose mount targets that you want to list. It must be included in your request if a FileSystemId or MountTargetId is not included in your request. Accepts either an access point ID or ARN as input."
      },
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "(Optional) ID of the file system whose mount targets you want to list (String). It must be included in your request if an AccessPointId or MountTargetId is not included. Accepts either a file system ID or ARN as input."
      },
      "Marker": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "(Optional) Opaque pagination token returned from a previous DescribeMountTargets operation (String). If present, it specifies to continue the list from where the previous returning call left off."
      },
      "MaxItems": {
        "desc": "(Optional) Maximum number of mount targets to return in the response. Currently, this number is automatically set to 10, and other values are ignored. The response is paginated at 100 per page if you have more than 100 mount targets. Valid Range: Minimum value of 1."
      },
      "MountTargetId": {
        "length": "Minimum length of 13. Maximum length of 45.",
        "pattern": "^fsmt-[0-9a-f]{8,40}$",
        "desc": "(Optional) ID of the mount target that you want to have described (String). It must be included in your request if FileSystemId is not included. Accepts either a mount target ID or ARN as input."
      }
    },
    "res": {
      "Marker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "If the request included the Marker, the response returns that value in this field."
      },
      "MountTargets": {
        "type": "Array of MountTargetDescription objects",
        "desc": "Returns the file system's mount targets as an array of MountTargetDescription objects."
      },
      "NextMarker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "If a value is present, there are more mount targets to return. In a subsequent request, you can provide Marker in your request with this value to retrieve the next set of mount targets."
      }
    },
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "MountTargetNotFound": {
        "statusCode": "404",
        "desc": "Returned if there is no mount target with the specified ID found in the caller's account."
      }
    }
  },
  {
    "title": "DescribeMountTargetSecurityGroups",
    "req": {
      "MountTargetId": {
        "length": "Minimum length of 13. Maximum length of 45.",
        "pattern": "^fsmt-[0-9a-f]{8,40}$",
        "required": "Yes",
        "desc": "The ID of the mount target whose security groups you want to retrieve."
      }
    },
    "res": {
      "SecurityGroups": {
        "type": "Array of strings",
        "length": "Minimum length of 11. Maximum length of 43.",
        "pattern": "^sg-[0-9a-f]{8,40}",
        "desc": "An array of security groups."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "IncorrectMountTargetState": {
        "statusCode": "409",
        "desc": "Returned if the mount target is not in the correct state for the operation."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "MountTargetNotFound": {
        "statusCode": "404",
        "desc": "Returned if there is no mount target with the specified ID found in the caller's account."
      }
    }
  },
  {
    "title": "DescribeTags",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system whose tag set you want to retrieve."
      },
      "Marker": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "(Optional) An opaque pagination token returned from a previous DescribeTags operation (String). If present, it specifies to continue the list from where the previous call left off."
      },
      "MaxItems": {
        "desc": "(Optional) The maximum number of file system tags to return in the response. Currently, this number is automatically set to 100, and other values are ignored. The response is paginated at 100 per page if you have more than 100 tags. Valid Range: Minimum value of 1."
      }
    },
    "res": {
      "Marker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "If the request included a Marker, the response returns that value in this field."
      },
      "NextMarker": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": ".+",
        "desc": "If a value is present, there are more tags to return. In a subsequent request, you can provide the value of NextMarker as the value of the Marker parameter in your next request to retrieve the next set of tags."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "desc": "Returns tags associated with the file system as an array of Tag objects."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "ListTagsForResource",
    "req": {
      "MaxResults": {
        "desc": "(Optional) Specifies the maximum number of tag objects to return in the response. The default value is 100. Valid Range: Minimum value of 1."
      },
      "NextToken": {
        "desc": "You can use NextToken in a subsequent request to fetch the next page of access point descriptions if the response payload was paginated."
      },
      "ResourceId": {
        "required": "Yes",
        "desc": "Specifies the EFS resource you want to retrieve tags for. You can retrieve tags for EFS file systems and access points using this API endpoint."
      }
    },
    "res": {
      "NextToken": {
        "type": "String",
        "desc": "NextToken is present if the response payload is paginated. You can use NextToken in a subsequent request to fetch the next page of access point descriptions."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "desc": "An array of the tags for the specified EFS resource."
      }
    },
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "ModifyMountTargetSecurityGroups",
    "req": {
      "MountTargetId": {
        "length": "Minimum length of 13. Maximum length of 45.",
        "pattern": "^fsmt-[0-9a-f]{8,40}$",
        "required": "Yes",
        "desc": "The ID of the mount target whose security groups you want to modify."
      },
      "SecurityGroups": {
        "type": "Array of strings",
        "length": "Minimum length of 11. Maximum length of 43.",
        "pattern": "^sg-[0-9a-f]{8,40}",
        "required": "No",
        "desc": "An array of up to five VPC security group IDs."
      }
    },
    "res": {},
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "IncorrectMountTargetState": {
        "statusCode": "409",
        "desc": "Returned if the mount target is not in the correct state for the operation."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "MountTargetNotFound": {
        "statusCode": "404",
        "desc": "Returned if there is no mount target with the specified ID found in the caller's account."
      },
      "SecurityGroupLimitExceeded": {
        "statusCode": "400",
        "desc": "Returned if the size of SecurityGroups specified in the request is greater than five."
      },
      "SecurityGroupNotFound": {
        "statusCode": "400",
        "desc": "Returned if one of the specified security groups doesn't exist in the subnet's VPC."
      }
    }
  },
  {
    "title": "PutBackupPolicy",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "Specifies which EFS file system to update the backup policy for."
      },
      "BackupPolicy": {
        "type": "BackupPolicy object",
        "required": "Yes",
        "desc": "The backup policy included in the PutBackupPolicy request."
      }
    },
    "res": {
      "BackupPolicy": {
        "type": "BackupPolicy object",
        "desc": "Describes the file system's backup policy, indicating whether automatic backups are turned on or off.."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "ValidationException": {
        "statusCode": "400",
        "desc": "Returned if the AWS Backup service is not available in the region that the request was made."
      }
    }
  },
  {
    "title": "PutFileSystemPolicy",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the EFS file system that you want to create or update the FileSystemPolicy for."
      },
      "BypassPolicyLockoutSafetyCheck": {
        "type": "Boolean",
        "required": "No",
        "desc": "(Optional) A flag to indicate whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. The default value is False."
      },
      "Policy": {
        "type": "String",
        "required": "Yes",
        "desc": "The FileSystemPolicy that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see EFS Resource-based Policies."
      }
    },
    "res": {
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "Specifies the EFS file system to which the FileSystemPolicy applies."
      },
      "Policy": {
        "type": "String",
        "desc": "The JSON formatted FileSystemPolicy for the EFS file system."
      }
    },
    "err": {
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "InvalidPolicyException": {
        "statusCode": "400",
        "desc": "Returned if the FileSystemPolicy is is malformed or contains an error such as an invalid parameter value or a missing required parameter. Returned in the case of a policy lockout safety check error."
      }
    }
  },
  {
    "title": "PutLifecycleConfiguration",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system for which you are creating the LifecycleConfiguration object (String)."
      },
      "LifecyclePolicies": {
        "type": "Array of LifecyclePolicy objects",
        "required": "Yes",
        "desc": "An array of LifecyclePolicy objects that define the file system's LifecycleConfiguration object. A LifecycleConfiguration object tells lifecycle management when to transition files from the Standard storage class to the Infrequent Access storage class."
      }
    },
    "res": {
      "LifecyclePolicies": {
        "type": "Array of LifecyclePolicy objects",
        "desc": "An array of lifecycle management policies. Currently, EFS supports a maximum of one policy per file system."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "TagResource",
    "req": {
      "ResourceId": {
        "required": "Yes",
        "desc": "The ID specifying the EFS resource that you want to create a tag for."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "required": "Yes",
        "desc": ""
      }
    },
    "res": {},
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "UntagResource",
    "req": {
      "ResourceId": {
        "required": "Yes",
        "desc": "Specifies the EFS resource that you want to remove tags from."
      },
      "TagKeys": {
        "length": "Minimum length of 1. Maximum length of 128.",
        "pattern": "^(?![aA]{1}[wW]{1}[sS]{1}:)([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
        "required": "Yes",
        "desc": "The keys of the key:value tag pairs that you want to remove from the specified EFS resource. Array Members: Minimum number of 1 item. Maximum number of 50 items."
      }
    },
    "res": {},
    "err": {
      "AccessPointNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified AccessPointId value doesn't exist in the requester's AWS account."
      },
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      }
    }
  },
  {
    "title": "UpdateFileSystem",
    "req": {
      "FileSystemId": {
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "required": "Yes",
        "desc": "The ID of the file system that you want to update."
      },
      "ProvisionedThroughputInMibps": {
        "type": "Double",
        "required": "No",
        "desc": "(Optional) The amount of throughput, in MiB/s, that you want to provision for your file system. Valid values are 1-1024. Required if ThroughputMode is changed to provisioned on update. If you're not updating the amount of provisioned throughput for your file system, you don't need to provide this value in your request."
      },
      "ThroughputMode": {
        "type": "String",
        "required": "No",
        "desc": "(Optional) The throughput mode that you want your file system to use. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the ThroughputMode to provisioned, you must also set a value for ProvisionedThroughputInMibps."
      }
    },
    "res": {
      "CreationTime": {
        "type": "Timestamp",
        "desc": "The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z)."
      },
      "CreationToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 64.",
        "pattern": ".+",
        "desc": "The opaque string specified in the request."
      },
      "Encrypted": {
        "type": "Boolean",
        "desc": "A Boolean value that, if true, indicates that the file system is encrypted."
      },
      "FileSystemArn": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) for the EFS file system, in the format arn:aws:elasticfilesystem:region:account-id:file-system/file-system-id . Example with sample data: arn:aws:elasticfilesystem:us-west-2:1111333322228888:file-system/fs-01234567"
      },
      "FileSystemId": {
        "type": "String",
        "length": "Maximum length of 128.",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$",
        "desc": "The ID of the file system, assigned by Amazon EFS."
      },
      "KmsKeyId": {
        "type": "String",
        "length": "Maximum length of 2048.",
        "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|alias/[a-zA-Z0-9/_-]+|(arn:aws[-a-z]*:kms:[a-z0-9-]+:\\d{12}:((key/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|(alias/[a-zA-Z0-9/_-]+))))$",
        "desc": "The ID of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system."
      },
      "LifeCycleState": {
        "type": "String",
        "desc": "The lifecycle phase of the file system."
      },
      "Name": {
        "type": "String",
        "length": "Maximum length of 256.",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "desc": "You can add tags to a file system, including a Name tag. For more information, see CreateFileSystem. If the file system has a Name tag, Amazon EFS returns the value in this field."
      },
      "NumberOfMountTargets": {
        "type": "Integer",
        "desc": "The current number of mount targets that the file system has. For more information, see CreateMountTarget."
      },
      "OwnerId": {
        "type": "String",
        "length": "Maximum length of 14.",
        "pattern": "^(\\d{12})|(\\d{4}-\\d{4}-\\d{4})$",
        "desc": "The AWS account that created the file system. If the file system was created by an IAM user, the parent account to which the user belongs is the owner."
      },
      "PerformanceMode": {
        "type": "String",
        "desc": "The performance mode of the file system."
      },
      "ProvisionedThroughputInMibps": {
        "type": "Double",
        "desc": "The throughput, measured in MiB/s, that you want to provision for a file system. Valid values are 1-1024. Required if ThroughputMode is set to provisioned. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see Amazon EFS Limits That You Can Increase in the Amazon EFS User Guide."
      },
      "SizeInBytes": {
        "type": "FileSystemSize object",
        "desc": "The latest known metered size (in bytes) of data stored in the file system, in its Value field, and the time at which that size was determined in its Timestamp field. The Timestamp value is the integer number of seconds since 1970-01-01T00:00:00Z. The SizeInBytes value doesn't represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, SizeInBytes represents actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not the exact size that the file system was at any point in time."
      },
      "Tags": {
        "type": "Array of Tag objects",
        "desc": "The tags associated with the file system, presented as an array of Tag objects."
      },
      "ThroughputMode": {
        "type": "String",
        "desc": "The throughput mode for a file system. There are two throughput modes to choose from for your file system: bursting and provisioned. If you set ThroughputMode to provisioned, you must also set a value for ProvisionedThroughPutInMibps. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as itâ€™s been more than 24 hours since the last decrease or throughput mode change."
      }
    },
    "err": {
      "BadRequest": {
        "statusCode": "400",
        "desc": "Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter."
      },
      "FileSystemNotFound": {
        "statusCode": "404",
        "desc": "Returned if the specified FileSystemId value doesn't exist in the requester's AWS account."
      },
      "IncorrectFileSystemLifeCycleState": {
        "statusCode": "409",
        "desc": "Returned if the file system's lifecycle state is not \"available\"."
      },
      "InsufficientThroughputCapacity": {
        "statusCode": "503",
        "desc": "Returned if there's not enough capacity to provision additional throughput. This value might be returned when you try to create a file system in provisioned throughput mode, when you attempt to increase the provisioned throughput of an existing file system, or when you attempt to change an existing file system from bursting to provisioned throughput mode."
      },
      "InternalServerError": {
        "statusCode": "500",
        "desc": "Returned if an error occurred on the server side."
      },
      "ThroughputLimitExceeded": {
        "statusCode": "400",
        "desc": "Returned if the throughput mode or amount of provisioned throughput can't be changed because the throughput limit of 1024 MiB/s has been reached."
      },
      "TooManyRequests": {
        "statusCode": "429",
        "desc": "Returned if you donâ€™t wait at least 24 hours before changing the throughput mode, or decreasing the Provisioned Throughput value."
      }
    }
  }
]