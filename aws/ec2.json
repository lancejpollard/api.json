[
  {
    "title": "AcceptReservedInstancesExchangeQuote",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ReservedInstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value."
      },
      "TargetConfiguration.N": {
        "type": "Array of TargetConfigurationRequest objects",
        "required": "No",
        "desc": "The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances."
      }
    },
    "res": {
      "exchangeId": {
        "type": "String",
        "desc": "The ID of the successful exchange."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AcceptTransitGatewayMulticastDomainAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the subnets to associate with the transit gateway multicast domain."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway attachment."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "associations": {
        "type": "TransitGatewayMulticastDomainAssociations object",
        "desc": "Describes the multicast domain associations."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AcceptTransitGatewayPeeringAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPeeringAttachment": {
        "type": "TransitGatewayPeeringAttachment object",
        "desc": "The transit gateway peering attachment."
      }
    },
    "err": {}
  },
  {
    "title": "AcceptTransitGatewayVpcAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachment": {
        "type": "TransitGatewayVpcAttachment object",
        "desc": "The VPC attachment."
      }
    },
    "err": {}
  },
  {
    "title": "AcceptVpcEndpointConnections",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC endpoint service."
      },
      "VpcEndpointId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more interface VPC endpoints."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the interface endpoints that were not accepted, if applicable."
      }
    },
    "err": {}
  },
  {
    "title": "AcceptVpcPeeringConnection",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC peering connection. You must specify this parameter in the request."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcPeeringConnection": {
        "type": "VpcPeeringConnection object",
        "desc": "Information about the VPC peering connection."
      }
    },
    "err": {}
  },
  {
    "title": "AdvertiseByoipCidr",
    "req": {
      "Cidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "byoipCidr": {
        "type": "ByoipCidr object",
        "desc": "Information about the address range."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AllocateAddress",
    "req": {
      "Address": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool."
      },
      "CustomerOwnedIpv4Pool": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool."
      },
      "Domain": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic. Default: If the Region supports EC2-Classic, the default is standard. Otherwise, the default is vpc."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkBorderGroup": {
        "type": "String",
        "required": "No",
        "desc": "A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups. Use DescribeAvailabilityZones to view the network border groups."
      },
      "PublicIpv4Pool": {
        "type": "String",
        "required": "No",
        "desc": "The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the Elastic IP address."
      }
    },
    "res": {
      "allocationId": {
        "type": "String",
        "desc": "[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC."
      },
      "carrierIp": {
        "type": "String",
        "desc": "The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance)."
      },
      "customerOwnedIp": {
        "type": "String",
        "desc": "The customer-owned IP address."
      },
      "customerOwnedIpv4Pool": {
        "type": "String",
        "desc": "The ID of the customer-owned address pool."
      },
      "domain": {
        "type": "String",
        "desc": "Indicates whether the Elastic IP address is for use with instances in a VPC (vpc) or instances in EC2-Classic (standard)."
      },
      "networkBorderGroup": {
        "type": "String",
        "desc": "The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses."
      },
      "publicIp": {
        "type": "String",
        "desc": "The Elastic IP address."
      },
      "publicIpv4Pool": {
        "type": "String",
        "desc": "The ID of an address pool."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AllocateHosts",
    "req": {
      "AutoPlacement": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see Understanding auto-placement and affinity in the Amazon EC2 User Guide. Default: on"
      },
      "AvailabilityZone": {
        "type": "String",
        "required": "Yes",
        "desc": "The Availability Zone in which to allocate the Dedicated Host."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "HostRecovery": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see Host recovery in the Amazon EC2 User Guide. Default: off"
      },
      "InstanceFamily": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request."
      },
      "InstanceType": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only. If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request."
      },
      "Quantity": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The number of Dedicated Hosts to allocate to your account with these parameters."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Dedicated Host during creation."
      }
    },
    "res": {
      "hostIdSet": {
        "type": "Array of strings",
        "desc": "The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ApplySecurityGroupsToClientVpnTargetNetwork",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC in which the associated target network is located."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "securityGroupIds": {
        "type": "Array of strings",
        "desc": "The IDs of the applied security groups."
      }
    },
    "err": {}
  },
  {
    "title": "AssignIpv6Addresses",
    "req": {
      "Ipv6AddressCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of additional IPv6 addresses to assign to the network interface. The specified number of IPv6 addresses are assigned in addition to the existing IPv6 addresses that are already assigned to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses."
      },
      "Ipv6Addresses.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      }
    },
    "res": {
      "assignedIpv6Addresses": {
        "type": "Array of strings",
        "desc": "The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included."
      },
      "networkInterfaceId": {
        "type": "String",
        "desc": "The ID of the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssignPrivateIpAddresses",
    "req": {
      "AllowReassignment": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      },
      "PrivateIpAddress.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range."
      },
      "SecondaryPrivateIpAddressCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses."
      }
    },
    "res": {
      "assignedPrivateIpAddressesSet": {
        "type": "Array of AssignedPrivateIpAddress objects",
        "desc": "The private IP addresses assigned to the network interface."
      },
      "networkInterfaceId": {
        "type": "String",
        "desc": "The ID of the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateAddress",
    "req": {
      "AllocationId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The allocation ID. This is required for EC2-VPC."
      },
      "AllowReassociation": {
        "type": "Boolean",
        "required": "No",
        "desc": "[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both."
      },
      "PrivateIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address."
      },
      "PublicIp": {
        "type": "String",
        "required": "No",
        "desc": "The Elastic IP address to associate with the instance. This is required for EC2-Classic."
      }
    },
    "res": {
      "associationId": {
        "type": "String",
        "desc": "[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateClientVpnTargetNetwork",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the subnet to associate with the Client VPN endpoint."
      }
    },
    "res": {
      "associationId": {
        "type": "String",
        "desc": "The unique ID of the target network association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "AssociationStatus object",
        "desc": "The current state of the target network association."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateDhcpOptions",
    "req": {
      "DhcpOptionsId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the DHCP options set, or default to associate no DHCP options with the VPC."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateEnclaveCertificateIamRole",
    "req": {
      "CertificateArn": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The ARN of the ACM certificate with which to associate the IAM role."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RoleArn": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate."
      }
    },
    "res": {
      "certificateS3BucketName": {
        "type": "String",
        "desc": "The name of the Amazon S3 bucket to which the certificate was uploaded."
      },
      "certificateS3ObjectKey": {
        "type": "String",
        "desc": "The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: certificate_arn/role_arn."
      },
      "encryptionKmsKeyId": {
        "type": "String",
        "desc": "The ID of the AWS KMS CMK used to encrypt the private key of the certificate."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateIamInstanceProfile",
    "req": {
      "IamInstanceProfile": {
        "type": "IamInstanceProfileSpecification object",
        "required": "Yes",
        "desc": "The IAM instance profile."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "iamInstanceProfileAssociation": {
        "type": "IamInstanceProfileAssociation object",
        "desc": "Information about the IAM instance profile association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the internet gateway or virtual private gateway."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      },
      "SubnetId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the subnet."
      }
    },
    "res": {
      "associationId": {
        "type": "String",
        "desc": "The route table association ID. This ID is required for disassociating the route table."
      },
      "associationState": {
        "type": "RouteTableAssociationState object",
        "desc": "The state of the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateSubnetCidrBlock",
    "req": {
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of your subnet."
      }
    },
    "res": {
      "ipv6CidrBlockAssociation": {
        "type": "SubnetIpv6CidrBlockAssociation object",
        "desc": "Information about the IPv6 CIDR block association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "subnetId": {
        "type": "String",
        "desc": "The ID of the subnet."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateTransitGatewayMulticastDomain",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the subnets to associate with the transit gateway multicast domain."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway attachment to associate with the transit gateway multicast domain."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "associations": {
        "type": "TransitGatewayMulticastDomainAssociations object",
        "desc": "Information about the transit gateway multicast domain associations."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateTransitGatewayRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "association": {
        "type": "TransitGatewayAssociation object",
        "desc": "The ID of the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AssociateVpcCidrBlock",
    "req": {
      "AmazonProvidedIpv6CidrBlock": {
        "type": "Boolean",
        "required": "No",
        "desc": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block."
      },
      "CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "An IPv4 CIDR block to associate with the VPC."
      },
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter."
      },
      "Ipv6CidrBlockNetworkBorderGroup": {
        "type": "String",
        "required": "No",
        "desc": "The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CIDR block to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter. You can have one IPv6 CIDR block association per network border group."
      },
      "Ipv6Pool": {
        "type": "String",
        "required": "No",
        "desc": "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "cidrBlockAssociation": {
        "type": "VpcCidrBlockAssociation object",
        "desc": "Information about the IPv4 CIDR block association."
      },
      "ipv6CidrBlockAssociation": {
        "type": "VpcIpv6CidrBlockAssociation object",
        "desc": "Information about the IPv6 CIDR block association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcId": {
        "type": "String",
        "desc": "The ID of the VPC."
      }
    },
    "err": {}
  },
  {
    "title": "AttachClassicLinkVpc",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of a ClassicLink-enabled VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "AttachInternetGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InternetGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the internet gateway."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "AttachNetworkInterface",
    "req": {
      "DeviceIndex": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The index of the device for the network interface attachment."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "NetworkCardIndex": {
        "type": "Integer",
        "required": "No",
        "desc": "The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      }
    },
    "res": {
      "attachmentId": {
        "type": "String",
        "desc": "The ID of the network interface attachment."
      },
      "networkCardIndex": {
        "type": "Integer",
        "desc": "The index of the network card."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AttachVolume",
    "req": {
      "Device": {
        "type": "String",
        "required": "Yes",
        "desc": "The device name (for example, /dev/sdh or xvdh)."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EBS volume. The volume and instance must be within the same Availability Zone."
      }
    },
    "res": {
      "attachTime": {
        "type": "Timestamp",
        "desc": "The time stamp when the attachment initiated."
      },
      "deleteOnTermination": {
        "type": "Boolean",
        "desc": "Indicates whether the EBS volume is deleted on instance termination."
      },
      "device": {
        "type": "String",
        "desc": "The device name."
      },
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "String",
        "desc": "The attachment state of the volume."
      },
      "volumeId": {
        "type": "String",
        "desc": "The ID of the volume."
      }
    },
    "err": {}
  },
  {
    "title": "AttachVpnGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      },
      "VpnGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual private gateway."
      }
    },
    "res": {
      "attachment": {
        "type": "VpcAttachment object",
        "desc": "Information about the attachment."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "AuthorizeClientVpnIngress",
    "req": {
      "AccessGroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if AuthorizeAllGroups is false or not specified."
      },
      "AuthorizeAllGroups": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to grant access to all clients. Specify true to grant all clients who successfully establish a VPN connection access to the network. Must be set to true if AccessGroupId is not specified."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A brief description of the authorization rule."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TargetNetworkCidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 address range, in CIDR notation, of the network for which access is being authorized."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnAuthorizationRuleStatus object",
        "desc": "The current state of the authorization rule."
      }
    },
    "err": {}
  },
  {
    "title": "AuthorizeSecurityGroupEgress",
    "req": {
      "CidrIp": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the CIDR."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FromPort": {
        "type": "Integer",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the port."
      },
      "GroupId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the security group."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "No",
        "desc": "The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions."
      },
      "IpProtocol": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the protocol name or number."
      },
      "SourceSecurityGroupName": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify a destination security group."
      },
      "SourceSecurityGroupOwnerId": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify a destination security group."
      },
      "ToPort": {
        "type": "Integer",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the port."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "AuthorizeSecurityGroupIngress",
    "req": {
      "CidrIp": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FromPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all types. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule."
      },
      "GroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "No",
        "desc": "The sets of IP permissions."
      },
      "IpProtocol": {
        "type": "String",
        "required": "No",
        "desc": "The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). To specify icmpv6, use a set of IP permissions. [VPC only] Use -1 to specify all protocols. If you specify -1 or a protocol other than tcp, udp, or icmp, traffic on all ports is allowed, regardless of any ports you specify. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule."
      },
      "SourceSecurityGroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC."
      },
      "SourceSecurityGroupOwnerId": {
        "type": "String",
        "required": "No",
        "desc": "[nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead."
      },
      "ToPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all codes. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "BundleInstance",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance to bundle."
      },
      "Storage": {
        "type": "Storage object",
        "required": "Yes",
        "desc": "The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error."
      }
    },
    "res": {
      "bundleInstanceTask": {
        "type": "BundleTask object",
        "desc": "Information about the bundle task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CancelBundleTask",
    "req": {
      "BundleId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the bundle task."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "bundleInstanceTask": {
        "type": "BundleTask object",
        "desc": "Information about the bundle task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CancelCapacityReservation",
    "req": {
      "CapacityReservationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Capacity Reservation to be cancelled."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "CancelConversionTask",
    "req": {
      "ConversionTaskId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the conversion task."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ReasonMessage": {
        "type": "String",
        "required": "No",
        "desc": "The reason for canceling the conversion task."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "CancelExportTask",
    "req": {
      "ExportTaskId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the export task. This is the ID returned by CreateInstanceExportTask."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "CancelImportTask",
    "req": {
      "CancelReason": {
        "type": "String",
        "required": "No",
        "desc": "The reason for canceling the task."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImportTaskId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the import image or import snapshot task to be canceled."
      }
    },
    "res": {
      "importTaskId": {
        "type": "String",
        "desc": "The ID of the task being canceled."
      },
      "previousState": {
        "type": "String",
        "desc": "The current state of the task being canceled."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "state": {
        "type": "String",
        "desc": "The current state of the task being canceled."
      }
    },
    "err": {}
  },
  {
    "title": "CancelReservedInstancesListing",
    "req": {
      "ReservedInstancesListingId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Reserved Instance listing."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesListingsSet": {
        "type": "Array of ReservedInstancesListing objects",
        "desc": "The Reserved Instance listing."
      }
    },
    "err": {}
  },
  {
    "title": "CancelSpotFleetRequests",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SpotFleetRequestId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Spot Fleet requests."
      },
      "TerminateInstances": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successfulFleetRequestSet": {
        "type": "Array of CancelSpotFleetRequestsSuccessItem objects",
        "desc": "Information about the Spot Fleet requests that are successfully canceled."
      },
      "unsuccessfulFleetRequestSet": {
        "type": "Array of CancelSpotFleetRequestsErrorItem objects",
        "desc": "Information about the Spot Fleet requests that are not successfully canceled."
      }
    },
    "err": {}
  },
  {
    "title": "CancelSpotInstanceRequests",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SpotInstanceRequestId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more Spot Instance request IDs."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotInstanceRequestSet": {
        "type": "Array of CancelledSpotInstanceRequest objects",
        "desc": "One or more Spot Instance requests."
      }
    },
    "err": {}
  },
  {
    "title": "ConfirmProductInstance",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "ProductCode": {
        "type": "String",
        "required": "Yes",
        "desc": "The product code. This must be a product code that you own."
      }
    },
    "res": {
      "ownerId": {
        "type": "String",
        "desc": "The AWS account ID of the instance owner. This is only present if the product code is attached to the instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance."
      }
    },
    "err": {}
  },
  {
    "title": "CopyFpgaImage",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description for the new AFI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Name": {
        "type": "String",
        "required": "No",
        "desc": "The name for the new AFI. The default is the name of the source AFI."
      },
      "SourceFpgaImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the source AFI."
      },
      "SourceRegion": {
        "type": "String",
        "required": "Yes",
        "desc": "The Region that contains the source AFI."
      }
    },
    "res": {
      "fpgaImageId": {
        "type": "String",
        "desc": "The ID of the new AFI."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CopyImage",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the new AMI in the destination Region."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide."
      },
      "KmsKeyId": {
        "type": "String",
        "required": "No",
        "desc": "The identifier of the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating encrypted volumes. If this parameter is not specified, your AWS managed CMK for EBS is used. If you specify a CMK, you must also set the encrypted state to true. You can specify a CMK using any of the following: AWS authenticates the CMK asynchronously. Therefore, if you specify an identifier that is not valid, the action can appear to complete, but eventually fails. The specified CMK must exist in the destination Region. Amazon EBS does not support asymmetric CMKs."
      },
      "Name": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the new AMI in the destination Region."
      },
      "SourceImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AMI to copy."
      },
      "SourceRegion": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the Region that contains the AMI to copy."
      }
    },
    "res": {
      "imageId": {
        "type": "String",
        "desc": "The ID of the new AMI."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CopySnapshot",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the EBS snapshot."
      },
      "DestinationRegion": {
        "type": "String",
        "required": "No",
        "desc": "The destination Region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, ec2.us-east-1.amazonaws.com)."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see Amazon EBS encryption in the Amazon Elastic Compute Cloud User Guide."
      },
      "KmsKeyId": {
        "type": "String",
        "required": "No",
        "desc": "The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following: AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails."
      },
      "PresignedUrl": {
        "type": "String",
        "required": "No",
        "desc": "When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests: Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state."
      },
      "SourceRegion": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Region that contains the snapshot to be copied."
      },
      "SourceSnapshotId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EBS snapshot to copy."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the new snapshot."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotId": {
        "type": "String",
        "desc": "The ID of the new snapshot."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags applied to the new snapshot."
      }
    },
    "err": {}
  },
  {
    "title": "CreateCapacityReservation",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "No",
        "desc": "The Availability Zone in which to create the Capacity Reservation."
      },
      "AvailabilityZoneId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the Availability Zone in which to create the Capacity Reservation."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EbsOptimized": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance."
      },
      "EndDate": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019."
      },
      "EndDateType": {
        "type": "String",
        "required": "No",
        "desc": "Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:"
      },
      "EphemeralStorage": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether the Capacity Reservation supports instances with temporary, block-level storage."
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The number of instances for which to reserve capacity."
      },
      "InstanceMatchCriteria": {
        "type": "String",
        "required": "No",
        "desc": "Indicates the type of instance launches that the Capacity Reservation accepts. The options include: Default: open"
      },
      "InstancePlatform": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of operating system for which to reserve capacity."
      },
      "InstanceType": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance type for which to reserve capacity. For more information, see Instance types in the Amazon EC2 User Guide."
      },
      "TagSpecifications.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Capacity Reservation during launch."
      },
      "Tenancy": {
        "type": "String",
        "required": "No",
        "desc": "Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:"
      }
    },
    "res": {
      "capacityReservation": {
        "type": "CapacityReservation object",
        "desc": "Information about the Capacity Reservation."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateCarrierGateway",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to associate with the carrier gateway."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC to associate with the carrier gateway."
      }
    },
    "res": {
      "carrierGateway": {
        "type": "CarrierGateway object",
        "desc": "Information about the carrier gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateClientVpnEndpoint",
    "req": {
      "Authentication.N": {
        "type": "Array of ClientVpnAuthenticationRequest objects",
        "required": "Yes",
        "desc": "Information about the authentication method to be used to authenticate clients."
      },
      "ClientCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater."
      },
      "ClientConnectOptions": {
        "type": "ClientConnectOptions object",
        "required": "No",
        "desc": "The options for managing connection authorization for new client connections."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "ConnectionLogOptions": {
        "type": "ConnectionLogOptions object",
        "required": "Yes",
        "desc": "Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:"
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A brief description of the Client VPN endpoint."
      },
      "DnsServers.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups."
      },
      "SelfServicePortal": {
        "type": "String",
        "required": "No",
        "desc": "Specify whether to enable the self-service portal for the Client VPN endpoint. Default Value: enabled"
      },
      "ServerCertificateArn": {
        "type": "String",
        "required": "Yes",
        "desc": "The ARN of the server certificate. For more information, see the AWS Certificate Manager User Guide."
      },
      "SplitTunnel": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint. By default, split-tunnel on a VPN endpoint is disabled. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Client VPN endpoint during creation."
      },
      "TransportProtocol": {
        "type": "String",
        "required": "No",
        "desc": "The transport protocol to be used by the VPN session. Default value: udp"
      },
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied."
      },
      "VpnPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194 Default Value: 443"
      }
    },
    "res": {
      "clientVpnEndpointId": {
        "type": "String",
        "desc": "The ID of the Client VPN endpoint."
      },
      "dnsName": {
        "type": "String",
        "desc": "The DNS name to be used by clients when establishing their VPN session."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnEndpointStatus object",
        "desc": "The current state of the Client VPN endpoint."
      }
    },
    "err": {}
  },
  {
    "title": "CreateClientVpnRoute",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint to which to add the route."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A brief description of the route."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 address range, in CIDR notation, of the route destination. For example:"
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TargetVpcSubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint. Alternatively, if you're adding a route for the local network, specify local."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnRouteStatus object",
        "desc": "The current state of the route."
      }
    },
    "err": {}
  },
  {
    "title": "CreateCustomerGateway",
    "req": {
      "BgpAsn": {
        "type": "Integer",
        "required": "Yes",
        "desc": "For devices that support BGP, the customer gateway's BGP ASN. Default: 65000"
      },
      "CertificateArn": {
        "type": "String",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) for the customer gateway certificate."
      },
      "DeviceName": {
        "length": "Up to 255 characters.",
        "type": "String",
        "required": "No",
        "desc": "A name for the customer gateway device."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "IpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The Internet-routable IP address for the customer gateway's outside interface. The address must be static."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the customer gateway."
      },
      "Type": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of VPN connection that this customer gateway supports (ipsec.1)."
      }
    },
    "res": {
      "customerGateway": {
        "type": "CustomerGateway object",
        "desc": "Information about the customer gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateDefaultSubnet",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "Yes",
        "desc": "The Availability Zone in which to create the default subnet."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "subnet": {
        "type": "Subnet object",
        "desc": "Information about the subnet."
      }
    },
    "err": {}
  },
  {
    "title": "CreateDefaultVpc",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpc": {
        "type": "Vpc object",
        "desc": "Information about the VPC."
      }
    },
    "err": {}
  },
  {
    "title": "CreateDhcpOptions",
    "req": {
      "DhcpConfiguration.N": {
        "type": "Array of NewDhcpConfiguration objects",
        "required": "Yes",
        "desc": "A DHCP configuration option."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the DHCP option."
      }
    },
    "res": {
      "dhcpOptions": {
        "type": "DhcpOptions object",
        "desc": "A set of DHCP options."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateEgressOnlyInternetGateway",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the egress-only internet gateway."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC for which to create the egress-only internet gateway."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
      },
      "egressOnlyInternetGateway": {
        "type": "EgressOnlyInternetGateway object",
        "desc": "Information about the egress-only internet gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateFleet",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ExcessCapacityTerminationPolicy": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet."
      },
      "LaunchTemplateConfigs.N": {
        "type": "Array of FleetLaunchTemplateConfigRequest objects",
        "required": "Yes",
        "desc": "The configuration for the EC2 Fleet."
      },
      "OnDemandOptions": {
        "type": "OnDemandOptionsRequest object",
        "required": "No",
        "desc": "Describes the configuration of On-Demand Instances in an EC2 Fleet."
      },
      "ReplaceUnhealthyInstances": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether EC2 Fleet should replace unhealthy instances."
      },
      "SpotOptions": {
        "type": "SpotOptionsRequest object",
        "required": "No",
        "desc": "Describes the configuration of Spot Instances in an EC2 Fleet."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The key-value pair for tagging the EC2 Fleet request on creation. The value for ResourceType must be fleet, otherwise the fleet request fails. To tag instances at launch, specify the tags in the launch template. For information about tagging after launch, see Tagging your resources."
      },
      "TargetCapacitySpecification": {
        "type": "TargetCapacitySpecificationRequest object",
        "required": "Yes",
        "desc": "The number of units to request."
      },
      "TerminateInstancesWithExpiration": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether running instances should be terminated when the EC2 Fleet expires."
      },
      "Type": {
        "type": "String",
        "required": "No",
        "desc": "The type of request. The default value is maintain. For more information, see EC2 Fleet request types in the Amazon EC2 User Guide."
      },
      "ValidFrom": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately."
      },
      "ValidUntil": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it."
      }
    },
    "res": {
      "errorSet": {
        "type": "Array of CreateFleetError objects",
        "desc": "Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant."
      },
      "fleetId": {
        "type": "String",
        "desc": "The ID of the EC2 Fleet."
      },
      "fleetInstanceSet": {
        "type": "Array of CreateFleetInstance objects",
        "desc": "Information about the instances that were launched by the fleet. Valid only when Type is set to instant."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateFlowLogs",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DeliverLogsPermissionArn": {
        "type": "String",
        "required": "No",
        "desc": "The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LogDestination": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType. If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called my-logs, specify arn:aws:logs:us-east-1:123456789012:log-group:my-logs. Alternatively, use LogGroupName instead. If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example, to specify a subfolder named my-logs in a bucket named my-bucket, use the following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as a subfolder name. This is a reserved term."
      },
      "LogDestinationType": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log data to Amazon S3, specify s3. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName. Default: cloud-watch-logs"
      },
      "LogFormat": {
        "type": "String",
        "required": "No",
        "desc": "The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see Flow Log Records. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field. Specify the fields using the ${field-id} format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value."
      },
      "LogGroupName": {
        "type": "String",
        "required": "No",
        "desc": "The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName."
      },
      "MaxAggregationInterval": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes). When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600"
      },
      "ResourceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The ID of the subnet, network interface, or VPC for which you want to create a flow log. Constraints: Maximum of 1000 resources"
      },
      "ResourceType": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the flow logs."
      },
      "TrafficType": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
      },
      "flowLogIdSet": {
        "type": "Array of strings",
        "desc": "The IDs of the flow logs."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the flow logs that could not be created successfully."
      }
    },
    "err": {}
  },
  {
    "title": "CreateFpgaImage",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the AFI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InputStorageLocation": {
        "type": "StorageLocation object",
        "required": "Yes",
        "desc": "The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball."
      },
      "LogsStorageLocation": {
        "type": "StorageLocation object",
        "required": "No",
        "desc": "The location in Amazon S3 for the output logs."
      },
      "Name": {
        "type": "String",
        "required": "No",
        "desc": "A name for the AFI."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the FPGA image during creation."
      }
    },
    "res": {
      "fpgaImageGlobalId": {
        "type": "String",
        "desc": "The global FPGA image identifier (AGFI ID)."
      },
      "fpgaImageId": {
        "type": "String",
        "desc": "The FPGA image identifier (AFI ID)."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateImage",
    "req": {
      "BlockDeviceMapping.N": {
        "type": "Array of BlockDeviceMapping objects",
        "required": "No",
        "desc": "The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the CopyImage action."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the new image."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "Name": {
        "type": "String",
        "required": "Yes",
        "desc": "A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)"
      },
      "NoReboot": {
        "type": "Boolean",
        "required": "No",
        "desc": "By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the No Reboot option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the snapshots, or both. If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags."
      }
    },
    "res": {
      "imageId": {
        "type": "String",
        "desc": "The ID of the new AMI."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateInstanceExportTask",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the conversion task or the resource being exported. The maximum length is 255 characters."
      },
      "ExportToS3": {
        "type": "ExportToS3TaskSpecification object",
        "required": "Yes",
        "desc": "The format and location for an export instance task."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the export instance task during creation."
      },
      "TargetEnvironment": {
        "type": "String",
        "required": "Yes",
        "desc": "The target virtualization environment."
      }
    },
    "res": {
      "exportTask": {
        "type": "ExportTask object",
        "desc": "Information about the export instance task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateInternetGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the internet gateway."
      }
    },
    "res": {
      "internetGateway": {
        "type": "InternetGateway object",
        "desc": "Information about the internet gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateKeyPair",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "KeyName": {
        "type": "String",
        "required": "Yes",
        "desc": "A unique name for the key pair. Constraints: Up to 255 ASCII characters"
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the new key pair."
      }
    },
    "res": {
      "keyFingerprint": {
        "type": "String",
        "desc": "The SHA-1 digest of the DER encoded private key."
      },
      "keyMaterial": {
        "type": "String",
        "desc": "An unencrypted PEM encoded RSA private key."
      },
      "keyName": {
        "type": "String",
        "desc": "The name of the key pair."
      },
      "keyPairId": {
        "type": "String",
        "desc": "The ID of the key pair."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags applied to the key pair."
      }
    },
    "err": {}
  },
  {
    "title": "CreateLaunchTemplate",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchTemplateData": {
        "type": "RequestLaunchTemplateData object",
        "required": "Yes",
        "desc": "The information for the launch template."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "Yes",
        "desc": "A name for the launch template."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the launch template during creation."
      },
      "VersionDescription": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 255.",
        "required": "No",
        "desc": "A description for the first version of the launch template."
      }
    },
    "res": {
      "launchTemplate": {
        "type": "LaunchTemplate object",
        "desc": "Information about the launch template."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "warning": {
        "type": "ValidationWarning object",
        "desc": "If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found."
      }
    },
    "err": {}
  },
  {
    "title": "CreateLaunchTemplateVersion",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchTemplateData": {
        "type": "RequestLaunchTemplateData object",
        "required": "Yes",
        "desc": "The information for the launch template."
      },
      "LaunchTemplateId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "The name of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "SourceVersion": {
        "type": "String",
        "required": "No",
        "desc": "The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included."
      },
      "VersionDescription": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 255.",
        "required": "No",
        "desc": "A description for the version of the launch template."
      }
    },
    "res": {
      "launchTemplateVersion": {
        "type": "LaunchTemplateVersion object",
        "desc": "Information about the launch template version."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "warning": {
        "type": "ValidationWarning object",
        "desc": "If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found."
      }
    },
    "err": {}
  },
  {
    "title": "CreateLocalGatewayRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR range used for destination matches. Routing decisions are based on the most specific match."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LocalGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the local gateway route table."
      },
      "LocalGatewayVirtualInterfaceGroupId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual interface group."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "route": {
        "type": "LocalGatewayRoute object",
        "desc": "Information about the route."
      }
    },
    "err": {}
  },
  {
    "title": "CreateLocalGatewayRouteTableVpcAssociation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LocalGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the local gateway route table."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the local gateway route table VPC association."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "localGatewayRouteTableVpcAssociation": {
        "type": "LocalGatewayRouteTableVpcAssociation object",
        "desc": "Information about the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateManagedPrefixList",
    "req": {
      "AddressFamily": {
        "type": "String",
        "required": "Yes",
        "desc": "The IP address type. Valid Values: IPv4 | IPv6"
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Up to 255 UTF-8 characters in length."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Entry.N": {
        "type": "Array of AddPrefixListEntry objects",
        "required": "No",
        "desc": "One or more entries for the prefix list."
      },
      "MaxEntries": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The maximum number of entries for the prefix list."
      },
      "PrefixListName": {
        "type": "String",
        "required": "Yes",
        "desc": "A name for the prefix list. Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the prefix list during creation."
      }
    },
    "res": {
      "prefixList": {
        "type": "ManagedPrefixList object",
        "desc": "Information about the prefix list."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNatGateway",
    "req": {
      "AllocationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The subnet in which to create the NAT gateway."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the NAT gateway."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request."
      },
      "natGateway": {
        "type": "NatGateway object",
        "desc": "Information about the NAT gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNetworkAcl",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the network ACL."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "networkAcl": {
        "type": "NetworkAcl object",
        "desc": "Information about the network ACL."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNetworkAclEntry",
    "req": {
      "CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Egress": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet)."
      },
      "Icmp": {
        "type": "IcmpTypeCode object",
        "required": "No",
        "desc": "ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block."
      },
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)."
      },
      "NetworkAclId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network ACL."
      },
      "PortRange": {
        "type": "PortRange object",
        "required": "No",
        "desc": "TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP)."
      },
      "Protocol": {
        "type": "String",
        "required": "Yes",
        "desc": "The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code."
      },
      "RuleAction": {
        "type": "String",
        "required": "Yes",
        "desc": "Indicates whether to allow or deny the traffic that matches the rule."
      },
      "RuleNumber": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNetworkInsightsPath",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "Yes",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "Destination": {
        "type": "String",
        "required": "Yes",
        "desc": "The AWS resource that is the destination of the path."
      },
      "DestinationIp": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 15.",
        "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}$",
        "required": "No",
        "desc": "The IP address of the AWS resource that is the destination of the path."
      },
      "DestinationPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The destination port."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Protocol": {
        "type": "String",
        "required": "Yes",
        "desc": "The protocol."
      },
      "Source": {
        "type": "String",
        "required": "Yes",
        "desc": "The AWS resource that is the source of the path."
      },
      "SourceIp": {
        "type": "String",
        "length": "Minimum length of 0. Maximum length of 15.",
        "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}$",
        "required": "No",
        "desc": "The IP address of the AWS resource that is the source of the path."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to add to the path."
      }
    },
    "res": {
      "networkInsightsPath": {
        "type": "NetworkInsightsPath object",
        "desc": "Information about the path."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNetworkInterface",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the network interface."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InterfaceType": {
        "type": "String",
        "required": "No",
        "desc": "Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide."
      },
      "Ipv6AddressCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting."
      },
      "Ipv6Addresses.N": {
        "type": "Array of InstanceIpv6Address objects",
        "required": "No",
        "desc": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses."
      },
      "PrivateIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary)."
      },
      "PrivateIpAddresses.N": {
        "type": "Array of PrivateIpAddressSpecification objects",
        "required": "No",
        "desc": "One or more private IPv4 addresses."
      },
      "SecondaryPrivateIpAddressCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more security groups."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the subnet to associate with the network interface."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the new network interface."
      }
    },
    "res": {
      "networkInterface": {
        "type": "NetworkInterface object",
        "desc": "Information about the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateNetworkInterfacePermission",
    "req": {
      "AwsAccountId": {
        "type": "String",
        "required": "No",
        "desc": "The AWS account ID."
      },
      "AwsService": {
        "type": "String",
        "required": "No",
        "desc": "The AWS service. Currently not supported."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      },
      "Permission": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of permission to grant."
      }
    },
    "res": {
      "interfacePermission": {
        "type": "NetworkInterfacePermission object",
        "desc": "Information about the permission for the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreatePlacementGroup",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters"
      },
      "PartitionCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of partitions. Valid only when Strategy is set to partition."
      },
      "Strategy": {
        "type": "String",
        "required": "No",
        "desc": "The placement strategy."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the new placement group."
      }
    },
    "res": {
      "placementGroup": {
        "type": "PlacementGroup object",
        "desc": "Describes a placement group."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateReservedInstancesListing",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "Yes",
        "desc": "Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency."
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call."
      },
      "PriceSchedules.N": {
        "type": "Array of PriceScheduleSpecification objects",
        "required": "Yes",
        "desc": "A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term."
      },
      "ReservedInstancesId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the active Standard Reserved Instance."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesListingsSet": {
        "type": "Array of ReservedInstancesListing objects",
        "desc": "Information about the Standard Reserved Instance listing."
      }
    },
    "err": {}
  },
  {
    "title": "CreateRoute",
    "req": {
      "CarrierGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the carrier gateway. You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18."
      },
      "DestinationIpv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match."
      },
      "DestinationPrefixListId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a prefix list used for the destination match."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EgressOnlyInternetGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "[IPv6 traffic only] The ID of an egress-only internet gateway."
      },
      "GatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of an internet gateway or virtual private gateway attached to your VPC."
      },
      "InstanceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached."
      },
      "LocalGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the local gateway."
      },
      "NatGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "[IPv4 traffic only] The ID of a NAT gateway."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a network interface."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table for the route."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a transit gateway."
      },
      "VpcEndpointId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a VPC peering connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "CreateRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the route table."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "routeTable": {
        "type": "RouteTable object",
        "desc": "Information about the route table."
      }
    },
    "err": {}
  },
  {
    "title": "CreateSecurityGroup",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupDescription": {
        "type": "String",
        "required": "Yes",
        "desc": "A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*"
      },
      "GroupName": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*"
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the security group."
      },
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The ID of the VPC. Required for EC2-VPC."
      }
    },
    "res": {
      "groupId": {
        "type": "String",
        "desc": "The ID of the security group."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "The tags assigned to the security group."
      }
    },
    "err": {}
  },
  {
    "title": "CreateSnapshot",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the snapshot."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the snapshot during creation."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EBS volume."
      }
    },
    "res": {
      "dataEncryptionKeyId": {
        "type": "String",
        "desc": "The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by DescribeSnapshots."
      },
      "description": {
        "type": "String",
        "desc": "The description for the snapshot."
      },
      "encrypted": {
        "type": "Boolean",
        "desc": "Indicates whether the snapshot is encrypted."
      },
      "kmsKeyId": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume."
      },
      "ownerAlias": {
        "type": "String",
        "desc": "The AWS owner alias, from an Amazon-maintained list (amazon). This is not the user-configured AWS account alias set using the IAM console."
      },
      "ownerId": {
        "type": "String",
        "desc": "The AWS account ID of the EBS snapshot owner."
      },
      "progress": {
        "type": "String",
        "desc": "The progress of the snapshot, as a percentage."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotId": {
        "type": "String",
        "desc": "The ID of the snapshot. Each snapshot receives a unique identifier when it is created."
      },
      "startTime": {
        "type": "Timestamp",
        "desc": "The time stamp when the snapshot was initiated."
      },
      "status": {
        "type": "String",
        "desc": "The snapshot state."
      },
      "statusMessage": {
        "type": "String",
        "desc": "Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by DescribeSnapshots."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags assigned to the snapshot."
      },
      "volumeId": {
        "type": "String",
        "desc": "The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose."
      },
      "volumeSize": {
        "type": "Integer",
        "desc": "The size of the volume, in GiB."
      }
    },
    "err": {}
  },
  {
    "title": "CreateSnapshots",
    "req": {
      "CopyTagsFromSource": {
        "type": "String",
        "required": "No",
        "desc": "Copies the tags from the specified volume to corresponding snapshot."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description propagated to every snapshot specified by the instance."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceSpecification": {
        "type": "InstanceSpecification object",
        "required": "Yes",
        "desc": "The instance to specify which volumes should be included in the snapshots."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "Tags to apply to every snapshot specified by the instance."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotSet": {
        "type": "Array of SnapshotInfo objects",
        "desc": "List of snapshots."
      }
    },
    "err": {}
  },
  {
    "title": "CreateSpotDatafeedSubscription",
    "req": {
      "Bucket": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For more information about bucket names, see Rules for bucket naming in the Amazon S3 Developer Guide."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Prefix": {
        "type": "String",
        "required": "No",
        "desc": "The prefix for the data feed file names."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotDatafeedSubscription": {
        "type": "SpotDatafeedSubscription object",
        "desc": "The Spot Instance data feed subscription."
      }
    },
    "err": {}
  },
  {
    "title": "CreateSubnet",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "No",
        "desc": "The Availability Zone or Local Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet. To create a subnet in a Local Zone, set this value to the Local Zone ID, for example us-west-2-lax-1a. For information about the Regions that support Local Zones, see Available Regions in the Amazon Elastic Compute Cloud User Guide. To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN."
      },
      "AvailabilityZoneId": {
        "type": "String",
        "required": "No",
        "desc": "The AZ ID or the Local Zone ID of the subnet."
      },
      "CidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length."
      },
      "OutpostArn": {
        "type": "String",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the subnet."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "subnet": {
        "type": "Subnet object",
        "desc": "Information about the subnet."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTags",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ResourceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches."
      },
      "Tag.N": {
        "type": "Array of Tag objects",
        "required": "Yes",
        "desc": "The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTrafficMirrorFilter",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description of the Traffic Mirror filter."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to a Traffic Mirror filter."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilter": {
        "type": "TrafficMirrorFilter object",
        "desc": "Information about the Traffic Mirror filter."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTrafficMirrorFilterRule",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description of the Traffic Mirror rule."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The destination CIDR block to assign to the Traffic Mirror rule."
      },
      "DestinationPortRange": {
        "type": "TrafficMirrorPortRangeRequest object",
        "required": "No",
        "desc": "The destination port range."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Protocol": {
        "type": "Integer",
        "required": "No",
        "desc": "The protocol, for example UDP, to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the Internet Assigned Numbers Authority (IANA) website."
      },
      "RuleAction": {
        "type": "String",
        "required": "Yes",
        "desc": "The action to take (accept | reject) on the filtered traffic."
      },
      "RuleNumber": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number."
      },
      "SourceCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The source CIDR block to assign to the Traffic Mirror rule."
      },
      "SourcePortRange": {
        "type": "TrafficMirrorPortRangeRequest object",
        "required": "No",
        "desc": "The source port range."
      },
      "TrafficDirection": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of traffic (ingress | egress)."
      },
      "TrafficMirrorFilterId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the filter that this rule is associated with."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilterRule": {
        "type": "TrafficMirrorFilterRule object",
        "desc": "The Traffic Mirror rule."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTrafficMirrorSession",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description of the Traffic Mirror session."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the source network interface."
      },
      "PacketLength": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. If you do not want to mirror the entire packet, use the PacketLength parameter to specify the number of bytes in each packet to mirror."
      },
      "SessionNumber": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to a Traffic Mirror session."
      },
      "TrafficMirrorFilterId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror filter."
      },
      "TrafficMirrorTargetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror target."
      },
      "VirtualNetworkId": {
        "type": "Integer",
        "required": "No",
        "desc": "The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorSession": {
        "type": "TrafficMirrorSession object",
        "desc": "Information about the Traffic Mirror session."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTrafficMirrorTarget",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description of the Traffic Mirror target."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "No",
        "desc": "The network interface ID that is associated with the target."
      },
      "NetworkLoadBalancerArn": {
        "type": "String",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the Traffic Mirror target."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorTarget": {
        "type": "TrafficMirrorTarget object",
        "desc": "Information about the Traffic Mirror target."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGateway",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description of the transit gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "TransitGatewayRequestOptions object",
        "required": "No",
        "desc": "The transit gateway options."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGateway": {
        "type": "TransitGateway object",
        "desc": "Information about the transit gateway."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayConnect",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "CreateTransitGatewayConnectRequestOptions object",
        "required": "Yes",
        "desc": "The Connect attachment options."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Connect attachment."
      },
      "TransportTransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway attachment. You can specify a VPC attachment or a AWS Direct Connect attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnect": {
        "type": "TransitGatewayConnect object",
        "desc": "Information about the Connect attachment."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayConnectPeer",
    "req": {
      "BgpOptions": {
        "type": "TransitGatewayConnectRequestBgpOptions object",
        "required": "No",
        "desc": "The BGP options for the Connect peer."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InsideCidrBlocks.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The range of inside IP addresses that are used for BGP peering. You must specify a size /29 IPv4 CIDR block from the 169.254.0.0/16 range. The first address from the range must be configured on the appliance as the BGP IP address. You can also optionally specify a size /125 IPv6 CIDR block from the fd00::/8 range."
      },
      "PeerAddress": {
        "type": "String",
        "required": "Yes",
        "desc": "The peer IP address (GRE outer IP address) on the appliance side of the Connect peer."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Connect peer."
      },
      "TransitGatewayAddress": {
        "type": "String",
        "required": "No",
        "desc": "The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns the first available IP address from the transit gateway CIDR block."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Connect attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnectPeer": {
        "type": "TransitGatewayConnectPeer object",
        "desc": "Information about the Connect peer."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayMulticastDomain",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "CreateTransitGatewayMulticastDomainRequestOptions object",
        "required": "No",
        "desc": "The options for the transit gateway multicast domain."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags for the transit gateway multicast domain."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayMulticastDomain": {
        "type": "TransitGatewayMulticastDomain object",
        "desc": "Information about the transit gateway multicast domain."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayPeeringAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PeerAccountId": {
        "type": "String",
        "required": "Yes",
        "desc": "The AWS account ID of the owner of the peer transit gateway."
      },
      "PeerRegion": {
        "type": "String",
        "required": "Yes",
        "desc": "The Region where the peer transit gateway is located."
      },
      "PeerTransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the peer transit gateway with which to create the peering attachment."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the transit gateway peering attachment."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPeeringAttachment": {
        "type": "TransitGatewayPeeringAttachment object",
        "desc": "The transit gateway peering attachment."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayPrefixListReference",
    "req": {
      "Blackhole": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to drop traffic that matches this route."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list that is used for destination matches."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the attachment to which traffic is routed."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPrefixListReference": {
        "type": "TransitGatewayPrefixListReference object",
        "desc": "Information about the prefix list reference."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayRoute",
    "req": {
      "Blackhole": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to drop traffic that matches this route."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR range used for destination matches. Routing decisions are based on the most specific match."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "route": {
        "type": "TransitGatewayRoute object",
        "desc": "Information about the route."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecifications.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the transit gateway route table."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayRouteTable": {
        "type": "TransitGatewayRouteTable object",
        "desc": "Information about the transit gateway route table."
      }
    },
    "err": {}
  },
  {
    "title": "CreateTransitGatewayVpcAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "CreateTransitGatewayVpcAttachmentRequestOptions object",
        "required": "No",
        "desc": "The VPC attachment options."
      },
      "SubnetIds.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet."
      },
      "TagSpecifications.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the VPC attachment."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachment": {
        "type": "TransitGatewayVpcAttachment object",
        "desc": "Information about the VPC attachment."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVolume",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "Yes",
        "desc": "The Availability Zone in which to create the volume."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether the volume should be encrypted. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Encryption by default in the Amazon Elastic Compute Cloud User Guide. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types."
      },
      "Iops": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type: For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System. Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard volumes."
      },
      "KmsKeyId": {
        "type": "String",
        "required": "No",
        "desc": "The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following: AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails."
      },
      "MultiAttachEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 Instances built on the Nitro System in the same Availability Zone. This parameter is supported with io1 and io2 volumes only. For more information, see Amazon EBS Multi-Attach in the Amazon Elastic Compute Cloud User Guide."
      },
      "OutpostArn": {
        "type": "String",
        "required": "No",
        "desc": "The Amazon Resource Name (ARN) of the Outpost."
      },
      "Size": {
        "type": "Integer",
        "required": "No",
        "desc": "The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:"
      },
      "SnapshotId": {
        "type": "String",
        "required": "No",
        "desc": "The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the volume during creation."
      },
      "Throughput": {
        "type": "Integer",
        "required": "No",
        "desc": "The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000."
      },
      "VolumeType": {
        "type": "String",
        "required": "No",
        "desc": "The volume type. This parameter can be one of the following values: For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Default: gp2"
      }
    },
    "res": {
      "attachmentSet": {
        "type": "Array of VolumeAttachment objects",
        "desc": "Information about the volume attachments."
      },
      "availabilityZone": {
        "type": "String",
        "desc": "The Availability Zone for the volume."
      },
      "createTime": {
        "type": "Timestamp",
        "desc": "The time stamp when volume creation was initiated."
      },
      "encrypted": {
        "type": "Boolean",
        "desc": "Indicates whether the volume is encrypted."
      },
      "fastRestored": {
        "type": "Boolean",
        "desc": "Indicates whether the volume was created using fast snapshot restore."
      },
      "iops": {
        "type": "Integer",
        "desc": "The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting."
      },
      "kmsKeyId": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume."
      },
      "multiAttachEnabled": {
        "type": "Boolean",
        "desc": "Indicates whether Amazon EBS Multi-Attach is enabled."
      },
      "outpostArn": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the Outpost."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "size": {
        "type": "Integer",
        "desc": "The size of the volume, in GiBs."
      },
      "snapshotId": {
        "type": "String",
        "desc": "The snapshot from which the volume was created, if applicable."
      },
      "status": {
        "type": "String",
        "desc": "The volume state."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags assigned to the volume."
      },
      "throughput": {
        "type": "Integer",
        "desc": "The throughput that the volume supports, in MiB/s."
      },
      "volumeId": {
        "type": "String",
        "desc": "The ID of the volume."
      },
      "volumeType": {
        "type": "String",
        "desc": "The volume type."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpc",
    "req": {
      "AmazonProvidedIpv6CidrBlock": {
        "type": "Boolean",
        "required": "No",
        "desc": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block."
      },
      "CidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceTenancy": {
        "type": "String",
        "required": "No",
        "desc": "The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC. Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default"
      },
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter."
      },
      "Ipv6CidrBlockNetworkBorderGroup": {
        "type": "String",
        "required": "No",
        "desc": "The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter."
      },
      "Ipv6Pool": {
        "type": "String",
        "required": "No",
        "desc": "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpc": {
        "type": "Vpc object",
        "desc": "Information about the VPC."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpcEndpoint",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PolicyDocument": {
        "type": "String",
        "required": "No",
        "desc": "(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service."
      },
      "PrivateDnsEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "(Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: true"
      },
      "RouteTableId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Gateway endpoint) One or more route table IDs."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface."
      },
      "ServiceName": {
        "type": "String",
        "required": "Yes",
        "desc": "The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider."
      },
      "SubnetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to associate with the endpoint."
      },
      "VpcEndpointType": {
        "type": "String",
        "required": "No",
        "desc": "The type of endpoint. Default: Gateway"
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC in which the endpoint will be used."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcEndpoint": {
        "type": "VpcEndpoint object",
        "desc": "Information about the endpoint."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpcEndpointConnectionNotification",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "ConnectionEvents.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject."
      },
      "ConnectionNotificationArn": {
        "type": "String",
        "required": "Yes",
        "desc": "The ARN of the SNS topic for the notifications."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ServiceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the endpoint service."
      },
      "VpcEndpointId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the endpoint."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
      },
      "connectionNotification": {
        "type": "ConnectionNotification object",
        "desc": "Information about the notification."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpcEndpointServiceConfiguration",
    "req": {
      "AcceptanceRequired": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use AcceptVpcEndpointConnections."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GatewayLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers."
      },
      "NetworkLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service."
      },
      "PrivateDnsName": {
        "type": "String",
        "required": "No",
        "desc": "(Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to associate with the service."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "serviceConfiguration": {
        "type": "ServiceConfiguration object",
        "desc": "Information about the service configuration."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpcPeeringConnection",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PeerOwnerId": {
        "type": "String",
        "required": "No",
        "desc": "The AWS account ID of the owner of the accepter VPC. Default: Your AWS account ID"
      },
      "PeerRegion": {
        "type": "String",
        "required": "No",
        "desc": "The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request. Default: The Region in which you make the request."
      },
      "PeerVpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to assign to the peering connection."
      },
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the requester VPC. You must specify this parameter in the request."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcPeeringConnection": {
        "type": "VpcPeeringConnection object",
        "desc": "Information about the VPC peering connection."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpnConnection",
    "req": {
      "CustomerGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the customer gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "VpnConnectionOptionsSpecification object",
        "required": "No",
        "desc": "The options for the VPN connection."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the VPN connection."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway."
      },
      "Type": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of VPN connection (ipsec.1)."
      },
      "VpnGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnection": {
        "type": "VpnConnection object",
        "desc": "Information about the VPN connection."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpnConnectionRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR block associated with the local subnet of the customer network."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPN connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "CreateVpnGateway",
    "req": {
      "AmazonSideAsn": {
        "type": "Long",
        "required": "No",
        "desc": "A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512"
      },
      "AvailabilityZone": {
        "type": "String",
        "required": "No",
        "desc": "The Availability Zone for the virtual private gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the virtual private gateway."
      },
      "Type": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of VPN connection this virtual private gateway supports."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnGateway": {
        "type": "VpnGateway object",
        "desc": "Information about the virtual private gateway."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteCarrierGateway",
    "req": {
      "CarrierGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the carrier gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "carrierGateway": {
        "type": "CarrierGateway object",
        "desc": "Information about the carrier gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteClientVpnEndpoint",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN to be deleted."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnEndpointStatus object",
        "desc": "The current state of the Client VPN endpoint."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteClientVpnRoute",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint from which the route is to be deleted."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 address range, in CIDR notation, of the route to be deleted."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TargetVpcSubnetId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the target subnet used by the route."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnRouteStatus object",
        "desc": "The current state of the route."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteCustomerGateway",
    "req": {
      "CustomerGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the customer gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteDhcpOptions",
    "req": {
      "DhcpOptionsId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the DHCP options set."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteEgressOnlyInternetGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EgressOnlyInternetGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the egress-only internet gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "returnCode": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteFleets",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FleetId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the EC2 Fleets."
      },
      "TerminateInstances": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to terminate the instances. To let the instances continue to run after the EC2 Fleet is deleted, specify NoTerminateInstances. Supported only for fleets of type maintain and request. For instant fleets, you cannot specify NoTerminateInstances. A deleted instant fleet with running instances is not supported."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successfulFleetDeletionSet": {
        "type": "Array of DeleteFleetSuccessItem objects",
        "desc": "Information about the EC2 Fleets that are successfully deleted."
      },
      "unsuccessfulFleetDeletionSet": {
        "type": "Array of DeleteFleetErrorItem objects",
        "desc": "Information about the EC2 Fleets that are not successfully deleted."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteFlowLogs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FlowLogId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the flow logs that could not be deleted successfully."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteFpgaImage",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FpgaImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AFI."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteInternetGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InternetGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the internet gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteKeyPair",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "KeyName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the key pair."
      },
      "KeyPairId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the key pair."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteLaunchTemplate",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchTemplateId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "The name of the launch template. You must specify either the launch template ID or launch template name in the request."
      }
    },
    "res": {
      "launchTemplate": {
        "type": "LaunchTemplate object",
        "desc": "Information about the launch template."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteLaunchTemplateVersions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchTemplateId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "The name of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "LaunchTemplateVersion.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The version numbers of one or more launch template versions to delete."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successfullyDeletedLaunchTemplateVersionSet": {
        "type": "Array of DeleteLaunchTemplateVersionsResponseSuccessItem objects",
        "desc": "Information about the launch template versions that were successfully deleted."
      },
      "unsuccessfullyDeletedLaunchTemplateVersionSet": {
        "type": "Array of DeleteLaunchTemplateVersionsResponseErrorItem objects",
        "desc": "Information about the launch template versions that could not be deleted."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteLocalGatewayRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR range for the route. This must match the CIDR for the route exactly."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LocalGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the local gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "route": {
        "type": "LocalGatewayRoute object",
        "desc": "Information about the route."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteLocalGatewayRouteTableVpcAssociation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LocalGatewayRouteTableVpcAssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the association."
      }
    },
    "res": {
      "localGatewayRouteTableVpcAssociation": {
        "type": "LocalGatewayRouteTableVpcAssociation object",
        "desc": "Information about the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteManagedPrefixList",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      }
    },
    "res": {
      "prefixList": {
        "type": "ManagedPrefixList object",
        "desc": "Information about the prefix list."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNatGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NatGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the NAT gateway."
      }
    },
    "res": {
      "natGatewayId": {
        "type": "String",
        "desc": "The ID of the NAT gateway."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkAcl",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkAclId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network ACL."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkAclEntry",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Egress": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether the rule is an egress rule."
      },
      "NetworkAclId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network ACL."
      },
      "RuleNumber": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The rule number of the entry to delete."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkInsightsAnalysis",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInsightsAnalysisId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network insights analysis."
      }
    },
    "res": {
      "networkInsightsAnalysisId": {
        "type": "String",
        "desc": "The ID of the network insights analysis."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkInsightsPath",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInsightsPathId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the path."
      }
    },
    "res": {
      "networkInsightsPathId": {
        "type": "String",
        "desc": "The ID of the path."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkInterface",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteNetworkInterfacePermission",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Force": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specify true to remove the permission even if the network interface is attached to an instance."
      },
      "NetworkInterfacePermissionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface permission."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds, otherwise returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DeletePlacementGroup",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupName": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the placement group."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteQueuedReservedInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ReservedInstancesId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Reserved Instances."
      }
    },
    "res": {
      "failedQueuedPurchaseDeletionSet": {
        "type": "Array of FailedQueuedPurchaseDeletion objects",
        "desc": "Information about the queued purchases that could not be deleted."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successfulQueuedPurchaseDeletionSet": {
        "type": "Array of SuccessfulQueuedPurchaseDeletion objects",
        "desc": "Information about the queued purchases that were successfully deleted."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly."
      },
      "DestinationIpv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly."
      },
      "DestinationPrefixListId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the prefix list for the route."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteSecurityGroup",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the security group. Required for a nondefault VPC."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteSnapshot",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SnapshotId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EBS snapshot."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteSpotDatafeedSubscription",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteSubnet",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the subnet."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTags",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ResourceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches."
      },
      "Tag.N": {
        "type": "Array of Tag objects",
        "required": "No",
        "desc": "The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the aws: prefix)."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTrafficMirrorFilter",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TrafficMirrorFilterId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror filter."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilterId": {
        "type": "String",
        "desc": "The ID of the Traffic Mirror filter."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTrafficMirrorFilterRule",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TrafficMirrorFilterRuleId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror rule."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilterRuleId": {
        "type": "String",
        "desc": "The ID of the deleted Traffic Mirror rule."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTrafficMirrorSession",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TrafficMirrorSessionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror session."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorSessionId": {
        "type": "String",
        "desc": "The ID of the deleted Traffic Mirror session."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTrafficMirrorTarget",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TrafficMirrorTargetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror target."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorTargetId": {
        "type": "String",
        "desc": "The ID of the deleted Traffic Mirror target."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGateway": {
        "type": "TransitGateway object",
        "desc": "Information about the deleted transit gateway."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayConnect",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Connect attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnect": {
        "type": "TransitGatewayConnect object",
        "desc": "Information about the deleted Connect attachment."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayConnectPeer",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayConnectPeerId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Connect peer."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnectPeer": {
        "type": "TransitGatewayConnectPeer object",
        "desc": "Information about the deleted Connect peer."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayMulticastDomain",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayMulticastDomain": {
        "type": "TransitGatewayMulticastDomain object",
        "desc": "Information about the deleted transit gateway multicast domain."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayPeeringAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway peering attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPeeringAttachment": {
        "type": "TransitGatewayPeeringAttachment object",
        "desc": "The transit gateway peering attachment."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayPrefixListReference",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPrefixListReference": {
        "type": "TransitGatewayPrefixListReference object",
        "desc": "Information about the deleted prefix list reference."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR range for the route. This must match the CIDR for the route exactly."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "route": {
        "type": "TransitGatewayRoute object",
        "desc": "Information about the route."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayRouteTable": {
        "type": "TransitGatewayRouteTable object",
        "desc": "Information about the deleted transit gateway route table."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteTransitGatewayVpcAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachment": {
        "type": "TransitGatewayVpcAttachment object",
        "desc": "Information about the deleted VPC attachment."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVolume",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpc",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpcEndpointConnectionNotifications",
    "req": {
      "ConnectionNotificationId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more notification IDs."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the notifications that could not be deleted successfully."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpcEndpoints",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcEndpointId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more VPC endpoint IDs."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the VPC endpoints that were not successfully deleted."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpcEndpointServiceConfigurations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ServiceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more services."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the service configurations that were not deleted, if applicable."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpcPeeringConnection",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC peering connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpnConnection",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPN connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpnConnectionRoute",
    "req": {
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR block associated with the local subnet of the customer network."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPN connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeleteVpnGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpnGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual private gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeprovisionByoipCidr",
    "req": {
      "Cidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "byoipCidr": {
        "type": "ByoipCidr object",
        "desc": "Information about the address range."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeregisterImage",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AMI."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DeregisterInstanceEventNotificationAttributes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceTagAttribute": {
        "type": "DeregisterInstanceTagAttributeRequest object",
        "required": "No",
        "desc": "Information about the tag keys to deregister."
      }
    },
    "res": {
      "instanceTagAttribute": {
        "type": "InstanceTagNotificationAttribute object",
        "desc": "The resulting set of tag keys."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeregisterTransitGatewayMulticastGroupMembers",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The IP address assigned to the transit gateway multicast group."
      },
      "NetworkInterfaceIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the group members' network interfaces."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "deregisteredMulticastGroupMembers": {
        "type": "TransitGatewayMulticastDeregisteredGroupMembers object",
        "desc": "Information about the deregistered members."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DeregisterTransitGatewayMulticastGroupSources",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The IP address assigned to the transit gateway multicast group."
      },
      "NetworkInterfaceIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the group sources' network interfaces."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "deregisteredMulticastGroupSources": {
        "type": "TransitGatewayMulticastDeregisteredGroupSources object",
        "desc": "Information about the deregistered group sources."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeAccountAttributes",
    "req": {
      "AttributeName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The account attribute names."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "accountAttributeSet": {
        "type": "Array of AccountAttribute objects",
        "desc": "Information about the account attributes."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeAddresses",
    "req": {
      "AllocationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "[EC2-VPC] Information about the allocation IDs."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "PublicIp.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses."
      }
    },
    "res": {
      "addressesSet": {
        "type": "Array of Address objects",
        "desc": "Information about the Elastic IP addresses."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeAggregateIdFormat",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "statusSet": {
        "type": "Array of IdFormat objects",
        "desc": "Information about each resource's ID format."
      },
      "useLongIdsAggregated": {
        "type": "Boolean",
        "desc": "Indicates whether all resource types in the Region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the Region."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeAvailabilityZones",
    "req": {
      "AllAvailabilityZones": {
        "type": "Boolean",
        "required": "No",
        "desc": "Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your opt-in status. If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "ZoneId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the Availability Zones, Local Zones, and Wavelength Zones."
      },
      "ZoneName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The names of the Availability Zones, Local Zones, and Wavelength Zones."
      }
    },
    "res": {
      "availabilityZoneInfo": {
        "type": "Array of AvailabilityZone objects",
        "desc": "Information about the Availability Zones, Local Zones, and Wavelength Zones."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeBundleTasks",
    "req": {
      "BundleId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The bundle task IDs. Default: Describes all your bundle tasks."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      }
    },
    "res": {
      "bundleInstanceTasksSet": {
        "type": "Array of BundleTask objects",
        "desc": "Information about the bundle tasks."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeByoipCidrs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "byoipCidrSet": {
        "type": "Array of ByoipCidr objects",
        "desc": "Information about your address ranges."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeCapacityReservations",
    "req": {
      "CapacityReservationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the Capacity Reservation."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      }
    },
    "res": {
      "capacityReservationSet": {
        "type": "Array of CapacityReservation objects",
        "desc": "Information about the Capacity Reservations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeCarrierGateways",
    "req": {
      "CarrierGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more carrier gateway IDs."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "carrierGatewaySet": {
        "type": "Array of CarrierGateway objects",
        "desc": "Information about the carrier gateway."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClassicLinkInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more instance IDs. Must be instances linked to a VPC through ClassicLink."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. Constraint: If the value is greater than 1000, we return only 1000 items."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of ClassicLinkInstance objects",
        "desc": "Information about one or more linked EC2-Classic instances."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClientVpnAuthorizationRules",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "authorizationRule": {
        "type": "Array of AuthorizationRule objects",
        "desc": "Information about the authorization rules."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClientVpnConnections",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "connections": {
        "type": "Array of ClientVpnConnection objects",
        "desc": "Information about the active and terminated client connections."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClientVpnEndpoints",
    "req": {
      "ClientVpnEndpointId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "clientVpnEndpoint": {
        "type": "Array of ClientVpnEndpoint objects",
        "desc": "Information about the Client VPN endpoints."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClientVpnRoutes",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "routes": {
        "type": "Array of ClientVpnRoute objects",
        "desc": "Information about the Client VPN endpoint routes."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeClientVpnTargetNetworks",
    "req": {
      "AssociationIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the target network associations."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "clientVpnTargetNetworks": {
        "type": "Array of TargetNetwork objects",
        "desc": "Information about the associated target networks."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeCoipPools",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. The following are the possible values:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PoolId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the address pools."
      }
    },
    "res": {
      "coipPoolSet": {
        "type": "Array of CoipPool objects",
        "desc": "Information about the address pools."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeConversionTasks",
    "req": {
      "ConversionTaskId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The conversion task IDs."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "conversionTasks": {
        "type": "Array of ConversionTask objects",
        "desc": "Information about the conversion tasks."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeCustomerGateways",
    "req": {
      "CustomerGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more customer gateway IDs. Default: Describes all your customer gateways."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      }
    },
    "res": {
      "customerGatewaySet": {
        "type": "Array of CustomerGateway objects",
        "desc": "Information about one or more customer gateways."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeDhcpOptions",
    "req": {
      "DhcpOptionsId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "dhcpOptionsSet": {
        "type": "Array of DhcpOptions objects",
        "desc": "Information about one or more DHCP options sets."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeEgressOnlyInternetGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EgressOnlyInternetGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more egress-only internet gateway IDs."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "egressOnlyInternetGatewaySet": {
        "type": "Array of EgressOnlyInternetGateway objects",
        "desc": "Information about the egress-only internet gateways."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeElasticGpus",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ElasticGpuId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Elastic Graphics accelerator IDs."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "elasticGpuSet": {
        "type": "Array of ElasticGpus objects",
        "desc": "Information about the Elastic Graphics accelerators."
      },
      "maxResults": {
        "type": "Integer",
        "desc": "The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeExportImageTasks",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ExportImageTaskId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the export image tasks."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "A token that indicates the next page of results."
      }
    },
    "res": {
      "exportImageTaskSet": {
        "type": "Array of ExportImageTask objects",
        "desc": "Information about the export image tasks."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to get the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeExportTasks",
    "req": {
      "ExportTaskId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The export task IDs."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "the filters for the export tasks."
      }
    },
    "res": {
      "exportTaskSet": {
        "type": "Array of ExportTask objects",
        "desc": "Information about the export tasks."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFastSnapshotRestores",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "fastSnapshotRestoreSet": {
        "type": "Array of DescribeFastSnapshotRestoreSuccessItem objects",
        "desc": "Information about the state of fast snapshot restores."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFleetHistory",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EventType": {
        "type": "String",
        "required": "No",
        "desc": "The type of events to describe. By default, all events are described."
      },
      "FleetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EC2 Fleet."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "StartTime": {
        "type": "Timestamp",
        "required": "Yes",
        "desc": "The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "res": {
      "fleetId": {
        "type": "String",
        "desc": "The ID of the EC Fleet."
      },
      "historyRecordSet": {
        "type": "Array of HistoryRecordEntry objects",
        "desc": "Information about the events in the history of the EC2 Fleet."
      },
      "lastEvaluatedTime": {
        "type": "Timestamp",
        "desc": "The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token for the next set of results."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "startTime": {
        "type": "Timestamp",
        "desc": "The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFleetInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "FleetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EC2 Fleet."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      }
    },
    "res": {
      "activeInstanceSet": {
        "type": "Array of ActiveInstance objects",
        "desc": "The running instances. This list is refreshed periodically and might be out of date."
      },
      "fleetId": {
        "type": "String",
        "desc": "The ID of the EC2 Fleet."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token for the next set of results."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFleets",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "FleetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the EC2 Fleets."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      }
    },
    "res": {
      "fleetSet": {
        "type": "Array of FleetData objects",
        "desc": "Information about the EC2 Fleets."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token for the next set of results."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFlowLogs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "FlowLogId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "flowLogSet": {
        "type": "Array of FlowLog objects",
        "desc": "Information about the flow logs."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFpgaImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The AFI attribute."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FpgaImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AFI."
      }
    },
    "res": {
      "fpgaImageAttribute": {
        "type": "FpgaImageAttribute object",
        "desc": "Information about the attribute."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeFpgaImages",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "FpgaImageId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The AFI IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      },
      "Owner.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace)."
      }
    },
    "res": {
      "fpgaImageSet": {
        "type": "Array of FpgaImage objects",
        "desc": "Information about the FPGA images."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeHostReservationOfferings",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxDuration": {
        "type": "Integer",
        "required": "No",
        "desc": "This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error."
      },
      "MinDuration": {
        "type": "Integer",
        "required": "No",
        "desc": "This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      },
      "OfferingId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the reservation offering."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "offeringSet": {
        "type": "Array of HostOffering objects",
        "desc": "Information about the offerings."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeHostReservations",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "HostReservationIdSet.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The host reservation IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      }
    },
    "res": {
      "hostReservationSet": {
        "type": "Array of HostReservation objects",
        "desc": "Details about the reservation's configuration."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeHosts",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "HostId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      }
    },
    "res": {
      "hostSet": {
        "type": "Array of Host objects",
        "desc": "Information about the Dedicated Hosts."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeIamInstanceProfileAssociations",
    "req": {
      "AssociationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IAM instance profile associations."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "iamInstanceProfileAssociationSet": {
        "type": "Array of IamInstanceProfileAssociation objects",
        "desc": "Information about the IAM instance profile associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeIdentityIdFormat",
    "req": {
      "PrincipalArn": {
        "type": "String",
        "required": "Yes",
        "desc": "The ARN of the principal, which can be an IAM role, IAM user, or the root user."
      },
      "Resource": {
        "type": "String",
        "required": "No",
        "desc": "The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway"
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "statusSet": {
        "type": "Array of IdFormat objects",
        "desc": "Information about the ID format for the resources."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeIdFormat",
    "req": {
      "Resource": {
        "type": "String",
        "required": "No",
        "desc": "The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway"
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "statusSet": {
        "type": "Array of IdFormat objects",
        "desc": "Information about the ID format for the resource."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The AMI attribute. Note: Depending on your account privileges, the blockDeviceMapping attribute may return a Client.AuthFailure error. If this happens, use DescribeImages to get information about the block device mapping for the AMI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AMI."
      }
    },
    "res": {
      "blockDeviceMapping": {
        "type": "Array of BlockDeviceMapping objects",
        "desc": "The block device mapping entries."
      },
      "description": {
        "type": "AttributeValue object",
        "desc": "A description for the AMI."
      },
      "imageId": {
        "type": "String",
        "desc": "The ID of the AMI."
      },
      "kernel": {
        "type": "AttributeValue object",
        "desc": "The kernel ID."
      },
      "launchPermission": {
        "type": "Array of LaunchPermission objects",
        "desc": "The launch permissions."
      },
      "productCodes": {
        "type": "Array of ProductCode objects",
        "desc": "The product codes."
      },
      "ramdisk": {
        "type": "AttributeValue object",
        "desc": "The RAM disk ID."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "sriovNetSupport": {
        "type": "AttributeValue object",
        "desc": "Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeImages",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ExecutableBy.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs)."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "ImageId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The image IDs. Default: Describes all images available to you."
      },
      "Owner.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Scopes the results to images with the specified owners. You can specify a combination of AWS account IDs, self, amazon, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership."
      }
    },
    "res": {
      "imagesSet": {
        "type": "Array of Image objects",
        "desc": "Information about the images."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeImportImageTasks",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filters.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted."
      },
      "ImportTaskId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the import image tasks."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "A token that indicates the next page of results."
      }
    },
    "res": {
      "importImageTaskSet": {
        "type": "Array of ImportImageTask objects",
        "desc": "A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to get the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeImportSnapshotTasks",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filters.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "ImportTaskId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "A list of import snapshot task IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "A token that indicates the next page of results."
      }
    },
    "res": {
      "importSnapshotTaskSet": {
        "type": "Array of ImportSnapshotTask objects",
        "desc": "A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to get the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance attribute. Note: The enaSupport attribute is not supported at this time."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "blockDeviceMapping": {
        "type": "Array of InstanceBlockDeviceMapping objects",
        "desc": "The block device mapping of the instance."
      },
      "disableApiTermination": {
        "type": "AttributeBooleanValue object",
        "desc": "If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can."
      },
      "ebsOptimized": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether the instance is optimized for Amazon EBS I/O."
      },
      "enaSupport": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether enhanced networking with ENA is enabled."
      },
      "enclaveOptions": {
        "type": "EnclaveOptions object",
        "desc": "To enable the instance for AWS Nitro Enclaves, set this parameter to true; otherwise, set it to false."
      },
      "groupSet": {
        "type": "Array of GroupIdentifier objects",
        "desc": "The security groups associated with the instance."
      },
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "instanceInitiatedShutdownBehavior": {
        "type": "AttributeValue object",
        "desc": "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown)."
      },
      "instanceType": {
        "type": "AttributeValue object",
        "desc": "The instance type."
      },
      "kernel": {
        "type": "AttributeValue object",
        "desc": "The kernel ID."
      },
      "productCodes": {
        "type": "Array of ProductCode objects",
        "desc": "A list of product codes."
      },
      "ramdisk": {
        "type": "AttributeValue object",
        "desc": "The RAM disk ID."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "rootDeviceName": {
        "type": "AttributeValue object",
        "desc": "The device name of the root device volume (for example, /dev/sda1)."
      },
      "sourceDestCheck": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT."
      },
      "sriovNetSupport": {
        "type": "AttributeValue object",
        "desc": "Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled."
      },
      "userData": {
        "type": "AttributeValue object",
        "desc": "The user data."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceCreditSpecifications",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "instanceCreditSpecificationSet": {
        "type": "Array of InstanceCreditSpecification objects",
        "desc": "Information about the credit option for CPU usage of an instance."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceEventNotificationAttributes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "instanceTagAttribute": {
        "type": "InstanceTagNotificationAttribute object",
        "desc": "Information about the registered tag keys."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance IDs. Default: Describes all your instances."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservationSet": {
        "type": "Array of Reservation objects",
        "desc": "Information about the reservations."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceStatus",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "IncludeAllInstances": {
        "type": "Boolean",
        "required": "No",
        "desc": "When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false"
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "instanceStatusSet": {
        "type": "Array of InstanceStatus objects",
        "desc": "Information about the status of the instances."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceTypeOfferings",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "LocationType": {
        "type": "String",
        "required": "No",
        "desc": "The location type."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "instanceTypeOfferingSet": {
        "type": "Array of InstanceTypeOffering objects",
        "desc": "The instance types offered."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInstanceTypes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. Filter names and values are case-sensitive."
      },
      "InstanceType.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The instance types. For more information, see Instance types in the Amazon EC2 User Guide."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "instanceTypeSet": {
        "type": "Array of InstanceTypeInfo objects",
        "desc": "The instance type. For more information, see Instance types in the Amazon EC2 User Guide."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeInternetGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "InternetGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more internet gateway IDs. Default: Describes all your internet gateways."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "internetGatewaySet": {
        "type": "Array of InternetGateway objects",
        "desc": "Information about one or more internet gateways."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeIpv6Pools",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PoolId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the IPv6 address pools."
      }
    },
    "res": {
      "ipv6PoolSet": {
        "type": "Array of Ipv6Pool objects",
        "desc": "Information about the IPv6 address pools."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeKeyPairs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "KeyName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The key pair names. Default: Describes all your key pairs."
      },
      "KeyPairId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the key pairs."
      }
    },
    "res": {
      "keySet": {
        "type": "Array of KeyPairInfo objects",
        "desc": "Information about the key pairs."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLaunchTemplates",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LaunchTemplateId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more launch template IDs."
      },
      "LaunchTemplateName.N": {
        "type": "Array of strings",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "One or more launch template names."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "launchTemplates": {
        "type": "Array of LaunchTemplate objects",
        "desc": "Information about the launch templates."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLaunchTemplateVersions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LaunchTemplateId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter."
      },
      "LaunchTemplateVersion.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same call. You cannot specify numbers."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200."
      },
      "MaxVersion": {
        "type": "String",
        "required": "No",
        "desc": "The version number up to which to describe launch template versions."
      },
      "MinVersion": {
        "type": "String",
        "required": "No",
        "desc": "The version number after which to describe launch template versions."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "launchTemplateVersionSet": {
        "type": "Array of LaunchTemplateVersion objects",
        "desc": "Information about the launch template versions."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGatewayRouteTables",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayRouteTableId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the local gateway route tables."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewayRouteTableSet": {
        "type": "Array of LocalGatewayRouteTable objects",
        "desc": "Information about the local gateway route tables."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the associations."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewayRouteTableVirtualInterfaceGroupAssociationSet": {
        "type": "Array of LocalGatewayRouteTableVirtualInterfaceGroupAssociation objects",
        "desc": "Information about the associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGatewayRouteTableVpcAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayRouteTableVpcAssociationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the associations."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewayRouteTableVpcAssociationSet": {
        "type": "Array of LocalGatewayRouteTableVpcAssociation objects",
        "desc": "Information about the associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewaySet": {
        "type": "Array of LocalGateway objects",
        "desc": "Information about the local gateways."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGatewayVirtualInterfaceGroups",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayVirtualInterfaceGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the virtual interface groups."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewayVirtualInterfaceGroupSet": {
        "type": "Array of LocalGatewayVirtualInterfaceGroup objects",
        "desc": "The virtual interface groups."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeLocalGatewayVirtualInterfaces",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "LocalGatewayVirtualInterfaceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the virtual interfaces."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "localGatewayVirtualInterfaceSet": {
        "type": "Array of LocalGatewayVirtualInterface objects",
        "desc": "Information about the virtual interfaces."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeManagedPrefixLists",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PrefixListId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more prefix list IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "prefixListSet": {
        "type": "Array of ManagedPrefixList objects",
        "desc": "Information about the prefix lists."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeMovingAddresses",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PublicIp.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more Elastic IP addresses."
      }
    },
    "res": {
      "movingAddressStatusSet": {
        "type": "Array of MovingAddressStatus objects",
        "desc": "The status for each Elastic IP address."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNatGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NatGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more NAT gateway IDs."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "natGatewaySet": {
        "type": "Array of NatGateway objects",
        "desc": "Information about the NAT gateways."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkAcls",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NetworkAclId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more network ACL IDs. Default: Describes all your network ACLs."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "networkAclSet": {
        "type": "Array of NetworkAcl objects",
        "desc": "Information about one or more network ACLs."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkInsightsAnalyses",
    "req": {
      "AnalysisEndTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The time when the network insights analyses ended."
      },
      "AnalysisStartTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The time when the network insights analyses started."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. The following are possible values:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NetworkInsightsAnalysisId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the network insights analyses. You must specify either analysis IDs or a path ID."
      },
      "NetworkInsightsPathId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the path. You must specify either a path ID or analysis IDs."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "networkInsightsAnalysisSet": {
        "type": "Array of NetworkInsightsAnalysis objects",
        "desc": "Information about the network insights analyses."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkInsightsPaths",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. The following are possible values:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NetworkInsightsPathId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the paths."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "networkInsightsPathSet": {
        "type": "Array of NetworkInsightsPath objects",
        "desc": "Information about the paths."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkInterfaceAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The attribute of the network interface. This parameter is required."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      }
    },
    "res": {
      "attachment": {
        "type": "NetworkInterfaceAttachment object",
        "desc": "The attachment (if any) of the network interface."
      },
      "description": {
        "type": "AttributeValue object",
        "desc": "The description of the network interface."
      },
      "groupSet": {
        "type": "Array of GroupIdentifier objects",
        "desc": "The security groups associated with the network interface."
      },
      "networkInterfaceId": {
        "type": "String",
        "desc": "The ID of the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "sourceDestCheck": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether source/destination checking is enabled."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkInterfacePermissions",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. If this parameter is not specified, up to 50 results are returned by default."
      },
      "NetworkInterfacePermissionId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more network interface permission IDs."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "networkInterfacePermissions": {
        "type": "Array of NetworkInterfacePermission objects",
        "desc": "The network interface permissions."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeNetworkInterfaces",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request."
      },
      "NetworkInterfaceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more network interface IDs. Default: Describes all your network interfaces."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "networkInterfaceSet": {
        "type": "Array of NetworkInterface objects",
        "desc": "Information about one or more network interfaces."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribePlacementGroups",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "GroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the placement groups."
      },
      "GroupName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The names of the placement groups. Default: Describes all your placement groups, or only those otherwise specified."
      }
    },
    "res": {
      "placementGroupSet": {
        "type": "Array of PlacementGroup objects",
        "desc": "Information about the placement groups."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribePrefixLists",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PrefixListId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more prefix list IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "prefixListSet": {
        "type": "Array of PrefixList objects",
        "desc": "All available prefix lists."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribePrincipalIdFormat",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      },
      "Resource.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway"
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "principalSet": {
        "type": "Array of PrincipalIdFormat objects",
        "desc": "Information about the ID format settings for the ARN."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribePublicIpv4Pools",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PoolId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the address pools."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "publicIpv4PoolSet": {
        "type": "Array of PublicIpv4Pool objects",
        "desc": "Information about the address pools."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeRegions",
    "req": {
      "AllRegions": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to display all Regions, including Regions that are disabled for your account."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "RegionName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account."
      }
    },
    "res": {
      "regionInfo": {
        "type": "Array of Region objects",
        "desc": "Information about the Regions."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeReservedInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "OfferingClass": {
        "type": "String",
        "required": "No",
        "desc": "Describes whether the Reserved Instance is Standard or Convertible."
      },
      "OfferingType": {
        "type": "String",
        "required": "No",
        "desc": "The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type."
      },
      "ReservedInstancesId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesSet": {
        "type": "Array of ReservedInstances objects",
        "desc": "A list of Reserved Instances."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeReservedInstancesListings",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "ReservedInstancesId": {
        "type": "String",
        "required": "No",
        "desc": "One or more Reserved Instance IDs."
      },
      "ReservedInstancesListingId": {
        "type": "String",
        "required": "No",
        "desc": "One or more Reserved Instance listing IDs."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesListingsSet": {
        "type": "Array of ReservedInstancesListing objects",
        "desc": "Information about the Reserved Instance listing."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeReservedInstancesModifications",
    "req": {
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      },
      "ReservedInstancesModificationId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "IDs for the submitted modification request."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesModificationsSet": {
        "type": "Array of ReservedInstancesModification objects",
        "desc": "The Reserved Instance modification information."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeReservedInstancesOfferings",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "No",
        "desc": "The Availability Zone in which the Reserved Instance can be used."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "IncludeMarketplace": {
        "type": "Boolean",
        "required": "No",
        "desc": "Include Reserved Instance Marketplace offerings in the response."
      },
      "InstanceTenancy": {
        "type": "String",
        "required": "No",
        "desc": "The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances). Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default"
      },
      "InstanceType": {
        "type": "String",
        "required": "No",
        "desc": "The instance type that the reservation will cover (for example, m1.small). For more information, see Instance types in the Amazon EC2 User Guide."
      },
      "MaxDuration": {
        "type": "Long",
        "required": "No",
        "desc": "The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)"
      },
      "MaxInstanceCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of instances to filter when searching for offerings. Default: 20"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100"
      },
      "MinDuration": {
        "type": "Long",
        "required": "No",
        "desc": "The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)"
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      },
      "OfferingClass": {
        "type": "String",
        "required": "No",
        "desc": "The offering class of the Reserved Instance. Can be standard or convertible."
      },
      "OfferingType": {
        "type": "String",
        "required": "No",
        "desc": "The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type."
      },
      "ProductDescription": {
        "type": "String",
        "required": "No",
        "desc": "The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC."
      },
      "ReservedInstancesOfferingId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more Reserved Instances offering IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesOfferingsSet": {
        "type": "Array of ReservedInstancesOffering objects",
        "desc": "A list of Reserved Instances offerings."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeRouteTables",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "RouteTableId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more route table IDs. Default: Describes all your route tables."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "routeTableSet": {
        "type": "Array of RouteTable objects",
        "desc": "Information about one or more route tables."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeScheduledInstanceAvailability",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "FirstSlotStartTimeRange": {
        "type": "SlotDateTimeRangeRequest object",
        "required": "Yes",
        "desc": "The time period for the first schedule to start."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "MaxSlotDurationInHours": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720."
      },
      "MinSlotDurationInHours": {
        "type": "Integer",
        "required": "No",
        "desc": "The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "Recurrence": {
        "type": "ScheduledInstanceRecurrenceRequest object",
        "required": "Yes",
        "desc": "The schedule recurrence."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "scheduledInstanceAvailabilitySet": {
        "type": "Array of ScheduledInstanceAvailability objects",
        "desc": "Information about the available Scheduled Instances."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeScheduledInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "ScheduledInstanceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Scheduled Instance IDs."
      },
      "SlotStartTimeRange": {
        "type": "SlotStartTimeRangeRequest object",
        "required": "No",
        "desc": "The time period for the first schedule to start."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "scheduledInstanceSet": {
        "type": "Array of ScheduledInstance objects",
        "desc": "Information about the Scheduled Instances."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSecurityGroupReferences",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the security groups in your account."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "securityGroupReferenceSet": {
        "type": "Array of SecurityGroupReference objects",
        "desc": "Information about the VPCs with the referencing security groups."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSecurityGroups",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters."
      },
      "GroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all your security groups."
      },
      "GroupName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "[EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all your security groups."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "securityGroupInfo": {
        "type": "Array of SecurityGroup objects",
        "desc": "Information about the security groups."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSnapshotAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The snapshot attribute you would like to view."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SnapshotId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EBS snapshot."
      }
    },
    "res": {
      "createVolumePermission": {
        "type": "Array of CreateVolumePermission objects",
        "desc": "The users and groups that have the permissions for creating volumes from the snapshot."
      },
      "productCodes": {
        "type": "Array of ProductCode objects",
        "desc": "The product codes."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotId": {
        "type": "String",
        "desc": "The ID of the EBS snapshot."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSnapshots",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return."
      },
      "Owner.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Scopes the results to snapshots with the specified owners. You can specify a combination of AWS account IDs, self, and amazon."
      },
      "RestorableBy.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the AWS accounts that can create volumes from the snapshot."
      },
      "SnapshotId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotSet": {
        "type": "Array of Snapshot objects",
        "desc": "Information about the snapshots."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotDatafeedSubscription",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotDatafeedSubscription": {
        "type": "SpotDatafeedSubscription object",
        "desc": "The Spot Instance data feed subscription."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotFleetInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "SpotFleetRequestId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Spot Fleet request."
      }
    },
    "res": {
      "activeInstanceSet": {
        "type": "Array of ActiveInstance objects",
        "desc": "The running instances. This list is refreshed periodically and might be out of date."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotFleetRequestId": {
        "type": "String",
        "desc": "The ID of the Spot Fleet request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotFleetRequestHistory",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EventType": {
        "type": "String",
        "required": "No",
        "desc": "The type of events to describe. By default, all events are described."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "SpotFleetRequestId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Spot Fleet request."
      },
      "StartTime": {
        "type": "Timestamp",
        "required": "Yes",
        "desc": "The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "res": {
      "historyRecordSet": {
        "type": "Array of HistoryRecord objects",
        "desc": "Information about the events in the history of the Spot Fleet request."
      },
      "lastEvaluatedTime": {
        "type": "Timestamp",
        "desc": "The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotFleetRequestId": {
        "type": "String",
        "desc": "The ID of the Spot Fleet request."
      },
      "startTime": {
        "type": "Timestamp",
        "desc": "The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotFleetRequests",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "SpotFleetRequestId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the Spot Fleet requests."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotFleetRequestConfigSet": {
        "type": "Array of SpotFleetRequestConfig objects",
        "desc": "Information about the configuration of your Spot Fleet."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotInstanceRequests",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next set of results. This value is null when there are no more results to return."
      },
      "SpotInstanceRequestId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more Spot Instance request IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next set of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotInstanceRequestSet": {
        "type": "Array of SpotInstanceRequest objects",
        "desc": "One or more Spot Instance requests."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSpotPriceHistory",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "No",
        "desc": "Filters the results by the specified Availability Zone."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EndTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "InstanceType.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Filters the results by the specified instance types."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of results."
      },
      "ProductDescription.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Filters the results by the specified basic product descriptions."
      },
      "StartTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotPriceHistorySet": {
        "type": "Array of SpotPrice objects",
        "desc": "The historical Spot prices."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeStaleSecurityGroups",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results."
      },
      "NextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The token for the next set of items to return. (You received this token from a prior call.)"
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "staleSecurityGroupSet": {
        "type": "Array of StaleSecurityGroup objects",
        "desc": "Information about the stale security groups."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeSubnets",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "SubnetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more subnet IDs. Default: Describes all your subnets."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "subnetSet": {
        "type": "Array of Subnet objects",
        "desc": "Information about one or more subnets."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTags",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "tagSet": {
        "type": "Array of TagDescription objects",
        "desc": "The tags."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTrafficMirrorFilters",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TrafficMirrorFilterId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the Traffic Mirror filter."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. The value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilterSet": {
        "type": "Array of TrafficMirrorFilter objects",
        "desc": "Information about one or more Traffic Mirror filters."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTrafficMirrorSessions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TrafficMirrorSessionId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the Traffic Mirror session."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. The value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorSessionSet": {
        "type": "Array of TrafficMirrorSession objects",
        "desc": "Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTrafficMirrorTargets",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TrafficMirrorTargetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the Traffic Mirror targets."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. The value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorTargetSet": {
        "type": "Array of TrafficMirrorTarget objects",
        "desc": "Information about one or more Traffic Mirror targets."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayAttachments",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayAttachmentIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the attachments."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayAttachments": {
        "type": "Array of TransitGatewayAttachment objects",
        "desc": "Information about the attachments."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayConnectPeers",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayConnectPeerIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the Connect peers."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnectPeerSet": {
        "type": "Array of TransitGatewayConnectPeer objects",
        "desc": "Information about the Connect peers."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayConnects",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayAttachmentIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the attachments."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayConnectSet": {
        "type": "Array of TransitGatewayConnect objects",
        "desc": "Information about the Connect attachments."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayMulticastDomains",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayMulticastDomainIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayMulticastDomains": {
        "type": "Array of TransitGatewayMulticastDomain objects",
        "desc": "Information about the transit gateway multicast domains."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayPeeringAttachments",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayAttachmentIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more IDs of the transit gateway peering attachments."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPeeringAttachments": {
        "type": "Array of TransitGatewayPeeringAttachment objects",
        "desc": "The transit gateway peering attachments."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayRouteTables",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayRouteTableIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the transit gateway route tables."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayRouteTables": {
        "type": "Array of TransitGatewayRouteTable objects",
        "desc": "Information about the transit gateway route tables."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the transit gateways."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewaySet": {
        "type": "Array of TransitGateway objects",
        "desc": "Information about the transit gateways."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeTransitGatewayVpcAttachments",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayAttachmentIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the attachments."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachments": {
        "type": "Array of TransitGatewayVpcAttachment objects",
        "desc": "Information about the VPC attachments."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVolumeAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The attribute of the volume. This parameter is required."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      }
    },
    "res": {
      "autoEnableIO": {
        "type": "AttributeBooleanValue object",
        "desc": "The state of autoEnableIO attribute."
      },
      "productCodes": {
        "type": "Array of ProductCode objects",
        "desc": "A list of product codes."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "volumeId": {
        "type": "String",
        "desc": "The ID of the volume."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVolumes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return."
      },
      "VolumeId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The volume IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "volumeSet": {
        "type": "Array of Volume objects",
        "desc": "Information about the volumes."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVolumesModifications",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results (up to a limit of 500) to be returned in a paginated request."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The nextToken value returned by a previous paginated request."
      },
      "VolumeId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the volumes."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "Token for pagination, null if there are no more results"
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "volumeModificationSet": {
        "type": "Array of VolumeModification objects",
        "desc": "Information about the volume modifications."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVolumeStatus",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "VolumeId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the volumes. Default: Describes all your volumes."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "volumeStatusSet": {
        "type": "Array of VolumeStatusItem objects",
        "desc": "Information about the status of the volumes."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The VPC attribute."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "enableDnsHostnames": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not."
      },
      "enableDnsSupport": {
        "type": "AttributeBooleanValue object",
        "desc": "Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcId": {
        "type": "String",
        "desc": "The ID of the VPC."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcClassicLink",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "VpcId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more VPCs for which you want to describe the ClassicLink status."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcSet": {
        "type": "Array of VpcClassicLink objects",
        "desc": "The ClassicLink status of one or more VPCs."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcClassicLinkDnsSupport",
    "req": {
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "VpcIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more VPC IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1024.",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcs": {
        "type": "Array of ClassicLinkDnsSupport objects",
        "desc": "Information about the ClassicLink DNS support status of the VPCs."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpointConnectionNotifications",
    "req": {
      "ConnectionNotificationId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the notification."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to request the next page of results."
      }
    },
    "res": {
      "connectionNotificationSet": {
        "type": "Array of ConnectionNotification objects",
        "desc": "One or more notifications."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpointConnections",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcEndpointConnectionSet": {
        "type": "Array of VpcEndpointConnection objects",
        "desc": "Information about one or more VPC endpoint connections."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpoints",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of items to return. (You received this token from a prior call.)"
      },
      "VpcEndpointId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more endpoint IDs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcEndpointSet": {
        "type": "Array of VpcEndpoint objects",
        "desc": "Information about the endpoints."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpointServiceConfigurations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      },
      "ServiceId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more services."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "serviceConfigurationSet": {
        "type": "Array of ServiceConfiguration objects",
        "desc": "Information about one or more services."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpointServicePermissions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to retrieve the next page of results."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the service."
      }
    },
    "res": {
      "allowedPrincipals": {
        "type": "Array of AllowedPrincipal objects",
        "desc": "Information about one or more allowed principals."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcEndpointServices",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next set of items to return. (You received this token from a prior call.)"
      },
      "ServiceName.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more service names."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "serviceDetailSet": {
        "type": "Array of ServiceDetail objects",
        "desc": "Information about the service."
      },
      "serviceNameSet": {
        "type": "Array of strings",
        "desc": "A list of supported services."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcPeeringConnections",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "VpcPeeringConnectionId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more VPC peering connection IDs. Default: Describes all your VPC peering connections."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcPeeringConnectionSet": {
        "type": "Array of VpcPeeringConnection objects",
        "desc": "Information about the VPC peering connections."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpcs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "VpcId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more VPC IDs. Default: Describes all your VPCs."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcSet": {
        "type": "Array of Vpc objects",
        "desc": "Information about one or more VPCs."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpnConnections",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "VpnConnectionId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more VPN connection IDs. Default: Describes your VPN connections."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnectionSet": {
        "type": "Array of VpnConnection objects",
        "desc": "Information about one or more VPN connections."
      }
    },
    "err": {}
  },
  {
    "title": "DescribeVpnGateways",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters."
      },
      "VpnGatewayId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more virtual private gateway IDs. Default: Describes all your virtual private gateways."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnGatewaySet": {
        "type": "Array of VpnGateway objects",
        "desc": "Information about one or more virtual private gateways."
      }
    },
    "err": {}
  },
  {
    "title": "DetachClassicLinkVpc",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance to unlink from the VPC."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC to which the instance is linked."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DetachInternetGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InternetGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the internet gateway."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DetachNetworkInterface",
    "req": {
      "AttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Force": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether to force a detachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DetachVolume",
    "req": {
      "Device": {
        "type": "String",
        "required": "No",
        "desc": "The device name."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Force": {
        "type": "Boolean",
        "required": "No",
        "desc": "Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures."
      },
      "InstanceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      }
    },
    "res": {
      "attachTime": {
        "type": "Timestamp",
        "desc": "The time stamp when the attachment initiated."
      },
      "deleteOnTermination": {
        "type": "Boolean",
        "desc": "Indicates whether the EBS volume is deleted on instance termination."
      },
      "device": {
        "type": "String",
        "desc": "The device name."
      },
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "String",
        "desc": "The attachment state of the volume."
      },
      "volumeId": {
        "type": "String",
        "desc": "The ID of the volume."
      }
    },
    "err": {}
  },
  {
    "title": "DetachVpnGateway",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      },
      "VpnGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual private gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DisableEbsEncryptionByDefault",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "ebsEncryptionByDefault": {
        "type": "Boolean",
        "desc": "The updated status of encryption by default."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DisableFastSnapshotRestores",
    "req": {
      "AvailabilityZone.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more Availability Zones. For example, us-east-2a."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SourceSnapshotId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more snapshots. For example, snap-1234567890abcdef0."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successful": {
        "type": "Array of DisableFastSnapshotRestoreSuccessItem objects",
        "desc": "Information about the snapshots for which fast snapshot restores were successfully disabled."
      },
      "unsuccessful": {
        "type": "Array of DisableFastSnapshotRestoreErrorItem objects",
        "desc": "Information about the snapshots for which fast snapshot restores could not be disabled."
      }
    },
    "err": {}
  },
  {
    "title": "DisableTransitGatewayRouteTablePropagation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the propagation route table."
      }
    },
    "res": {
      "propagation": {
        "type": "TransitGatewayPropagation object",
        "desc": "Information about route propagation."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DisableVgwRoutePropagation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual private gateway."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DisableVpcClassicLink",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DisableVpcClassicLinkDnsSupport",
    "req": {
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateAddress",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The association ID. Required for EC2-VPC."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PublicIp": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic] The Elastic IP address. Required for EC2-Classic."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateClientVpnTargetNetwork",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the target network association."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint from which to disassociate the target network."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "associationId": {
        "type": "String",
        "desc": "The ID of the target network association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "AssociationStatus object",
        "desc": "The current state of the target network association."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateEnclaveCertificateIamRole",
    "req": {
      "CertificateArn": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The ARN of the ACM certificate from which to disassociate the IAM role."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RoleArn": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The ARN of the IAM role to disassociate."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateIamInstanceProfile",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the IAM instance profile association."
      }
    },
    "res": {
      "iamInstanceProfileAssociation": {
        "type": "IamInstanceProfileAssociation object",
        "desc": "Information about the IAM instance profile association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateRouteTable",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The association ID representing the current association between the route table and subnet or gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateSubnetCidrBlock",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The association ID for the CIDR block."
      }
    },
    "res": {
      "ipv6CidrBlockAssociation": {
        "type": "SubnetIpv6CidrBlockAssociation object",
        "desc": "Information about the IPv6 CIDR block association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "subnetId": {
        "type": "String",
        "desc": "The ID of the subnet."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateTransitGatewayMulticastDomain",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the subnets;"
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "associations": {
        "type": "TransitGatewayMulticastDomainAssociations object",
        "desc": "Information about the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateTransitGatewayRouteTable",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "association": {
        "type": "TransitGatewayAssociation object",
        "desc": "Information about the association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "DisassociateVpcCidrBlock",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The association ID for the CIDR block."
      }
    },
    "res": {
      "cidrBlockAssociation": {
        "type": "VpcCidrBlockAssociation object",
        "desc": "Information about the IPv4 CIDR block association."
      },
      "ipv6CidrBlockAssociation": {
        "type": "VpcIpv6CidrBlockAssociation object",
        "desc": "Information about the IPv6 CIDR block association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpcId": {
        "type": "String",
        "desc": "The ID of the VPC."
      }
    },
    "err": {}
  },
  {
    "title": "EnableEbsEncryptionByDefault",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "ebsEncryptionByDefault": {
        "type": "Boolean",
        "desc": "The updated status of encryption by default."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "EnableFastSnapshotRestores",
    "req": {
      "AvailabilityZone.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "One or more Availability Zones. For example, us-east-2a."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SourceSnapshotId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You can specify a snapshot that was shared with you from another AWS account."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successful": {
        "type": "Array of EnableFastSnapshotRestoreSuccessItem objects",
        "desc": "Information about the snapshots for which fast snapshot restores were successfully enabled."
      },
      "unsuccessful": {
        "type": "Array of EnableFastSnapshotRestoreErrorItem objects",
        "desc": "Information about the snapshots for which fast snapshot restores could not be enabled."
      }
    },
    "err": {}
  },
  {
    "title": "EnableTransitGatewayRouteTablePropagation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the propagation route table."
      }
    },
    "res": {
      "propagation": {
        "type": "TransitGatewayPropagation object",
        "desc": "Information about route propagation."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "EnableVgwRoutePropagation",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "EnableVolumeIO",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "EnableVpcClassicLink",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "EnableVpcClassicLinkDnsSupport",
    "req": {
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ExportClientVpnClientCertificateRevocationList",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "certificateRevocationList": {
        "type": "String",
        "desc": "Information about the client certificate revocation list."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientCertificateRevocationListStatus object",
        "desc": "The current state of the client certificate revocation list."
      }
    },
    "err": {}
  },
  {
    "title": "ExportClientVpnClientConfiguration",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "clientConfiguration": {
        "type": "String",
        "desc": "The contents of the Client VPN endpoint configuration file."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ExportImage",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Token to enable idempotency for export image requests."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description of the image being exported. The maximum length is 255 characters."
      },
      "DiskImageFormat": {
        "type": "String",
        "required": "Yes",
        "desc": "The disk image format."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the image."
      },
      "RoleName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket. If this parameter is not specified, the default role is named 'vmimport'."
      },
      "S3ExportLocation": {
        "type": "ExportTaskS3LocationRequest object",
        "required": "Yes",
        "desc": "Information about the destination Amazon S3 bucket. The bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the export image task during creation."
      }
    },
    "res": {
      "description": {
        "type": "String",
        "desc": "A description of the image being exported."
      },
      "diskImageFormat": {
        "type": "String",
        "desc": "The disk image format for the exported image."
      },
      "exportImageTaskId": {
        "type": "String",
        "desc": "The ID of the export image task."
      },
      "imageId": {
        "type": "String",
        "desc": "The ID of the image."
      },
      "progress": {
        "type": "String",
        "desc": "The percent complete of the export image task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "roleName": {
        "type": "String",
        "desc": "The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket."
      },
      "s3ExportLocation": {
        "type": "ExportTaskS3Location object",
        "desc": "Information about the destination Amazon S3 bucket."
      },
      "status": {
        "type": "String",
        "desc": "The status of the export image task. The possible values are active, completed, deleting, and deleted."
      },
      "statusMessage": {
        "type": "String",
        "desc": "The status message for the export image task."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags assigned to the export image task."
      }
    },
    "err": {}
  },
  {
    "title": "ExportTransitGatewayRoutes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "S3Bucket": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the S3 bucket."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "s3Location": {
        "type": "String",
        "desc": "The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name."
      }
    },
    "err": {}
  },
  {
    "title": "GetAssociatedEnclaveCertificateIamRoles",
    "req": {
      "CertificateArn": {
        "type": "String",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon S3 object information."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "associatedRoleSet": {
        "type": "Array of AssociatedRole objects",
        "desc": "Information about the associated IAM roles."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetAssociatedIpv6PoolCidrs",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PoolId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the IPv6 address pool."
      }
    },
    "res": {
      "ipv6CidrAssociationSet": {
        "type": "Array of Ipv6CidrAssociation objects",
        "desc": "Information about the IPv6 CIDR block associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetCapacityReservationUsage",
    "req": {
      "CapacityReservationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Capacity Reservation."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. Valid range: Minimum value of 1. Maximum value of 1000."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      }
    },
    "res": {
      "availableInstanceCount": {
        "type": "Integer",
        "desc": "The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation."
      },
      "capacityReservationId": {
        "type": "String",
        "desc": "The ID of the Capacity Reservation."
      },
      "instanceType": {
        "type": "String",
        "desc": "The type of instance for which the Capacity Reservation reserves capacity."
      },
      "instanceUsageSet": {
        "type": "Array of InstanceUsage objects",
        "desc": "Information about the Capacity Reservation usage."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "state": {
        "type": "String",
        "desc": "The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:"
      },
      "totalInstanceCount": {
        "type": "Integer",
        "desc": "The number of instances for which the Capacity Reservation reserves capacity."
      }
    },
    "err": {}
  },
  {
    "title": "GetCoipPoolUsage",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "The filters. The following are the possible values:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PoolId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the address pool."
      }
    },
    "res": {
      "coipAddressUsageSet": {
        "type": "Array of CoipAddressUsage objects",
        "desc": "Information about the address usage."
      },
      "coipPoolId": {
        "type": "String",
        "desc": "The ID of the customer-owned address pool."
      },
      "localGatewayRouteTableId": {
        "type": "String",
        "desc": "The ID of the local gateway route table."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetConsoleOutput",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "Latest": {
        "type": "Boolean",
        "required": "No",
        "desc": "When enabled, retrieves the latest console output for the instance. Default: disabled (false)"
      }
    },
    "res": {
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "output": {
        "type": "String",
        "desc": "The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "timestamp": {
        "type": "Timestamp",
        "desc": "The time at which the output was last updated."
      }
    },
    "err": {}
  },
  {
    "title": "GetConsoleScreenshot",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "WakeUp": {
        "type": "Boolean",
        "required": "No",
        "desc": "When set to true, acts as keystroke input and wakes up an instance that's in standby or \"sleep\" mode."
      }
    },
    "res": {
      "imageData": {
        "type": "String",
        "desc": "The data that comprises the image."
      },
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetDefaultCreditSpecification",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceFamily": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance family."
      }
    },
    "res": {
      "instanceFamilyCreditSpecification": {
        "type": "InstanceFamilyCreditSpecification object",
        "desc": "The default credit option for CPU usage of the instance family."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetEbsDefaultKmsKeyId",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "kmsKeyId": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the default CMK for encryption by default."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetEbsEncryptionByDefault",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "ebsEncryptionByDefault": {
        "type": "Boolean",
        "desc": "Indicates whether encryption by default is enabled."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetGroupsForCapacityReservation",
    "req": {
      "CapacityReservationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Capacity Reservation."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to use to retrieve the next page of results."
      }
    },
    "res": {
      "capacityReservationGroupSet": {
        "type": "Array of CapacityReservationGroup objects",
        "desc": "Information about the resource groups to which the Capacity Reservation has been added."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetHostReservationPurchasePreview",
    "req": {
      "HostIdSet.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Dedicated Hosts with which the reservation is associated."
      },
      "OfferingId": {
        "type": "String",
        "required": "Yes",
        "desc": "The offering ID of the reservation."
      }
    },
    "res": {
      "currencyCode": {
        "type": "String",
        "desc": "The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD."
      },
      "purchase": {
        "type": "Array of Purchase objects",
        "desc": "The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "totalHourlyPrice": {
        "type": "String",
        "desc": "The potential total hourly price of the reservation per hour."
      },
      "totalUpfrontPrice": {
        "type": "String",
        "desc": "The potential total upfront price. This is billed immediately."
      }
    },
    "err": {}
  },
  {
    "title": "GetLaunchTemplateData",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "launchTemplateData": {
        "type": "ResponseLaunchTemplateData object",
        "desc": "The instance data."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetManagedPrefixListAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "prefixListAssociationSet": {
        "type": "Array of PrefixListAssociation objects",
        "desc": "Information about the associations."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetManagedPrefixListEntries",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      },
      "TargetVersion": {
        "type": "Long",
        "required": "No",
        "desc": "The version of the prefix list for which to return the entries. The default is the current version."
      }
    },
    "res": {
      "entrySet": {
        "type": "Array of PrefixListEntry objects",
        "desc": "Information about the prefix list entries."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetPasswordData",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Windows instance."
      }
    },
    "res": {
      "instanceId": {
        "type": "String",
        "desc": "The ID of the Windows instance."
      },
      "passwordData": {
        "type": "String",
        "desc": "The password of the instance. Returns an empty string if the password is not available."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "timestamp": {
        "type": "Timestamp",
        "desc": "The time the data was last updated."
      }
    },
    "err": {}
  },
  {
    "title": "GetReservedInstancesExchangeQuote",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ReservedInstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Convertible Reserved Instances to exchange."
      },
      "TargetConfiguration.N": {
        "type": "Array of TargetConfigurationRequest objects",
        "required": "No",
        "desc": "The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances."
      }
    },
    "res": {
      "currencyCode": {
        "type": "String",
        "desc": "The currency of the transaction."
      },
      "isValidExchange": {
        "type": "Boolean",
        "desc": "If true, the exchange is valid. If false, the exchange cannot be completed."
      },
      "outputReservedInstancesWillExpireAt": {
        "type": "Timestamp",
        "desc": "The new end date of the reservation term."
      },
      "paymentDue": {
        "type": "String",
        "desc": "The total true upfront charge for the exchange."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstanceValueRollup": {
        "type": "ReservationValue object",
        "desc": "The cost associated with the Reserved Instance."
      },
      "reservedInstanceValueSet": {
        "type": "Array of ReservedInstanceReservationValue objects",
        "desc": "The configuration of your Convertible Reserved Instances."
      },
      "targetConfigurationValueRollup": {
        "type": "ReservationValue object",
        "desc": "The cost associated with the Reserved Instance."
      },
      "targetConfigurationValueSet": {
        "type": "Array of TargetReservationValue objects",
        "desc": "The values of the target Convertible Reserved Instances."
      },
      "validationFailureReason": {
        "type": "String",
        "desc": "Describes the reason why the exchange cannot be completed."
      }
    },
    "err": {}
  },
  {
    "title": "GetTransitGatewayAttachmentPropagations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayAttachmentPropagations": {
        "type": "Array of TransitGatewayAttachmentPropagation objects",
        "desc": "Information about the propagation route tables."
      }
    },
    "err": {}
  },
  {
    "title": "GetTransitGatewayMulticastDomainAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "multicastDomainAssociations": {
        "type": "Array of TransitGatewayMulticastDomainAssociation objects",
        "desc": "Information about the multicast domain associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetTransitGatewayPrefixListReferences",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPrefixListReferenceSet": {
        "type": "Array of TransitGatewayPrefixListReference objects",
        "desc": "Information about the prefix list references."
      }
    },
    "err": {}
  },
  {
    "title": "GetTransitGatewayRouteTableAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "associations": {
        "type": "Array of TransitGatewayRouteTableAssociation objects",
        "desc": "Information about the associations."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "GetTransitGatewayRouteTablePropagations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayRouteTablePropagations": {
        "type": "Array of TransitGatewayRouteTablePropagation objects",
        "desc": "Information about the route table propagations."
      }
    },
    "err": {}
  },
  {
    "title": "ImportClientVpnClientCertificateRevocationList",
    "req": {
      "CertificateRevocationList": {
        "type": "String",
        "required": "Yes",
        "desc": "The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the AWS Client VPN Administrator Guide."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint to which the client certificate revocation list applies."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ImportImage",
    "req": {
      "Architecture": {
        "type": "String",
        "required": "No",
        "desc": "The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64"
      },
      "ClientData": {
        "type": "ClientData object",
        "required": "No",
        "desc": "The client-specific data."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "The token to enable idempotency for VM import requests."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description string for the import image task."
      },
      "DiskContainer.N": {
        "type": "Array of ImageDiskContainer objects",
        "required": "No",
        "desc": "Information about the disk containers."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide."
      },
      "Hypervisor": {
        "type": "String",
        "required": "No",
        "desc": "The target hypervisor platform. Valid values: xen"
      },
      "KmsKeyId": {
        "type": "String",
        "required": "No",
        "desc": "An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set. The CMK identifier may be provided in any of the following formats: AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. The specified CMK must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric CMKs."
      },
      "LicenseSpecifications.N": {
        "type": "Array of ImportImageLicenseConfigurationRequest objects",
        "required": "No",
        "desc": "The ARNs of the license configurations."
      },
      "LicenseType": {
        "type": "String",
        "required": "No",
        "desc": "The license type to be used for the Amazon Machine Image (AMI) after importing. By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify AWS to replace the source-system license with an AWS license, if appropriate. Specify BYOL to retain the source-system license, if appropriate. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see Prerequisites in the VM Import/Export User Guide."
      },
      "Platform": {
        "type": "String",
        "required": "No",
        "desc": "The operating system of the virtual machine. Valid values: Windows | Linux"
      },
      "RoleName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the role to use when not using the default role, 'vmimport'."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the import image task during creation."
      }
    },
    "res": {
      "architecture": {
        "type": "String",
        "desc": "The architecture of the virtual machine."
      },
      "description": {
        "type": "String",
        "desc": "A description of the import task."
      },
      "encrypted": {
        "type": "Boolean",
        "desc": "Indicates whether the AMI is encrypted."
      },
      "hypervisor": {
        "type": "String",
        "desc": "The target hypervisor of the import task."
      },
      "imageId": {
        "type": "String",
        "desc": "The ID of the Amazon Machine Image (AMI) created by the import task."
      },
      "importTaskId": {
        "type": "String",
        "desc": "The task ID of the import image task."
      },
      "kmsKeyId": {
        "type": "String",
        "desc": "The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI."
      },
      "licenseSpecifications": {
        "type": "Array of ImportImageLicenseConfigurationResponse objects",
        "desc": "The ARNs of the license configurations."
      },
      "licenseType": {
        "type": "String",
        "desc": "The license type of the virtual machine."
      },
      "platform": {
        "type": "String",
        "desc": "The operating system of the virtual machine."
      },
      "progress": {
        "type": "String",
        "desc": "The progress of the task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotDetailSet": {
        "type": "Array of SnapshotDetail objects",
        "desc": "Information about the snapshots."
      },
      "status": {
        "type": "String",
        "desc": "A brief status of the task."
      },
      "statusMessage": {
        "type": "String",
        "desc": "A detailed status message of the import task."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags assigned to the import image task."
      }
    },
    "err": {}
  },
  {
    "title": "ImportInstance",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the instance being imported."
      },
      "DiskImage.N": {
        "type": "Array of DiskImage objects",
        "required": "No",
        "desc": "The disk image."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchSpecification": {
        "type": "ImportInstanceLaunchSpecification object",
        "required": "No",
        "desc": "The launch specification."
      },
      "Platform": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance operating system."
      }
    },
    "res": {
      "conversionTask": {
        "type": "ConversionTask object",
        "desc": "Information about the conversion task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ImportKeyPair",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "KeyName": {
        "type": "String",
        "required": "Yes",
        "desc": "A unique name for the key pair."
      },
      "PublicKeyMaterial": {
        "type": "Base64-encoded binary data object",
        "required": "Yes",
        "desc": "The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the imported key pair."
      }
    },
    "res": {
      "keyFingerprint": {
        "type": "String",
        "desc": "The MD5 public key fingerprint as specified in section 4 of RFC 4716."
      },
      "keyName": {
        "type": "String",
        "desc": "The key pair name you provided."
      },
      "keyPairId": {
        "type": "String",
        "desc": "The ID of the resulting key pair."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "The tags applied to the imported key pair."
      }
    },
    "err": {}
  },
  {
    "title": "ImportSnapshot",
    "req": {
      "ClientData": {
        "type": "ClientData object",
        "required": "No",
        "desc": "The client-specific data."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Token to enable idempotency for VM import requests."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description string for the import snapshot task."
      },
      "DiskContainer": {
        "type": "SnapshotDiskContainer object",
        "required": "No",
        "desc": "Information about the disk container."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Encrypted": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide."
      },
      "KmsKeyId": {
        "type": "String",
        "required": "No",
        "desc": "An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set. The CMK identifier may be provided in any of the following formats: AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. The specified CMK must exist in the Region that the snapshot is being copied to. Amazon EBS does not support asymmetric CMKs."
      },
      "RoleName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the role to use when not using the default role, 'vmimport'."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the import snapshot task during creation."
      }
    },
    "res": {
      "description": {
        "type": "String",
        "desc": "A description of the import snapshot task."
      },
      "importTaskId": {
        "type": "String",
        "desc": "The ID of the import snapshot task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "snapshotTaskDetail": {
        "type": "SnapshotTaskDetail object",
        "desc": "Information about the import snapshot task."
      },
      "tagSet": {
        "type": "Array of Tag objects",
        "desc": "Any tags assigned to the import snapshot task."
      }
    },
    "err": {}
  },
  {
    "title": "ImportVolume",
    "req": {
      "AvailabilityZone": {
        "type": "String",
        "required": "Yes",
        "desc": "The Availability Zone for the resulting EBS volume."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description of the volume."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Image": {
        "type": "DiskImageDetail object",
        "required": "Yes",
        "desc": "The disk image."
      },
      "Volume": {
        "type": "VolumeDetail object",
        "required": "Yes",
        "desc": "The volume size."
      }
    },
    "res": {
      "conversionTask": {
        "type": "ConversionTask object",
        "desc": "Information about the conversion task."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyAvailabilityZoneGroup",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupName": {
        "type": "String",
        "required": "Yes",
        "desc": "The name of the Availability Zone group, Local Zone group, or Wavelength Zone group."
      },
      "OptInStatus": {
        "type": "String",
        "required": "Yes",
        "desc": "Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is opted-in. You must contact AWS Support to opt out of a Local Zone group, or Wavelength Zone group."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyCapacityReservation",
    "req": {
      "Accept": {
        "type": "Boolean",
        "required": "No",
        "desc": "Reserved. Capacity Reservations you have created are accepted by default."
      },
      "CapacityReservationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Capacity Reservation."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EndDate": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited."
      },
      "EndDateType": {
        "type": "String",
        "required": "No",
        "desc": "Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:"
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of instances for which to reserve capacity."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyClientVpnEndpoint",
    "req": {
      "ClientConnectOptions": {
        "type": "ClientConnectOptions object",
        "required": "No",
        "desc": "The options for managing connection authorization for new client connections."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint to modify."
      },
      "ConnectionLogOptions": {
        "type": "ConnectionLogOptions object",
        "required": "No",
        "desc": "Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:"
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A brief description of the Client VPN endpoint."
      },
      "DnsServers": {
        "type": "DnsServersOptionsModifyStructure object",
        "required": "No",
        "desc": "Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more security groups to apply to the target network."
      },
      "SelfServicePortal": {
        "type": "String",
        "required": "No",
        "desc": "Specify whether to enable the self-service portal for the Client VPN endpoint."
      },
      "ServerCertificateArn": {
        "type": "String",
        "required": "No",
        "desc": "The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM)."
      },
      "SplitTunnel": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide."
      },
      "VpcId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the VPC to associate with the Client VPN endpoint."
      },
      "VpnPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194 Default Value: 443"
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyDefaultCreditSpecification",
    "req": {
      "CpuCredits": {
        "type": "String",
        "required": "Yes",
        "desc": "The credit option for CPU usage of the instance family. Valid Values: standard | unlimited"
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceFamily": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance family."
      }
    },
    "res": {
      "instanceFamilyCreditSpecification": {
        "type": "InstanceFamilyCreditSpecification object",
        "desc": "The default credit option for CPU usage of the instance family."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyEbsDefaultKmsKeyId",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "KmsKeyId": {
        "type": "String",
        "required": "Yes",
        "desc": "The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following: AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails. Amazon EBS does not support asymmetric CMKs."
      }
    },
    "res": {
      "kmsKeyId": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the default CMK for encryption by default."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyFleet",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ExcessCapacityTerminationPolicy": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet."
      },
      "FleetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the EC2 Fleet."
      },
      "LaunchTemplateConfig.N": {
        "type": "Array of FleetLaunchTemplateConfigRequest objects",
        "required": "No",
        "desc": "The launch template and overrides."
      },
      "TargetCapacitySpecification": {
        "type": "TargetCapacitySpecificationRequest object",
        "required": "No",
        "desc": "The size of the EC2 Fleet."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyFpgaImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The name of the attribute."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the AFI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FpgaImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AFI."
      },
      "LoadPermission": {
        "type": "LoadPermissionModifications object",
        "required": "No",
        "desc": "The load permission for the AFI."
      },
      "Name": {
        "type": "String",
        "required": "No",
        "desc": "A name for the AFI."
      },
      "OperationType": {
        "type": "String",
        "required": "No",
        "desc": "The operation type."
      },
      "ProductCode.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the productCodes attribute."
      },
      "UserGroup.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The user groups. This parameter is valid only when modifying the loadPermission attribute."
      },
      "UserId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The AWS account IDs. This parameter is valid only when modifying the loadPermission attribute."
      }
    },
    "res": {
      "fpgaImageAttribute": {
        "type": "FpgaImageAttribute object",
        "desc": "Information about the attribute."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyHosts",
    "req": {
      "AutoPlacement": {
        "type": "String",
        "required": "No",
        "desc": "Specify whether to enable or disable auto-placement."
      },
      "HostId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Dedicated Hosts to modify."
      },
      "HostRecovery": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see Host recovery in the Amazon EC2 User Guide."
      },
      "InstanceFamily": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family. If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request."
      },
      "InstanceType": {
        "type": "String",
        "required": "No",
        "desc": "Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type. If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successful": {
        "type": "Array of strings",
        "desc": "The IDs of the Dedicated Hosts that were successfully modified."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyIdentityIdFormat",
    "req": {
      "PrincipalArn": {
        "type": "String",
        "required": "Yes",
        "desc": "The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account."
      },
      "Resource": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs."
      },
      "UseLongIds": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether the resource should use longer IDs (17-character IDs)"
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyIdFormat",
    "req": {
      "Resource": {
        "type": "String",
        "required": "Yes",
        "desc": "The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs."
      },
      "UseLongIds": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicate whether the resource should use longer IDs (17-character IDs)."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The name of the attribute to modify. The valid values are description, launchPermission, and productCodes."
      },
      "Description": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "A new description for the AMI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AMI."
      },
      "LaunchPermission": {
        "type": "LaunchPermissionModifications object",
        "required": "No",
        "desc": "A new launch permission for the AMI."
      },
      "OperationType": {
        "type": "String",
        "required": "No",
        "desc": "The operation type. This parameter can be used only when the Attribute parameter is launchPermission."
      },
      "ProductCode.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The DevPay product codes. After you add a product code to an AMI, it can't be removed."
      },
      "UserGroup.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The user groups. This parameter can be used only when the Attribute parameter is launchPermission."
      },
      "UserId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The AWS account IDs. This parameter can be used only when the Attribute parameter is launchPermission."
      },
      "Value": {
        "type": "String",
        "required": "No",
        "desc": "The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or productCodes."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstanceAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The name of the attribute."
      },
      "BlockDeviceMapping.N": {
        "type": "Array of InstanceBlockDeviceMappingSpecification objects",
        "required": "No",
        "desc": "Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the block device mapping when launching an instance in the Amazon EC2 User Guide."
      },
      "DisableApiTermination": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EbsOptimized": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance."
      },
      "EnaSupport": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable."
      },
      "GroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "[EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      },
      "InstanceInitiatedShutdownBehavior": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown)."
      },
      "InstanceType": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "Changes the instance type to the specified value. For more information, see Instance types in the Amazon EC2 User Guide. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue."
      },
      "Kernel": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB."
      },
      "Ramdisk": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB."
      },
      "SourceDestCheck": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Specifies whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT."
      },
      "SriovNetSupport": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable."
      },
      "UserData": {
        "type": "BlobAttributeValue object",
        "required": "No",
        "desc": "Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text."
      },
      "Value": {
        "type": "String",
        "required": "No",
        "desc": "A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstanceCapacityReservationAttributes",
    "req": {
      "CapacityReservationSpecification": {
        "type": "CapacityReservationSpecification object",
        "required": "Yes",
        "desc": "Information about the Capacity Reservation targeting option."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance to be modified."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstanceCreditSpecification",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceCreditSpecification.N": {
        "type": "Array of InstanceCreditSpecificationRequest objects",
        "required": "Yes",
        "desc": "Information about the credit option for CPU usage."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successfulInstanceCreditSpecificationSet": {
        "type": "Array of SuccessfulInstanceCreditSpecificationItem objects",
        "desc": "Information about the instances whose credit option for CPU usage was successfully modified."
      },
      "unsuccessfulInstanceCreditSpecificationSet": {
        "type": "Array of UnsuccessfulInstanceCreditSpecificationItem objects",
        "desc": "Information about the instances whose credit option for CPU usage was not modified."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstanceEventStartTime",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceEventId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the event whose date and time you are modifying."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance with the scheduled event."
      },
      "NotBefore": {
        "type": "Timestamp",
        "required": "Yes",
        "desc": "The new date and time when the event will take place."
      }
    },
    "res": {
      "event": {
        "type": "InstanceStatusEvent object",
        "desc": "Describes a scheduled event for an instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstanceMetadataOptions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "HttpEndpoint": {
        "type": "String",
        "required": "No",
        "desc": "This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained."
      },
      "HttpPutResponseHopLimit": {
        "type": "Integer",
        "required": "No",
        "desc": "The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. Possible values: Integers from 1 to 64"
      },
      "HttpTokens": {
        "type": "String",
        "required": "No",
        "desc": "The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "instanceId": {
        "type": "String",
        "desc": "The ID of the instance."
      },
      "instanceMetadataOptions": {
        "type": "InstanceMetadataOptionsResponse object",
        "desc": "The metadata options for the instance."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyInstancePlacement",
    "req": {
      "Affinity": {
        "type": "String",
        "required": "No",
        "desc": "The affinity setting for the instance."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string (\"\")."
      },
      "HostId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the Dedicated Host with which to associate the instance."
      },
      "HostResourceGroupArn": {
        "type": "String",
        "required": "No",
        "desc": "The ARN of the host resource group in which to place the instance."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance that you are modifying."
      },
      "PartitionNumber": {
        "type": "Integer",
        "required": "No",
        "desc": "Reserved for future use."
      },
      "Tenancy": {
        "type": "String",
        "required": "No",
        "desc": "The tenancy for the instance."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyLaunchTemplate",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LaunchTemplateId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "LaunchTemplateName": {
        "type": "String",
        "length": "Minimum length of 3. Maximum length of 128.",
        "pattern": "[a-zA-Z0-9\\(\\)\\.\\-/_]+",
        "required": "No",
        "desc": "The name of the launch template. You must specify either the launch template ID or launch template name in the request."
      },
      "SetDefaultVersion": {
        "type": "String",
        "required": "No",
        "desc": "The version number of the launch template to set as the default version."
      }
    },
    "res": {
      "launchTemplate": {
        "type": "LaunchTemplate object",
        "desc": "Information about the launch template."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyManagedPrefixList",
    "req": {
      "AddEntry.N": {
        "type": "Array of AddPrefixListEntry objects",
        "required": "No",
        "desc": "One or more entries to add to the prefix list."
      },
      "CurrentVersion": {
        "type": "Long",
        "required": "No",
        "desc": "The current version of the prefix list."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      },
      "PrefixListName": {
        "type": "String",
        "required": "No",
        "desc": "A name for the prefix list."
      },
      "RemoveEntry.N": {
        "type": "Array of RemovePrefixListEntry objects",
        "required": "No",
        "desc": "One or more entries to remove from the prefix list."
      }
    },
    "res": {
      "prefixList": {
        "type": "ManagedPrefixList object",
        "desc": "Information about the prefix list."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyNetworkInterfaceAttribute",
    "req": {
      "Attachment": {
        "type": "NetworkInterfaceAttachmentChanges object",
        "required": "No",
        "desc": "Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment."
      },
      "Description": {
        "type": "AttributeValue object",
        "required": "No",
        "desc": "A description for the network interface."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name."
      },
      "SourceDestCheck": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyReservedInstances",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency."
      },
      "ReservedInstancesConfigurationSetItemType.N": {
        "type": "Array of ReservedInstancesConfiguration objects",
        "required": "Yes",
        "desc": "The configuration settings for the Reserved Instances to modify."
      },
      "ReservedInstancesId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Reserved Instances to modify."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesModificationId": {
        "type": "String",
        "desc": "The ID for the modification."
      }
    },
    "err": {}
  },
  {
    "title": "ModifySnapshotAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The snapshot attribute to modify. Only volume creation permissions can be modified."
      },
      "CreateVolumePermission": {
        "type": "CreateVolumePermissionModifications object",
        "required": "No",
        "desc": "A JSON representation of the snapshot attribute modification."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "OperationType": {
        "type": "String",
        "required": "No",
        "desc": "The type of operation to perform to the attribute."
      },
      "SnapshotId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the snapshot."
      },
      "UserGroup.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The group to modify for the snapshot."
      },
      "UserId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The account ID to modify for the snapshot."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifySpotFleetRequest",
    "req": {
      "ExcessCapacityTerminationPolicy": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet."
      },
      "LaunchTemplateConfig.N": {
        "type": "Array of LaunchTemplateConfig objects",
        "required": "No",
        "desc": "The launch template and overrides. You can only use this parameter if you specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request. If you specified LaunchSpecifications in your Spot Fleet request, then omit this parameter."
      },
      "OnDemandTargetCapacity": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of On-Demand Instances in the fleet."
      },
      "SpotFleetRequestId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Spot Fleet request."
      },
      "TargetCapacity": {
        "type": "Integer",
        "required": "No",
        "desc": "The size of the fleet."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifySubnetAttribute",
    "req": {
      "AssignIpv6AddressOnCreation": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API."
      },
      "CustomerOwnedIpv4Pool": {
        "type": "String",
        "required": "No",
        "desc": "The customer-owned IPv4 address pool associated with the subnet. You must set this value when you specify true for MapCustomerOwnedIpOnLaunch."
      },
      "MapCustomerOwnedIpOnLaunch": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address. When this value is true, you must specify the customer-owned IP pool using CustomerOwnedIpv4Pool."
      },
      "MapPublicIpOnLaunch": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address."
      },
      "SubnetId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the subnet."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTrafficMirrorFilterNetworkServices",
    "req": {
      "AddNetworkService.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The network service, for example Amazon DNS, that you want to mirror."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RemoveNetworkService.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The network service, for example Amazon DNS, that you no longer want to mirror."
      },
      "TrafficMirrorFilterId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror filter."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilter": {
        "type": "TrafficMirrorFilter object",
        "desc": "The Traffic Mirror filter that the network service is associated with."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTrafficMirrorFilterRule",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description to assign to the Traffic Mirror rule."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The destination CIDR block to assign to the Traffic Mirror rule."
      },
      "DestinationPortRange": {
        "type": "TrafficMirrorPortRangeRequest object",
        "required": "No",
        "desc": "The destination ports that are associated with the Traffic Mirror rule."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Protocol": {
        "type": "Integer",
        "required": "No",
        "desc": "The protocol, for example TCP, to assign to the Traffic Mirror rule."
      },
      "RemoveField.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The properties that you want to remove from the Traffic Mirror filter rule. When you remove a property from a Traffic Mirror filter rule, the property is set to the default."
      },
      "RuleAction": {
        "type": "String",
        "required": "No",
        "desc": "The action to assign to the rule."
      },
      "RuleNumber": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number."
      },
      "SourceCidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The source CIDR block to assign to the Traffic Mirror rule."
      },
      "SourcePortRange": {
        "type": "TrafficMirrorPortRangeRequest object",
        "required": "No",
        "desc": "The port range to assign to the Traffic Mirror rule."
      },
      "TrafficDirection": {
        "type": "String",
        "required": "No",
        "desc": "The type of traffic (ingress | egress) to assign to the rule."
      },
      "TrafficMirrorFilterRuleId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror rule."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorFilterRule": {
        "type": "TrafficMirrorFilterRule object",
        "desc": "Modifies a Traffic Mirror rule."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTrafficMirrorSession",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description to assign to the Traffic Mirror session."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PacketLength": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet."
      },
      "RemoveField.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The properties that you want to remove from the Traffic Mirror session. When you remove a property from a Traffic Mirror session, the property is set to the default."
      },
      "SessionNumber": {
        "type": "Integer",
        "required": "No",
        "desc": "The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766."
      },
      "TrafficMirrorFilterId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the Traffic Mirror filter."
      },
      "TrafficMirrorSessionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Traffic Mirror session."
      },
      "TrafficMirrorTargetId": {
        "type": "String",
        "required": "No",
        "desc": "The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source."
      },
      "VirtualNetworkId": {
        "type": "Integer",
        "required": "No",
        "desc": "The virtual network ID of the Traffic Mirror session."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "trafficMirrorSession": {
        "type": "TrafficMirrorSession object",
        "desc": "Information about the Traffic Mirror session."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTransitGateway",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "The description for the transit gateway."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "ModifyTransitGatewayOptions object",
        "required": "No",
        "desc": "The options to modify."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGateway": {
        "type": "TransitGateway object",
        "desc": "Describes a transit gateway."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTransitGatewayPrefixListReference",
    "req": {
      "Blackhole": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether to drop traffic that matches this route."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the attachment to which traffic is routed."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPrefixListReference": {
        "type": "TransitGatewayPrefixListReference object",
        "desc": "Information about the prefix list reference."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyTransitGatewayVpcAttachment",
    "req": {
      "AddSubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Options": {
        "type": "ModifyTransitGatewayVpcAttachmentRequestOptions object",
        "required": "No",
        "desc": "The new VPC attachment options."
      },
      "RemoveSubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of one or more subnets to remove."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachment": {
        "type": "TransitGatewayVpcAttachment object",
        "desc": "Information about the modified attachment."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVolume",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Iops": {
        "type": "Integer",
        "required": "No",
        "desc": "The target IOPS rate of the volume. This parameter is valid only for gp3, io1, and io2 volumes. The following are the supported values for each volume type: Default: If no IOPS value is specified, the existing value is retained."
      },
      "MultiAttachEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 Nitro-based instances in the same Availability Zone. This parameter is supported with io1 and io2 volumes only. For more information, see Amazon EBS Multi-Attach in the Amazon Elastic Compute Cloud User Guide."
      },
      "Size": {
        "type": "Integer",
        "required": "No",
        "desc": "The target size of the volume, in GiB. The target volume size must be greater than or equal to the existing size of the volume. The following are the supported volumes sizes for each volume type: Default: If no size is specified, the existing size is retained."
      },
      "Throughput": {
        "type": "Integer",
        "required": "No",
        "desc": "The target throughput of the volume, in MiB/s. This parameter is valid only for gp3 volumes. The maximum value is 1,000. Default: If no throughput value is specified, the existing value is retained. Valid Range: Minimum value of 125. Maximum value of 1000."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      },
      "VolumeType": {
        "type": "String",
        "required": "No",
        "desc": "The target EBS volume type of the volume. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Default: If no type is specified, the existing type is retained."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "volumeModification": {
        "type": "VolumeModification object",
        "desc": "Information about the volume modification."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVolumeAttribute",
    "req": {
      "AutoEnableIO": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Indicates whether the volume should be auto-enabled for I/O operations."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VolumeId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the volume."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcAttribute",
    "req": {
      "EnableDnsHostnames": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support."
      },
      "EnableDnsSupport": {
        "type": "AttributeBooleanValue object",
        "required": "No",
        "desc": "Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range \"plus two\" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcEndpoint",
    "req": {
      "AddRouteTableId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Gateway endpoint) One or more route tables IDs to associate with the endpoint."
      },
      "AddSecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface endpoint) One or more security group IDs to associate with the network interface."
      },
      "AddSubnetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PolicyDocument": {
        "type": "String",
        "required": "No",
        "desc": "(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format."
      },
      "PrivateDnsEnabled": {
        "type": "Boolean",
        "required": "No",
        "desc": "(Interface endpoint) Indicates whether a private hosted zone is associated with the VPC."
      },
      "RemoveRouteTableId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Gateway endpoint) One or more route table IDs to disassociate from the endpoint."
      },
      "RemoveSecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface endpoint) One or more security group IDs to disassociate from the network interface."
      },
      "RemoveSubnetId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "(Interface endpoint) One or more subnets IDs in which to remove the endpoint."
      },
      "ResetPolicy": {
        "type": "Boolean",
        "required": "No",
        "desc": "(Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service."
      },
      "VpcEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the endpoint."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcEndpointConnectionNotification",
    "req": {
      "ConnectionEvents.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "One or more events for the endpoint. Valid values are Accept, Connect, Delete, and Reject."
      },
      "ConnectionNotificationArn": {
        "type": "String",
        "required": "No",
        "desc": "The ARN for the SNS topic for the notification."
      },
      "ConnectionNotificationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the notification."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcEndpointServiceConfiguration",
    "req": {
      "AcceptanceRequired": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether requests to create an endpoint to your service must be accepted."
      },
      "AddGatewayLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your service configuration."
      },
      "AddNetworkLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrivateDnsName": {
        "type": "String",
        "required": "No",
        "desc": "(Interface endpoint configuration) The private DNS name to assign to the endpoint service."
      },
      "RemoveGatewayLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from your service configuration."
      },
      "RemoveNetworkLoadBalancerArn.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration."
      },
      "RemovePrivateDnsName": {
        "type": "Boolean",
        "required": "No",
        "desc": "(Interface endpoint configuration) Removes the private DNS name of the endpoint service."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the service."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcEndpointServicePermissions",
    "req": {
      "AddAllowedPrincipals.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*)."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RemoveAllowedPrincipals.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the service."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcPeeringConnectionOptions",
    "req": {
      "AccepterPeeringConnectionOptions": {
        "type": "PeeringConnectionOptionsRequest object",
        "required": "No",
        "desc": "The VPC peering connection options for the accepter VPC."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RequesterPeeringConnectionOptions": {
        "type": "PeeringConnectionOptionsRequest object",
        "required": "No",
        "desc": "The VPC peering connection options for the requester VPC."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC peering connection."
      }
    },
    "res": {
      "accepterPeeringConnectionOptions": {
        "type": "PeeringConnectionOptions object",
        "desc": "Information about the VPC peering connection options for the accepter VPC."
      },
      "requesterPeeringConnectionOptions": {
        "type": "PeeringConnectionOptions object",
        "desc": "Information about the VPC peering connection options for the requester VPC."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpcTenancy",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceTenancy": {
        "type": "String",
        "required": "Yes",
        "desc": "The instance tenancy attribute for the VPC."
      },
      "VpcId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpnConnection",
    "req": {
      "CustomerGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the customer gateway at your end of the VPN connection."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPN connection."
      },
      "VpnGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the virtual private gateway at the AWS side of the VPN connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnection": {
        "type": "VpnConnection object",
        "desc": "Describes a VPN connection."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpnConnectionOptions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "LocalIpv4NetworkCidr": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0"
      },
      "LocalIpv6NetworkCidr": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0"
      },
      "RemoteIpv4NetworkCidr": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 CIDR on the AWS side of the VPN connection. Default: 0.0.0.0/0"
      },
      "RemoteIpv6NetworkCidr": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR on the AWS side of the VPN connection. Default: ::/0"
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Site-to-Site VPN connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnection": {
        "type": "VpnConnection object",
        "desc": "Describes a VPN connection."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpnTunnelCertificate",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AWS Site-to-Site VPN connection."
      },
      "VpnTunnelOutsideIpAddress": {
        "type": "String",
        "required": "Yes",
        "desc": "The external IP address of the VPN tunnel."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnection": {
        "type": "VpnConnection object",
        "desc": "Describes a VPN connection."
      }
    },
    "err": {}
  },
  {
    "title": "ModifyVpnTunnelOptions",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TunnelOptions": {
        "type": "ModifyVpnTunnelOptionsSpecification object",
        "required": "Yes",
        "desc": "The tunnel options to modify."
      },
      "VpnConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AWS Site-to-Site VPN connection."
      },
      "VpnTunnelOutsideIpAddress": {
        "type": "String",
        "required": "Yes",
        "desc": "The external IP address of the VPN tunnel."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "vpnConnection": {
        "type": "VpnConnection object",
        "desc": "Describes a VPN connection."
      }
    },
    "err": {}
  },
  {
    "title": "MonitorInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the instances."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of InstanceMonitoring objects",
        "desc": "The monitoring information."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "MoveAddressToVpc",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PublicIp": {
        "type": "String",
        "required": "Yes",
        "desc": "The Elastic IP address."
      }
    },
    "res": {
      "allocationId": {
        "type": "String",
        "desc": "The allocation ID for the Elastic IP address."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "String",
        "desc": "The status of the move of the IP address."
      }
    },
    "err": {}
  },
  {
    "title": "ProvisionByoipCidr",
    "req": {
      "Cidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region."
      },
      "CidrAuthorizationContext": {
        "type": "CidrAuthorizationContext object",
        "required": "No",
        "desc": "A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for the address range and the address pool."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PoolTagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the address pool."
      },
      "PubliclyAdvertisable": {
        "type": "Boolean",
        "required": "No",
        "desc": "(IPv6 only) Indicate whether the address range will be publicly advertised to the internet. Default: true"
      }
    },
    "res": {
      "byoipCidr": {
        "type": "ByoipCidr object",
        "desc": "Information about the address range."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "PurchaseHostReservation",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "CurrencyCode": {
        "type": "String",
        "required": "No",
        "desc": "The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD."
      },
      "HostIdSet.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Dedicated Hosts with which the reservation will be associated."
      },
      "LimitPrice": {
        "type": "String",
        "required": "No",
        "desc": "The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00."
      },
      "OfferingId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the offering."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the Dedicated Host Reservation during purchase."
      }
    },
    "res": {
      "clientToken": {
        "type": "String",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "currencyCode": {
        "type": "String",
        "desc": "The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD."
      },
      "purchase": {
        "type": "Array of Purchase objects",
        "desc": "Describes the details of the purchase."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "totalHourlyPrice": {
        "type": "String",
        "desc": "The total hourly price of the reservation calculated per hour."
      },
      "totalUpfrontPrice": {
        "type": "String",
        "desc": "The total amount charged to your account when you purchase the reservation."
      }
    },
    "err": {}
  },
  {
    "title": "PurchaseReservedInstancesOffering",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The number of Reserved Instances to purchase."
      },
      "LimitPrice": {
        "type": "ReservedInstanceLimitPrice object",
        "required": "No",
        "desc": "Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices."
      },
      "PurchaseTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The time at which to purchase the Reserved Instance, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ)."
      },
      "ReservedInstancesOfferingId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Reserved Instance offering to purchase."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservedInstancesId": {
        "type": "String",
        "desc": "The IDs of the purchased Reserved Instances."
      }
    },
    "err": {}
  },
  {
    "title": "PurchaseScheduledInstances",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PurchaseRequest.N": {
        "type": "Array of PurchaseRequest objects",
        "required": "Yes",
        "desc": "The purchase requests."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "scheduledInstanceSet": {
        "type": "Array of ScheduledInstance objects",
        "desc": "Information about the Scheduled Instances."
      }
    },
    "err": {}
  },
  {
    "title": "RebootInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The instance IDs."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "RegisterImage",
    "req": {
      "Architecture": {
        "type": "String",
        "required": "No",
        "desc": "The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file."
      },
      "BillingProduct.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI."
      },
      "BlockDeviceMapping.N": {
        "type": "Array of BlockDeviceMapping objects",
        "required": "No",
        "desc": "The block device mapping entries."
      },
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "A description for your AMI."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EnaSupport": {
        "type": "Boolean",
        "required": "No",
        "desc": "Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable."
      },
      "ImageLocation": {
        "type": "String",
        "required": "No",
        "desc": "The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the aws-exec-read canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see Canned ACLs in the Amazon S3 Service Developer Guide."
      },
      "KernelId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the kernel."
      },
      "Name": {
        "type": "String",
        "required": "Yes",
        "desc": "A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)"
      },
      "RamdiskId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the RAM disk."
      },
      "RootDeviceName": {
        "type": "String",
        "required": "No",
        "desc": "The device name of the root device volume (for example, /dev/sda1)."
      },
      "SriovNetSupport": {
        "type": "String",
        "required": "No",
        "desc": "Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable."
      },
      "VirtualizationType": {
        "type": "String",
        "required": "No",
        "desc": "The type of virtualization (hvm | paravirtual). Default: paravirtual"
      }
    },
    "res": {
      "imageId": {
        "type": "String",
        "desc": "The ID of the newly registered AMI."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RegisterInstanceEventNotificationAttributes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceTagAttribute": {
        "type": "RegisterInstanceTagAttributeRequest object",
        "required": "No",
        "desc": "Information about the tag keys to register."
      }
    },
    "res": {
      "instanceTagAttribute": {
        "type": "InstanceTagNotificationAttribute object",
        "desc": "The resulting set of tag keys."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RegisterTransitGatewayMulticastGroupMembers",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The IP address assigned to the transit gateway multicast group."
      },
      "NetworkInterfaceIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The group members' network interface IDs to register with the transit gateway multicast group."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "registeredMulticastGroupMembers": {
        "type": "TransitGatewayMulticastRegisteredGroupMembers object",
        "desc": "Information about the registered transit gateway multicast group members."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RegisterTransitGatewayMulticastGroupSources",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "The IP address assigned to the transit gateway multicast group."
      },
      "NetworkInterfaceIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The group sources' network interface IDs to register with the transit gateway multicast group."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "registeredMulticastGroupSources": {
        "type": "TransitGatewayMulticastRegisteredGroupSources object",
        "desc": "Information about the transit gateway multicast group sources."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RejectTransitGatewayMulticastDomainAssociations",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SubnetIds.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the subnets to associate with the transit gateway multicast domain."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway attachment."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "associations": {
        "type": "TransitGatewayMulticastDomainAssociations object",
        "desc": "Describes the multicast domain associations."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RejectTransitGatewayPeeringAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway peering attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayPeeringAttachment": {
        "type": "TransitGatewayPeeringAttachment object",
        "desc": "The transit gateway peering attachment."
      }
    },
    "err": {}
  },
  {
    "title": "RejectTransitGatewayVpcAttachment",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the attachment."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "transitGatewayVpcAttachment": {
        "type": "TransitGatewayVpcAttachment object",
        "desc": "Information about the attachment."
      }
    },
    "err": {}
  },
  {
    "title": "RejectVpcEndpointConnections",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the service."
      },
      "VpcEndpointId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of one or more VPC endpoints."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "Information about the endpoints that were not rejected, if applicable."
      }
    },
    "err": {}
  },
  {
    "title": "RejectVpcPeeringConnection",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the VPC peering connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "ReleaseAddress",
    "req": {
      "AllocationId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The allocation ID. Required for EC2-VPC."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkBorderGroup": {
        "type": "String",
        "required": "No",
        "desc": "The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. If you provide an incorrect network border group, you will receive an InvalidAddress.NotFound error. For more information, see Error Codes."
      },
      "PublicIp": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic] The Elastic IP address. Required for EC2-Classic."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ReleaseHosts",
    "req": {
      "HostId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the Dedicated Hosts to release."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "successful": {
        "type": "Array of strings",
        "desc": "The IDs of the Dedicated Hosts that were successfully released."
      },
      "unsuccessful": {
        "type": "Array of UnsuccessfulItem objects",
        "desc": "The IDs of the Dedicated Hosts that could not be released, including an error message."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceIamInstanceProfileAssociation",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the existing IAM instance profile association."
      },
      "IamInstanceProfile": {
        "type": "IamInstanceProfileSpecification object",
        "required": "Yes",
        "desc": "The IAM instance profile."
      }
    },
    "res": {
      "iamInstanceProfileAssociation": {
        "type": "IamInstanceProfileAssociation object",
        "desc": "Information about the IAM instance profile association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceNetworkAclAssociation",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the current association between the original network ACL and the subnet."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkAclId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the new network ACL to associate with the subnet."
      }
    },
    "res": {
      "newAssociationId": {
        "type": "String",
        "desc": "The ID of the new association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceNetworkAclEntry",
    "req": {
      "CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24)."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Egress": {
        "type": "Boolean",
        "required": "Yes",
        "desc": "Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule."
      },
      "Icmp": {
        "type": "IcmpTypeCode object",
        "required": "No",
        "desc": "ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block."
      },
      "Ipv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64)."
      },
      "NetworkAclId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the ACL."
      },
      "PortRange": {
        "type": "PortRange object",
        "required": "No",
        "desc": "TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP)."
      },
      "Protocol": {
        "type": "String",
        "required": "Yes",
        "desc": "The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code."
      },
      "RuleAction": {
        "type": "String",
        "required": "Yes",
        "desc": "Indicates whether to allow or deny the traffic that matches the rule."
      },
      "RuleNumber": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The rule number of the entry to replace."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceRoute",
    "req": {
      "CarrierGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "[IPv4 traffic only] The ID of a carrier gateway."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table."
      },
      "DestinationIpv6CidrBlock": {
        "type": "String",
        "required": "No",
        "desc": "The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table."
      },
      "DestinationPrefixListId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the prefix list for the route."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EgressOnlyInternetGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "[IPv6 traffic only] The ID of an egress-only internet gateway."
      },
      "GatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of an internet gateway or virtual private gateway."
      },
      "InstanceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a NAT instance in your VPC."
      },
      "LocalGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the local gateway."
      },
      "LocalTarget": {
        "type": "Boolean",
        "required": "No",
        "desc": "Specifies whether to reset the local route to its default target (local)."
      },
      "NatGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "[IPv4 traffic only] The ID of a NAT gateway."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a network interface."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      },
      "TransitGatewayId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a transit gateway."
      },
      "VpcEndpointId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only."
      },
      "VpcPeeringConnectionId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of a VPC peering connection."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceRouteTableAssociation",
    "req": {
      "AssociationId": {
        "type": "String",
        "required": "Yes",
        "desc": "The association ID."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the new route table to associate with the subnet."
      }
    },
    "res": {
      "associationState": {
        "type": "RouteTableAssociationState object",
        "desc": "The state of the association."
      },
      "newAssociationId": {
        "type": "String",
        "desc": "The ID of the new association."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ReplaceTransitGatewayRoute",
    "req": {
      "Blackhole": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether traffic matching this route is to be dropped."
      },
      "DestinationCidrBlock": {
        "type": "String",
        "required": "Yes",
        "desc": "The CIDR range used for the destination match. Routing decisions are based on the most specific match."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "TransitGatewayAttachmentId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the attachment."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the route table."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "route": {
        "type": "TransitGatewayRoute object",
        "desc": "Information about the modified route."
      }
    },
    "err": {}
  },
  {
    "title": "ReportInstanceStatus",
    "req": {
      "Description": {
        "type": "String",
        "required": "No",
        "desc": "Descriptive text about the health state of your instance."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EndTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The time at which the reported instance health state ended."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The instances."
      },
      "ReasonCode.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The reason codes that describe the health state of your instance."
      },
      "StartTime": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The time at which the reported instance health state began."
      },
      "Status": {
        "type": "String",
        "required": "Yes",
        "desc": "The status of all instances listed."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "RequestSpotFleet",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SpotFleetRequestConfig": {
        "type": "SpotFleetRequestConfigData object",
        "required": "Yes",
        "desc": "The configuration for the Spot Fleet request."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotFleetRequestId": {
        "type": "String",
        "desc": "The ID of the Spot Fleet request."
      }
    },
    "err": {}
  },
  {
    "title": "RequestSpotInstances",
    "req": {
      "AvailabilityZoneGroup": {
        "type": "String",
        "required": "No",
        "desc": "The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone."
      },
      "BlockDurationMinutes": {
        "type": "Integer",
        "required": "No",
        "desc": "The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration. New accounts or accounts with no previous billing history with AWS are not eligible for Spot Instances with a defined duration (also known as Spot blocks)."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of Spot Instances to launch. Default: 1"
      },
      "InstanceInterruptionBehavior": {
        "type": "String",
        "required": "No",
        "desc": "The behavior when a Spot Instance is interrupted. The default is terminate."
      },
      "LaunchGroup": {
        "type": "String",
        "required": "No",
        "desc": "The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually"
      },
      "LaunchSpecification": {
        "type": "RequestSpotLaunchSpecification object",
        "required": "No",
        "desc": "The launch specification."
      },
      "SpotPrice": {
        "type": "String",
        "required": "No",
        "desc": "The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The key-value pair for tagging the Spot Instance request on creation. The value for ResourceType must be spot-instances-request, otherwise the Spot Instance request fails. To tag the Spot Instance request after it has been created, see CreateTags."
      },
      "Type": {
        "type": "String",
        "required": "No",
        "desc": "The Spot Instance request type. Default: one-time"
      },
      "ValidFrom": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time."
      },
      "ValidUntil": {
        "type": "Timestamp",
        "required": "No",
        "desc": "The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ)."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "spotInstanceRequestSet": {
        "type": "Array of SpotInstanceRequest objects",
        "desc": "One or more Spot Instance requests."
      }
    },
    "err": {}
  },
  {
    "title": "ResetEbsDefaultKmsKeyId",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "kmsKeyId": {
        "type": "String",
        "desc": "The Amazon Resource Name (ARN) of the default CMK for EBS encryption by default."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "ResetFpgaImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "No",
        "desc": "The attribute."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FpgaImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AFI."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ResetImageAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The attribute to reset (currently you can only reset the launch permission attribute)."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ImageId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the AMI."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ResetInstanceAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The attribute to reset."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ResetNetworkInterfaceAttribute",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      },
      "SourceDestCheck": {
        "type": "String",
        "required": "No",
        "desc": "The source/destination checking attribute. Resets the value to true."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "ResetSnapshotAttribute",
    "req": {
      "Attribute": {
        "type": "String",
        "required": "Yes",
        "desc": "The attribute to reset. Currently, only the attribute for permission to create volumes can be reset."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "SnapshotId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the snapshot."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "RestoreAddressToClassic",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PublicIp": {
        "type": "String",
        "required": "Yes",
        "desc": "The Elastic IP address."
      }
    },
    "res": {
      "publicIp": {
        "type": "String",
        "desc": "The Elastic IP address."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "String",
        "desc": "The move status for the IP address."
      }
    },
    "err": {}
  },
  {
    "title": "RestoreManagedPrefixListVersion",
    "req": {
      "CurrentVersion": {
        "type": "Long",
        "required": "Yes",
        "desc": "The current version number for the prefix list."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "PrefixListId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the prefix list."
      },
      "PreviousVersion": {
        "type": "Long",
        "required": "Yes",
        "desc": "The version to restore."
      }
    },
    "res": {
      "prefixList": {
        "type": "ManagedPrefixList object",
        "desc": "Information about the prefix list."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "RevokeClientVpnIngress",
    "req": {
      "AccessGroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the Active Directory group for which to revoke access."
      },
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint with which the authorization rule is associated."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "RevokeAllGroups": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether access should be revoked for all clients."
      },
      "TargetNetworkCidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The IPv4 address range, in CIDR notation, of the network for which access is being removed."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "status": {
        "type": "ClientVpnAuthorizationRuleStatus object",
        "desc": "The current state of the authorization rule."
      }
    },
    "err": {}
  },
  {
    "title": "RevokeSecurityGroupEgress",
    "req": {
      "CidrIp": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the CIDR."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FromPort": {
        "type": "Integer",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the port."
      },
      "GroupId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the security group."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "No",
        "desc": "The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions."
      },
      "IpProtocol": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the protocol name or number."
      },
      "SourceSecurityGroupName": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify a destination security group."
      },
      "SourceSecurityGroupOwnerId": {
        "type": "String",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify a destination security group."
      },
      "ToPort": {
        "type": "Integer",
        "required": "No",
        "desc": "Not supported. Use a set of IP permissions to specify the port."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, returns an error."
      },
      "unknownIpPermissionSet": {
        "type": "Array of IpPermission objects",
        "desc": "The outbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter."
      }
    },
    "err": {}
  },
  {
    "title": "RevokeSecurityGroupIngress",
    "req": {
      "CidrIp": {
        "type": "String",
        "required": "No",
        "desc": "The CIDR IP address range. You can't specify this parameter when specifying a source security group."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FromPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types."
      },
      "GroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "No",
        "desc": "The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions."
      },
      "IpProtocol": {
        "type": "String",
        "required": "No",
        "desc": "The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all."
      },
      "SourceSecurityGroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead."
      },
      "SourceSecurityGroupOwnerId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead."
      },
      "ToPort": {
        "type": "Integer",
        "required": "No",
        "desc": "The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, returns an error."
      },
      "unknownIpPermissionSet": {
        "type": "Array of IpPermission objects",
        "desc": "The inbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter."
      }
    },
    "err": {}
  },
  {
    "title": "RunInstances",
    "req": {
      "AdditionalInfo": {
        "type": "String",
        "required": "No",
        "desc": "Reserved."
      },
      "BlockDeviceMapping.N": {
        "type": "Array of BlockDeviceMapping objects",
        "required": "No",
        "desc": "The block device mapping entries."
      },
      "CapacityReservationSpecification": {
        "type": "CapacityReservationSpecification object",
        "required": "No",
        "desc": "Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone)."
      },
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters"
      },
      "CpuOptions": {
        "type": "CpuOptionsRequest object",
        "required": "No",
        "desc": "The CPU options for the instance. For more information, see Optimizing CPU options in the Amazon EC2 User Guide."
      },
      "CreditSpecification": {
        "type": "CreditSpecificationRequest object",
        "required": "No",
        "desc": "The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use ModifyInstanceCreditSpecification. For more information, see Burstable performance instances in the Amazon EC2 User Guide. Default: standard (T2 instances) or unlimited (T3/T3a instances)"
      },
      "DisableApiTermination": {
        "type": "Boolean",
        "required": "No",
        "desc": "If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false"
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "EbsOptimized": {
        "type": "Boolean",
        "required": "No",
        "desc": "Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false"
      },
      "ElasticGpuSpecification.N": {
        "type": "Array of ElasticGpuSpecification objects",
        "required": "No",
        "desc": "An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see Amazon EC2 Elastic GPUs in the Amazon EC2 User Guide."
      },
      "ElasticInferenceAccelerator.N": {
        "type": "Array of ElasticInferenceAccelerator objects",
        "required": "No",
        "desc": "An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request."
      },
      "EnclaveOptions": {
        "type": "EnclaveOptionsRequest object",
        "required": "No",
        "desc": "Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see What is AWS Nitro Enclaves? in the AWS Nitro Enclaves User Guide. You can't enable AWS Nitro Enclaves and hibernation on the same instance."
      },
      "HibernationOptions": {
        "type": "HibernationOptionsRequest object",
        "required": "No",
        "desc": "Indicates whether an instance is enabled for hibernation. For more information, see Hibernate your instance in the Amazon EC2 User Guide. You can't enable hibernation and AWS Nitro Enclaves on the same instance."
      },
      "IamInstanceProfile": {
        "type": "IamInstanceProfileSpecification object",
        "required": "No",
        "desc": "The IAM instance profile."
      },
      "ImageId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template."
      },
      "InstanceInitiatedShutdownBehavior": {
        "type": "String",
        "required": "No",
        "desc": "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop"
      },
      "InstanceMarketOptions": {
        "type": "InstanceMarketOptionsRequest object",
        "required": "No",
        "desc": "The market (purchasing) option for the instances."
      },
      "InstanceType": {
        "type": "String",
        "required": "No",
        "desc": "The instance type. For more information, see Instance types in the Amazon EC2 User Guide. Default: m1.small"
      },
      "Ipv6Address.N": {
        "type": "Array of InstanceIpv6Address objects",
        "required": "No",
        "desc": "[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request."
      },
      "Ipv6AddressCount": {
        "type": "Integer",
        "required": "No",
        "desc": "[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request."
      },
      "KernelId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the kernel."
      },
      "KeyName": {
        "type": "String",
        "required": "No",
        "desc": "The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair."
      },
      "LaunchTemplate": {
        "type": "LaunchTemplateSpecification object",
        "required": "No",
        "desc": "The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both."
      },
      "LicenseSpecification.N": {
        "type": "Array of LicenseConfigurationRequest objects",
        "required": "No",
        "desc": "The license configurations."
      },
      "MaxCount": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ."
      },
      "MetadataOptions": {
        "type": "InstanceMetadataOptionsRequest object",
        "required": "No",
        "desc": "The metadata options for the instance. For more information, see Instance metadata and user data."
      },
      "MinCount": {
        "type": "Integer",
        "required": "Yes",
        "desc": "The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ."
      },
      "Monitoring": {
        "type": "RunInstancesMonitoringEnabled object",
        "required": "No",
        "desc": "Specifies whether detailed monitoring is enabled for the instance."
      },
      "NetworkInterface.N": {
        "type": "Array of InstanceNetworkInterfaceSpecification objects",
        "required": "No",
        "desc": "The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface."
      },
      "Placement": {
        "type": "Placement object",
        "required": "No",
        "desc": "The placement for the instance."
      },
      "PrivateIpAddress": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request."
      },
      "RamdiskId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID."
      },
      "SecurityGroup.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead. If you specify a network interface, you must specify any security groups as part of the network interface. Default: Amazon EC2 uses the default security group."
      },
      "SecurityGroupId.N": {
        "type": "Array of strings",
        "required": "No",
        "desc": "The IDs of the security groups. You can create a security group using CreateSecurityGroup. If you specify a network interface, you must specify any security groups as part of the network interface."
      },
      "SubnetId": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-VPC] The ID of the subnet to launch the instance into. If you specify a network interface, you must specify any subnets as part of the network interface."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags."
      },
      "UserData": {
        "type": "String",
        "required": "No",
        "desc": "The user data to make available to the instance. For more information, see Running commands on your Linux instance at launch (Linux) and Adding User Data (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB."
      }
    },
    "res": {
      "groupSet": {
        "type": "Array of GroupIdentifier objects",
        "desc": "[EC2-Classic only] The security groups."
      },
      "instancesSet": {
        "type": "Array of Instance objects",
        "desc": "The instances."
      },
      "ownerId": {
        "type": "String",
        "desc": "The ID of the AWS account that owns the reservation."
      },
      "requesterId": {
        "type": "String",
        "desc": "The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling)."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "reservationId": {
        "type": "String",
        "desc": "The ID of the reservation."
      }
    },
    "err": {}
  },
  {
    "title": "RunScheduledInstances",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "No",
        "desc": "Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceCount": {
        "type": "Integer",
        "required": "No",
        "desc": "The number of instances. Default: 1"
      },
      "LaunchSpecification": {
        "type": "ScheduledInstancesLaunchSpecification object",
        "required": "Yes",
        "desc": "The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased."
      },
      "ScheduledInstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The Scheduled Instance ID."
      }
    },
    "res": {
      "instanceIdSet": {
        "type": "Array of strings",
        "desc": "The IDs of the newly launched instances."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "SearchLocalGatewayRoutes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "Yes",
        "desc": "One or more filters."
      },
      "LocalGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the local gateway route table."
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      }
    },
    "res": {
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "routeSet": {
        "type": "Array of LocalGatewayRoute objects",
        "desc": "Information about the routes."
      }
    },
    "err": {}
  },
  {
    "title": "SearchTransitGatewayMulticastGroups",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "No",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value."
      },
      "NextToken": {
        "type": "String",
        "required": "No",
        "desc": "The token for the next page of results."
      },
      "TransitGatewayMulticastDomainId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the transit gateway multicast domain."
      }
    },
    "res": {
      "multicastGroups": {
        "type": "Array of TransitGatewayMulticastGroup objects",
        "desc": "Information about the transit gateway multicast group."
      },
      "nextToken": {
        "type": "String",
        "desc": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "SearchTransitGatewayRoutes",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Filter.N": {
        "type": "Array of Filter objects",
        "required": "Yes",
        "desc": "One or more filters. The possible values are:"
      },
      "MaxResults": {
        "type": "Integer",
        "required": "No",
        "desc": "The maximum number of routes to return."
      },
      "TransitGatewayRouteTableId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the transit gateway route table."
      }
    },
    "res": {
      "additionalRoutesAvailable": {
        "type": "Boolean",
        "desc": "Indicates whether there are additional routes available."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "routeSet": {
        "type": "Array of TransitGatewayRoute objects",
        "desc": "Information about the routes."
      }
    },
    "err": {}
  },
  {
    "title": "SendDiagnosticInterrupt",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the instance."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "StartInstances",
    "req": {
      "AdditionalInfo": {
        "type": "String",
        "required": "No",
        "desc": "Reserved."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the instances."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of InstanceStateChange objects",
        "desc": "Information about the started instances."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "StartNetworkInsightsAnalysis",
    "req": {
      "ClientToken": {
        "type": "String",
        "required": "Yes",
        "desc": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "FilterInArn.N": {
        "type": "Array of strings",
        "length": "Minimum length of 1. Maximum length of 1283.",
        "required": "No",
        "desc": "The Amazon Resource Names (ARN) of the resources that the path must traverse."
      },
      "NetworkInsightsPathId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the path."
      },
      "TagSpecification.N": {
        "type": "Array of TagSpecification objects",
        "required": "No",
        "desc": "The tags to apply."
      }
    },
    "res": {
      "networkInsightsAnalysis": {
        "type": "NetworkInsightsAnalysis object",
        "desc": "Information about the network insights analysis."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "StartVpcEndpointServicePrivateDnsVerification",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "ServiceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the endpoint service."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, it returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "StopInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Force": {
        "type": "Boolean",
        "required": "No",
        "desc": "Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false"
      },
      "Hibernate": {
        "type": "Boolean",
        "required": "No",
        "desc": "Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate your instance in the Amazon EC2 User Guide. Default: false"
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the instances."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of InstanceStateChange objects",
        "desc": "Information about the stopped instances."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "TerminateClientVpnConnections",
    "req": {
      "ClientVpnEndpointId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the Client VPN endpoint to which the client is connected."
      },
      "ConnectionId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the client connection to be terminated."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "Username": {
        "type": "String",
        "required": "No",
        "desc": "The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections."
      }
    },
    "res": {
      "clientVpnEndpointId": {
        "type": "String",
        "desc": "The ID of the Client VPN endpoint."
      },
      "connectionStatuses": {
        "type": "Array of TerminateConnectionStatus objects",
        "desc": "The current state of the client connections."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "username": {
        "type": "String",
        "desc": "The user who established the terminated client connections."
      }
    },
    "err": {}
  },
  {
    "title": "TerminateInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the instances. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of InstanceStateChange objects",
        "desc": "Information about the terminated instances."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "UnassignIpv6Addresses",
    "req": {
      "Ipv6Addresses.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IPv6 addresses to unassign from the network interface."
      },
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      }
    },
    "res": {
      "networkInterfaceId": {
        "type": "String",
        "desc": "The ID of the network interface."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "unassignedIpv6Addresses": {
        "type": "Array of strings",
        "desc": "The IPv6 addresses that have been unassigned from the network interface."
      }
    },
    "err": {}
  },
  {
    "title": "UnassignPrivateIpAddresses",
    "req": {
      "NetworkInterfaceId": {
        "type": "String",
        "required": "Yes",
        "desc": "The ID of the network interface."
      },
      "PrivateIpAddress.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Is true if the request succeeds, and an error otherwise."
      }
    },
    "err": {}
  },
  {
    "title": "UnmonitorInstances",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "InstanceId.N": {
        "type": "Array of strings",
        "required": "Yes",
        "desc": "The IDs of the instances."
      }
    },
    "res": {
      "instancesSet": {
        "type": "Array of InstanceMonitoring objects",
        "desc": "The monitoring information."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  },
  {
    "title": "UpdateSecurityGroupRuleDescriptionsEgress",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "[Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "Yes",
        "desc": "The IP permissions for the security group rule."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "UpdateSecurityGroupRuleDescriptionsIngress",
    "req": {
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      },
      "GroupId": {
        "type": "String",
        "required": "No",
        "desc": "The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID."
      },
      "GroupName": {
        "type": "String",
        "required": "No",
        "desc": "[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request."
      },
      "IpPermissions.N": {
        "type": "Array of IpPermission objects",
        "required": "Yes",
        "desc": "The IP permissions for the security group rule."
      }
    },
    "res": {
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      },
      "return": {
        "type": "Boolean",
        "desc": "Returns true if the request succeeds; otherwise, returns an error."
      }
    },
    "err": {}
  },
  {
    "title": "WithdrawByoipCidr",
    "req": {
      "Cidr": {
        "type": "String",
        "required": "Yes",
        "desc": "The address range, in CIDR notation."
      },
      "DryRun": {
        "type": "Boolean",
        "required": "No",
        "desc": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation."
      }
    },
    "res": {
      "byoipCidr": {
        "type": "ByoipCidr object",
        "desc": "Information about the address pool."
      },
      "requestId": {
        "type": "String",
        "desc": "The ID of the request."
      }
    },
    "err": {}
  }
]