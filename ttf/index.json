[
  {
    "title": "acnt",
    "rows": [
      {
        "title": "accent attachment table",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the accent attachment table (0x00010000 for the current version)."
          },
          {
            "Type": "uint16",
            "Name": "firstAccentGlyphIndex",
            "Description": "The first accented glyph index."
          },
          {
            "Type": "uint16",
            "Name": "lastAccentGlyphIndex",
            "Description": "The last accented glyph index."
          },
          {
            "Type": "uint32",
            "Name": "descriptionOffset",
            "Description": "Offset in bytes to the description data."
          },
          {
            "Type": "uint32",
            "Name": "extensionOffset",
            "Description": "Offset in bytes to the extension data."
          },
          {
            "Type": "uint32",
            "Name": "secondaryOffset",
            "Description": "Offset in bytes to the secondary data."
          },
          {
            "Type": "variable",
            "Name": "glyphs[numberOfAccentedGlyphs]"
          },
          {
            "Type": "variable",
            "Name": "ext[numberOfGlyphsWithMoreThan2Components]"
          },
          {
            "Type": "variable",
            "Name": "accents[numberOfSecondaryGlyphs]"
          }
        ]
      },
      {
        "title": "Format 0 description",
        "rows": [
          {
            "Type": "uint1",
            "Name": "description",
            "Description": "Value = 0 indicates that there are only two components."
          },
          {
            "Type": "uint15",
            "Name": "primaryGlyphIndex",
            "Description": "Number of columns of data."
          },
          {
            "Type": "uint8",
            "Name": "primaryAttachmentPoint",
            "Description": "Primary attachment control point number."
          },
          {
            "Type": "uint8",
            "Name": "secondaryInfoIndex",
            "Description": "Secondary attachment control point number."
          }
        ]
      },
      {
        "title": "Format 1 description",
        "rows": [
          {
            "Type": "uint1",
            "Name": "description",
            "Description": "Value = 1 indicates that there are more than two components"
          },
          {
            "Type": "uint15",
            "Name": "primaryGlyphIndex",
            "Description": "Primary glyph index number."
          },
          {
            "Type": "uint16",
            "Name": "extensionOffset",
            "Description": "Byte offset to the beginning of the extensions subtable."
          }
        ]
      },
      {
        "title": "Extension format",
        "rows": [
          {
            "Type": "uint1",
            "Name": "components",
            "Description": "Value = 0 indicates that there are more components. Value = 1 indicates that this is the last component."
          },
          {
            "Type": "uint7",
            "Name": "secondaryInfoIndex[numberComponents]",
            "Description": "Secondary information index for the first component."
          },
          {
            "Type": "uint8",
            "Name": "primaryAttachmentPoint[numberComponents]",
            "Description": "Primary attachment control point for the first component."
          }
        ]
      },
      {
        "title": "",
        "rows": [
          {
            "Type": "uint16",
            "Name": "secondaryGlyphIndex",
            "Description": "Secondary glyph index. A maximum of 255 entries are allowed."
          },
          {
            "Type": "uint8",
            "Name": "secondaryGlyphAttachmentNumber",
            "Description": "Secondary glyph attachment index number."
          }
        ]
      }
    ]
  },
  {
    "title": "ankr",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "version",
            "Description": "Version number (set to zero)"
          },
          {
            "Type": "UInt16",
            "Name": "flags",
            "Description": "Flags (currently unused; set to zero)"
          },
          {
            "Type": "UInt32",
            "Name": "lookupTableOffset",
            "Description": "Offset to the table's lookup table; currently this is always 0x0000000C"
          },
          {
            "Type": "UInt32",
            "Name": "glyphDataTableOffset",
            "Description": "Offset to the glyph data table"
          }
        ]
      },
      {
        "title": "glyph data entry",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "numPoints",
            "Description": "Number of anchor points for this glyph"
          },
          {
            "Type": "UInt32[]",
            "Name": "anchorPoints",
            "Description": "Individual anchor points. Each anchor point is a two-byte signed x-coordinate followed by a two-byte signed y-coordinate"
          }
        ]
      }
    ]
  },
  {
    "title": "avar",
    "tables": [
      {
        "title": "Axis Variation Header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Meaning": "Table version; set to 0x00010000."
          },
          {
            "Type": "int32",
            "Name": "axisCount",
            "Meaning": "The number of variation axes."
          },
          {
            "Type": "shortFracSegment",
            "Name": "segment[axisCount]",
            "Meaning": "The segment maps for each axis."
          }
        ]
      },
      {
        "title": "shortFracSegment format",
        "rows": [
          {
            "Type": "uint16",
            "Name": "pairCount",
            "Meaning": "The number of pairs for this axis."
          },
          {
            "Type": "shortFracCorrespondence",
            "Name": "correspondence[pairCount]",
            "Meaning": "The array of correspondence values."
          }
        ]
      },
      {
        "title": "shortFracCorrespondence structure",
        "rows": [
          {
            "Type": "shortFrac",
            "Name": "fromCoord",
            "Meaning": "Value in normalized user space."
          },
          {
            "Type": "shortFrac",
            "Name": "toCoord",
            "Meaning": "Value in normalized axis space."
          }
        ]
      }
    ]
  },
  {
    "title": "bdat",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the bitmap data table (0x00020000 for the initial version)."
          },
          {
            "Type": "variable",
            "Name": "glyphbitmap[numberBitMaps]",
            "Description": "The set of bitmapped glyphs included for this font. Formats are 1, 2, 4, 5, 6, and 7."
          }
        ]
      },
      {
        "title": "bitmap data format codes",
        "rows": [
          {
            "Format": "1",
            "Name": "proportionalFormat1",
            "Description": "Small metrics and byte-aligned images."
          },
          {
            "Format": "2",
            "Name": "proportionalFormat2",
            "Description": "Small metrics and bit-aligned images."
          },
          {
            "Format": "3",
            "Name": "(not used)",
            "Description": "(not used)"
          },
          {
            "Format": "4",
            "Name": "monoCompressedFormat4",
            "Description": "Just compressed images, metrics are in the bitmap location table."
          },
          {
            "Format": "5",
            "Name": "monoFormat5",
            "Description": "Just bit-aligned images, metrics are in the bitmap location table."
          },
          {
            "Format": "6",
            "Name": "proportionalByteFormat6",
            "Description": "Big metrics and byte-aligned images."
          },
          {
            "Format": "7",
            "Name": "proportionalBitFormat7",
            "Description": "Big metrics and bit-aligned images."
          }
        ]
      },
      {
        "title": "bigGlyphMetrics",
        "rows": [
          {
            "Type": "uint8",
            "Name": "height",
            "Description": "Number of rows of data."
          },
          {
            "Type": "uint8",
            "Name": "width",
            "Description": "Number of columns of data."
          },
          {
            "Type": "sint8",
            "Name": "horiBearingX",
            "Description": "Distance in pixels from the horizontal origin to the left edge of the bitmap."
          },
          {
            "Type": "sint8",
            "Name": "horiBearingY",
            "Description": "Distance in pixels from the horizontal origin to the top edge of the bitmap."
          },
          {
            "Type": "uint8",
            "Name": "horiAdvance",
            "Description": "Horizontal advance width in pixels."
          },
          {
            "Type": "sint8",
            "Name": "vertBearingX",
            "Description": "Distance in pixels from the vertical origin to the left edge of the bitmap."
          },
          {
            "Type": "sint8",
            "Name": "vertBearingY",
            "Description": "Distance in pixels from the vertical origin to the top edge of the bitmap."
          },
          {
            "Type": "uint8",
            "Name": "vertAdvance",
            "Description": "Vertical advance width in pixels."
          }
        ]
      },
      {
        "title": "smallGlyphMetrics",
        "rows": [
          {
            "Type": "uint8",
            "Name": "height",
            "Description": "Number of rows of data."
          },
          {
            "Type": "uint8",
            "Name": "width",
            "Description": "Number of columns of data."
          },
          {
            "Type": "sint8",
            "Name": "bearingX",
            "Description": "Distance in pixels from the horizontal origin to the left edge of the bitmap (for horizontal text); or distance in pixels from the vertical origin to the top edge of the bitmap (for vertical text)."
          },
          {
            "Type": "sint8",
            "Name": "bearingY",
            "Description": "Distance in pixels from the horizontal origin to the top edge of the bitmap (for horizontal text); or distance in pixels from the vertical origin to the left edge of the bitmap (for vertical text)."
          },
          {
            "Type": "uint8",
            "Name": "advance",
            "Description": "Horizontal or vertical advance width in pixels."
          }
        ]
      },
      {
        "title": "Format 1 glyph bitmap",
        "rows": [
          {
            "Type": "smallGlyphMetrics",
            "Name": "smallMetrics",
            "Description": "Metric information for the glyph."
          },
          {
            "Type": "variable",
            "Name": "imageData",
            "Description": "Byte-aligned bitmap data."
          }
        ]
      },
      {
        "title": "Format 2 glyph bitmap",
        "rows": [
          {
            "Type": "smallGlyphMetrics",
            "Name": "smallMetrics",
            "Description": "Metric information for the glyph."
          },
          {
            "Type": "variable",
            "Name": "imageData",
            "Description": "Bit-aligned bitmap data padded to a byte boundary."
          }
        ]
      },
      {
        "title": "Format 4 glyph bitmap",
        "rows": [
          {
            "Type": "uint32",
            "Name": "whiteTreeOffset",
            "Description": "Offset to the white tree."
          },
          {
            "Type": "uint32",
            "Name": "blackTreeOffset",
            "Description": "Offset to the black tree."
          },
          {
            "Type": "uint32",
            "Name": "glyphDataOffset",
            "Description": "Offset to the glyph data."
          },
          {
            "Type": "variable",
            "Name": "trees and glyph data",
            "Description": "The white tree, black tree, and glyph is found after all of the glyph bitmap 4 data arrays."
          }
        ]
      },
      {
        "title": "Format 5 glyph bitmap",
        "rows": [
          {
            "Type": "variable",
            "Name": "imageData",
            "Description": "Bit-aligned bitmap data padded to byte boundaries."
          }
        ]
      },
      {
        "title": "Format 6 glyph bitmap",
        "rows": [
          {
            "Type": "bigGlyphMetrics",
            "Name": "bigMetrics",
            "Description": "Metric information for the glyph."
          },
          {
            "Type": "variable",
            "Name": "imageData",
            "Description": "Byte-aligned bitmap data."
          }
        ]
      },
      {
        "title": "Format 7 glyph bitmap",
        "rows": [
          {
            "Type": "bigGlyphMetrics",
            "Name": "bigMetrics",
            "Description": "Metric information for the glyph."
          },
          {
            "Type": "variable",
            "Name": "imageData",
            "Description": "Bit-aligned bitmap data."
          }
        ]
      }
    ]
  },
  {
    "title": "bloc",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "fixed",
            "Name": "version",
            "Description": "Version number of the bitmap location table (0x00020000 for the initial version)."
          },
          {
            "Type": "uint32",
            "Name": "numSizes",
            "Description": "The number of bitmapSizeTables in this table."
          },
          {
            "Type": "variable",
            "Name": "bitmapSizeTable[numSizes]",
            "Description": "Subtables describing the general characteristics of the bitmapped glyphs in this font. Also contains the indexSubTableArrayOffset."
          }
        ]
      },
      {
        "title": "bitmapSizeTable",
        "rows": [
          {
            "Type": "uint32",
            "Name": "indexSubTableArrayOffset",
            "Description": "Offset to corresponding index subtable array from the beginning of the 'bloc'."
          },
          {
            "Type": "uint32",
            "Name": "indexTableSize",
            "Description": "Length of corresponding index subtables and array"
          },
          {
            "Type": "uint32",
            "Name": "numberOfIndexSubTables",
            "Description": "Number of index subtables (there is one for each range or format change)."
          },
          {
            "Type": "uint32",
            "Name": "colorRef",
            "Description": "Set to 0, ignore for now."
          },
          {
            "Type": "sbitLineMetrics",
            "Name": "hori",
            "Description": "Horizontal line metrics."
          },
          {
            "Type": "sbitLineMetrics",
            "Name": "vert",
            "Description": "Vertical line metrics."
          },
          {
            "Type": "uint16",
            "Name": "startGlyphIndex",
            "Description": "Lowest glyph index for this size."
          },
          {
            "Type": "uint16",
            "Name": "endGlyphIndex",
            "Description": "Highest glyph index for this size."
          },
          {
            "Type": "uint8",
            "Name": "ppemX",
            "Description": "Target horizontal ppem."
          },
          {
            "Type": "uint8",
            "Name": "ppemY",
            "Description": "Target vertical ppem."
          },
          {
            "Type": "uint8",
            "Name": "bitDepth",
            "Description": "Bit depth of the strike."
          },
          {
            "Type": "uint8",
            "Name": "flags",
            "Description": "See table below; first two bits are for orientation, vertical or horizontal."
          }
        ]
      },
      {
        "title": "how the colorRef and bitDepth values are used",
        "rows": [
          {
            "bitDepth": "1",
            "colorRef": "0",
            "Meaning": "Standard 1-bit font."
          },
          {
            "bitDepth": "n",
            "colorRef": "0",
            "Meaning": "Multi-bit black and white font."
          },
          {
            "bitDepth": "n",
            "colorRef": "m",
            "Meaning": "Color, grayscale, anti-aliased, etc."
          }
        ]
      },
      {
        "title": "sbitLineMetrics record",
        "rows": [
          {
            "Type": "int8",
            "Name": "ascender",
            "Description": "This is the spacing of the line before the baseline."
          },
          {
            "Type": "int8",
            "Name": "descender",
            "Description": "This is the spacing of the line after the baseline."
          },
          {
            "Type": "uint8",
            "Name": "widthMax",
            "Description": "Maximum pixel width of glyphs in strike. (Not used by AAT, may be used by other platforms.)"
          },
          {
            "Type": "int8",
            "Name": "caretSlopeNumerator",
            "Description": "Rise of the caret slope, typically set to 1 for non-italic fonts."
          },
          {
            "Type": "int8",
            "Name": "caretSlopeDenominator",
            "Description": "Run of the caret slope, typically set to 0 for non-italic fonts."
          },
          {
            "Type": "int8",
            "Name": "caretOffset",
            "Description": "Offset in pixels to move the caret for proper positioning."
          },
          {
            "Type": "int8",
            "Name": "minOriginSB",
            "Description": "Minimum of horiBearingX (or vertBearingY for a vertical font)."
          },
          {
            "Type": "int8",
            "Name": "minAdvanceSB",
            "Description": "Minimum of horiAdvance - horiBearingX + width (or vertAdvance - vertBearingY + height for a vertical font). (Not used by AAT, may be used by other platforms)"
          },
          {
            "Type": "int8",
            "Name": "maxBeforeBL",
            "Description": "Maximum of horiBearingY (or vertBearingY for a vertical font). (Not used by AAT, may be used by other platforms)"
          },
          {
            "Type": "int8",
            "Name": "minAfterBL",
            "Description": "Minimum of horiBearingY - height (or vertBearingX - width for a vertical font). (Not used by AAT, may be used by other platforms)"
          },
          {
            "Type": "int16",
            "Name": "pad",
            "Description": "Padding to make long aligned."
          }
        ]
      },
      {
        "title": "bitmapSizeTable.flag field",
        "rows": [
          {
            "Mask": "0x01",
            "Name": "flgHorizontal",
            "Meaning": "Small metrics are horizontal for the given strike."
          },
          {
            "Mask": "0x02",
            "Name": "flgVertical",
            "Meaning": "Small metrics are vertical for the given strike."
          }
        ]
      },
      {
        "title": "indexSubTableArray",
        "rows": [
          {
            "Type": "uint16",
            "Name": "firstGlyphIndex",
            "Description": "Index of first glyph in this range."
          },
          {
            "Type": "uint16",
            "Name": "lastGlyphIndex",
            "Description": "Index of last glyph in this range."
          },
          {
            "Type": "uint32",
            "Name": "additionalOffsetToIndexSubtable",
            "Description": "Used to reach the indexSubTable; add to indexSubTableArrayOffset to get the offset from the beginning of the 'bloc' table."
          }
        ]
      },
      {
        "title": "format of the index subheader",
        "rows": [
          {
            "Type": "uint16",
            "Name": "indexFormat",
            "Description": "Format number (1 is proportional with 4-byte offset deltas, 2 is monospaced, and 3 is proportional with 2-byte offset deltas)."
          },
          {
            "Type": "uint16",
            "Name": "imageFormat",
            "Description": "Code for the kind of image data. See the description of the 'bdat' table for the interpretation of this value."
          },
          {
            "Type": "uint32",
            "Name": "imageDataOffset",
            "Description": "Offset to the base of the image data for this index subtable."
          }
        ]
      },
      {
        "title": "Format 1 bitmap index subtable",
        "rows": [
          {
            "Type": "indexSubHeader",
            "Name": "header",
            "Description": "Header info as described above."
          },
          {
            "Type": "uint32",
            "Name": "offsetArray[]",
            "Description": "offsetArray[glyphIndex] + imageDataOffset = start of the bitmap data for the glyph."
          }
        ]
      },
      {
        "title": "Format 3 bitmap index subtable",
        "rows": [
          {
            "Type": "indexSubHeader",
            "Name": "header",
            "Description": "Header info as described above."
          },
          {
            "Type": "uint16",
            "Name": "offsetArray[]",
            "Description": "offsetArray[glyphIndex] + imageDataOffset = start of the bitmap data for the glyph."
          }
        ]
      },
      {
        "title": "Format 2 bitmap index subtable",
        "rows": [
          {
            "Type": "indexSubHeader",
            "Name": "header",
            "Description": "Header info as described above."
          },
          {
            "Type": "uint32",
            "Name": "imageSize",
            "Description": "All the glyphs are of the same size. May be compressed, bit-aligned, or byte-aligned."
          },
          {
            "Type": "bigGlyphMetrics",
            "Name": "bigMetrics",
            "Description": "All the glyphs share the same metrics."
          }
        ]
      }
    ]
  },
  {
    "title": "bsln",
    "tables": [
      {
        "title": "Baselines with values of 0 through 4 should be provided for all horizontal AAT fonts",
        "rows": [
          {
            "Value": "0",
            "Description": "Roman baseline. This defines the alignment used in most Latin script languages, where most of the glyph is above the baseline, with portions (such as descenders) possibly below it. The baseline appears near the bottom of the entire line."
          },
          {
            "Value": "1",
            "Description": "Ideographic centered baseline. This defines the behavior used by Chinese, Japanese and Korean ideographic scripts, which center themselves halfway through the line height."
          },
          {
            "Value": "2",
            "Description": "Ideographic low baseline. This also defines behavior used in Chinese, Japanese and Korean, like the previous value, but with the glyphs lowered slightly so that ideographs that appear adjacent to Latin characters appear to descend slightly below the roman baseline."
          },
          {
            "Value": "3",
            "Description": "Hanging baseline. This defines the alignment used in Devanagari and derived scripts, where most of the bulk of the glyphs are below the baseline, with some portions possibly above it, and where the baseline itself appears near the top of the line. This value is also used for drop capitals."
          },
          {
            "Value": "4",
            "Description": "Math baseline. This defines the alignment used for setting mathematics, where operators like the minus sign need to be centered. It will usually be set at half the x-height in a font."
          }
        ]
      },
      {
        "title": "baseline table format",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the Baseline table (0x00010000 for the current version)."
          },
          {
            "Type": "uint16",
            "Name": "format",
            "Description": "Format of the baseline table. Only one baseline format may be selected for the font."
          },
          {
            "Type": "uint16",
            "Name": "defaultBaseline",
            "Description": "Default baseline value for all glyphs. This value can be from 0 through 31."
          },
          {
            "Type": "variable",
            "Name": "parts",
            "Description": "Format-specific data. This will be either a Format0Part, a Format1Part, a Format2Part or a Format3Part, depending on the value of the format field."
          }
        ]
      },
      {
        "title": "Baseline tables can have one of the following formats",
        "rows": [
          {
            "Value": "0",
            "Description": "Distance-based, no mapping."
          },
          {
            "Value": "1",
            "Description": "Distance-based, with mapping."
          },
          {
            "Value": "2",
            "Description": "Control point-based, no mapping."
          },
          {
            "Value": "3",
            "Description": "Control point-based, with mapping."
          }
        ]
      },
      {
        "title": "lookup table",
        "rows": [
          {
            "Lookup format": "0",
            "Interpretation": "Array of 16-bit baseline values, one for each glyph in the font."
          },
          {
            "Lookup format": "2",
            "Interpretation": "The value of each lookupSegment is a 16-bit baseline value."
          },
          {
            "Lookup format": "4",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the lookup table to an array of 16-bit baseline values, one for each glyph in the segment."
          },
          {
            "Lookup format": "6",
            "Interpretation": "The value of each lookupSingle is a 16-bit baseline value for that glyph."
          },
          {
            "Lookup format": "8",
            "Interpretation": "The valueArray is an array of 16-bit baseline values, one for each glyph in the trimmed array."
          }
        ]
      },
      {
        "title": "Format 0 Baseline Table",
        "rows": [
          {
            "Type": "int16",
            "Name": "deltas[]",
            "Description": "These are the FUnit distance deltas from the font's natural baseline to the other baselines used in the font. A total of 32 deltas must be assigned."
          }
        ]
      },
      {
        "title": "Format 1 Baseline Table",
        "rows": [
          {
            "Type": "int16",
            "Name": "deltas[]",
            "Description": "These are the FUnit distance deltas from the font's natural baseline to the other baselines used in the font. A total of 32 deltas must be assigned."
          },
          {
            "Type": "LookupTable",
            "Name": "mappingData",
            "Description": "Lookup table that maps glyphs to their baseline values. See above for interpretation of the lookup values."
          }
        ]
      },
      {
        "title": "Format 2 Baseline Table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "stdGlyph",
            "Description": "The specific glyph index number in this font that is used to set the baseline values. This is the standard glyph. This glyph must contain a set of control points (whose numbers are contained in the ctlPoints field) that are used to determine baseline distances."
          },
          {
            "Type": "uint16",
            "Name": "ctlPoints[]",
            "Description": "Set of control point numbers, associated with the standard glyph. A value of 0xFFFF means there is no corresponding control point in the standard glyph. A total of 32 control points must be assigned."
          }
        ]
      },
      {
        "title": "Format 3 Baseline Table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "stdGlyph",
            "Description": "Glyph index of the glyph in this font to be used to set the baseline values. This glyph must contain a set of control points (whose numbers are contained in the following field) that determines baseline distances."
          },
          {
            "Type": "uint16",
            "Name": "ctlPoints[]",
            "Description": "Array of 32 control point numbers, associated with the standard glyph. A value of 0xFFFF means there is no corresponding control point in the standard glyph."
          },
          {
            "Type": "LookupTable",
            "Name": "mappingData",
            "Description": "Lookup table that maps glyphs to their baseline values. See above for interpretation of the lookup values."
          }
        ]
      },
      {
        "title": "baseline data for a distance-based baseline",
        "rows": [
          {
            "Baseline": "Roman",
            "Baseline value": "0",
            "Delta value (FUnits)": "0"
          },
          {
            "Baseline": "Ideographic Centered",
            "Baseline value": "1",
            "Delta value (FUnits)": "352"
          },
          {
            "Baseline": "Ideographic Low",
            "Baseline value": "2",
            "Delta value (FUnits)": "352"
          },
          {
            "Baseline": "Hanging",
            "Baseline value": "3",
            "Delta value (FUnits)": "705"
          },
          {
            "Baseline": "Math",
            "Baseline value": "4",
            "Delta value (FUnits)": "352"
          }
        ]
      },
      {
        "title": "baseline data for a control point-based baseline",
        "rows": [
          {
            "Baseline": "Roman",
            "Baseline value": "0",
            "Control point": "34"
          },
          {
            "Baseline": "Ideographic Centered",
            "Baseline value": "1",
            "Control point": "35"
          },
          {
            "Baseline": "Ideographic Low",
            "Baseline value": "2",
            "Control point": "35"
          },
          {
            "Baseline": "Hanging",
            "Baseline value": "3",
            "Control point": "36"
          },
          {
            "Baseline": "Math",
            "Baseline value": "4",
            "Control point": "35"
          }
        ]
      }
    ]
  },
  {
    "title": "cmap",
    "tables": [
      {
        "title": "index",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "version",
            "Description": "Version number (Set to zero)"
          },
          {
            "Type": "UInt16",
            "Name": "numberSubtables",
            "Description": "Number of encoding subtables"
          }
        ]
      },
      {
        "title": "subtable",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "platformID",
            "Description": "Platform identifier"
          },
          {
            "Type": "UInt16",
            "Name": "platformSpecificID",
            "Description": "Platform-specific encoding identifier"
          },
          {
            "Type": "UInt32",
            "Name": "offset",
            "Description": "Offset of the mapping table"
          }
        ]
      },
      {
        "title": "Platforms",
        "rows": [
          {
            "Platform ID": "0",
            "Platform": "Unicode",
            "Platform-specific ID": "Indicates Unicode version."
          },
          {
            "Platform ID": "1",
            "Platform": "Macintosh",
            "Platform-specific ID": "Script Manager code."
          },
          {
            "Platform ID": "2",
            "Platform": "(reserved; do not use)"
          },
          {
            "Platform ID": "3",
            "Platform": "Microsoft",
            "Platform-specific ID": "Microsoft encoding."
          }
        ]
      },
      {
        "title": "Unicode encoding",
        "rows": [
          {
            "Platform- specific ID code": "0",
            "Meaning": "Version 1.0 semantics"
          },
          {
            "Platform- specific ID code": "1",
            "Meaning": "Version 1.1 semantics"
          },
          {
            "Platform- specific ID code": "2",
            "Meaning": "ISO 10646 1993 semantics (deprecated)"
          },
          {
            "Platform- specific ID code": "3",
            "Meaning": "Unicode 2.0 or later semantics (BMP only)"
          },
          {
            "Platform- specific ID code": "4",
            "Meaning": "Unicode 2.0 or later semantics (non-BMP characters allowed)"
          },
          {
            "Platform- specific ID code": "5",
            "Meaning": "Unicode Variation Sequences"
          },
          {
            "Platform- specific ID code": "6",
            "Meaning": "Last Resort"
          }
        ]
      },
      {
        "title": "Windows encoding",
        "rows": [
          {
            "Platform- specific ID code": "0",
            "Meaning": "Symbol"
          },
          {
            "Platform- specific ID code": "1",
            "Meaning": "Unicode BMP-only (UCS-2)"
          },
          {
            "Platform- specific ID code": "2",
            "Meaning": "Shift-JIS"
          },
          {
            "Platform- specific ID code": "3",
            "Meaning": "PRC"
          },
          {
            "Platform- specific ID code": "4",
            "Meaning": "BigFive"
          },
          {
            "Platform- specific ID code": "5",
            "Meaning": "Johab"
          },
          {
            "Platform- specific ID code": "10",
            "Meaning": "Unicode UCS-4"
          }
        ]
      },
      {
        "title": "format 0",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Set to 0"
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "Length in bytes of the subtable (set to 262 for format 0)"
          },
          {
            "Type": "UInt16",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt8",
            "Name": "glyphIndexArray[256]",
            "Description": "An array that maps character codes to glyph index values"
          }
        ]
      },
      {
        "title": "format 2",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Set to 2"
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "Total table length in bytes"
          },
          {
            "Type": "UInt16",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt16",
            "Name": "subHeaderKeys[256]",
            "Description": "Array that maps high bytes to subHeaders: value is index * 8"
          },
          {
            "Type": "UInt16 * 4",
            "Name": "subHeaders[variable]",
            "Description": "Variable length array of subHeader structures"
          },
          {
            "Type": "UInt16",
            "Name": "glyphIndexArray[variable]",
            "Description": "Variable length array containing subarrays"
          }
        ]
      },
      {
        "title": "format 4",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Format number is set to 4"
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "Length of subtable in bytes"
          },
          {
            "Type": "UInt16",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt16",
            "Name": "segCountX2",
            "Description": "2 * segCount"
          },
          {
            "Type": "UInt16",
            "Name": "searchRange",
            "Description": "2 * (2**FLOOR(log2(segCount)))"
          },
          {
            "Type": "UInt16",
            "Name": "entrySelector",
            "Description": "log2(searchRange/2)"
          },
          {
            "Type": "UInt16",
            "Name": "rangeShift",
            "Description": "(2 * segCount) - searchRange"
          },
          {
            "Type": "UInt16",
            "Name": "endCode[segCount]",
            "Description": "Ending character code for each segment, last = 0xFFFF."
          },
          {
            "Type": "UInt16",
            "Name": "reservedPad",
            "Description": "This value should be zero"
          },
          {
            "Type": "UInt16",
            "Name": "startCode[segCount]",
            "Description": "Starting character code for each segment"
          },
          {
            "Type": "UInt16",
            "Name": "idDelta[segCount]",
            "Description": "Delta for all character codes in segment"
          },
          {
            "Type": "UInt16",
            "Name": "idRangeOffset[segCount]",
            "Description": "Offset in bytes to glyph indexArray, or 0"
          },
          {
            "Type": "UInt16",
            "Name": "glyphIndexArray[variable]",
            "Description": "Glyph index array"
          }
        ]
      },
      {
        "title": "format 6",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Format number is set to 6"
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "Length in bytes"
          },
          {
            "Type": "UInt16",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt16",
            "Name": "firstCode",
            "Description": "First character code of subrange"
          },
          {
            "Type": "UInt16",
            "Name": "entryCount",
            "Description": "Number of character codes in subrange"
          },
          {
            "Type": "UInt16",
            "Name": "glyphIndexArray[entryCount]",
            "Description": "Array of glyph index values for character codes in the range"
          }
        ]
      },
      {
        "title": "format 8–Mixed 16-bit and 32-bit coverage",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Subtable format; set to 8"
          },
          {
            "Type": "UInt16",
            "Name": "reserved",
            "Description": "Set to 0"
          },
          {
            "Type": "UInt32",
            "Name": "length",
            "Description": "Byte length of this subtable (including the header)"
          },
          {
            "Type": "UInt32",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt8",
            "Name": "is32[65536]",
            "Description": "Tightly packed array of bits (8K bytes total) indicating whether the particular 16-bit (index) value is the start of a 32-bit character code"
          },
          {
            "Type": "UInt32",
            "Name": "nGroups",
            "Description": "Number of groupings which follow"
          }
        ]
      },
      {
        "title": "individual groups",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "startCharCode",
            "Description": "First character code in this group; note that if this group is for one or more 16-bit character codes (which is determined from the is32 array), this 32-bit value will have the high 16-bits set to zero"
          },
          {
            "Type": "UInt32",
            "Name": "endCharCode",
            "Description": "Last character code in this group; same condition as listed above for the startCharCode"
          },
          {
            "Type": "UInt32",
            "Name": "startGlyphCode",
            "Description": "Glyph index corresponding to the starting character code"
          }
        ]
      },
      {
        "title": "format 10–Trimmed array",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Subtable format; set to 10"
          },
          {
            "Type": "UInt16",
            "Name": "reserved",
            "Description": "Set to 10"
          },
          {
            "Type": "UInt32",
            "Name": "length",
            "Description": "Byte length of this subtable (including the header)"
          },
          {
            "Type": "UInt32",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt32",
            "Name": "startCharCode",
            "Description": "First character code covered"
          },
          {
            "Type": "UInt32",
            "Name": "numChars",
            "Description": "Number of character codes covered"
          },
          {
            "Type": "UInt16",
            "Name": "glyphs[]",
            "Description": "Array of glyph indices for the character codes covered"
          }
        ]
      },
      {
        "title": "format 12–Segmented coverage",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Subtable format; set to 12"
          },
          {
            "Type": "UInt16",
            "Name": "reserved",
            "Description": "Set to 0."
          },
          {
            "Type": "UInt32",
            "Name": "length",
            "Description": "Byte length of this subtable (including the header)"
          },
          {
            "Type": "UInt32",
            "Name": "language",
            "Description": "Language code (see above)"
          },
          {
            "Type": "UInt32",
            "Name": "nGroups",
            "Description": "Number of groupings which follow"
          }
        ]
      },
      {
        "title": "Format 14 header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "format",
            "Description": "Subtable format. Set to 14."
          },
          {
            "Type": "uint32",
            "Name": "length",
            "Description": "Byte length of this subtable (including this header)"
          },
          {
            "Type": "uint32",
            "Name": "numVarSelectorRecords",
            "Description": "Number of variation Selector Records"
          }
        ]
      },
      {
        "title": "Variation Selector Record",
        "rows": [
          {
            "Type": "uint24",
            "Name": "varSelector",
            "Description": "Variation selector"
          },
          {
            "Type": "uint32",
            "Name": "defaultUVSOffset",
            "Description": "Offset to Default UVS Table. May be 0."
          },
          {
            "Type": "uint32",
            "Name": "nonDefaultUVSOffset",
            "Description": "Offset to Non-Default UVS Table. May be 0."
          }
        ]
      },
      {
        "title": "Default UVS Table header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "numUnicodeValueRanges",
            "Description": "Number of ranges that follow"
          }
        ]
      },
      {
        "title": "Unicode Value Range",
        "rows": [
          {
            "Type": "uint24",
            "Name": "startUnicodeValue",
            "Description": "First value in this range"
          },
          {
            "Type": "BYTE",
            "Name": "additionalCount",
            "Description": "Number of additional values in this range"
          }
        ]
      },
      {
        "title": "Non-Default UVS Table header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "numUVSMappings",
            "Description": "Number of UVS Mappings that follow"
          }
        ]
      },
      {
        "title": "UVS Mapping",
        "rows": [
          {
            "Type": "uint24",
            "Name": "unicodeValue",
            "Description": "Base Unicode value of the UVS"
          },
          {
            "Type": "uint16",
            "Name": "glyphID",
            "Description": "Glyph ID of the UVS"
          }
        ]
      }
    ]
  },
  {
    "title": "cvar",
    "tables": [
      {
        "title": "CVT variations",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Set to 0x00010000 (1.0)."
          },
          {
            "Type": "uint16",
            "Name": "tupleCount",
            "Description": "Flags in high-order 4 bits, count in low-order 12 bits."
          },
          {
            "Type": "uint16",
            "Name": "offsetToData",
            "Description": "Offset from start of CVT Variations table to the start of the tuple data."
          },
          {
            "Type": "tupleVariation",
            "Name": "tuple[tupleCount]",
            "Description": "Array of tuples."
          },
          {
            "Type": "uint8",
            "Name": "pointNumbers[]",
            "Description": "Packed array of point numbers."
          },
          {
            "Type": "uint8",
            "Name": "tupleData[]",
            "Description": "Packed deltas for each tuple."
          }
        ]
      }
    ]
  },
  {
    "title": "cvt ",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "FWord",
            "Name": "controlValues[]",
            "Description": "array of FWords accessible by instructions"
          }
        ]
      }
    ]
  },
  {
    "title": "EBSC",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "Version number of the table (0x00020000 for the initial version)."
          },
          {
            "Type": "UInt32",
            "Name": "numSizes",
            "Description": "The number of EBSCScaleTable in this table."
          },
          {
            "Type": "variable",
            "Name": "scaleTables[numSizes]",
            "Description": "Subtables indicating how to override the TrueType scaler's default algorithm for finding a point size to use when generating a glyph for a point size not in the font."
          }
        ]
      },
      {
        "title": "EBSCScaleTable",
        "rows": [
          {
            "Type": "BLOCLineMetrics",
            "Name": "hori",
            "Description": "Horizontal line metrics for this point size (not used on the Mac OS)."
          },
          {
            "Type": "BLOCLineMetrics",
            "Name": "vert",
            "Description": "Vertical line metrics (not used on OS X)."
          },
          {
            "Type": "UInt8",
            "Name": "ppemX",
            "Description": "The horizontal point size for this EBSCScaleTable"
          },
          {
            "Type": "UInt8",
            "Name": "ppemY",
            "Description": "The vertical point size for this EBSCScaleTable"
          },
          {
            "Type": "UInt8",
            "Name": "substitutePpemX",
            "Description": "The horizontal point size to use when generating glyphs for the point size in the ppemX field."
          },
          {
            "Type": "UInt8",
            "Name": "substitutePpemY",
            "Description": "The vertical point size to use when generating glyphs for the point size in the ppemY field."
          }
        ]
      }
    ]
  },
  {
    "title": "fdsc",
    "tables": [
      {
        "title": "font descriptors table header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the font descriptors table (0x00010000 for the current version)."
          },
          {
            "Type": "uint32",
            "Name": "descriptorCount",
            "Description": "Number of style descriptors that will be included to characterize this font. Each descriptor consists of a  pair. These pairs are located in the gxFontDescriptor array that follows."
          },
          {
            "Type": "gxFontDescriptor",
            "Name": "descriptor[]",
            "Description": "List of tagged-coordinate pairs."
          }
        ]
      },
      {
        "title": "font descriptor array format",
        "rows": [
          {
            "Type": "uint32",
            "Name": "tag",
            "Description": "The 4-byte table tag name."
          },
          {
            "Type": "fixed32",
            "Name": "value",
            "Description": "The value for the descriptor tag."
          }
        ]
      },
      {
        "title": "descriptors",
        "rows": [
          {
            "Name": "Weight",
            "Tag": "wght",
            "Value": "1.0",
            "Description": "Percent weight relative to regular weight."
          },
          {
            "Name": "Width",
            "Tag": "wdth",
            "Value": "1.0",
            "Description": "Percent width relative to regular width."
          },
          {
            "Name": "Slant",
            "Tag": "slnt",
            "Value": "0.0",
            "Description": "Angle of slant in degrees, where positive is clockwise from straight up."
          },
          {
            "Name": "Optical size",
            "Tag": "opsz",
            "Value": "12.0",
            "Description": "Point size the font was designed for."
          },
          {
            "Name": "Non-alphabetic",
            "Tag": "nalf",
            "Value": "0",
            "Description": "These values are treated as integers, not fixed32s. 0 means alphabetic, and greater integers mean the font is non-alphabetic (e.g. symbols)."
          }
        ]
      },
      {
        "title": "non-alphabetic code values",
        "rows": [
          {
            "Code": "0",
            "Meaning": "Alphabetic"
          },
          {
            "Code": "1",
            "Meaning": "Dingbats"
          },
          {
            "Code": "2",
            "Meaning": "Pi characters"
          },
          {
            "Code": "3",
            "Meaning": "Fleurons"
          },
          {
            "Code": "4",
            "Meaning": "Decorative borders"
          },
          {
            "Code": "5",
            "Meaning": "International symbols"
          },
          {
            "Code": "6",
            "Meaning": "Math symbols"
          }
        ]
      }
    ]
  },
  {
    "title": "feat",
    "tables": [
      {
        "title": "format of the feature name table header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the feature name table (0x00010000 for the current version)."
          },
          {
            "Type": "uint16",
            "Name": "featureNameCount",
            "Description": "The number of entries in the feature name array."
          },
          {
            "Type": "uint16",
            "Name": "(none)",
            "Description": "Reserved (set to zero)."
          },
          {
            "Type": "uint32",
            "Name": "(none)",
            "Description": "Reserved (set to zero)."
          },
          {
            "Type": "FeatureName",
            "Name": "names[featureNameCount]",
            "Description": "The feature name array."
          }
        ]
      },
      {
        "title": "format of the feature name array",
        "rows": [
          {
            "Type": "uint16",
            "Name": "feature",
            "Description": "Feature type."
          },
          {
            "Type": "uint16",
            "Name": "nSettings",
            "Description": "The number of records in the setting name array."
          },
          {
            "Type": "uint32",
            "Name": "settingTable",
            "Description": "Offset in bytes from the beginning of this table to this feature's setting name array. The actual type of record this offset refers to will depend on the exclusivity value, as described below."
          },
          {
            "Type": "uint16",
            "Name": "featureFlags",
            "Description": "Single-bit flags associated with the feature type."
          },
          {
            "Type": "int16",
            "Name": "nameIndex",
            "Description": "The name table index for the feature's name. This index has values greater than 255 and less than 32768."
          }
        ]
      },
      {
        "title": "featureFlags",
        "rows": [
          {
            "Mask value": "0x8000",
            "Interpretation": "Exclusive settings. If set, the feature settings are mutually exclusive."
          },
          {
            "Mask value": "0x4000",
            "Interpretation": "If clear, then the setting with an index of 0 in the setting name array for this feature should be taken as the default for the feature (if one is required). If set, then bits 0-15 of this featureFlags field contain the index of the setting which is to be taken as the default."
          },
          {
            "Mask value": "0x3F00",
            "Interpretation": "Unused, must be set to 0."
          },
          {
            "Mask value": "0x00FF",
            "Interpretation": "If bits 30 and 31 are set, then these sixteen bits indicate the index of the setting in the setting name array for this feature which should be taken as the default."
          }
        ]
      },
      {
        "title": "format of the setting name array",
        "rows": [
          {
            "Type": "uint16",
            "Name": "setting",
            "Description": "The setting."
          },
          {
            "Type": "int16",
            "Name": "nameIndex",
            "Description": "The name table index for the setting's name. The nameIndex must be greater than 255 and less than 32768."
          }
        ]
      }
    ]
  },
  {
    "title": "fmtx",
    "tables": [
      {
        "title": "Font Metrics table format",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Meaning": "Version (set to 0x00020000)."
          },
          {
            "Type": "uint32",
            "Name": "glyphIndex",
            "Meaning": "The glyph whose points represent the metrics."
          },
          {
            "Type": "uint8",
            "Name": "horizontalBefore",
            "Meaning": "Point number for the horizontal ascent."
          },
          {
            "Type": "uint8",
            "Name": "horizontalAfter",
            "Meaning": "Point number for the horizontal descent."
          },
          {
            "Type": "uint8",
            "Name": "horizontalCaretHead",
            "Meaning": "Point number for the horizontal caret head."
          },
          {
            "Type": "uint8",
            "Name": "horizontalCaretBase",
            "Meaning": "Point number for the horizontal caret base."
          },
          {
            "Type": "uint8",
            "Name": "verticalBefore",
            "Meaning": "Point number for the vertical ascent."
          },
          {
            "Type": "uint8",
            "Name": "verticalAfter",
            "Meaning": "Point number for the vertical descent."
          },
          {
            "Type": "uint8",
            "Name": "verticalCaretHead",
            "Meaning": "Point number for the vertical caret head."
          },
          {
            "Type": "uint8",
            "Name": "verticalCaretBase",
            "Meaning": "Point number for the vertical caret base."
          }
        ]
      }
    ]
  },
  {
    "title": "fpgm",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "uint8",
            "Name": "instructions[]",
            "Description": "array of bytes"
          }
        ]
      }
    ]
  },
  {
    "title": "fvar",
    "tables": [
      {
        "title": "set of standard axis tags",
        "rows": [
          {
            "Tag": "'wght'",
            "Name": "Weight",
            "Default": "1.0",
            "Description": "Used for making a font range from light to black."
          },
          {
            "Tag": "'wdth'",
            "Name": "Width",
            "Default": "1.0",
            "Description": "Used for fonts ranging from narrow to wide."
          },
          {
            "Tag": "'slnt'",
            "Name": "Slant",
            "Default": "0.0",
            "Description": "Specifies the angle (in degrees) of italic slant."
          },
          {
            "Tag": "'opsz'",
            "Name": "Optical Size",
            "Default": "12.0",
            "Description": "Specifies the optical point size."
          }
        ]
      },
      {
        "title": "format of the font variations table header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "majorVersion",
            "Description": "Set to 1."
          },
          {
            "Type": "uint16",
            "Name": "minorVersion",
            "Description": "Set to 0."
          },
          {
            "Type": "uint16",
            "Name": "offsetToData",
            "Description": "Offset in bytes from the beginning of the table to the beginning of the first axis data."
          },
          {
            "Type": "uint16",
            "Name": "countSizePairs",
            "Description": "Axis + instance = 2."
          },
          {
            "Type": "uint16",
            "Name": "axisCount",
            "Description": "The number of style axes in this font."
          },
          {
            "Type": "uint16",
            "Name": "axisSize",
            "Description": "The number of bytes in each gxFontVariationAxis record. Set to 20 bytes."
          },
          {
            "Type": "uint16",
            "Name": "instanceCount",
            "Description": "The number of named instances for the font found in the sfntInstance array."
          },
          {
            "Type": "uint16",
            "Name": "instanceSize",
            "Description": "The number of bytes in each sfntInstance. See below."
          },
          {
            "Type": "sfntVariationAxis",
            "Name": "axis[axisCount]",
            "Description": "The font variation axis array."
          },
          {
            "Type": "sfntInstance",
            "Name": "instance[instanceCount]",
            "Description": "The instance array."
          }
        ]
      },
      {
        "title": "format for the sfntVariationAxis array",
        "rows": [
          {
            "Type": "uint32",
            "Name": "axisTag",
            "Description": "Axis name."
          },
          {
            "Type": "fixed32",
            "Name": "minValue",
            "Description": "The minimum style coordinate for the axis."
          },
          {
            "Type": "fixed32",
            "Name": "defaultValue",
            "Description": "The default style coordinate for the axis."
          },
          {
            "Type": "fixed32",
            "Name": "maxValue",
            "Description": "The maximum style coordinate for the axis."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Set to zero."
          },
          {
            "Type": "uint16",
            "Name": "nameID",
            "Description": "The designation in the 'name' table."
          }
        ]
      },
      {
        "title": "format of the sfntInstance array",
        "rows": [
          {
            "Type": "uint16",
            "Name": "nameID",
            "Description": "The name of the defined instance coordinate. Similar to the nameID in the variation axis record, this identifies a name in the font's 'name' table."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Set to zero."
          },
          {
            "Type": "fixed32",
            "Name": "coord[axisCount]",
            "Description": "This is the coordinate of the defined instance."
          },
          {
            "Type": "uint16",
            "Name": "psNameID",
            "Description": "(Optional) The PostScript name of the defined instance coordinate. Similar to the nameID above, this identifies a name in the font's 'name' table. The corresponding 'name' table entry should be a valid PostScript name."
          }
        ]
      }
    ]
  },
  {
    "title": "gasp",
    "tables": [
      {
        "title": "gasp Table",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "version",
            "Description": "Version number (set to 0)"
          },
          {
            "Type": "UInt16",
            "Name": "numRanges",
            "Description": "Number of records to follow"
          },
          {
            "Type": "GASPRange",
            "Name": "gaspRange[numRanges]",
            "Description": "Sorted by ppem"
          }
        ]
      },
      {
        "title": "GASPRange record",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "rangeMaxPPEM",
            "Description": "Upper limit of range, in PPEM"
          },
          {
            "Type": "UInt16",
            "Name": "rangeGaspBehavior",
            "Description": "Flags describing desired rasterizer behavior."
          }
        ]
      },
      {
        "title": "rangeGaspBehavior flags values",
        "rows": [
          {
            "Flag": "kGASPGridFit (1)",
            "Meaning": "Use gridfitting"
          },
          {
            "Flag": "kGASPDoGray (2)",
            "Meaning": "Use grayscale rendering"
          }
        ]
      },
      {
        "title": "rangeGaspBehavior",
        "rows": [
          {
            "Flag": "kGASPDoGray",
            "Value": "0x0002",
            "Meaning": "small sizes, typically ppem<9"
          },
          {
            "Flag": "kGASPGridFit",
            "Value": "0x0001",
            "Meaning": "medium sizes, typically 9<=ppem<=16"
          },
          {
            "Flag": "kGASPDoGray | kGASPGridFit",
            "Value": "0x0003",
            "Meaning": "large sizes, typically ppem>16"
          },
          {
            "Flag": "(neither)",
            "Value": "0x0000",
            "Meaning": "optional for very large sizes, typically ppem>2048"
          }
        ]
      }
    ]
  },
  {
    "title": "gcid",
    "tables": [
      {
        "title": "Table",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "version",
            "Description": "Version number (set to 0)"
          },
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Data format (set to 0)"
          },
          {
            "Type": "UInt32",
            "Name": "size",
            "Description": "Size of the table, including header"
          },
          {
            "Type": "UInt16",
            "Name": "registry",
            "Description": "The registry ID"
          },
          {
            "Type": "char[64]",
            "Name": "registryName",
            "Description": "The registry name in ASCII; unused bytes should be set to 0"
          },
          {
            "Type": "UInt16",
            "Name": "order",
            "Description": "The order ID"
          },
          {
            "Type": "char[64]",
            "Name": "orderName",
            "Description": "The order name in ASCII; unused bytes should be set to 0"
          },
          {
            "Type": "UInt16",
            "Name": "supplementVersion",
            "Description": "The supplement version"
          },
          {
            "Type": "UInt16",
            "Name": "count",
            "Description": "The number of CIDs that follow; this should not exceed the number of glyphs in the font"
          },
          {
            "Type": "UInt16[]",
            "Name": "CIDs",
            "Description": "The CIDs for the glyphs in the font, starting with glyph 0. If a glyph does not correspond to a CID in the identified collection, 0xFFFF is used."
          }
        ]
      }
    ]
  },
  {
    "title": "glyf",
    "tables": [
      {
        "title": "Glyph description",
        "rows": [
          {
            "Type": "int16",
            "Name": "numberOfContours",
            "Description": "If the number of contours is positive or zero, it is a single glyph; If the number of contours less than zero, the glyph is compound"
          },
          {
            "Type": "FWord",
            "Name": "xMin",
            "Description": "Minimum x for coordinate data"
          },
          {
            "Type": "FWord",
            "Name": "yMin",
            "Description": "Minimum y for coordinate data"
          },
          {
            "Type": "FWord",
            "Name": "xMax",
            "Description": "Maximum x for coordinate data"
          },
          {
            "Type": "FWord",
            "Name": "yMax",
            "Description": "Maximum y for coordinate data"
          },
          {
            "Type": "(here follow the data for the simple or compound glyph)"
          }
        ]
      },
      {
        "title": "Simple glyph definition",
        "rows": [
          {
            "Type": "uint16",
            "Name": "endPtsOfContours[n]",
            "Description": "Array of last points of each contour; n is the number of contours; array entries are point indices"
          },
          {
            "Type": "uint16",
            "Name": "instructionLength",
            "Description": "Total number of bytes needed for instructions"
          },
          {
            "Type": "uint8",
            "Name": "instructions[instructionLength]",
            "Description": "Array of instructions for this glyph"
          },
          {
            "Type": "uint8",
            "Name": "flags[variable]",
            "Description": "Array of flags"
          },
          {
            "Type": "uint8 or int16",
            "Name": "xCoordinates[]",
            "Description": "Array of x-coordinates; the first is relative to (0,0), others are relative to previous point"
          },
          {
            "Type": "uint8 or int16",
            "Name": "yCoordinates[]",
            "Description": "Array of y-coordinates; the first is relative to (0,0), others are relative to previous point"
          }
        ]
      },
      {
        "title": "Outline flags",
        "rows": [
          {
            "Flags": "On Curve",
            "Bit (0 is lsb)": "0",
            "Description": "If set, the point is on the curve; Otherwise, it is off the curve."
          },
          {
            "Flags": "x-Short Vector",
            "Bit (0 is lsb)": "1",
            "Description": "If set, the corresponding x-coordinate is 1 byte long; Otherwise, the corresponding x-coordinate is 2 bytes long"
          },
          {
            "Flags": "y-Short Vector",
            "Bit (0 is lsb)": "2",
            "Description": "If set, the corresponding y-coordinate is 1 byte long; Otherwise, the corresponding y-coordinate is 2 bytes long"
          },
          {
            "Flags": "Repeat",
            "Bit (0 is lsb)": "3",
            "Description": "If set, the next byte specifies the number of additional times this set of flags is to be repeated. In this way, the number of flags listed can be smaller than the number of points in a character."
          },
          {
            "Flags": "This x is same (Positive x-Short vector)",
            "Bit (0 is lsb)": "4",
            "Description": "This flag has one of two meanings, depending on how the x-Short Vector flag is set. If the x-Short Vector bit is set, this bit describes the sign of the value, with a value of 1 equalling positive and a zero value negative. If the x-short Vector bit is not set, and this bit is set, then the current x-coordinate is the same as the previous x-coordinate. If the x-short Vector bit is not set, and this bit is not set, the current x-coordinate is a signed 16-bit delta vector. In this case, the delta vector is the change in x"
          },
          {
            "Flags": "This y is same (Positive y-Short vector)",
            "Bit (0 is lsb)": "5",
            "Description": "This flag has one of two meanings, depending on how the y-Short Vector flag is set. If the y-Short Vector bit is set, this bit describes the sign of the value, with a value of 1 equalling positive and a zero value negative. If the y-short Vector bit is not set, and this bit is set, then the current y-coordinate is the same as the previous y-coordinate. If the y-short Vector bit is not set, and this bit is not set, the current y-coordinate is a signed 16-bit delta vector. In this case, the delta vector is the change in y"
          },
          {
            "Flags": "Reserved",
            "Bit (0 is lsb)": "6 - 7",
            "Description": "Set to zero"
          }
        ]
      },
      {
        "title": "Component glyph part description",
        "rows": [
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Component flag"
          },
          {
            "Type": "uint16",
            "Name": "glyphIndex",
            "Description": "Glyph index of component"
          },
          {
            "Type": "int16, uint16, int8 or uint8",
            "Name": "argument1",
            "Description": "X-offset for component or point number; type depends on bits 0 and 1 in component flags"
          },
          {
            "Type": "int16, uint16, int8 or uint8",
            "Name": "argument2",
            "Description": "Y-offset for component or point number type depends on bits 0 and 1 in component flags"
          },
          {
            "Type": "transformation option",
            "Name": "One of the transformation options from Table 19"
          }
        ]
      },
      {
        "title": "Component flags",
        "rows": [
          {
            "Flags": "ARG_1_AND_2_ARE_WORDS",
            "Bit": "0",
            "Description": "If set, the arguments are words; If not set, they are bytes."
          },
          {
            "Flags": "ARGS_ARE_XY_VALUES",
            "Bit": "1",
            "Description": "If set, the arguments are xy values; If not set, they are points."
          },
          {
            "Flags": "ROUND_XY_TO_GRID",
            "Bit": "2",
            "Description": "If set, round the xy values to grid; if not set do not round xy values to grid (relevant only to bit 1 is set)"
          },
          {
            "Flags": "WE_HAVE_A_SCALE",
            "Bit": "3",
            "Description": "If set, there is a simple scale for the component. If not set, scale is 1.0."
          },
          {
            "Flags": "(this bit is obsolete)",
            "Bit": "4",
            "Description": "(obsolete; set to zero)"
          },
          {
            "Flags": "MORE_COMPONENTS",
            "Bit": "5",
            "Description": "If set, at least one additional glyph follows this one."
          },
          {
            "Flags": "WE_HAVE_AN_X_AND_Y_SCALE",
            "Bit": "6",
            "Description": "If set the x direction will use a different scale than the y direction."
          },
          {
            "Flags": "WE_HAVE_A_TWO_BY_TWO",
            "Bit": "7",
            "Description": "If set there is a 2-by-2 transformation that will be used to scale the component."
          },
          {
            "Flags": "WE_HAVE_INSTRUCTIONS",
            "Bit": "8",
            "Description": "If set, instructions for the component character follow the last component."
          },
          {
            "Flags": "USE_MY_METRICS",
            "Bit": "9",
            "Description": "Use metrics from this component for the compound glyph."
          },
          {
            "Flags": "OVERLAP_COMPOUND",
            "Bit": "10",
            "Description": "If set, the components of this compound glyph overlap."
          }
        ]
      },
      {
        "title": "Transformation Options",
        "rows": [
          {
            "Transformation Option": "transformation entry #1",
            "Meaning": "scale (same for x and y)"
          },
          {
            "Transformation Option": "transformation entry #2",
            "Meaning": "x-scale"
          },
          {
            "Transformation Option": "y-scale"
          },
          {
            "Transformation Option": "transformation entry #3",
            "Meaning": "xscale"
          },
          {
            "Transformation Option": "scale01"
          },
          {
            "Transformation Option": "scale10"
          },
          {
            "Transformation Option": "yscale"
          }
        ]
      },
      {
        "title": "Linear transformation",
        "rows": [
          {
            "WE_HAVE _A_SCALE": "0",
            "WE_HAVE _AN_X_AND_ Y SCALE": "0",
            "WE_HAVE_A _TWO_BY_ TWO": "0",
            "a": "1.0",
            "b": "0.0",
            "c": "0.0",
            "d": "1.0"
          },
          {
            "WE_HAVE _A_SCALE": "1",
            "WE_HAVE _AN_X_AND_ Y SCALE": "0",
            "WE_HAVE_A _TWO_BY_ TWO": "0",
            "a": "1st short",
            "b": "0.0",
            "c": "0.0",
            "d": "1st short"
          },
          {
            "WE_HAVE _A_SCALE": "0",
            "WE_HAVE _AN_X_AND_ Y SCALE": "1",
            "WE_HAVE_A _TWO_BY_ TWO": "0",
            "a": "1st short",
            "b": "0.0",
            "c": "0.0",
            "d": "2nd short"
          },
          {
            "WE_HAVE _A_SCALE": "0",
            "WE_HAVE _AN_X_AND_ Y SCALE": "0",
            "WE_HAVE_A _TWO_BY_ TWO": "1",
            "a": "1st short",
            "b": "2nd short",
            "c": "3rd short",
            "d": "4th short"
          }
        ]
      }
    ]
  },
  {
    "title": "gvar",
    "tables": [
      {
        "title": "glyph variations table header format",
        "rows": [
          {
            "Type": "uint16",
            "Name": "version",
            "Description": "Version number of the glyph variations table (1 for the current version)."
          },
          {
            "Type": "uint16",
            "Name": "reserved",
            "Description": "Currently unused; set to 0."
          },
          {
            "Type": "uint16",
            "Name": "axisCount",
            "Description": "The number of style axes for this font. This must be the same number as axisCount in the 'fvar' table."
          },
          {
            "Type": "uint16",
            "Name": "sharedCoordCount",
            "Description": "The number of shared coordinates."
          },
          {
            "Type": "uint32",
            "Name": "offsetToCoord",
            "Description": "Byte offset from the beginning of this table to the list of shared style coordinates."
          },
          {
            "Type": "uint16",
            "Name": "glyphCount",
            "Description": "The number of glyphs in this font; this should match the number of the glyphs store elsewhere in the font."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Bit-field that gives the format of the offset array that follows. If the flag is 0, the type is uint16. If the flag is 1, the type is unit 32."
          },
          {
            "Type": "uint32",
            "Name": "offsetToData",
            "Description": "Byte offset from the beginning of this table to the first glyph glyphVariationData."
          },
          {
            "Type": "uint16 or uint32",
            "Name": "offset[glyphCount+1]",
            "Description": "Byte offsets from the beginning of the glyphVariationData array to the glyphVariationData for each glyph in the font. The format of this field is set by the flags field."
          }
        ]
      },
      {
        "title": "glyphVariationData array",
        "rows": [
          {
            "Type": "uint16",
            "Name": "tupleCount",
            "Description": "A packed field. The high 4 bits are flags and the low 12 bits are the number of tuples for this glyph. The number of tuples can be any number between 1 and 4095."
          },
          {
            "Type": "uint16",
            "Name": "offsetToData",
            "Description": "Byte offset from the beginning of the glyphVariationData to the serialized glyph data (see below)."
          },
          {
            "Type": "tuple",
            "Name": "tuple[tupleCount]",
            "Description": "The tuple array."
          }
        ]
      },
      {
        "title": "format of the tupleCount field",
        "rows": [
          {
            "Value": "0x8000",
            "Name": "tuples_share_point_numbers",
            "Description": "Flag indicating that some or all tuples reference a common set of packed point numbers that follow."
          },
          {
            "Value": "0x7000",
            "Name": "reserved_tuple_count_flags",
            "Description": "Flags reserved for future use."
          },
          {
            "Value": "0x0FFF",
            "Name": "tuple_count_mask",
            "Description": "Mask using the low bits to give the tuple count."
          }
        ]
      },
      {
        "title": "format of the tuple header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "tupleSize",
            "Description": "The size in bytes of serialized data for this tuple."
          },
          {
            "Type": "uint16",
            "Name": "tupleIndex",
            "Description": "A packed field. The high 4 bits are flags. The interpretation of these flags is provided in Table 14-5. The low 12 bits are an index into the global tuple coordinates."
          },
          {
            "Type": "shortFrac",
            "Name": "embeddedCoord[]",
            "Description": "Embedded coordinate tuples, if any."
          },
          {
            "Type": "shortFrac",
            "Name": "intermediateCoord[]",
            "Description": "Intermediate coordinate tuples, if any."
          }
        ]
      },
      {
        "title": "tupleIndex field format",
        "rows": [
          {
            "Value": "0x8000",
            "Name": "embedded_tuple_coord",
            "Description": "Flag indicating that the coordinate for this tuple follows immediately after the tupleIndex. The low 12 bits of the tupleIndex are ignored."
          },
          {
            "Value": "0x4000",
            "Name": "intermediate_tuple",
            "Description": "Flag indicating that this is an intermediate tuple. The two coordinates following the tupleIndex (and the optional embedded coordinate) specify the domain for this tuple."
          },
          {
            "Value": "0x2000",
            "Name": "private_point_numbers",
            "Description": "Flag indicating that the preceding tuple data for this tuple is a set of packed point numbers that this tuple operates on. If this bit is clear, this tuple uses shared point numbers."
          },
          {
            "Value": "0x1000",
            "Name": "reserved_tuple_index_flag",
            "Description": "Flag reserved for future use."
          },
          {
            "Value": "0x0FFF",
            "Name": "tuple_index_mask",
            "Description": "Mask using the low bits to give the tuple index."
          }
        ]
      },
      {
        "title": "packed point count flag format",
        "rows": [
          {
            "Mask": "0x80",
            "Name": "points_are_words",
            "Description": "Flag indicating that the point number run is a word."
          },
          {
            "Mask": "0x7F",
            "Name": "point_run_count_mask",
            "Description": "Mask indicating that the low 7 bits are the number of elements minus 1."
          }
        ]
      },
      {
        "title": "packed tuple delta field formats",
        "rows": [
          {
            "Mask": "0x80",
            "Name": "deltas_are_zero",
            "Description": "Flag indicating that this run contains no data. This means that all of the deltas in this run are zero, so no explicit deltas are stored."
          },
          {
            "Mask": "0x40",
            "Name": "deltas_are_words",
            "Description": "Flag indicating that the run contains 16-bit signed deltas."
          },
          {
            "Mask": "0x3F",
            "Name": "delta_run_count_mask",
            "Description": "Flag and mask using the low 6 bits to provide the number of deltas in the run minus 1."
          }
        ]
      },
      {
        "title": "fake point number assignment and the delta assignments",
        "rows": [
          {
            "Fake point number": "0",
            "Delta assignments": "Base glyph."
          },
          {
            "Fake point number": "1",
            "Delta assignments": "Accent glyph."
          },
          {
            "Fake point number": "2",
            "Delta assignments": "Left side bearing metric point."
          },
          {
            "Fake point number": "3",
            "Delta assignments": "Right side bearing metric point."
          },
          {
            "Fake point number": "4",
            "Delta assignments": "Top side bearing metric point."
          },
          {
            "Fake point number": "5",
            "Delta assignments": "Bottom side bearing metric point."
          }
        ]
      }
    ]
  },
  {
    "title": "hdmx",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "int16",
            "Description": "format version number"
          },
          {
            "Type": "int16",
            "Description": "number of device records"
          },
          {
            "Type": "int32",
            "Description": "size of a device record, long aligned"
          },
          {
            "Type": "DeviceRecord",
            "Description": "records[number of device records]"
          }
        ]
      },
      {
        "title": "Device Record",
        "rows": [
          {
            "Type": "uint8",
            "Description": "pixel size for following widths"
          },
          {
            "Type": "uint8",
            "Description": "maximum width"
          },
          {
            "Type": "uint8",
            "Description": "widths[number of glyphs]"
          }
        ]
      }
    ]
  },
  {
    "title": "head",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "0x00010000 if (version 1.0)"
          },
          {
            "Type": "Fixed",
            "Name": "fontRevision",
            "Description": "set by font manufacturer"
          },
          {
            "Type": "uint32",
            "Name": "checkSumAdjustment",
            "Description": "To compute: set it to 0, calculate the checksum for the 'head' table and put it in the table directory, sum the entire font as a uint32_t, then store 0xB1B0AFBA - sum. (The checksum for the 'head' table will be wrong as a result. That is OK; do not reset it.)"
          },
          {
            "Type": "uint32",
            "Name": "magicNumber",
            "Description": "set to 0x5F0F3CF5"
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "bit 0 - y value of 0 specifies baseline bit 1 - x position of left most black bit is LSB bit 2 - scaled point size and actual point size will differ (i.e. 24 point glyph differs from 12 point glyph scaled by factor of 2) bit 3 - use integer scaling instead of fractional bit 4 - (used by the Microsoft implementation of the TrueType scaler) bit 5 - This bit should be set in fonts that are intended to e laid out vertically, and in which the glyphs have been drawn such that an x-coordinate of 0 corresponds to the desired vertical baseline. bit 6 - This bit must be set to zero. bit 7 - This bit should be set if the font requires layout for correct linguistic rendering (e.g. Arabic fonts). bit 8 - This bit should be set for an AAT font which has one or more metamorphosis effects designated as happening by default. bit 9 - This bit should be set if the font contains any strong right-to-left glyphs. bit 10 - This bit should be set if the font contains Indic-style rearrangement effects. bits 11-13 - Defined by Adobe. bit 14 - This bit should be set if the glyphs in the font are simply generic symbols for code point ranges, such as for a last resort font."
          },
          {
            "Type": "uint16",
            "Name": "unitsPerEm",
            "Description": "range from 64 to 16384"
          },
          {
            "Type": "longDateTime",
            "Name": "created",
            "Description": "international date"
          },
          {
            "Type": "longDateTime",
            "Name": "modified",
            "Description": "international date"
          },
          {
            "Type": "FWord",
            "Name": "xMin",
            "Description": "for all glyph bounding boxes"
          },
          {
            "Type": "FWord",
            "Name": "yMin",
            "Description": "for all glyph bounding boxes"
          },
          {
            "Type": "FWord",
            "Name": "xMax",
            "Description": "for all glyph bounding boxes"
          },
          {
            "Type": "FWord",
            "Name": "yMax",
            "Description": "for all glyph bounding boxes"
          },
          {
            "Type": "uint16",
            "Name": "macStyle",
            "Description": "bit 0 bold bit 1 italic bit 2 underline bit 3 outline bit 4 shadow bit 5 condensed (narrow) bit 6 extended"
          },
          {
            "Type": "uint16",
            "Name": "lowestRecPPEM",
            "Description": "smallest readable size in pixels"
          },
          {
            "Type": "int16",
            "Name": "fontDirectionHint",
            "Description": "0 Mixed directional glyphs 1 Only strongly left to right glyphs 2 Like 1 but also contains neutrals -1 Only strongly right to left glyphs -2 Like -1 but also contains neutrals"
          },
          {
            "Type": "int16",
            "Name": "indexToLocFormat",
            "Description": "0 for short offsets, 1 for long"
          },
          {
            "Type": "int16",
            "Name": "glyphDataFormat",
            "Description": "0 for current format"
          }
        ]
      }
    ]
  },
  {
    "title": "hhea",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "0x00010000 (1.0)"
          },
          {
            "Type": "FWord",
            "Name": "ascent",
            "Description": "Distance from baseline of highest ascender"
          },
          {
            "Type": "FWord",
            "Name": "descent",
            "Description": "Distance from baseline of lowest descender"
          },
          {
            "Type": "FWord",
            "Name": "lineGap",
            "Description": "typographic line gap"
          },
          {
            "Type": "uFWord",
            "Name": "advanceWidthMax",
            "Description": "must be consistent with horizontal metrics"
          },
          {
            "Type": "FWord",
            "Name": "minLeftSideBearing",
            "Description": "must be consistent with horizontal metrics"
          },
          {
            "Type": "FWord",
            "Name": "minRightSideBearing",
            "Description": "must be consistent with horizontal metrics"
          },
          {
            "Type": "FWord",
            "Name": "xMaxExtent",
            "Description": "max(lsb + (xMax-xMin))"
          },
          {
            "Type": "int16",
            "Name": "caretSlopeRise",
            "Description": "used to calculate the slope of the caret (rise/run) set to 1 for vertical caret"
          },
          {
            "Type": "int16",
            "Name": "caretSlopeRun",
            "Description": "0 for vertical"
          },
          {
            "Type": "FWord",
            "Name": "caretOffset",
            "Description": "set value to 0 for non-slanted fonts"
          },
          {
            "Type": "int16",
            "Name": "reserved",
            "Description": "set value to 0"
          },
          {
            "Type": "int16",
            "Name": "reserved",
            "Description": "set value to 0"
          },
          {
            "Type": "int16",
            "Name": "reserved",
            "Description": "set value to 0"
          },
          {
            "Type": "int16",
            "Name": "reserved",
            "Description": "set value to 0"
          },
          {
            "Type": "int16",
            "Name": "metricDataFormat",
            "Description": "0 for current format"
          },
          {
            "Type": "uint16",
            "Name": "numOfLongHorMetrics",
            "Description": "number of advance widths in metrics table"
          }
        ]
      }
    ]
  },
  {
    "title": "hmtx",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "longHorMetric",
            "Name": "hMetrics[numOfLongHorMetrics]",
            "Description": "The value numOfLongHorMetrics comes from the 'hhea' table. If the font is monospaced, only one entry need be in the array but that entry is required."
          },
          {
            "Type": "FWord",
            "Name": "leftSideBearing[]",
            "Description": "Here the advanceWidth is assumed to be the same as the advanceWidth for the last entry above. The number of entries in this array is derived from the total number of glyphs minus numOfLongHorMetrics. This generally is used with a run of monospaced glyphs (e.g. Kanji fonts or Courier fonts). Only one run is allowed and it must be at the end."
          }
        ]
      }
    ]
  },
  {
    "title": "just",
    "tables": [
      {
        "title": "justification",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "Version number of the justification table (0x00010000 for the current version)."
          },
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Format of the justification table (set to 0)."
          },
          {
            "Type": "UInt16",
            "Name": "horizOffset",
            "Description": "Byte offset from the start of the justification table to the header for tables that contain justification information for horizontal text. If you are not including this information, store 0."
          },
          {
            "Type": "UInt16",
            "Name": "vertOffset",
            "Description": "Byte offset from the start of the justification table to the header for tables that contain justification information for vertical text. If you are not including this information, store 0."
          }
        ]
      },
      {
        "title": "JustificationHeader",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "justClassTableOffset",
            "Description": "Offset to the justification category state table."
          },
          {
            "Type": "UInt16",
            "Name": "wdcTableOffset",
            "Description": "Offset from start of justification table to start of the subtable containing the width delta factors for the glyphs in your font."
          },
          {
            "Type": "UInt16",
            "Name": "pcTableOffset",
            "Description": "Offset from start of justification table to start of postcompensation subtable (set to zero if none)."
          },
          {
            "Type": "variable",
            "Name": "lookupTable",
            "Description": "Lookup table associating glyphs with width delta clusters. See the description of Width Delta Clusters table for details on how to interpret the lookup values."
          },
          {
            "Type": "variable",
            "Name": "widthDeltaClusters",
            "Description": "The width delta clusters table."
          },
          {
            "Type": "variable",
            "Name": "postcompTable",
            "Description": "The postcompensation subtable, if present in the font."
          }
        ]
      },
      {
        "title": "state table",
        "rows": [
          {
            "Type": "MorphSubtableHeader",
            "Name": "morphHeader",
            "Description": "Metamorphosis-style subtable header."
          },
          {
            "Type": "StateHeader",
            "Name": "stHeader",
            "Description": "The justification insertion state table header"
          }
        ]
      },
      {
        "title": "flags",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setMark",
            "Interpretation": "If set, make the current glyph the marked glyph."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x3F80",
            "Name": "markCategory",
            "Interpretation": "The justification category for the marked glyph if nonzero."
          },
          {
            "Mask value": "0x007F",
            "Name": "currentCategory",
            "Interpretation": "The justification category for the current glyph if nonzero."
          }
        ]
      },
      {
        "title": "find the width delta cluster associated with a particular glyph",
        "rows": [
          {
            "Lookup table format": "0",
            "Interpretation": "Array of 16-bit offsets, one for each glyph in the font. Each offset is from the start of the Width Delta Clusters table to the particular width delta cluster for that glyph."
          },
          {
            "Lookup table format": "2",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the Width Delta Clusters table to the particular width delta cluster for the glyphs in that segment."
          },
          {
            "Lookup table format": "4",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the lookup table to an array of 16-bit offsets, one for each glyph in the segment. Each offset is from the start of the Width Delta Clusters table to the particular width delta clust"
          },
          {
            "Lookup table format": "6",
            "Interpretation": "The value of each lookupSingle is a 16-bit offset from the start of the Width Delta Clusters table to the particular width delta cluster for that glyph."
          },
          {
            "Lookup table format": "8",
            "Interpretation": "The valueArray is an array of 16-bit offsets, one for each glyph in the trimmed array. Each offset is from the start of the Width Delta Clusters table to the particular width delta cluster for that glyph."
          }
        ]
      },
      {
        "title": "width delta cluster",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "count",
            "Description": "Number of width delta pair records that follow."
          },
          {
            "Type": "WidthDeltaPair",
            "Name": "wdPairs",
            "Description": "The width delta pairs records"
          }
        ]
      },
      {
        "title": "WidthDeltaPair record",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "justClass",
            "Description": "The justification category associated with the wdRecord field. Only 7 bits of this field are used. (The other bits are used as padding to guarantee longword alignment of the following record)."
          },
          {
            "Type": "JustWidthDeltaEntry",
            "Name": "wdRecord",
            "Description": "The actual width delta record."
          }
        ]
      },
      {
        "title": "JustWidthDeltaEntry record",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "beforeGrowLimit",
            "Description": "The ratio by which the advance width of the glyph is permitted to grow on the left or top side."
          },
          {
            "Type": "Fixed",
            "Name": "beforeShrinkLimit",
            "Description": "The ratio by which the advance width of the glyph is permitted to shrink on the left or top side."
          },
          {
            "Type": "Fixed",
            "Name": "afterGrowLimit",
            "Description": "The ratio by which the advance width of the glyph is permitted to grow on the right or bottom side."
          },
          {
            "Type": "Fixed",
            "Name": "afterShrinkLimit",
            "Description": "The ratio by which the advance width of the glyph is at most permitted to shrink on the right or bottom side."
          },
          {
            "Type": "UInt16",
            "Name": "growFlags",
            "Description": "Flags controlling the grow case."
          },
          {
            "Type": "UInt16",
            "Name": "shrinkFlags",
            "Description": "Flags controlling the shrink case."
          }
        ]
      },
      {
        "title": "growFlags and shrinkFlags bits mask",
        "rows": [
          {
            "Mask value": "0xE000",
            "Interpretation": "Reserved. You should set these bits to zero."
          },
          {
            "Mask value": "0x1000",
            "Interpretation": "The glyph can take unlimited gap. When this glyph participates in the justification process, it and any other glyphs on the line having this bit set absorb all the remaining gap."
          },
          {
            "Mask value": "0x0FF0",
            "Interpretation": "Reserved. You should set these bits to zero."
          },
          {
            "Mask value": "0x000F",
            "Interpretation": "The justification priority of the glyph."
          }
        ]
      },
      {
        "title": "justification priorities",
        "rows": [
          {
            "Priority": "0",
            "Meaning": "Kashida priority. This is the highest priority during justification."
          },
          {
            "Priority": "1",
            "Meaning": "Whitespace priority. Any whitespace glyphs (as identified in the glyph properties table) will get this priority."
          },
          {
            "Priority": "2",
            "Meaning": "Inter-character priority. Give this to any remaining glyphs."
          },
          {
            "Priority": "3",
            "Meaning": "Null priority. You should set this priority for glyphs that only participate in justification after the above priorities. Normally all glyphs have one of the previous three values. If you don't want a glyph to participate in justification, and you don't want to set its factors to zero, you may instead assign it to the null priority."
          }
        ]
      },
      {
        "title": "postcompensations",
        "rows": [
          {
            "Type": "variable",
            "Name": "pcLookupTable",
            "Description": "Lookup table associating glyphs with postcompensation action records. See below for details on how to interpret the lookup values."
          },
          {
            "Type": "variable",
            "Name": "pcActionRecords",
            "Description": "Actions records whose offsets are contained in the previous lookup table."
          }
        ]
      },
      {
        "title": "postocmpensation action record associated with a particular glyph",
        "rows": [
          {
            "Lookup table format": "0",
            "Interpretation": "Array of 16-bit offsets, one for each glyph in the font. Each offset is from the start of the Postcompensation lookup table to the particular postcompensation action record for that glyph."
          },
          {
            "Lookup table format": "2",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the Postcompensation lookup table to the particular postcompensation action record for the glyphs in that segment."
          },
          {
            "Lookup table format": "4",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the lookup table to an array of 16-bit offsets, one for each glyph in the segment. Each offset is from the start of the Postcompensation lookup table to the particular postcompensation action record for that glyph."
          },
          {
            "Lookup table format": "6",
            "Interpretation": "The value of each lookupSingle is a 16-bit offset from the start of the Postcompensation lookup table to the particular postcompensation action record for that glyph."
          },
          {
            "Lookup table format": "8",
            "Interpretation": "The valueArray is an array of 16-bit offsets, one for each glyph in the trimmed array. Each offset is from the start of the Postcompensation lookup table to the particular postcompensation action record for that glyph."
          }
        ]
      },
      {
        "title": "PostcompensationAction",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "actionCount",
            "Description": "Number of ActionSubrecord records in the following array."
          },
          {
            "Type": "ActionSubrecord",
            "Name": "actSubrecord[]",
            "Description": "Array of ActionSubrecord records."
          }
        ]
      },
      {
        "title": "ActionSubrecord",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "actionClass",
            "Description": "The JustClass value associated with this ActionSubrecord."
          },
          {
            "Type": "UInt16",
            "Name": "actionType",
            "Description": "The type of postcompensation action."
          },
          {
            "Type": "UInt32",
            "Name": "actionLength",
            "Description": "Length of this ActionSubrecord record, which must be a multiple of 4."
          },
          {
            "Type": "variable",
            "Name": "actionData",
            "Description": "Data. The format of this data depends on the value of the actionType field."
          },
          {
            "Type": "variable",
            "Name": "padding",
            "Description": "Extra bytes, if needed, to guarantee that the length of this ActionSubrecord is a multiple of 4."
          }
        ]
      },
      {
        "title": "action types",
        "rows": [
          {
            "Action Type": "0",
            "Description": "Decomposition action."
          },
          {
            "Action Type": "1",
            "Description": "Unconditional add glyph action."
          },
          {
            "Action Type": "2",
            "Description": "Conditional add glyph action."
          },
          {
            "Action Type": "3",
            "Description": "Stretch glyph action."
          },
          {
            "Action Type": "4",
            "Description": "Ductile glyph action."
          },
          {
            "Action Type": "5",
            "Description": "Repeated add glyph action."
          }
        ]
      },
      {
        "title": "Decomposition Action",
        "rows": [
          {
            "Type": "fixed",
            "Name": "lowerLimit",
            "Description": "If the distance factor is less than this value, then the ligature is decomposed."
          },
          {
            "Type": "fixed",
            "Name": "upperLimit",
            "Description": "If the distance factor is greater than this value, then the ligature is decomposed."
          },
          {
            "Type": "UInt16",
            "Name": "order",
            "Description": "Numerical order in which this ligature will be decomposed; you may want infrequent ligatures to decompose before more frequent ones. The ligatures on the line of text will decompose in increasing value of this field."
          },
          {
            "Type": "UInt16",
            "Name": "decomposedCount",
            "Description": "Number of 16-bit glyph indexes that follow; the ligature will be decomposed into these glyphs."
          },
          {
            "Type": "UInt16",
            "Name": "glyphs[]",
            "Description": "Array of decomposed glyphs."
          }
        ]
      },
      {
        "title": "Unconditional Add Glyph Action",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "addGlyph",
            "Description": "Glyph that should be added if the distance factor is growing."
          }
        ]
      },
      {
        "title": "Conditional Add Glyph Action",
        "rows": [
          {
            "Type": "fixed",
            "Name": "substThreshold",
            "Description": "Distance growth factor (in ems) at which this glyph is replaced and the growth factor recalculated."
          },
          {
            "Type": "UInt16",
            "Name": "addGlyph",
            "Description": "Glyph to be added as kashida. If this value is 0xFFFF, no extra glyph will be added. Note that generally when a glyph is added, justification will need to be redone."
          },
          {
            "Type": "UInt16",
            "Name": "substGlyph",
            "Description": "Glyph to be substituted for this glyph if the growth factor equals or exceeds the value of substThreshold."
          }
        ]
      },
      {
        "title": "actionData portion of the ActionSubrecord for actionType 4",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "variationAxis",
            "Description": "The 4-byte tag identifying the ductile axis. This would normally be 0x64756374 ('duct'), but you may use any axis the font contains."
          },
          {
            "Type": "Fixed",
            "Name": "minimumLimit",
            "Description": "The lowest value for the ductility axis that still yields an acceptable appearance. Normally this will be 1.0."
          },
          {
            "Type": "Fixed",
            "Name": "noStretchValue",
            "Description": "This is the default value that corresponds to no change in appearance. Normally, this will be 1.0."
          },
          {
            "Type": "Fixed",
            "Name": "maximumLimit",
            "Description": "The highest value for the ductility axis that still yields an acceptable appearance."
          }
        ]
      },
      {
        "title": "format for actionType value",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "flags",
            "Description": "Currently unused; set to 0."
          },
          {
            "Type": "UInt16",
            "Name": "glyph",
            "Description": "Glyph that should be added if the distance factor is growing."
          }
        ]
      }
    ]
  },
  {
    "title": "kern",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "The version number of the kerning table (0x00010000 for the current version)."
          },
          {
            "Type": "uint32",
            "Name": "nTables",
            "Description": "The number of subtables included in the kerning table."
          }
        ]
      },
      {
        "title": "subtable header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "length",
            "Description": "The length of this subtable in bytes, including this header."
          },
          {
            "Type": "uint16",
            "Name": "coverage",
            "Description": "Circumstances under which this table is used. See below for description."
          },
          {
            "Type": "uint16",
            "Name": "tupleIndex",
            "Description": "The tuple index (used for variations fonts). This value specifies which tuple this subtable covers."
          }
        ]
      },
      {
        "title": "coverage",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "kernVertical",
            "Description": "Set if table has vertical kerning values."
          },
          {
            "Mask value": "0x4000",
            "Name": "kernCrossStream",
            "Description": "Set if table has cross-stream kerning values."
          },
          {
            "Mask value": "0x2000",
            "Name": "kernVariation",
            "Description": "Set if table has variation kerning values."
          },
          {
            "Mask value": "0x1F00",
            "Name": "kernUnusedBits",
            "Description": "Set to 0."
          },
          {
            "Mask value": "0x00FF",
            "Name": "kernFormatMask",
            "Description": "Set the format of this subtable (0-3 currently defined)."
          }
        ]
      },
      {
        "title": "format 0",
        "rows": [
          {
            "Type": "uint16",
            "Name": "nPairs",
            "Description": "The number of kerning pairs in this subtable."
          },
          {
            "Type": "uint16",
            "Name": "searchRange",
            "Description": "The largest power of two less than or equal to the value of nPairs, multiplied by the size in bytes of an entry in the subtable."
          },
          {
            "Type": "uint16",
            "Name": "entrySelector",
            "Description": "This is calculated as log2 of the largest power of two less than or equal to the value of nPairs. This value indicates how many iterations of the search loop have to be made. For example, in a list of eight items, there would be three iterations of the loop."
          },
          {
            "Type": "uint16",
            "Name": "rangeShift",
            "Description": "The value of nPairs minus the largest power of two less than or equal to nPairs. This is multiplied by the size in bytes of an entry in the table."
          }
        ]
      },
      {
        "title": "format 0 kerning pairs and values",
        "rows": [
          {
            "Type": "uint16",
            "Name": "left",
            "Description": "The glyph index for the lefthand glyph in the kerning pair."
          },
          {
            "Type": "uint16",
            "Name": "right",
            "Description": "The glyph index for the righthand glyph in the kerning pair."
          },
          {
            "Type": "sint16",
            "Name": "value",
            "Description": "The kerning value in FUnits for the left and right pair in FUnits. If this value is greater than zero, the glyphs are moved apart. If this value is less than zero, the glyphs are moved together."
          }
        ]
      },
      {
        "title": "header for a Format 1",
        "rows": [
          {
            "Type": "StateHeader",
            "Name": "stHeader",
            "Description": "The contextual kerning state table header."
          },
          {
            "Type": "uint16",
            "Name": "valueTable",
            "Description": "Offset in bytes from the beginning of the subtable to the beginning of the kerning table."
          }
        ]
      },
      {
        "title": "format 1 flags",
        "rows": [
          {
            "Mask value": "0x8000",
            "Interpretation": "Push: if set, push this glyph on the kerning stack."
          },
          {
            "Mask value": "0x4000",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x3FFF",
            "Interpretation": "ValueOffset: byte offset from the beginning of the subtable to the value table for the glyphs on the kerning stack."
          }
        ]
      },
      {
        "title": "format 2 simple array header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "rowWidth",
            "Description": "The width, in bytes, of a row in the subtable."
          },
          {
            "Type": "uint16",
            "Name": "leftOffsetTable",
            "Description": "Offset from beginning of this subtable to the left-hand offset table."
          },
          {
            "Type": "uint16",
            "Name": "rightOffsetTable",
            "Description": "Offset from beginning of this subtable to right-hand offset table."
          },
          {
            "Type": "uint16",
            "Name": "array",
            "Description": "Offset from beginning of this subtable to the start of the kerning array."
          }
        ]
      },
      {
        "title": "format 2 class table header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "firstGlyph",
            "Description": "First glyph in class range."
          },
          {
            "Type": "uint16",
            "Name": "nGlyphs",
            "Description": "Number of glyph in class range."
          },
          {
            "Type": "UInt16",
            "Name": "offsets[nGlyphs]",
            "Description": "The offsets array for all of the glyphs in the range."
          }
        ]
      },
      {
        "title": "header of the format 3 simple array header subtable",
        "rows": [
          {
            "Type": "uint16",
            "Name": "glyphCount",
            "Description": "The number of glyphs in this font."
          },
          {
            "Type": "uint8",
            "Name": "kernValueCount",
            "Description": "The number of kerning values."
          },
          {
            "Type": "uint8",
            "Name": "leftClassCount",
            "Description": "The number of left-hand classes."
          },
          {
            "Type": "uint8",
            "Name": "rightClassCount",
            "Description": "The number of right-hand classes."
          },
          {
            "Type": "uint8",
            "Name": "flags",
            "Description": "Set to zero (reserved for future use)."
          }
        ]
      },
      {
        "title": "format 3 four variable length arrays",
        "rows": [
          {
            "Type": "FWord",
            "Name": "kernValue[kernValueCount]",
            "Description": "The kerning values."
          },
          {
            "Type": "uint8",
            "Name": "leftClass[glyphCount]",
            "Description": "The left-hand classes."
          },
          {
            "Type": "uint8",
            "Name": "rightClass[glyphCount]",
            "Description": "The right-hand classes"
          },
          {
            "Type": "uint8",
            "Name": "kernIndex[leftClassCount * rightClassCount]",
            "Description": "The indices into the kernValue array."
          }
        ]
      }
    ]
  },
  {
    "title": "kerx",
    "tables": [
      {
        "title": "Table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "version",
            "Description": "The version number of the extended kerning table (currently 2, 3, or 4)."
          },
          {
            "Type": "uint16",
            "Name": "padding",
            "Description": "Unused; set to zero."
          },
          {
            "Type": "uint32",
            "Name": "nTables",
            "Description": "The number of subtables included in the extended kerning table."
          }
        ]
      },
      {
        "title": "Subtable Header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "length",
            "Description": "The length of this subtable in bytes, including this header."
          },
          {
            "Type": "uint32",
            "Name": "coverage",
            "Description": "Circumstances under which this table is used. See below for description."
          },
          {
            "Type": "uint32",
            "Name": "tupleCount",
            "Description": "The tuple count. This value is only used with variation fonts and should be 0 for all other fonts. The subtable's tupleCount will be ignored if the 'kerx' table version is less than 4."
          }
        ]
      },
      {
        "title": "coverage Field",
        "rows": [
          {
            "Mask value": "0x80000000",
            "Name": "vertical",
            "Description": "Set if table has vertical kerning values."
          },
          {
            "Mask value": "0x40000000",
            "Name": "crossStream",
            "Description": "Set if table has cross-stream kerning values."
          },
          {
            "Mask value": "0x20000000",
            "Name": "variation",
            "Description": "Set if table has variation kerning values."
          },
          {
            "Mask value": "0x10000000",
            "Name": "processDirection",
            "Description": "Process direction flag. If clear, process the glyphs forwards, that is, from first to last in the glyph stream. If we, process them from last to first. This flag only applies to state-table based 'kerx' subtables (types 1 and 4)."
          },
          {
            "Mask value": "0x0FFFFF00",
            "Name": "unusedBits",
            "Description": "Set to 0."
          },
          {
            "Mask value": "0x000000FF",
            "Name": "formatMask",
            "Description": "These bytes contain the format of this subtable (0, 1, 2, 4, and 6 currently defined)."
          }
        ]
      },
      {
        "title": "format 0 Subtable",
        "rows": [
          {
            "Type": "uint32",
            "Name": "nPairs",
            "Description": "The number of kerning pairs in this subtable."
          },
          {
            "Type": "uint32",
            "Name": "searchRange",
            "Description": "The largest power of two less than or equal to the value of nPairs, multiplied by the size in bytes of an entry in the subtable."
          },
          {
            "Type": "uint32",
            "Name": "entrySelector",
            "Description": "This is calculated as log2 of the largest power of two less than or equal to the value of nPairs. This value indicates how many iterations of the search loop have to be made. For example, in a list of eight items, there would be three iterations of the loop."
          },
          {
            "Type": "uint32",
            "Name": "rangeShift",
            "Description": "The value of nPairs minus the largest power of two less than or equal to nPairs. This is multiplied by the size in bytes of an entry in the table."
          }
        ]
      },
      {
        "title": "format 0 Subtable Kerning Records",
        "rows": [
          {
            "Type": "uint16",
            "Name": "left",
            "Description": "The glyph index for the lefthand glyph in the kerning pair."
          },
          {
            "Type": "uint16",
            "Name": "right",
            "Description": "The glyph index for the righthand glyph in the kerning pair."
          },
          {
            "Type": "sint16",
            "Name": "value",
            "Description": "See below"
          }
        ]
      },
      {
        "title": "format 1 Header",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stHeader",
            "Description": "The contextual kerning state table header."
          },
          {
            "Type": "uint32",
            "Name": "valueTable",
            "Description": "Offset in bytes from the beginning of the state table to the beginning of the kerning value array."
          }
        ]
      },
      {
        "title": "format 1 Subtable Actions",
        "rows": [
          {
            "Mask value": "0x8000",
            "Interpretation": "Push: if set, push this glyph on the kerning stack."
          },
          {
            "Mask value": "0x4000",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x2000",
            "Interpretation": "If set, reset the kerning data (clear the stack)"
          },
          {
            "Mask value": "0x1FFF",
            "Interpretation": "Not used; set to 0."
          }
        ]
      },
      {
        "title": "format 2 Simple Offset-based Array Header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "rowWidth",
            "Description": "The number of bytes in each row of the kerning value array"
          },
          {
            "Type": "uint32",
            "Name": "leftOffsetTable",
            "Description": "Offset from beginning of this subtable to the left-hand offset table."
          },
          {
            "Type": "uint32",
            "Name": "rightOffsetTable",
            "Description": "Offset from beginning of this subtable to right-hand offset table."
          },
          {
            "Type": "uint32",
            "Name": "array",
            "Description": "Offset from beginning of this subtable to the start of the kerning array."
          }
        ]
      },
      {
        "title": "Type 4 Subtable Header",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stHeader",
            "Description": "The control point positioning state table header."
          },
          {
            "Type": "uint32",
            "Name": "flags",
            "Description": "Flags"
          }
        ]
      },
      {
        "title": "Format 4 Flags",
        "rows": [
          {
            "Value": "0xC0000000",
            "Interpretation": "Action type mask. A two-bit field containing the action type."
          },
          {
            "Value": "0x3F000000",
            "Interpretation": "Unused - must be zero."
          },
          {
            "Value": "0x00FFFFFF",
            "Interpretation": "Masks the offset in bytes from the beginning of the state table to the beginning of the control point table."
          }
        ]
      },
      {
        "title": "Format 4 Actions",
        "rows": [
          {
            "Mask value": "0x8000",
            "Interpretation": "Mark: if set, remember this glyph as the marked glyph."
          },
          {
            "Mask value": "0x4000",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state"
          }
        ]
      },
      {
        "title": "format 4 Control Point Actions",
        "rows": [
          {
            "Type": "uint16",
            "Name": "markControlPoint",
            "Description": "Control point in marked glyph."
          },
          {
            "Type": "uint16",
            "Name": "currControlPoint",
            "Description": "Control point in current glyph."
          }
        ]
      },
      {
        "title": "format 4 Anchor Point Actions",
        "rows": [
          {
            "Type": "uint16",
            "Name": "markAnchorPoint",
            "Description": "Anchor point in marked glyph."
          },
          {
            "Type": "uint16",
            "Name": "currAnchorPoint",
            "Description": "Anchor point in current glyph."
          }
        ]
      },
      {
        "title": "format 4 Control Point Coordinate Actions",
        "rows": [
          {
            "Type": "FWord",
            "Name": "markX",
            "Description": "X-coordinate of mark control point"
          },
          {
            "Type": "FWord",
            "Name": "markY",
            "Description": "Y-coordinate of mark control point"
          },
          {
            "Type": "FWord",
            "Name": "currX",
            "Description": "X-coordinate of current control point"
          },
          {
            "Type": "FWord",
            "Name": "currY",
            "Description": "Y-coordinate of current control point"
          }
        ]
      },
      {
        "title": "format 6 Simple Index-based Array Header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "flags",
            "Description": "Flags for this subtable. See below."
          },
          {
            "Type": "uint16",
            "Name": "rowCount",
            "Description": "The number of rows in the kerning value array"
          },
          {
            "Type": "uint16",
            "Name": "columnCount",
            "Description": "The number of columns in the kerning value array"
          },
          {
            "Type": "uint32",
            "Name": "rowIndexTableOffset",
            "Description": "Offset from beginning of this subtable to the row index lookup table."
          },
          {
            "Type": "uint32",
            "Name": "columnIndexTableOffset",
            "Description": "Offset from beginning of this subtable to column index offset table."
          },
          {
            "Type": "uint32",
            "Name": "kerningArrayOffset",
            "Description": "Offset from beginning of this subtable to the start of the kerning array."
          },
          {
            "Type": "uint32",
            "Name": "kerningVectorOffset",
            "Description": "Offset from beginning of this subtable to the start of the kerning vectors. This value is only present if the tupleCount for this subtable is 1 or more."
          }
        ]
      },
      {
        "title": "Subtable Glyph Coverage Tables",
        "rows": [
          {
            "Type": "uint32",
            "Name": "subtableOffsets[]",
            "Description": "Array of offsets from the beginning of the subtable glyph coverage table to the glyph coverage bitfield for a given subtable; there is one offset for each subtable in the 'kerx' table. Use 0xFFFFFFFF to indicate that there is no coverage bitfield for the given subtable. Coverage bitfields are only used for type 1 and 4 'kerx' subtables."
          },
          {
            "Type": "uint8",
            "Name": "coverageBitfields[]",
            "Description": "The individual coverage bitfields"
          }
        ]
      }
    ]
  },
  {
    "title": "lcar",
    "tables": [
      {
        "title": "ligature caret table header format",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the ligature caret table (0x00010000 for the initial version)."
          },
          {
            "Type": "uint16",
            "Name": "format",
            "Description": "Format of the ligature caret table. Format 0 indicates distance and Format 1 indicates control point, as described below."
          },
          {
            "Type": "variable",
            "Name": "lookup",
            "Description": "data Lookup table associating glyphs with LigCaretClassEntry records. See below for details on how to interpret the lookup values."
          }
        ]
      },
      {
        "title": "lookup table is used to find the LigCaretClassEntry record",
        "rows": [
          {
            "Lookup format": "0",
            "Interpretation": "Array of 16-bit offsets, one for each glyph in the font. Each offset is from the start of the Ligature Caret table to the particular LigCaretClassEntry record for that glyph."
          },
          {
            "Lookup format": "2",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the Ligature Caret table to the particular LigCaretClassEntry record for the glyphs in that segment."
          },
          {
            "Lookup format": "4",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset to an array of 16-bit offsets from the start of the Ligature Caret table to the LigCaretClassEntry record for each glyph in the segment."
          },
          {
            "Lookup format": "6",
            "Interpretation": "The value of each lookupSingle is a 16-bit offset from the start of the Ligature Caret table to the particular LigCaretClassEntry record for that glyph."
          },
          {
            "Lookup format": "8",
            "Interpretation": "The valueArray is an array of 16-bit offsets, one for each glyph in the trimmed array. Each offset is from the start of the Ligature Caret table to the particular LigCaretClassEntry record for that glyph."
          }
        ]
      },
      {
        "title": "format of the LigCaretClassEntry records",
        "rows": [
          {
            "Type": "uint16",
            "Name": "count",
            "Description": "Number of entries in the partials array."
          },
          {
            "Type": "int16",
            "Name": "partials[count]",
            "Description": "Single values."
          }
        ]
      },
      {
        "title": "formats of ligature caret tables",
        "rows": [
          {
            "Format": "0",
            "Description": "Distance. The value (or values) associated with a particular glyph is or are FUnit values, representing a position along the baseline through which a subdivision is made orthogonally to the baseline."
          },
          {
            "Format": "1",
            "Description": "Control point. The value (or values) associated with a particular glyph are control point numbers, through which a subdivision is made orthogonally to the baseline."
          }
        ]
      }
    ]
  },
  {
    "title": "loca",
    "tables": [
      {
        "title": "short version",
        "rows": [
          {
            "Type": "uint16",
            "Name": "offsets[n]",
            "Description": "The actual local offset divided by 2 is stored. The value of n is the number of glyphs in the font + 1. The number of glyphs in the font is found in the maximum profile table."
          }
        ]
      },
      {
        "title": "long version",
        "rows": [
          {
            "Type": "uint32",
            "Name": "offsets[n]",
            "Description": "The actual local offset is stored. The value of n is the number of glyphs in the font + 1. The number of glyphs in the font is found in the maximum profile table."
          }
        ]
      }
    ]
  },
  {
    "title": "ltag",
    "tables": [
      {
        "title": "FTStringRange",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "offset",
            "Description": "Offset from the start of the table to the beginning of the string"
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "String length (in bytes)"
          }
        ]
      },
      {
        "title": "header",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "version",
            "Description": "Table version; currently 1"
          },
          {
            "Type": "UInt32",
            "Name": "flags",
            "Description": "Table flags; currently none defined"
          },
          {
            "Type": "UInt32",
            "Name": "numTags",
            "Description": "Number of language tags which follow"
          },
          {
            "Type": "FTStringRange[]",
            "Name": "tagRange",
            "Description": "Range for each tag's string"
          }
        ]
      },
      {
        "title": "How the 'ltag' is used",
        "rows": [
          {
            "Language Code": "-1 (don't care)",
            "Value": "Geneva"
          },
          {
            "Language Code": "0",
            "Value": "Geneva"
          },
          {
            "Language Code": "1",
            "Value": "Ginebra"
          }
        ]
      }
    ]
  },
  {
    "title": "maxp",
    "tables": [
      {
        "title": "Table",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "0x00010000 (1.0)"
          },
          {
            "Type": "uint16",
            "Name": "numGlyphs",
            "Description": "the number of glyphs in the font"
          },
          {
            "Type": "uint16",
            "Name": "maxPoints",
            "Description": "points in non-compound glyph"
          },
          {
            "Type": "uint16",
            "Name": "maxContours",
            "Description": "contours in non-compound glyph"
          },
          {
            "Type": "uint16",
            "Name": "maxComponentPoints",
            "Description": "points in compound glyph"
          },
          {
            "Type": "uint16",
            "Name": "maxComponentContours",
            "Description": "contours in compound glyph"
          },
          {
            "Type": "uint16",
            "Name": "maxZones",
            "Description": "set to 2"
          },
          {
            "Type": "uint16",
            "Name": "maxTwilightPoints",
            "Description": "points used in Twilight Zone (Z0)"
          },
          {
            "Type": "uint16",
            "Name": "maxStorage",
            "Description": "number of Storage Area locations"
          },
          {
            "Type": "uint16",
            "Name": "maxFunctionDefs",
            "Description": "number of FDEFs"
          },
          {
            "Type": "uint16",
            "Name": "maxInstructionDefs",
            "Description": "number of IDEFs"
          },
          {
            "Type": "uint16",
            "Name": "maxStackElements",
            "Description": "maximum stack depth"
          },
          {
            "Type": "uint16",
            "Name": "maxSizeOfInstructions",
            "Description": "byte count for glyph instructions"
          },
          {
            "Type": "uint16",
            "Name": "maxComponentElements",
            "Description": "number of glyphs referenced at top level"
          },
          {
            "Type": "uint16",
            "Name": "maxComponentDepth",
            "Description": "levels of recursion, set to 0 if font has only simple glyphs"
          }
        ]
      },
      {
        "title": "Table for PostScript OpenType Fonts",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "version",
            "Description": "0x00005000 (0.5)"
          },
          {
            "Type": "uint16",
            "Name": "numGlyphs",
            "Description": "the number of glyphs in the font"
          }
        ]
      }
    ]
  },
  {
    "title": "meta",
    "tables": [
      {
        "title": "Table",
        "rows": [
          {
            "Type": "uint32_t",
            "Name": "version",
            "Description": "The version of the table format, currently 1"
          },
          {
            "Type": "uint32_t",
            "Name": "flags",
            "Description": "Flags, currently unused and set to 0"
          },
          {
            "Type": "uint32_t",
            "Name": "dataOffset",
            "Description": "Offset from the beginning of the table to the data"
          },
          {
            "Type": "uint32_t",
            "Name": "numDataMaps",
            "Description": "The number of data maps in the table"
          }
        ]
      },
      {
        "title": "Data Maps",
        "rows": [
          {
            "Type": "FourCharCode",
            "Name": "tag",
            "Description": "A tag indicating the type of metadata"
          },
          {
            "Type": "uint32_t",
            "Name": "dataOffset",
            "Description": "Offset from the beginning of the table to the data for this tag"
          },
          {
            "Type": "uint32_t",
            "Name": "dataLength",
            "Description": "Length of the data. The data is not required to be padded to any byte boundary."
          }
        ]
      }
    ]
  },
  {
    "title": "mort",
    "tables": [
      {
        "title": "format of the glyph metamorphosis table header",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the glyph metamorphosis table (0x00010000 for the current version)."
          },
          {
            "Type": "uint32",
            "Name": "nChains",
            "Description": "Number of metamorphosis chains contained in this table."
          }
        ]
      },
      {
        "title": "chain header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "defaultFlags",
            "Description": "The default sub-feature flags for this chain."
          },
          {
            "Type": "uint32",
            "Name": "chainLength",
            "Description": "The length of the chain in bytes, including this header."
          },
          {
            "Type": "uint16",
            "Name": "nFeatureEntries",
            "Description": "The number of entries in the chain's feature subtable."
          },
          {
            "Type": "uint16",
            "Name": "nSubtables",
            "Description": "The number of subtables in the chain."
          }
        ]
      },
      {
        "title": "feature table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "featureType",
            "Description": "The type of feature."
          },
          {
            "Type": "uint16",
            "Name": "featureSetting",
            "Description": "The feature's setting."
          },
          {
            "Type": "uint32",
            "Name": "enableFlags",
            "Description": "Flags for the settings that this feature and setting enables."
          },
          {
            "Type": "uint32",
            "Name": "disableFlags",
            "Description": "Complement of flags for the settings that this feature and setting disable."
          }
        ]
      },
      {
        "title": "enableEffectOffSelector",
        "rows": [
          {
            "Enable flag": "0x00000000",
            "Disable flag": "0x00000000 (complement of 0xFFFFFFFF)"
          }
        ]
      },
      {
        "title": "morph subtable types",
        "rows": [
          {
            "Subtable type": "0",
            "Description": "Indic-style rearrangement."
          },
          {
            "Subtable type": "1",
            "Description": "Contextual glyph substitution."
          },
          {
            "Subtable type": "2",
            "Description": "Ligature substitution."
          },
          {
            "Subtable type": "3",
            "Description": "(Reserved)"
          },
          {
            "Subtable type": "4",
            "Description": "Non-contextual glyph substitution."
          },
          {
            "Subtable type": "5",
            "Description": "Contextual glyph insertion"
          }
        ]
      },
      {
        "title": "MorphSubtableHeader",
        "rows": [
          {
            "Type": "uint16",
            "Name": "length",
            "Description": "Length of subtable in bytes, including this header."
          },
          {
            "Type": "uint16",
            "Name": "coverage",
            "Description": "Coverage flags and atomic transformation type."
          },
          {
            "Type": "uint32",
            "Name": "subFeatureFlags",
            "Description": "Flags for the settings that this subtable describes."
          }
        ]
      },
      {
        "title": "Metamorphosis coverage field bits",
        "rows": [
          {
            "Mask value": "0x8000",
            "Interpretation": "If set to 1, this subtable should be applied only to vertical text. If set to 0, this subtable should be applied only to horizontal text. Note that the 0x2000 bit can change how this bit gets interpreted."
          },
          {
            "Mask value": "0x4000",
            "Interpretation": "If set to 1, this subtable should process the glyph array in descending order. If set to 0, this subtable should process the glyph array in ascending order."
          },
          {
            "Mask value": "0x2000",
            "Interpretation": "If set to 1, this subtable should be applied irrespective of the state of the 0x8000 bit. This allows you to make subtables that will be executed irrespective of the orientation of the text. If this bit is 0, the 0x8000 bit is interpreted as described above. Support for this bit is available starting with GX 1.1; earlier versions of the software will ignore it."
          },
          {
            "Mask value": "0x1FF8",
            "Interpretation": "These bits are reserved and must be set to 0."
          },
          {
            "Mask value": "0x0007",
            "Interpretation": "These bits specify the subtable type (using the constants listed above)."
          }
        ]
      },
      {
        "title": "indic rearrangement state table",
        "rows": [
          {
            "Type": "StateHeader",
            "Name": "stHeader",
            "Description": "The Indic rearrangement state table header."
          }
        ]
      },
      {
        "title": "indic rearrangement flags field of the entry subtable",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "markFirst",
            "Interpretation": "If set, make the current glyph the first glyph to be rearranged."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x2000",
            "Name": "markLast",
            "Interpretation": "If set, make the current glyph the last glyph to be rearranged."
          },
          {
            "Mask value": "0x1FF0",
            "Name": "reserved",
            "Interpretation": "These bits are reserved and should be set to 0."
          },
          {
            "Mask value": "0x000F",
            "Name": "verb",
            "Interpretation": "The type of rearrangement specified."
          }
        ]
      },
      {
        "title": "rearrangement verb atomic transformations",
        "rows": [
          {
            "Verb": "0",
            "Results": "no change"
          },
          {
            "Verb": "1",
            "Results": "Ax => xA"
          },
          {
            "Verb": "2",
            "Results": "xD => Dx"
          },
          {
            "Verb": "3",
            "Results": "AxD => DxA"
          },
          {
            "Verb": "4",
            "Results": "ABx => xAB"
          },
          {
            "Verb": "5",
            "Results": "ABx => xBA"
          },
          {
            "Verb": "6",
            "Results": "xCD => CDx"
          },
          {
            "Verb": "7",
            "Results": "xCD => DCx"
          },
          {
            "Verb": "8",
            "Results": "AxCD => CDxA"
          },
          {
            "Verb": "9",
            "Results": "AxCD => DCxA"
          },
          {
            "Verb": "10",
            "Results": "ABxD => DxAB"
          },
          {
            "Verb": "11",
            "Results": "ABxD => DxBA"
          },
          {
            "Verb": "12",
            "Results": "ABxCD => CDxAB"
          },
          {
            "Verb": "13",
            "Results": "ABxCD => CDxBA"
          },
          {
            "Verb": "14",
            "Results": "ABxCD => DCxAB"
          },
          {
            "Verb": "15",
            "Results": "ABxCD => DCxBA"
          }
        ]
      },
      {
        "title": "format of the contextual glyph substitution subtable",
        "rows": [
          {
            "Type": "StateHeader",
            "Name": "stHeader",
            "Description": "The contextual glyph substitution state table header"
          },
          {
            "Type": "uint16",
            "Name": "substitutionTable",
            "Description": "Byte offset from the beginning of the state subtable to the beginning of the substitution tables."
          }
        ]
      },
      {
        "title": "actions in a contextual glyph substitution subtable",
        "rows": [
          {
            "Type": "uint16",
            "Name": "newState",
            "Description": "Byte offset from the beginning of the state table to the new state."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Table-specific flags."
          },
          {
            "Type": "uint16",
            "Name": "markOffset",
            "Description": "Word offset from the beginning of the state subtable to the substitution table for the marked glyph."
          },
          {
            "Type": "uint16",
            "Name": "currentOffset",
            "Description": "Word offset from the beginning of the state subtable to the substitution table for the current glyph."
          }
        ]
      },
      {
        "title": "format of the table-specific flags field",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setMark",
            "Interpretation": "If set, make the current glyph the marked glyph."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x3FFF",
            "Name": "reserved",
            "Interpretation": "These bits are reserved and should be set to 0."
          }
        ]
      },
      {
        "title": "format of the ligature substitution subtable",
        "rows": [
          {
            "Type": "StateHeader",
            "Name": "stHeader",
            "Description": "The ligature substitution state table header."
          },
          {
            "Type": "uint16",
            "Name": "ligActionTable",
            "Description": "Byte offset from the beginning of the state table to the ligature action lists."
          },
          {
            "Type": "uint16",
            "Name": "componentTable",
            "Description": "Byte offset from the beginning of the state table to the component offset tables."
          },
          {
            "Type": "uint16",
            "Name": "ligatureTable",
            "Description": "Byte offset from the beginning of the state table to the beginning of the ligature tables."
          }
        ]
      },
      {
        "title": "offset field",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setComponent",
            "Interpretation": "If set, AAT should make the current glyph a ligature component."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, AAT should not advance to the next glyph before moving to the new state."
          },
          {
            "Mask value": "0x3FFF",
            "Name": "offset",
            "Interpretation": "Byte offset from beginning of subtable to the ligature action list. This value must be a multiple of 4."
          }
        ]
      },
      {
        "title": "mask values of the ligature action list",
        "rows": [
          {
            "Mask value": "0x80000000",
            "Name": "last",
            "Interpretation": "If set, this is the last action in the list and implies store."
          },
          {
            "Mask value": "0x40000000",
            "Name": "store",
            "Interpretation": "If set, substitute the ligature for the marked glyph."
          },
          {
            "Mask value": "0x3FFFFFFF",
            "Name": "offset",
            "Interpretation": "Word offset from beginning of state table to component offset table."
          }
        ]
      },
      {
        "title": "Non-contextual Glyph Substitution Subtable",
        "rows": [
          {
            "Type": "LookupTable",
            "Name": "table",
            "Description": "The noncontextual glyph substitution table"
          }
        ]
      },
      {
        "title": "state table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "newState",
            "Description": "Byte offset from the beginning of the state table to the new state."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "The action flags (defined below)."
          },
          {
            "Type": "uint16",
            "Name": "currentInsertList",
            "Description": "Byte offset from the beginning of the state table to the list of 16-bit glyphcodes to be inserted at the current glyph (or none if zero). The number of glyphs to be inserted is contained in the currentInsertCount field in the flags (see below)."
          },
          {
            "Type": "uint16",
            "Name": "markedInsertList",
            "Description": "Byte offset from the beginning of the state table to the list of 16-bit glyphcodes to be inserted at the marked glyph (or none if zero). The number of glyphs to be inserted is contained in the markedInsertCount field in the flags (see below)."
          }
        ]
      },
      {
        "title": "flag bits",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setMark",
            "Interpretation": "If set, mark the current glyph."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x2000",
            "Name": "currentIsKashidaLike",
            "Interpretation": "If set, and the currentInsertList is nonzero, then the specified glyph list will be inserted as a kashida-like insertion, either before or after the current glyph (depending on the state of the currentInsertBefore flag). If clear, and the currentInsertList is nonzero, then the specified glyph list will be inserted as a split-vowel-like insertion, either before or after the current glyph (depending on the state of the currentInsertBefore flag)."
          },
          {
            "Mask value": "0x1000",
            "Name": "markedIsKashidaLike",
            "Interpretation": "If set, and the markedInsertList is nonzero, then the specified glyph list will be inserted as a kashida-like insertion, either before or after the marked glyph (depending on the state of the markedInsertBefore flag). If clear, and the markedInsertList is nonzero, then the specified glyph list will be inserted as a split-vowel-like insertion, either before or after the marked glyph (depending on the state of the markedInsertBefore flag)."
          },
          {
            "Mask value": "0x0800",
            "Name": "currentInsertBefore",
            "Interpretation": "If set, specifies that insertions are to be made to the left of the current glyph. If clear, they're made to the right of the current glyph."
          },
          {
            "Mask value": "0x0400",
            "Name": "markedInsertBefore",
            "Interpretation": "If set, specifies that insertions are to be made to the left of the marked glyph. If clear, they're made to the right of the marked glyph."
          },
          {
            "Mask value": "0x03E0",
            "Name": "currentInsertCount",
            "Interpretation": "This 5-bit field is treated as a count of the number of glyphs to insert at the current position. Since zero means no insertions, the largest number of insertions at any given current location is 31 glyphs."
          },
          {
            "Mask value": "0x001F",
            "Name": "markedInsertCount",
            "Interpretation": "This 5-bit field is treated as a count of the number of glyphs to insert at the marked position. Since zero means no insertions, the largest number of insertions at any given marked location is 31 glyphs."
          }
        ]
      }
    ]
  },
  {
    "title": "morx",
    "tables": [
      {
        "title": "Table header",
        "rows": [
          {
            "Type": "uint16",
            "Name": "version",
            "Description": "Version number of the extended glyph metamorphosis table (either 2 or 3)"
          },
          {
            "Type": "uint16",
            "Name": "unused",
            "Description": "Set to 0"
          },
          {
            "Type": "uint32",
            "Name": "nChains",
            "Description": "Number of metamorphosis chains contained in this table."
          }
        ]
      },
      {
        "title": "chain header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "defaultFlags",
            "Description": "The default specification for subtables."
          },
          {
            "Type": "uint32",
            "Name": "chainLength",
            "Description": "Total byte count, including this header; must be a multiple of 4."
          },
          {
            "Type": "uint32",
            "Name": "nFeatureEntries",
            "Description": "Number of feature subtable entries."
          },
          {
            "Type": "uint32",
            "Name": "nSubtables",
            "Description": "The number of subtables in the chain."
          }
        ]
      },
      {
        "title": "feature table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "featureType",
            "Description": "The type of feature."
          },
          {
            "Type": "uint16",
            "Name": "featureSetting",
            "Description": "The feature's setting (aka selector)"
          },
          {
            "Type": "uint32",
            "Name": "enableFlags",
            "Description": "Flags for the settings that this feature and setting enables."
          },
          {
            "Type": "uint32",
            "Name": "disableFlags",
            "Description": "Complement of flags for the settings that this feature and setting disable."
          }
        ]
      },
      {
        "title": "enableEffectOffSelector",
        "rows": [
          {
            "Enable flag": "0x00000000",
            "Disable flag": "0x00000000 (complement of 0xFFFFFFFF)"
          }
        ]
      },
      {
        "title": "Subtable Glyph Coverage Tables",
        "rows": [
          {
            "Type": "uint32",
            "Name": "subtableOffsets[]",
            "Description": "Array of offsets from the beginning of the subtable glyph coverage table to the glyph coverage bitfield for a given subtable; there is one offset for each subtable in the chain"
          },
          {
            "Type": "uint8",
            "Name": "coverageBitfields[]",
            "Description": "The individual coverage bitfields"
          }
        ]
      },
      {
        "title": "Metamorphosis Subtable header",
        "rows": [
          {
            "Type": "uint32",
            "Name": "length",
            "Description": "Total subtable length, including this header."
          },
          {
            "Type": "uint32",
            "Name": "coverage",
            "Description": "Coverage flags and subtable type."
          },
          {
            "Type": "uint32",
            "Name": "subFeatureFlags",
            "Description": "The 32-bit mask identifying which subtable this is (the subtable being executed if the AND of this value and the processed defaultFlags is nonzero)"
          }
        ]
      },
      {
        "title": "morph coverage value",
        "rows": [
          {
            "Mask value": "0x80000000",
            "Interpretation": "If set, this subtable will only be applied to vertical text. If clear, this subtable will only be applied to horizontal text."
          },
          {
            "Mask value": "0x40000000",
            "Interpretation": "If set, this subtable will process glyphs in descending order. If clear, it will process the glyphs in ascending order."
          },
          {
            "Mask value": "0x20000000",
            "Interpretation": "If set, this subtable will be applied to both horizontal and vertical text (i.e. the state of bit 0x80000000 is ignored)."
          },
          {
            "Mask value": "0x10000000",
            "Interpretation": "If set, this subtable will process glyphs in logical order (or reverse logical order, depending on the value of bit 0x80000000)."
          },
          {
            "Mask value": "0x0FFFFF00",
            "Interpretation": "Reserved, set to zero."
          },
          {
            "Mask value": "0x000000FF",
            "Interpretation": "Subtable type; see following table."
          }
        ]
      },
      {
        "title": "Bits 28 and 30 of the coverage field morph",
        "rows": [
          {
            "Bit 30": "0",
            "Bit 28": "0",
            "Interpretation for Horizontal Text": "The subtable is processed in layout order (the same order as the glyphs, which is always left-to-right)."
          },
          {
            "Bit 30": "1",
            "Bit 28": "0",
            "Interpretation for Horizontal Text": "The subtable is processed in reverse layout order (the order opposite that of the glyphs, which is always right-to-left)."
          },
          {
            "Bit 30": "0",
            "Bit 28": "1",
            "Interpretation for Horizontal Text": "The subtable is processed in logical order (the same order as the characters, which may be left-to-right or right-to-left)."
          },
          {
            "Bit 30": "1",
            "Bit 28": "1",
            "Interpretation for Horizontal Text": "The subtable is processed in reverse logical order (the order opposite that of the characters, which may be right-to-left or left-to-right)."
          }
        ]
      },
      {
        "title": "metamorphosis subtable types",
        "rows": [
          {
            "Subtable type": "0",
            "Description": "Rearrangement subtable."
          },
          {
            "Subtable type": "1",
            "Description": "Contextual subtable."
          },
          {
            "Subtable type": "2",
            "Description": "Ligature subtable."
          },
          {
            "Subtable type": "3",
            "Description": "(Reserved)"
          },
          {
            "Subtable type": "4",
            "Description": "Noncontextual (“swash”) subtable."
          },
          {
            "Subtable type": "5",
            "Description": "Insertion subtable"
          }
        ]
      },
      {
        "title": "format of the Indic rearrangement subtable",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stxHeader",
            "Description": "The Indic rearrangement state table header."
          }
        ]
      },
      {
        "title": "actions in an Indic rearrangement subtable",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "markFirst",
            "Interpretation": "If set, make the current glyph the first glyph to be rearranged."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state. This means that the glyph index doesn't change, even if the glyph at that index has changed."
          },
          {
            "Mask value": "0x2000",
            "Name": "markLast",
            "Interpretation": "If set, make the current glyph the last glyph to be rearranged."
          },
          {
            "Mask value": "0x1FF0",
            "Name": "reserved",
            "Interpretation": "These bits are reserved and should be set to 0."
          },
          {
            "Mask value": "0x000F",
            "Name": "verb",
            "Interpretation": "The type of rearrangement specified."
          }
        ]
      },
      {
        "title": "rearrangement verb atomic transformations",
        "rows": [
          {
            "Verb": "0",
            "Results": "no change"
          },
          {
            "Verb": "1",
            "Results": "Ax => xA"
          },
          {
            "Verb": "2",
            "Results": "xD => Dx"
          },
          {
            "Verb": "3",
            "Results": "AxD => DxA"
          },
          {
            "Verb": "4",
            "Results": "ABx => xAB"
          },
          {
            "Verb": "5",
            "Results": "ABx => xBA"
          },
          {
            "Verb": "6",
            "Results": "xCD => CDx"
          },
          {
            "Verb": "7",
            "Results": "xCD => DCx"
          },
          {
            "Verb": "8",
            "Results": "AxCD => CDxA"
          },
          {
            "Verb": "9",
            "Results": "AxCD => DCxA"
          },
          {
            "Verb": "10",
            "Results": "ABxD => DxAB"
          },
          {
            "Verb": "11",
            "Results": "ABxD => DxBA"
          },
          {
            "Verb": "12",
            "Results": "ABxCD => CDxAB"
          },
          {
            "Verb": "13",
            "Results": "ABxCD => CDxBA"
          },
          {
            "Verb": "14",
            "Results": "ABxCD => DCxAB"
          },
          {
            "Verb": "15",
            "Results": "ABxCD => DCxBA"
          }
        ]
      },
      {
        "title": "format of the contextual glyph substitution subtable",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stxHeader",
            "Description": "The contextual glyph substitution state table header"
          },
          {
            "Type": "uint32",
            "Name": "substitutionTable",
            "Description": "Byte offset from the beginning of the state subtable to the beginning of the substitution tables."
          }
        ]
      },
      {
        "title": "actions in a contextual glyph substitution subtable",
        "rows": [
          {
            "Type": "uint16",
            "Name": "newState",
            "Description": "Zero-based index to the new state"
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "Table-specific flags."
          },
          {
            "Type": "uint16",
            "Name": "markIndex",
            "Description": "Index of the substitution table for the marked glyph (use 0xFFFF for none)"
          },
          {
            "Type": "uint16",
            "Name": "currentIndex",
            "Description": "Index of the substitution table for the current glyph (use 0xFFFF for none)"
          }
        ]
      },
      {
        "title": "Contextual Glyph Substitution flags field",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setMark",
            "Interpretation": "If set, make the current glyph the marked glyph."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't advance to the next glyph before going to the new state."
          },
          {
            "Mask value": "0x3FFF",
            "Name": "reserved",
            "Interpretation": "These bits are reserved and should be set to 0."
          }
        ]
      },
      {
        "title": "ligature subtable starts off with an extended state table header",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stateHeader",
            "Description": "Extended state table header, as described above."
          },
          {
            "Type": "UInt32",
            "Name": "ligActionOffset",
            "Description": "Byte offset from stateHeader to the start of the ligature action table."
          },
          {
            "Type": "UInt32",
            "Name": "componentOffset",
            "Description": "Byte offset from stateHeader to the start of the component table."
          },
          {
            "Type": "UInt32",
            "Name": "ligatureOffset",
            "Description": "Byte offset from stateHeader to the start of the actual ligature lists."
          }
        ]
      },
      {
        "title": "contextual glyph substitution entry table for a ligature subtable",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "nextStateIndex",
            "Description": "Row index in the state array for the state which will be used by the next glyph."
          },
          {
            "Type": "UInt16",
            "Name": "entryFlags",
            "Description": "Flags."
          },
          {
            "Type": "UInt16",
            "Name": "ligActionIndex",
            "Description": "Index to the first ligActionTable entry for processing this group, if indicated by the flags."
          }
        ]
      },
      {
        "title": "contextual glyph substitution flags",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setComponent",
            "Interpretation": "Push this glyph onto the component stack for eventual processing."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "Leave the glyph pointer at this glyph for the next iteration."
          },
          {
            "Mask value": "0x2000",
            "Name": "performAction",
            "Interpretation": "use the ligActionIndex to process a ligature group."
          },
          {
            "Mask value": "0x3FFF",
            "Name": "N/A",
            "Interpretation": "Reserved; set to zero."
          }
        ]
      },
      {
        "title": "Contextual Glyph Substitution format of a ligature action",
        "rows": [
          {
            "Mask value": "0x80000000",
            "Name": "last",
            "Interpretation": "This is the last action in the list. This also implies storage."
          },
          {
            "Mask value": "0x40000000",
            "Name": "store",
            "Interpretation": "Store the ligature at the current cumulated index in the ligature table in place of the marked (i.e. currently-popped) glyph."
          },
          {
            "Mask value": "0x3FFFFFFF",
            "Name": "offset",
            "Interpretation": "A 30-bit value which is sign-extended to 32-bits and added to the glyph ID, resulting in an index into the component table."
          }
        ]
      },
      {
        "title": "Non-contextual Glyph Substitution Subtable",
        "rows": [
          {
            "Type": "LookupTable",
            "Name": "table",
            "Description": "The noncontextual glyph substitution table"
          }
        ]
      },
      {
        "title": "glyph insertion subtable",
        "rows": [
          {
            "Type": "STXHeader",
            "Name": "stateHeader",
            "Description": "Extended state table header"
          },
          {
            "Type": "UInt32",
            "Name": "insertionActionOffset",
            "Description": "Byte offset from stateHeader to the start of the insertion glyph table."
          }
        ]
      },
      {
        "title": "glyph insertion actions",
        "rows": [
          {
            "Type": "uint16",
            "Name": "newState",
            "Description": "Zero-based index of the new state."
          },
          {
            "Type": "uint16",
            "Name": "flags",
            "Description": "The action flags (defined below)."
          },
          {
            "Type": "uint16",
            "Name": "currentInsertIndex",
            "Description": "Zero-based index into the insertion glyph table. The number of glyphs to be inserted is contained in the currentInsertCount field in the flags (see below). A value of 0xFFFF indicates no insertion is to be done."
          },
          {
            "Type": "uint16",
            "Name": "markedInsertIndex",
            "Description": "Zero-based index into the insertion glyph table. The number of glyphs to be inserted is contained in the markedInsertCount field in the flags (see below). A value of 0xFFFF indicates no insertion is to be done."
          }
        ]
      },
      {
        "title": "Glyph Insertion Subtable flag bits",
        "rows": [
          {
            "Mask value": "0x8000",
            "Name": "setMark",
            "Interpretation": "If set, mark the current glyph."
          },
          {
            "Mask value": "0x4000",
            "Name": "dontAdvance",
            "Interpretation": "If set, don't update the glyph index before going to the new state. This does not mean that the glyph pointed to is the same one as before. If you've made insertions immediately downstream of the current glyph, the next glyph processed would in fact be the first one inserted."
          },
          {
            "Mask value": "0x2000",
            "Name": "currentIsKashidaLike",
            "Interpretation": "If set, and the currentInsertList is nonzero, then the specified glyph list will be inserted as a kashida-like insertion, either before or after the current glyph (depending on the state of the currentInsertBefore flag). If clear, and the currentInsertList is nonzero, then the specified glyph list will be inserted as a split-vowel-like insertion, either before or after the current glyph (depending on the state of the currentInsertBefore flag)."
          },
          {
            "Mask value": "0x1000",
            "Name": "markedIsKashidaLike",
            "Interpretation": "If set, and the markedInsertList is nonzero, then the specified glyph list will be inserted as a kashida-like insertion, either before or after the marked glyph (depending on the state of the markedInsertBefore flag). If clear, and the markedInsertList is nonzero, then the specified glyph list will be inserted as a split-vowel-like insertion, either before or after the marked glyph (depending on the state of the markedInsertBefore flag)."
          },
          {
            "Mask value": "0x0800",
            "Name": "currentInsertBefore",
            "Interpretation": "If set, specifies that insertions are to be made to the left of the current glyph. If clear, they're made to the right of the current glyph."
          },
          {
            "Mask value": "0x0400",
            "Name": "markedInsertBefore",
            "Interpretation": "If set, specifies that insertions are to be made to the left of the marked glyph. If clear, they're made to the right of the marked glyph."
          },
          {
            "Mask value": "0x03E0",
            "Name": "currentInsertCount",
            "Interpretation": "This 5-bit field is treated as a count of the number of glyphs to insert at the current position. Since zero means no insertions, the largest number of insertions at any given current location is 31 glyphs."
          },
          {
            "Mask value": "0x001F",
            "Name": "markedInsertCount",
            "Interpretation": "This 5-bit field is treated as a count of the number of glyphs to insert at the marked position. Since zero means no insertions, the largest number of insertions at any given marked location is 31 glyphs."
          }
        ]
      }
    ]
  },
  {
    "title": "name",
    "tables": [
      {
        "title": "Table",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "format",
            "Description": "Format selector. Set to 0."
          },
          {
            "Type": "UInt16",
            "Name": "count",
            "Description": "The number of nameRecords in this name table."
          },
          {
            "Type": "UInt16",
            "Name": "stringOffset",
            "Description": "Offset in bytes to the beginning of the name character strings."
          },
          {
            "Type": "NameRecord",
            "Name": "nameRecord[count]",
            "Description": "The name records array."
          },
          {
            "Type": "variable",
            "Name": "name",
            "Description": "Character strings. The character strings of the names. Note that these are not necessarily ASCII!"
          }
        ]
      },
      {
        "title": "Name Records",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "platformID",
            "Description": "Platform identifier code."
          },
          {
            "Type": "UInt16",
            "Name": "platformSpecificID",
            "Description": "Platform-specific encoding identifier."
          },
          {
            "Type": "UInt16",
            "Name": "languageID",
            "Description": "Language identifier."
          },
          {
            "Type": "UInt16",
            "Name": "nameID",
            "Description": "Name identifier."
          },
          {
            "Type": "UInt16",
            "Name": "length",
            "Description": "Name string length in bytes."
          },
          {
            "Type": "UInt16",
            "Name": "offset",
            "Description": "Name string offset in bytes from stringOffset."
          }
        ]
      },
      {
        "title": "Platform Identifiers",
        "rows": [
          {
            "Platform ID": "0",
            "Platform": "Unicode",
            "Platform-specific ID": "Indicates Unicode version."
          },
          {
            "Platform ID": "1",
            "Platform": "Macintosh",
            "Platform-specific ID": "QuickDraw Script Manager code."
          },
          {
            "Platform ID": "2",
            "Platform": "(reserved; do not use)"
          },
          {
            "Platform ID": "3",
            "Platform": "Microsoft",
            "Platform-specific ID": "Microsoft encoding."
          }
        ]
      },
      {
        "title": "Unicode Platform-specific Encoding Identifiers",
        "rows": [
          {
            "Platform- specific ID code": "0",
            "Meaning": "Version 1.0 semantics"
          },
          {
            "Platform- specific ID code": "1",
            "Meaning": "Version 1.1 semantics"
          },
          {
            "Platform- specific ID code": "2",
            "Meaning": "ISO 10646 1993 semantics (deprecated)"
          },
          {
            "Platform- specific ID code": "3",
            "Meaning": "Unicode 2.0 or later semantics (BMP only)"
          },
          {
            "Platform- specific ID code": "4",
            "Meaning": "Unicode 2.0 or later semantics (non-BMP characters allowed)"
          }
        ]
      },
      {
        "title": "Macintosh Platform-specific Encoding Identifiers",
        "rows": [
          {
            "Platform- specific ID code": "17",
            "Script": "Malayalam"
          },
          {
            "Platform- specific ID code": "18",
            "Script": "Sinhalese"
          },
          {
            "Platform- specific ID code": "19",
            "Script": "Burmese"
          },
          {
            "Platform- specific ID code": "20",
            "Script": "Khmer"
          },
          {
            "Platform- specific ID code": "21",
            "Script": "Thai"
          },
          {
            "Platform- specific ID code": "22",
            "Script": "Laotian"
          },
          {
            "Platform- specific ID code": "23",
            "Script": "Georgian"
          },
          {
            "Platform- specific ID code": "24",
            "Script": "Armenian"
          },
          {
            "Platform- specific ID code": "25",
            "Script": "Simplified Chinese"
          },
          {
            "Platform- specific ID code": "26",
            "Script": "Tibetan"
          },
          {
            "Platform- specific ID code": "27",
            "Script": "Mongolian"
          },
          {
            "Platform- specific ID code": "28",
            "Script": "Geez"
          },
          {
            "Platform- specific ID code": "29",
            "Script": "Slavic"
          },
          {
            "Platform- specific ID code": "30",
            "Script": "Vietnamese"
          },
          {
            "Platform- specific ID code": "31",
            "Script": "Sindhi"
          },
          {
            "Platform- specific ID code": "32",
            "Script": "(Uninterpreted)"
          },
          {
            "Platform- specific ID code": "",
            "Script": "Kannada"
          }
        ]
      },
      {
        "title": "Name Identifiers",
        "rows": [
          {
            "NameID code(s)": "0",
            "Description": "Copyright notice."
          },
          {
            "NameID code(s)": "1",
            "Description": "Font Family."
          },
          {
            "NameID code(s)": "2",
            "Description": "Font Subfamily."
          },
          {
            "NameID code(s)": "3",
            "Description": "Unique subfamily identification."
          },
          {
            "NameID code(s)": "4",
            "Description": "Full name of the font."
          },
          {
            "NameID code(s)": "5",
            "Description": "Version of the name table."
          },
          {
            "NameID code(s)": "6",
            "Description": "PostScript name of the font. All PostScript names in a font must be identical. They may not be longer than 63 characters and the characters used are restricted to the set of printable ASCII characters (U+0021 through U+007E), less the ten characters '[', ']', '(', ')', '{', '}', '<', '>', '/', and '%'."
          },
          {
            "NameID code(s)": "7",
            "Description": "Trademark notice."
          },
          {
            "NameID code(s)": "8",
            "Description": "Manufacturer name."
          },
          {
            "NameID code(s)": "9",
            "Description": "Designer; name of the designer of the typeface."
          },
          {
            "NameID code(s)": "10",
            "Description": "Description; description of the typeface. Can contain revision information, usage recommendations, history, features, and so on."
          },
          {
            "NameID code(s)": "11",
            "Description": "URL of the font vendor (with procotol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font."
          },
          {
            "NameID code(s)": "12",
            "Description": "URL of the font designer (with protocol, e.g., http://, ftp://)"
          },
          {
            "NameID code(s)": "13",
            "Description": "License description; description of how the font may be legally used, or different example scenarios for licensed use. This field should be written in plain language, not legalese."
          },
          {
            "NameID code(s)": "14",
            "Description": "License information URL, where additional licensing information can be found."
          },
          {
            "NameID code(s)": "15",
            "Description": "Reserved"
          },
          {
            "NameID code(s)": "16",
            "Description": "Preferred Family. In Windows, the Family name is displayed in the font menu, and the Subfamily name is presented as the Style name. For historical reasons, font families have contained a maximum of four styles, but font designers may group more than four fonts to a single family. The Preferred Family and Preferred Subfamily IDs allow font designers to include the preferred family/subfamily groupings. These IDs are only present if they are different from IDs 1 and 2."
          },
          {
            "NameID code(s)": "17",
            "Description": "Preferred Subfamily. In Windows, the Family name is displayed in the font menu, and the Subfamily name is presented as the Style name. For historical reasons, font families have contained a maximum of four styles, but font designers may group more than four fonts to a single family. The Preferred Family and Preferred Subfamily IDs allow font designers to include the preferred family/subfamily groupings. These IDs are only present if they are different from IDs 1 and 2."
          },
          {
            "NameID code(s)": "18",
            "Description": "Compatible Full (macOS only). In QuickDraw, the menu name for a font is constructed using the FOND resource. This usually matches the Full Name. If you want the name of the font to appear differently than the Full Name, you can insert the Compatible Full Name in ID 18. This name is not used by macOS itself, but may be used by application developers (e.g., Adobe)."
          },
          {
            "NameID code(s)": "19",
            "Description": "Sample text. This can be the font name, or any other text that the designer thinks is the best sample text to show what the font looks like."
          },
          {
            "NameID code(s)": "20–24",
            "Description": "Defined by OpenType."
          },
          {
            "NameID code(s)": "25",
            "Description": "Variations PostScript Name Prefix. If present in a variable font, it may be used as the family prefix in the algorithm to generate PostScript names for variation fonts. See Adobe Technical Note #5902: “PostScript Name Generation for Variation Fonts” for details."
          },
          {
            "NameID code(s)": "26–255",
            "Description": "Reserved for future expansion."
          },
          {
            "NameID code(s)": "256–32767",
            "Description": "Font-specific names (e.g., names for layout features and settings, variations axes and instances)."
          }
        ]
      }
    ]
  },
  {
    "title": "opbd",
    "tables": [
      {
        "title": "Optical bounds tables format",
        "rows": [
          {
            "Table Format": "0",
            "Description": "Distance. The delta values associated with a glyph are in FUnits. Distance delta values are specified for the left- side, top-side, right-side, and bottom-side optical edges for each glyph having optical edges in the font. Delta values of zero are used to indicate that a side does not have an optical bound."
          },
          {
            "Table Format": "1",
            "Description": "Control point. You specify the locations of the glyph's optical edges by control points. The control point designates the position within the glyph that should be aligned with the edge of the line of text. Control point numbers are specified for the left-side, top-side, right- side, and bottom-side optical edges for each glyph having optical edges in the font. The special value -1 indicates that you've specified no optical edge control point for a given edge."
          }
        ]
      },
      {
        "title": "optical bounds table format",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the optical bounds table (0x00010000 for the current version)."
          },
          {
            "Type": "uint16",
            "Name": "format",
            "Description": "Format of the optical bounds table. Format 0 indicates distance and Format 1 indicates control point."
          },
          {
            "Type": "(variable)",
            "Name": "lookup data",
            "Description": "Lookup table associating glyphs with the four int16 values for the left-side, top-side, right-side, and bottom-side optical bounds."
          }
        ]
      }
    ]
  },
  {
    "title": "os/2",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "uint16",
            "Name": "version",
            "Description": "table version number (set to 0)"
          },
          {
            "Type": "int16",
            "Name": "xAvgCharWidth",
            "Description": "average weighted advance width of lower case letters and space"
          },
          {
            "Type": "uint16",
            "Name": "usWeightClass",
            "Description": "visual weight (degree of blackness or thickness) of stroke in glyphs"
          },
          {
            "Type": "uint16",
            "Name": "usWidthClass",
            "Description": "relative change from the normal aspect ratio (width to height ratio) as specified by a font designer for the glyphs in the font"
          },
          {
            "Type": "int16",
            "Name": "fsType",
            "Description": "characteristics and properties of this font (set undefined bits to zero)"
          },
          {
            "Type": "int16",
            "Name": "ySubscriptXSize;",
            "Description": "recommended horizontal size in pixels for subscripts"
          },
          {
            "Type": "int16",
            "Name": "ySubscriptYSize",
            "Description": "recommended vertical size in pixels for subscripts"
          },
          {
            "Type": "int16",
            "Name": "ySubscriptXOffset",
            "Description": "recommended horizontal offset for subscripts"
          },
          {
            "Type": "int16",
            "Name": "ySubscriptYOffset",
            "Description": "recommended vertical offset form the baseline for subscripts"
          },
          {
            "Type": "int16",
            "Name": "ySuperscriptXSize",
            "Description": "recommended horizontal size in pixels for superscripts"
          },
          {
            "Type": "int16",
            "Name": "ySuperscriptYSize",
            "Description": "recommended vertical size in pixels for superscripts"
          },
          {
            "Type": "int16",
            "Name": "ySuperscriptXOffset",
            "Description": "recommended horizontal offset for superscripts"
          },
          {
            "Type": "int16",
            "Name": "ySuperscriptYOffset",
            "Description": "recommended vertical offset from the baseline for superscripts"
          },
          {
            "Type": "int16",
            "Name": "yStrikeoutSize",
            "Description": "width of the strikeout stroke"
          },
          {
            "Type": "int16",
            "Name": "yStrikeoutPosition",
            "Description": "position of the strikeout stroke relative to the baseline"
          },
          {
            "Type": "int16",
            "Name": "sFamilyClass",
            "Description": "classification of font-family design."
          },
          {
            "Type": "PANOSE",
            "Name": "panose",
            "Description": "10 byte series of number used to describe the visual characteristics of a given typeface"
          },
          {
            "Type": "uint32",
            "Name": "ulUnicodeRange[4]",
            "Description": "Field is split into two bit fields of 96 and 36 bits each. The low 96 bits are used to specify the Unicode blocks encompassed by the font file. The high 32 bits are used to specify the character or script sets covered by the font file. Bit assignments are pending. Set to 0"
          },
          {
            "Type": "int8",
            "Name": "achVendID[4]",
            "Description": "four character identifier for the font vendor"
          },
          {
            "Type": "uint16",
            "Name": "fsSelection",
            "Description": "2-byte bit field containing information concerning the nature of the font patterns"
          },
          {
            "Type": "uint16",
            "Name": "fsFirstCharIndex",
            "Description": "The minimum Unicode index in this font."
          },
          {
            "Type": "uint16",
            "Name": "fsLastCharIndex",
            "Description": "The maximum Unicode index in this font."
          }
        ]
      },
      {
        "title": "Additional Fields",
        "rows": [
          {
            "Type": "int16",
            "Name": "sTypoAscender",
            "Description": "The typographic ascender for this font. This is not necessarily the same as the ascender value in the 'hhea' table."
          },
          {
            "Type": "int16",
            "Name": "sTypoDescender",
            "Description": "The typographic descender for this font. This is not necessarily the same as the descender value in the 'hhea' table."
          },
          {
            "Type": "int16",
            "Name": "sTypoLineGap",
            "Description": "The typographic line gap for this font. This is not necessarily the same as the line gap value in the 'hhea' table."
          },
          {
            "Type": "uint16",
            "Name": "usWinAscent",
            "Description": "The ascender metric for Windows. usWinAscent is computed as the yMax for all characters in the Windows ANSI character set."
          },
          {
            "Type": "uint16",
            "Name": "usWinDescent",
            "Description": "The descender metric for Windows. usWinDescent is computed as the -yMin for all characters in the Windows ANSI character set."
          },
          {
            "Type": "uint32",
            "Name": "ulCodePageRange1",
            "Description": "Bits 0-31"
          },
          {
            "Type": "uint32",
            "Name": "ulCodePageRange2",
            "Description": "Bits 32-63"
          },
          {
            "Type": "int16",
            "Name": "sxHeight",
            "Description": "The distance between the baseline and the approximate height of non-ascending lowercase letters measured in FUnits."
          },
          {
            "Type": "int16",
            "Name": "sCapHeight",
            "Description": "The distance between the baseline and the approximate height of uppercase letters measured in FUnits."
          },
          {
            "Type": "uint16",
            "Name": "usDefaultChar",
            "Description": "The default character displayed by Windows to represent an unsupported character. (Typically this should be 0.)"
          },
          {
            "Type": "uint16",
            "Name": "usBreakChar",
            "Description": "The break character used by Windows."
          },
          {
            "Type": "uint16",
            "Name": "usMaxContext",
            "Description": "The maximum length of a target glyph OpenType context for any feature in this font."
          },
          {
            "Type": "uint16",
            "Name": "usLowerPointSize",
            "Description": "Proposed for version 5 The lowest size (in twentieths of a typographic point), at which the font starts to be used. This is an inclusive value."
          },
          {
            "Type": "uint16",
            "Name": "usUpperPointSize",
            "Description": "Proposed for version 5 The highest size (in twentieths of a typographic point), at which the font starts to be used. This is an exclusive value. Use 0xFFFFU to indicate no upper limit."
          }
        ]
      },
      {
        "title": "Weight Factors",
        "rows": [
          {
            "Letter": "o",
            "Weight Factor": "56"
          },
          {
            "Letter": "p",
            "Weight Factor": "17"
          },
          {
            "Letter": "q",
            "Weight Factor": "4"
          },
          {
            "Letter": "r",
            "Weight Factor": "49"
          },
          {
            "Letter": "s",
            "Weight Factor": "56"
          },
          {
            "Letter": "t",
            "Weight Factor": "71"
          },
          {
            "Letter": "u",
            "Weight Factor": "31"
          },
          {
            "Letter": "v",
            "Weight Factor": "10"
          },
          {
            "Letter": "w",
            "Weight Factor": "18"
          },
          {
            "Letter": "x",
            "Weight Factor": "3"
          },
          {
            "Letter": "y",
            "Weight Factor": "18"
          },
          {
            "Letter": "z",
            "Weight Factor": "2"
          },
          {
            "Letter": "space",
            "Weight Factor": "166"
          },
          {
            "Letter": "",
            "Weight Factor": ""
          }
        ]
      },
      {
        "title": "Visual Weight",
        "rows": [
          {
            "Value": "1",
            "Description": "Ultra-light"
          },
          {
            "Value": "2",
            "Description": "Extra-light"
          },
          {
            "Value": "3",
            "Description": "Light"
          },
          {
            "Value": "4",
            "Description": "Semi-light"
          },
          {
            "Value": "5",
            "Description": "Medium (normal)"
          },
          {
            "Value": "6",
            "Description": "Semi-bold"
          },
          {
            "Value": "7",
            "Description": "Bold"
          },
          {
            "Value": "8",
            "Description": "Extra-Bold"
          },
          {
            "Value": "9",
            "Description": "Ultra-bold"
          }
        ]
      },
      {
        "title": "Aspect ratio",
        "rows": [
          {
            "Value": "1",
            "Description": "Ultra-condensed",
            "% of normal": "50"
          },
          {
            "Value": "2",
            "Description": "Extra-condensed",
            "% of normal": "62.5"
          },
          {
            "Value": "3",
            "Description": "Condensed",
            "% of normal": "75"
          },
          {
            "Value": "4",
            "Description": "Semi-condensed",
            "% of normal": "87.5"
          },
          {
            "Value": "5",
            "Description": "Medium (normal)",
            "% of normal": "100"
          },
          {
            "Value": "6",
            "Description": "Semi-expanded",
            "% of normal": "112.5"
          },
          {
            "Value": "7",
            "Description": "Expanded",
            "% of normal": "125"
          },
          {
            "Value": "8",
            "Description": "Extra-expanded",
            "% of normal": "150"
          },
          {
            "Value": "9",
            "Description": "Ultra-expanded",
            "% of normal": "200"
          }
        ]
      },
      {
        "title": "fstype Embedding flags",
        "rows": [
          {
            "Bit": "0",
            "Description": "Reserved; must be 0"
          },
          {
            "Bit": "1",
            "Description": "Licensed (protected) font; should not be 1 if bits 2 or 3 are one. Fonts that have only this bit set must not be modified, embedded, or exchanged in any manner without first obtaining permission of the legal owner."
          },
          {
            "Bit": "2",
            "Description": "Preview and print embedding; should not be 1 if bits 1 or 3 are one. Fonts that have only this bit set may be embedded in documents and temporarily loaded on the remote system. Documents containing such fonts must be opened “read-only;” no edits can be applied to the document."
          },
          {
            "Bit": "3",
            "Description": "Editable embedding; should not be 1 if bits 1 or 2 are one. Fonts that have only this bit set may be embedded in documents and temporarily loaded on the remote system. Documents containing such fonts may be editable."
          },
          {
            "Bit": "4–7",
            "Description": "Reserved; must be 0"
          },
          {
            "Bit": "8",
            "Description": "No subsetting. When this bit is set, the font may not be subsetted prior to embedding. Other embedding restrictions specified in bits 1–3 and 9 also apply."
          },
          {
            "Bit": "9",
            "Description": "Bitmap embedding only. When this bit is set, only bitmaps contained in the font may be embedded. No outline data may be embedded. Other embedding restrictions specified in bits 1–3 and 8 also apply."
          },
          {
            "Bit": "10–15",
            "Description": "Reserved; must be 0"
          }
        ]
      },
      {
        "title": "sFamily Class",
        "rows": [
          {
            "ClassID": "0",
            "Class Name": "No classification",
            "Description": "This class ID is used to indicate that the associated font has no design classification or that the design classification is not of significance to the creator or user of the font resource."
          },
          {
            "ClassID": "1",
            "Class Name": "OldStyle Serifs",
            "Description": "This style is generally based upon the Latin printing style of the 15th to 17th century, with a mild diagonal contrast in stroke emphasis (lighter in upper left to lower right, heavier in upper right to lower left) and bracketed serifs. This IBM Class reflects the ISO Serif Class, Oldstyle and Legibility Subclasses as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "2",
            "Class Name": "Transitional Serifs",
            "Description": "This style is generally based upon the Latin printing style of the 18th to 19th century, with a pronounced vertical contrast in stroke emphasis (vertical strokes being heavier than the horizontal strokes) and bracketed serifs. This IBM Class reflects the ISO Serif Class, Transitional Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "3",
            "Class Name": "Modern Serifs",
            "Description": "This style is generally based upon the Latin printing style of the 20th century, with an extreme contrast between the thick and thin portion of the strokes. This IBM Class reflects the ISO Serif Class, Modern Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "4",
            "Class Name": "Clarendon Serifs",
            "Description": "This style is a variation of the Oldstyle Serifs and the Transitional Serifs, with a mild vertical stroke contrast and bracketed serifs. This IBM Class reflects the ISO Serif Class, Square Serif Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "5",
            "Class Name": "Slab Serifs",
            "Description": "This style is characterized by serifs with a square transition between the strokes and the serifs (no brackets). This IBM Class reflects the ISO Serif Class, Square Serif Subclass (except the Clarendon Specific Group) as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "6",
            "Class Name": "Reserved",
            "Description": "This class ID is reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "ClassID": "7",
            "Class Name": "Freeform Serifs",
            "Description": "This style includes serifs, but which expresses a design freedom that does not generally fit within the other serif design classifications. This IBM Class reflects the remaining ISO Serif Class subclasses as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "8",
            "Class Name": "Sans Serif",
            "Description": "This style includes most basic letter forms (excluding Scripts and Ornamentals) that do not have serifs on the strokes. This IBM Class reflects the ISO Sans Serif Class as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "9",
            "Class Name": "Ornamentals",
            "Description": "This style includes highly decorated or stylized character shapes that are typically used in headlines. This IBM Class reflects the ISO Ornamental Class and the ISO Blackletter Class as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "10",
            "Class Name": "Scripts",
            "Description": "This style includes those typefaces that are designed to simulate handwriting. This IBM Class reflects the ISO Script Class and Uncial Class as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "11",
            "Class Name": "reserved",
            "Description": "This class ID is reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "ClassID": "12",
            "Class Name": "Symbolic",
            "Description": "This style is generally design independent, making it suitable for Pi and special characters (icons, dingbats, technical symbols, etc.) that may be used equally well with any font. This IBM Class reflects various ISO Specific Groups, as noted below and documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "ClassID": "13",
            "Class Name": "reserved",
            "Description": "This class ID is reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "ClassID": "14",
            "Class Name": "reserved",
            "Description": "This class ID is reserved for future assignment, and shall not be used without formal assignment by IBM."
          }
        ]
      },
      {
        "title": "OldStyle Serifs (ClassID = 1)",
        "rows": [
          {
            "Subclass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design subclassification is not of significance to the creator or user of the font resource."
          },
          {
            "Subclass": "1",
            "Name": "IBM Rounded Legibility",
            "Description": "This style is generally characterized by a large x-height, with short ascenders and descenders. Specifically, it is distinguished by a medium resolution, hand tuned, bitmap rendition of the more general rounded legibility subclass. An example of this font style is the IBM Sonoran Serif family. This IBM Subclass reflects the ISO Serif Class, Legibility Subclass, and Rounded Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "2",
            "Name": "Garalde",
            "Description": "This style is generally characterized by a medium x-height, with tall ascenders. An example of this font style is the ITC Garamond family. This IBM Subclass reflects the ISO Serif Class, Oldstyle Subclass, and Garalde Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "3",
            "Name": "Venetian",
            "Description": "This style is generally characterized by a medium x-height, with a relatively monotone appearance and sweeping tails based on the designs of the early Venetian printers. An example of this font style is the Goudy family. This IBM Subclass reflects the ISO Serif Class, Oldstyle Subclass, and Venetian Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "4",
            "Name": "Modified Venetian",
            "Description": "This style is generally characterized by a large x-height, with a relatively monotone appearance and sweeping tails based on the designs of the early Venetian printers. An example of this font style is the Allied Linotype Palatino family. This IBM Subclass reflects the ISO Serif Class, Transitional Subclass, and Modified Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "5",
            "Name": "Dutch Modern",
            "Description": "This style is generally characterized by a large x-height, with wedge shaped serifs and a circular appearance to the bowls similar to the Dutch Traditional Subclass below, but with lighter stokes. An example of this font style is the Monotype Times New Roman family. This IBM Subclass reflects the ISO Serif Class, Oldstyle Subclass, and Dutch Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "6",
            "Name": "Dutch Traditional",
            "Description": "This style is generally characterized by a large x-height, with wedge shaped serifs and a circular appearance of the bowls. An example of this font style is the IBM Press Roman family. This IBM Subclass reflects the ISO Serif Class and Legibility Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "7",
            "Name": "Contemporary",
            "Description": "This style is generally characterized by a small x-height, with light stokes and serifs. An example of this font style is the University family. This IBM Subclass reflects the ISO Serif Class and Contemporary Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "8",
            "Name": "Calligraphic",
            "Description": "This style is generally characterized by the fine hand writing style of calligraphy, while retaining the characteristic Oldstyle appearance. This IBM Subclass is not reflected in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "9-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subclass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Transitional Serifs (ClassID=2)",
        "rows": [
          {
            "Subclass": "0",
            "Name": "No Classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subclass": "1",
            "Name": "Direct Line",
            "Description": "This style is generally characterized by a medium x-height, with fine serifs, noticeable contrast, and capitol letters of approximately the same width. An example of this font style is the Monotype Baskerville family. This IBM Subclass reflects the ISO Serif Class, Transitional Subclass, and Direct Line Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "2",
            "Name": "Script",
            "Description": "This style is generally characterized by a hand written script appearance while retaining the Transitional Direct Line style. An example of this font style is the IBM Nasseem (Arabic) family. This IBM Subclass is not specifically reflected in the 12/87 ISO/IEC 9541-5 draft standard, though the ISO Serif Class, Transitional Subclass, and Direct Line Specific Group would be a close approximation."
          },
          {
            "Subclass": "3-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subclass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Modern Serifs (ClassID=3)",
        "rows": [
          {
            "Subclass": "0",
            "Name": "No Classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subclass": "1",
            "Name": "Italian",
            "Description": "This style is generally characterized by a medium x-height, with thin hairline serifs. An example of this font style is the Monotype Bodoni family. This IBM Subclass reflects the ISO Serif Class, Modern Subclass, and Italian Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "2",
            "Name": "Script",
            "Description": "This style is generally characterized by a hand written script appearance while retaining the Modern Italian style. An example of this font style is the IBM Narkissim (Hebrew) family. This IBM Subclass is not specifically reflected in the 12/87 ISO/IEC 9541-5 draft standard, though the ISO Serif Class, Modern Subclass, and Italian Specific Group would be a close approximation."
          },
          {
            "Subclass": "3-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subclass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Clarendon Serifs (ClassID=4)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No Classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1",
            "Name": "Clarendon",
            "Description": "This style is generally characterized by a large x-height, with serifs and strokes of equal weight. An example of this font style is the Allied Linotype Clarendon family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Clarendon Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "2",
            "Name": "Modern",
            "Description": "This style is generally characterized by a large x-height, with serifs of a lighter weight than the strokes and the strokes of a lighter weight than the Traditional. An example of this font style is the Monotype Century Schoolbook family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Clarendon Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "3",
            "Name": "Traditional",
            "Description": "This style is generally characterized by a large x-height, with serifs of a lighter weight than the strokes. An example of this font style is the Monotype Century family.This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Clarendon Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4",
            "Name": "Newspaper",
            "Description": "This style is generally characterized by a large x-height, with a simpler style of design and serifs of a ligher weight than the strokes. An example of this font style is the Allied Linotype Excelsior Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Clarendon Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "5",
            "Name": "Stub Serif",
            "Description": "This style is generally characterized by a large x-height, with short stub serifs and relatively bold stems. An example of this font style is the Cheltenham Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Short Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "6",
            "Name": "Monotone",
            "Description": "This style is generally characterized by a large x-height, with monotone stems. An example of this font style is the ITC Korinna Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "7",
            "Name": "Typewriter",
            "Description": "This style is generally characterized by a large x-height, with moderate stroke thickness characteristic of a typewriter. An example of this font style is the Prestige Elite Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Typewriter Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "8-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Slab Serifs (ClassID=5)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1",
            "Name": "Monotone",
            "Description": "This style is generally characterized by a large x-height, with serifs and strokes of equal weight. An example of this font style is the ITC Lubalin Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "2",
            "Name": "Humanist",
            "Description": "This style is generally characterized by a medium x-height, with serifs of lighter weight that the strokes. An example of this font style is the Candida Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "3",
            "Name": "Geometric",
            "Description": "This style is generally characterized by a large x-height, with serifs and strokes of equal weight and a geometric (circles and lines) design. An example of this font style is the Monotype Rockwell Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4",
            "Name": "Swiss",
            "Description": "This style is generally characterized by a large x-height, with serifs and strokes of equal weight and an emphasis on the white space of the characters. An example of this font style is the Allied Linotype Serifa Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "5",
            "Name": "Typewriter",
            "Description": "This style is generally characterized by a large x-height, with serifs and strokes of equal but moderate thickness, and a geometric design. An example of this font style is the IBM Courier Family. This IBM Subclass reflects the ISO Serif Class, Square Serif Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "6-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Freeform Serifs (ClassID=7)",
        "rows": [
          {
            "Subclass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subclass": "1",
            "Name": "Modern",
            "Description": "This style is generally characterized by a medium x-height, with light contrast in the strokes and a round full design. An example of this font style is the ITC Souvenir Family. This IBM Subclass is not reflected in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subclass": "2-14",
            "Name": "reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subclass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Sans Serif (ClassID=8)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1",
            "Name": "IBM Neo-grotesque Gothic",
            "Description": "This style is generally characterized by a large x-height, with uniform stroke width and a simple one story design distinguished by a medium resolution, hand tuned, bitmap rendition of the more general Neo-grotesque Gothic Subclass. An example of this font style is the IBM Sonoran Sans Serif family. This IBM Subclass reflects the ISO Sans Serif Class, Gothic Subclass, and Neo-grotesque Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "2",
            "Name": "Humanist",
            "Description": "This style is generally characterized by a medium x-height, with light contrast in the strokes and a classic Roman letterform. An example of this font style is the Allied Linotype Optima family. This IBM Subclass reflects the ISO Sans Serif Class, Humanist Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "3",
            "Name": "Low-x Round Geometric",
            "Description": "This style is generally characterized by a low x-height, with monotone stroke weight and a round geometric design. An example of this font style is the Fundicion Tipograficia Neufville Futura family. This IBM Subclass reflects the ISO Sans Serif Class, Geometric Subclass, Round Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4",
            "Name": "High-x Round Geometric",
            "Description": "This style is generally characterized by a high x-height, with uniform stroke weight and a round geometric design. An example of this font style is the ITC Avant Garde Gothic family. This IBM Subclass reflects the ISO Sans Serif Class, Geometric Subclass, Round Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "5",
            "Name": "Neo-grotesque Gothic",
            "Description": "This style is generally characterized by a high x-height, with uniform stroke width and a simple one story design. An example of this font style is the Allied Linotype Helvetica family. This IBM Subclass reflects the ISO Sans Serif Class, Gothic Subclass, Neo-grotesque Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "6",
            "Name": "Modified neo-grotesque Gothic",
            "Description": "This style is similar to the Neo-grotesque Gothic style, with design variations to the G and Q. An example of this font style is the Allied Linotype Univers family. This IBM Subclass reflects the ISO Sans Serif Class, Gothic Subclass, Neo-grotesque Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "7-8",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "9",
            "Name": "Typewriter Gothic",
            "Description": "This style is similar to the Neo-grotesque Gothic style, with moderate stroke thickness characteristic of a typewriter. An example of this font style is the IBM Letter Gothic family. This IBM Subclass reflects the ISO Sans Serif Class, Gothic Subclass, Typewriter Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "10",
            "Name": "Matrix",
            "Description": "This style is generally a simple design characteristic of a dot matrix printer. An example of this font style is the IBM Matrix Gothic family. This IBM Subclass is not reflected in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "11-14",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Ornamental (ClassID = 9)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1",
            "Name": "Engraver",
            "Description": "This style is characterized by fine lines or lines engraved on the stems. An example of this font style is the Copperplate family. This IBM Subclass reflects the ISO Ornamental Class and Inline Subclass, or the Serif Class and Engraving Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "2",
            "Name": "Black Letter",
            "Description": "This style is generally based upon the printing style of the German monasteries and printers of the 12th to 15th centuries. An example of this font style is the Old English family. This IBM Subclass reflects the ISO Blackletters Class as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "3",
            "Name": "Decorative",
            "Description": "This style is characterized by ornamental designs (typically from nature, such as leaves, flowers, animals, etc.) incorporated into the stems and strokes of the characters. An example of this font style is the Saphire family. This IBM Subclass reflects the ISO Ornamental Class and Decorative Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4",
            "Name": "Three Dimensional",
            "Description": "This style is characterized by a three dimensional (raised) appearance of the characters created by shading or geometric effects. An example of this font style is the Thorne Shaded family. This IBM Subclass reflects the ISO Ornamental Class and Three Dimensional Subclass as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "5-14",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Scripts (ClassID=10)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1",
            "Name": "Uncial",
            "Description": "This style is characterized by unjoined (nonconnecting) characters that are generally based on the hand writing style of Europe in the 6th to 9th centuries. An example of this font style is the Libra family. This IBM Subclass reflects the ISO Uncial Class as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "2",
            "Name": "Brush Joined",
            "Description": "This style is characterized by joined (connecting) characters that have the appearance of being painted with a brush, with moderate contrast between thick and thin strokes. An example of this font style is the Mistral family. This IBM Subclass reflects the ISO Script Class, Joined Subclass, and Informal Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "3",
            "Name": "Formal Joined",
            "Description": "This style is characterized by joined (connecting) characters that have a printed (or drawn with a stiff brush) appearance with extreme contrast between the thick and thin strokes. An example of this font style is the Coronet family. This IBM Subclass reflects the ISO Script Class, Joined Subclass, and Formal Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4",
            "Name": "Monotone Joined",
            "Description": "This style is characterized by joined (connecting) characters that have a uniform appearance with little or no contrast in the strokes. An example of this font style is the Kaufmann family. This IBM Subclass reflects the ISO Script Class, Joined Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "5",
            "Name": "Calligraphic",
            "Description": "This style is characterized by beautifully hand drawn, unjoined (non-connecting) characters that have an appearance of being drawn with a broad edge pen. An example of this font style is the Thompson Quillscript family. This IBM Subclass reflects the ISO Script Class, Unjoined Subclass, and Calligraphic Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "6",
            "Name": "Brush Unjoined",
            "Description": "This style is characterized by unjoined (non-connecting) characters that have the appearance of being painted with a brush, with moderate contrast between thick and thin strokes. An example of this font style is the Saltino family. This IBM Subclass reflects the ISO Script Class, Unjoined Subclass, and Brush Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "7",
            "Name": "Formal Unjoined",
            "Description": "This style is characterized by unjoined (non-connecting) characters that have a printed (or drawn with a stiff brush) appearance with extreme contrast between the thick and thin strokes. An example of this font style is the Virtuosa family. This IBM Subclass reflects the ISO Script Class, Unjoined Subclass, and Formal Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "8",
            "Name": "Monotone Unjoined",
            "Description": "This style is characterized by unjoined (non-connecting) characters that have a uniform appearance with little or no contrast in the strokes. An example of this font style is the Gilles Gothic family. This IBM Subclass reflects the ISO Script Class, Unjoined Subclass, and Monotone Specific Group as documented in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "9-14",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "Symbolic (ClassID=12)",
        "rows": [
          {
            "Subc.ass": "0",
            "Name": "No classification",
            "Description": "This subclass ID is used to indicate that the associated font has no design sub-classification or that the design sub-classification is not of significance to the creator or user of the font resource."
          },
          {
            "Subc.ass": "1-2",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "3",
            "Name": "Mixed serif",
            "Description": "This style is characterized by either both or a combination of serif and sans serif designs on those characters of the font for which design is important (e.g., superscript and subscript characters, numbers, copyright or trademark symbols, etc.). An example of this font style is found in the IBM Symbol family. This IBM Subclass is not reflected in the 12/87 ISO/IEC 9541-5 draft standard."
          },
          {
            "Subc.ass": "4-5",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "6",
            "Name": "Oldstyle Serif",
            "Description": "This style is characterized by a Oldstyle Serif IBM Class design on those characters of the font for which design is important (e.g., superscript and subscript characters, numbers, copyright or trademark symbols, etc.). An example of this font style is found in the IBM Sonoran Pi Serif family. This IBM Subclass is not directly reflected in the 12/87 ISO/IEC 9541-5 draft standard, though it is indirectly by the ISO Serif Class and Legibility Subclass (implies that all characters of the font exhibit the design appearance, while only a subset of the characters actually exhibit the design)."
          },
          {
            "Subc.ass": "7",
            "Name": "Neo-grotesque Sans Serif",
            "Description": "This style is characterized by a Neo-grotesque Sans Serif IBM Font Class and Subclass design on those characters of the font for which design is important (e.g., superscript and subscript characters, numbers, copyright or trademark symbols, etc.). An example of this font style is f ound in the IBM Sonoran Pi Sans Serif family. This IBM Subclass is not directly reflected in the 12/87 ISO/IEC 9541-5 draft standard, though it is indirectly by the ISO Sans Serif Class and Gothic Subclass (implies that all characters of the font exhibit the design appearance, while only a subset of the characters actually exhibit the design)."
          },
          {
            "Subc.ass": "8-14",
            "Name": "Reserved",
            "Description": "These subclass IDs are reserved for future assignment, and shall not be used without formal assignment by IBM."
          },
          {
            "Subc.ass": "15",
            "Name": "Miscellaneous",
            "Description": "This subclass ID is used for miscellaneous designs of the associated design class that are not covered by another Subclass."
          }
        ]
      },
      {
        "title": "PANOSE",
        "rows": [
          {
            "Type": "uint8_t",
            "Name": "bFamilyType;"
          },
          {
            "Type": "uint8_t",
            "Name": "bSerifStyle;"
          },
          {
            "Type": "uint8_t",
            "Name": "bWeight;"
          },
          {
            "Type": "uint8_t",
            "Name": "bProportion;"
          },
          {
            "Type": "uint8_t",
            "Name": "bContrast;"
          },
          {
            "Type": "uint8_t",
            "Name": "bStrokeVariation;"
          },
          {
            "Type": "uint8_t",
            "Name": "bArmStyle;"
          },
          {
            "Type": "uint8_t",
            "Name": "bLetterform;"
          },
          {
            "Type": "uint8_t",
            "Name": "bMidline;"
          },
          {
            "Type": "uint8_t",
            "Name": "bXHeight;"
          }
        ]
      },
      {
        "title": "bFamilyType",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Text and Display"
          },
          {
            "Bit": "3",
            "Meaning": "Script"
          },
          {
            "Bit": "4",
            "Meaning": "Decorative"
          },
          {
            "Bit": "5",
            "Meaning": "Pictorial"
          }
        ]
      },
      {
        "title": "bSerifStyle",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Cove"
          },
          {
            "Bit": "3",
            "Meaning": "Obtuse Cove"
          },
          {
            "Bit": "4",
            "Meaning": "Square Cove"
          },
          {
            "Bit": "5",
            "Meaning": "Obtuse Square Cove"
          },
          {
            "Bit": "6",
            "Meaning": "Square"
          },
          {
            "Bit": "7",
            "Meaning": "Thin"
          },
          {
            "Bit": "8",
            "Meaning": "Bone"
          },
          {
            "Bit": "9",
            "Meaning": "Exaggerated"
          },
          {
            "Bit": "10",
            "Meaning": "Triangle"
          },
          {
            "Bit": "11",
            "Meaning": "Normal Sans"
          },
          {
            "Bit": "12",
            "Meaning": "Obtuse Sans"
          },
          {
            "Bit": "13",
            "Meaning": "Perp Sans"
          },
          {
            "Bit": "14",
            "Meaning": "Flared"
          },
          {
            "Bit": "15",
            "Meaning": "Rounded"
          }
        ]
      },
      {
        "title": "bWeight",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Very Light"
          },
          {
            "Bit": "3",
            "Meaning": "Light"
          },
          {
            "Bit": "4",
            "Meaning": "Thin"
          },
          {
            "Bit": "5",
            "Meaning": "Book"
          },
          {
            "Bit": "6",
            "Meaning": "Medium"
          },
          {
            "Bit": "7",
            "Meaning": "Demi"
          },
          {
            "Bit": "8",
            "Meaning": "Bold"
          },
          {
            "Bit": "9",
            "Meaning": "Heavy"
          },
          {
            "Bit": "10",
            "Meaning": "Black"
          },
          {
            "Bit": "11",
            "Meaning": "Nord"
          }
        ]
      },
      {
        "title": "bProportion",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Old Style"
          },
          {
            "Bit": "3",
            "Meaning": "Modern"
          },
          {
            "Bit": "4",
            "Meaning": "Even Width"
          },
          {
            "Bit": "5",
            "Meaning": "Expanded"
          },
          {
            "Bit": "6",
            "Meaning": "Condensed"
          },
          {
            "Bit": "7",
            "Meaning": "Very Expanded"
          },
          {
            "Bit": "8",
            "Meaning": "Very Condensed"
          },
          {
            "Bit": "9",
            "Meaning": "Monospaced"
          }
        ]
      },
      {
        "title": "bContrast",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "None"
          },
          {
            "Bit": "3",
            "Meaning": "Very Low"
          },
          {
            "Bit": "4",
            "Meaning": "Low"
          },
          {
            "Bit": "5",
            "Meaning": "Medium Low"
          },
          {
            "Bit": "6",
            "Meaning": "Medium"
          },
          {
            "Bit": "7",
            "Meaning": "Medium High"
          },
          {
            "Bit": "8",
            "Meaning": "High"
          },
          {
            "Bit": "9",
            "Meaning": "Very High"
          }
        ]
      },
      {
        "title": "bStrokeVariatoon",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Gradual/Diagonal"
          },
          {
            "Bit": "3",
            "Meaning": "Gradual/Transitional"
          },
          {
            "Bit": "4",
            "Meaning": "Gradual/Vertical"
          },
          {
            "Bit": "5",
            "Meaning": "Gradual/Horizontal"
          },
          {
            "Bit": "6",
            "Meaning": "Rapid/Vertical"
          },
          {
            "Bit": "7",
            "Meaning": "Rapid/Horizontal"
          },
          {
            "Bit": "8",
            "Meaning": "Instant/Vertical"
          }
        ]
      },
      {
        "title": "bArmStyle",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Straight Arms/Horizontal"
          },
          {
            "Bit": "3",
            "Meaning": "Straight Arms/Wedge"
          },
          {
            "Bit": "4",
            "Meaning": "Straight Arms/Vertical"
          },
          {
            "Bit": "5",
            "Meaning": "Straight Arms/Single Serif"
          },
          {
            "Bit": "6",
            "Meaning": "Straight Arms/Double Serif"
          },
          {
            "Bit": "7",
            "Meaning": "Non-Straight Arms/Horizontal"
          },
          {
            "Bit": "8",
            "Meaning": "Non-Straight Arms/Wedge"
          },
          {
            "Bit": "9",
            "Meaning": "Non-Straight Arms/Vertical"
          },
          {
            "Bit": "10",
            "Meaning": "Non-Straight Arms/Single Serif"
          },
          {
            "Bit": "11",
            "Meaning": "Non-Straight Arms/Double Serif"
          }
        ]
      },
      {
        "title": "bLetterform",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Normal/Contact"
          },
          {
            "Bit": "3",
            "Meaning": "Normal/Weighted"
          },
          {
            "Bit": "4",
            "Meaning": "Normal/Boxed"
          },
          {
            "Bit": "5",
            "Meaning": "Normal/Flattened"
          },
          {
            "Bit": "6",
            "Meaning": "Normal/Rounded"
          },
          {
            "Bit": "7",
            "Meaning": "Normal/Off Center"
          },
          {
            "Bit": "8",
            "Meaning": "Normal/Square"
          },
          {
            "Bit": "9",
            "Meaning": "Oblique/Contact"
          },
          {
            "Bit": "10",
            "Meaning": "Oblique/Weighted"
          },
          {
            "Bit": "11",
            "Meaning": "Oblique/Boxed"
          },
          {
            "Bit": "12",
            "Meaning": "Oblique/Flattened"
          },
          {
            "Bit": "13",
            "Meaning": "Oblique/Rounded"
          },
          {
            "Bit": "14",
            "Meaning": "Oblique/Off Center"
          },
          {
            "Bit": "15",
            "Meaning": "Oblique/Square"
          }
        ]
      },
      {
        "title": "bMidline",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Standard/Trimmed"
          },
          {
            "Bit": "3",
            "Meaning": "Standard/Pointed"
          },
          {
            "Bit": "4",
            "Meaning": "Standard/Serifed"
          },
          {
            "Bit": "5",
            "Meaning": "High/Trimmed"
          },
          {
            "Bit": "6",
            "Meaning": "High/Pointed"
          },
          {
            "Bit": "7",
            "Meaning": "High/Serifed"
          },
          {
            "Bit": "8",
            "Meaning": "Constant/Trimmed"
          },
          {
            "Bit": "9",
            "Meaning": "Constant/Pointed"
          },
          {
            "Bit": "10",
            "Meaning": "Constant/Serifed"
          },
          {
            "Bit": "11",
            "Meaning": "Low/Trimmed"
          },
          {
            "Bit": "12",
            "Meaning": "Low/Pointed"
          },
          {
            "Bit": "13",
            "Meaning": "Low/Serifed"
          }
        ]
      },
      {
        "title": "bXHeight",
        "rows": [
          {
            "Bit": "0",
            "Meaning": "Any"
          },
          {
            "Bit": "1",
            "Meaning": "No Fit"
          },
          {
            "Bit": "2",
            "Meaning": "Constant/Small"
          },
          {
            "Bit": "3",
            "Meaning": "Constant/Standard"
          },
          {
            "Bit": "4",
            "Meaning": "Constant/Large"
          },
          {
            "Bit": "5",
            "Meaning": "Ducking/Small"
          },
          {
            "Bit": "6",
            "Meaning": "Ducking/Standard"
          },
          {
            "Bit": "7",
            "Meaning": "Ducking/Large"
          }
        ]
      },
      {
        "title": "Vendor identification",
        "rows": [
          {
            "Vendor ID": "'ACG '",
            "Vendor Name": "AGFA Compugraphic"
          },
          {
            "Vendor ID": "'Adbe'",
            "Vendor Name": "Adobe"
          },
          {
            "Vendor ID": "'Appl'",
            "Vendor Name": "Apple"
          },
          {
            "Vendor ID": "'Alts'",
            "Vendor Name": "Altsys"
          },
          {
            "Vendor ID": "'B? '",
            "Vendor Name": "Bigelow & Holmes"
          },
          {
            "Vendor ID": "'Bert'",
            "Vendor Name": "Berthold"
          },
          {
            "Vendor ID": "'Bits'",
            "Vendor Name": "Bitstream"
          },
          {
            "Vendor ID": "'DTC '",
            "Vendor Name": "Digital Typeface Corp."
          },
          {
            "Vendor ID": "'HP '",
            "Vendor Name": "Hewlett-Packard"
          },
          {
            "Vendor ID": "'IBM '",
            "Vendor Name": "IBM"
          },
          {
            "Vendor ID": "'KATF'",
            "Vendor Name": "Kingsley/ATF"
          },
          {
            "Vendor ID": "'Lans'",
            "Vendor Name": "Lanston Type Co., Ltd."
          },
          {
            "Vendor ID": "'LETR'",
            "Vendor Name": "Letraset"
          },
          {
            "Vendor ID": "'Lino'",
            "Vendor Name": "Linotype"
          },
          {
            "Vendor ID": "'Mono'",
            "Vendor Name": "Monotype"
          },
          {
            "Vendor ID": "'MS '",
            "Vendor Name": "Microsoft"
          },
          {
            "Vendor ID": "'QMSI'",
            "Vendor Name": "QMS/Imagen"
          },
          {
            "Vendor ID": "'URW '",
            "Vendor Name": "URW"
          },
          {
            "Vendor ID": "ZSFT",
            "Vendor Name": "ZSoft"
          }
        ]
      },
      {
        "title": "Font patterns",
        "rows": [
          {
            "Bit #": "0",
            "C definition": "ITALIC",
            "Description": "Font contains Italic characters, otherwise they are upright."
          },
          {
            "Bit #": "1",
            "C definition": "UNDERSCORE",
            "Description": "Characters are underscored."
          },
          {
            "Bit #": "2",
            "C definition": "NEGATIVE",
            "Description": "Characters have their foreground and background reversed."
          },
          {
            "Bit #": "3",
            "C definition": "OUTLINED",
            "Description": "Outline (hollow) characters, otherwise they are solid."
          },
          {
            "Bit #": "4",
            "C definition": "STRIKEOUT",
            "Description": "Characters are overstruck."
          },
          {
            "Bit #": "5",
            "C definition": "BOLD",
            "Description": "Characters are emboldened."
          }
        ]
      }
    ]
  },
  {
    "title": "post",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "Fixed",
            "Name": "format",
            "Description": "Format of this table"
          },
          {
            "Type": "Fixed",
            "Name": "italicAngle",
            "Description": "Italic angle in degrees"
          },
          {
            "Type": "FWord",
            "Name": "underlinePosition",
            "Description": "Underline position"
          },
          {
            "Type": "FWord",
            "Name": "underlineThickness",
            "Description": "Underline thickness"
          },
          {
            "Type": "uint32",
            "Name": "isFixedPitch",
            "Description": "Font is monospaced; set to 1 if the font is monospaced and 0 otherwise (N.B., to maintain compatibility with older versions of the TrueType spec, accept any non-zero value as meaning that the font is monospaced)"
          },
          {
            "Type": "uint32",
            "Name": "minMemType42",
            "Description": "Minimum memory usage when a TrueType font is downloaded as a Type 42 font"
          },
          {
            "Type": "uint32",
            "Name": "maxMemType42",
            "Description": "Maximum memory usage when a TrueType font is downloaded as a Type 42 font"
          },
          {
            "Type": "uint32",
            "Name": "minMemType1",
            "Description": "Minimum memory usage when a TrueType font is downloaded as a Type 1 font"
          },
          {
            "Type": "uint32",
            "Name": "maxMemType1",
            "Description": "Maximum memory usage when a TrueType font is downloaded as a Type 1 font"
          }
        ]
      },
      {
        "title": "format 2",
        "rows": [
          {
            "Type": "uint16",
            "Name": "numberOfGlyphs",
            "Description": "number of glyphs"
          },
          {
            "Type": "uint16",
            "Name": "glyphNameIndex[numberOfGlyphs]",
            "Description": "Ordinal number of this glyph in 'post' string tables. This is not an offset."
          },
          {
            "Type": "Pascal string",
            "Name": "names[numberNewGlyphs]",
            "Description": "glyph names with length bytes [variable] (a Pascal string)"
          }
        ]
      },
      {
        "title": "Format 2.5",
        "rows": [
          {
            "Type": "uint16",
            "Name": "numberOfGlyphs",
            "Description": "Number of glyphs"
          },
          {
            "Type": "int8",
            "Name": "offset[number of glyphs]",
            "Description": "Difference between graphic index and standard order of glyph"
          }
        ]
      }
    ]
  },
  {
    "title": "prep",
    "tables": [
      {
        "title": "table",
        "rows": [
          {
            "Type": "uint8",
            "Name": "controlValueProgram[length]",
            "Description": "Set of instructions executed whenever the point size or font transformation change"
          }
        ]
      }
    ]
  },
  {
    "title": "prop",
    "tables": [
      {
        "title": "versions",
        "rows": [
          {
            "Version": "1.0",
            "Description": "Initial version, supporting floaters, hanging punctuation, symmetric swapping, and 12 basic Unicode directional properties."
          },
          {
            "Version": "2.0",
            "Description": "Released with MacOS system 8.5, this version adds support for the \"attaches on right\" bit."
          },
          {
            "Version": "3.0",
            "Description": "This is the version currently used on OS X and iOS; it adds support for the additional directional properties defined in Unicode 3.0."
          }
        ]
      },
      {
        "title": "glyph properties table",
        "rows": [
          {
            "Type": "fixed32",
            "Name": "version",
            "Description": "Version number of the glyph properties table. See table above for what each version means."
          },
          {
            "Type": "uint16",
            "Name": "format",
            "Description": "Format of the glyph properties table, set to 0 if no lookup data is present; set to 1 if lookup data is present."
          },
          {
            "Type": "uint16",
            "Name": "default properties",
            "Description": "Default properties applied to a glyph if that glyph is not present in the lookup table."
          },
          {
            "Type": "variable",
            "Name": "lookup data",
            "Description": "Lookup table associating glyphs with their properties. See below for details on how to interpret the lookup values."
          }
        ]
      },
      {
        "title": "lookup table is used to find the 16-bit property value associated with the particular glyph",
        "rows": [
          {
            "Lookup table format": "0",
            "Interpretation": "Array of 16-bit property values, one for each glyph in the font."
          },
          {
            "Lookup table format": "2",
            "Interpretation": "The value of each lookupSegment is a 16-bit property value for all of the glyphs in that segment."
          },
          {
            "Lookup table format": "4",
            "Interpretation": "The value of each lookupSegment is a 16-bit offset from the start of the lookup table to an array of 16-bit property values, one for each glyph in the segment."
          },
          {
            "Lookup table format": "6",
            "Interpretation": "The value of each lookupSingle is the 16-bit property value for that glyph."
          },
          {
            "Lookup table format": "8",
            "Interpretation": "The valueArray is an array of 16-bit property values, one for each glyph in the trimmed array."
          }
        ]
      },
      {
        "title": "Glyph property bit masks",
        "rows": [
          {
            "Mask": "0x8000",
            "Interpretation": "This glyph is a floater (for example a floating accent or vowel mark). NOTE: It is very important that this bit only be set for glyphs that have a zero advance width."
          },
          {
            "Mask": "0x4000",
            "Interpretation": "This glyph can hang off the left edge of a horizontal line or the top edge of a vertical line."
          },
          {
            "Mask": "0x2000",
            "Interpretation": "This glyph can hang off the right edge of a horizontal line or the bottom edge of a vertical line."
          },
          {
            "Mask": "0x1000",
            "Interpretation": "If this property bit is on, and the glyph ends up in a right-to- left directional grouping, then the complementary bracketing glyph should be substituted for this glyph."
          },
          {
            "Mask": "0x0F00",
            "Interpretation": "These four bits give the offset to the complementary bracketing glyph (or zero if this glyph has no such complementary bracketing glyph)."
          },
          {
            "Mask": "0x0080",
            "Interpretation": "This glyph always attaches to the glyph appearing physically to the right of it. Note that this bit was added in version 2.0; it is invalid to set it in a version 1.0 glyph properties table."
          },
          {
            "Mask": "0x0060",
            "Interpretation": "These two bits must be set to zero. This mask is reserved for future properties."
          },
          {
            "Mask": "0x001F",
            "Interpretation": "These five bits contain the glyph's directionality class. Note that in versions of Unicode prior to 3.0, only four of these bits are actually used."
          }
        ]
      },
      {
        "title": "Unicode reordering algorithm",
        "rows": [
          {
            "Directionality": "left-to-right",
            "Open/Closed": "Open",
            "Bracketing Glyphs": "(, [, {"
          },
          {
            "Directionality": "left-to-right",
            "Open/Closed": "Closed",
            "Bracketing Glyphs": "), ], }"
          },
          {
            "Directionality": "right-to-left",
            "Open/Closed": "Open",
            "Bracketing Glyphs": "), ], }"
          },
          {
            "Directionality": "right-to-left",
            "Open/Closed": "Closed",
            "Bracketing Glyphs": "(, [, {"
          }
        ]
      },
      {
        "title": "Apple Advanced Typography system currently supports the following directionality classes",
        "rows": [
          {
            "Type": "Strong",
            "Class (decimal)": "0",
            "Description": "Strong (left-to-right)"
          },
          {
            "Type": "Strong",
            "Class (decimal)": "1",
            "Description": "Strong (right-to-left, non-Arabic)"
          },
          {
            "Type": "Strong",
            "Class (decimal)": "2",
            "Description": "Arabic letters (right-to-left)"
          },
          {
            "Type": "Weak",
            "Class (decimal)": "3",
            "Description": "European number"
          },
          {
            "Type": "Weak",
            "Class (decimal)": "4",
            "Description": "European number separator"
          },
          {
            "Type": "Weak",
            "Class (decimal)": "5",
            "Description": "European number terminator"
          },
          {
            "Type": "Weak",
            "Class (decimal)": "6",
            "Description": "Arabic number"
          },
          {
            "Type": "Weak",
            "Class (decimal)": "7",
            "Description": "Common number separator"
          },
          {
            "Type": "Neutral",
            "Class (decimal)": "8",
            "Description": "Block separator"
          },
          {
            "Type": "Neutral",
            "Class (decimal)": "9",
            "Description": "Segment separator"
          },
          {
            "Type": "Neutral",
            "Class (decimal)": "10",
            "Description": "Whitespace"
          },
          {
            "Type": "Neutral",
            "Class (decimal)": "11",
            "Description": "Other neutrals"
          },
          {
            "Type": "Neutral",
            "Class (decimal)": "12 through 31",
            "Description": "Reserved (some are actually defined in Unicode 3.0)"
          }
        ]
      }
    ]
  },
  {
    "title": "sbix",
    "tables": [
      {
        "title": "header",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "version",
            "Description": "Version number (set to 1)"
          },
          {
            "Type": "UInt16",
            "Name": "flags",
            "Description": "See below"
          },
          {
            "Type": "UInt32",
            "Name": "numStrikes",
            "Description": "Number of bitmap strikes to follow"
          },
          {
            "Type": "UInt32",
            "Name": "strikeOffset[numStrikes]",
            "Description": "Offset from begining of table to data for the individual strike"
          }
        ]
      },
      {
        "title": "sbixDrawOutlines flag",
        "rows": [
          {
            "Binary Value": "0",
            "Description": "Draw only 'sbix' bitmaps"
          },
          {
            "Binary Value": "1",
            "Description": "Draw both 'sbix' bitmaps and outlines, in that order"
          }
        ]
      },
      {
        "title": "strike data record",
        "rows": [
          {
            "Type": "UInt16",
            "Name": "ppem",
            "Description": "The PPEM for which this strike was designed (e.g., 9, 12, 24)"
          },
          {
            "Type": "UInt16",
            "Name": "resolution",
            "Description": "The screen resolution (in dpi) for which this strike was designed (e.g., 72)"
          },
          {
            "Type": "UInt32",
            "Name": "glyphDataOffset[numGlyphs+1]",
            "Description": "Offset from the beginning of the strike data record to data for the individual glyph"
          }
        ]
      },
      {
        "title": "data record for the glyph",
        "rows": [
          {
            "Type": "SInt16",
            "Name": "originOffsetX",
            "Description": "The x-value of the point in the glyph relative to its lower-left corner which corresponds to the origin of the glyph on the screen, that is the point on the baseline at the left edge of the glyph."
          },
          {
            "Type": "SInt16",
            "Name": "originOffsetY",
            "Description": "The y-value of the point in the glyph relative to its lower-left corner which corresponds to the origin of the glyph on the screen, that is the point on the baseline at the left edge of the glyph."
          },
          {
            "Type": "FourCharCode",
            "Name": "graphicType",
            "Description": "Indicates the type of graphic and relieves clients of the need to parse the graphic data in order to determine the data type. Currently, only 'jpg ', 'pdf ', 'png ', and 'tiff' are defined."
          },
          {
            "Type": "UInt8",
            "Name": "data[]",
            "Description": "The actual embedded graphic data. The total length is inferred from sequential glyphDataOffsets."
          }
        ]
      },
      {
        "title": "graphicType",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "maskOffset",
            "Description": "Offset (from the beginning of the 'sbix' table) to the mask data"
          },
          {
            "Type": "FourCharCode",
            "Name": "graphicType",
            "Description": "Type of the masked graphic data (not of the mask). Currently, only 'jpg ', 'pdf ', 'png ', and 'tiff' are defined."
          },
          {
            "Type": "UInt8",
            "Name": "data[]",
            "Description": "The actual masked graphic data. The total length is inferred from sequential glyphDataOffsets."
          }
        ]
      },
      {
        "title": "data for the mask",
        "rows": [
          {
            "Type": "UInt32",
            "Name": "maskLength",
            "Description": "Length of the mask data (including this header)"
          },
          {
            "Type": "UInt16",
            "Name": "reserved",
            "Description": "Currently unused; set to 0."
          },
          {
            "Type": "UInt16",
            "Name": "blendingMode",
            "Description": "Indicates how the mask is to be applied."
          },
          {
            "Type": "SInt16",
            "Name": "originOffsetX",
            "Description": "The horizontal (x-axis) position of the left edge of the bitmap graphic in relation to the glyph design space origin."
          },
          {
            "Type": "SInt16",
            "Name": "originOffsetY",
            "Description": "The vertical (y-axis) position of the left edge of the bitmap graphic in relation to the glyph design space origin."
          },
          {
            "Type": "FourCharCode",
            "Name": "graphicType",
            "Description": "Indicates the graphic type of the mask and relieves clients of the need to parse the graphic data in order to determine the data type. Currently, only 'jpg ', 'png ', and 'tiff' are defined."
          },
          {
            "Type": "UInt8",
            "Name": "data[]",
            "Description": "The actual embedded mask data."
          }
        ]
      },
      {
        "title": "blendingMode",
        "rows": [
          {
            "Name": "sbixBlendModeMultiply",
            "Value": "0",
            "Description": "Multiplies the source image samples with the background image samples. This results in colors that are at least as dark as either of the two contributing sample colors."
          },
          {
            "Name": "sbixBlendModeDarken",
            "Value": "1",
            "Description": "Creates the composite image samples by choosing the darker samples (either from the source image or the background). The result is that the background image samples are replaced by any source image samples that are darker. Otherwise, the background image samples are left unchanged."
          },
          {
            "Name": "sbixBlendModeHardLight",
            "Value": "2",
            "Description": "Either multiplies or screens colors, depending on the source image sample color. If the source image sample color is lighter than 50% gray, the background is lightened, similar to screening. If the source image sample color is darker than 50% gray, the background is darkened, similar to multiplying. If the source image sample color is equal to 50% gray, the source image is not changed. Image samples that are equal to pure black or pure white result in pure black or white. The overall effect is similar to what you’d achieve by shining a harsh spotlight on the source image. Use this to add highlights to a glyph."
          },
          {
            "Name": "sbixBlendModeSourceAtop",
            "Value": "3",
            "Description": "R = S*Da + D*(1 - Sa)"
          },
          {
            "Name": "sbixBlendModeXOR",
            "Value": "4",
            "Description": "R = S*(1 - Da) + D*(1 - Sa). This XOR mode is only nominally related to the classical bitmap XOR operation."
          }
        ]
      }
    ]
  }
]
