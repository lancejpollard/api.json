{
  "type": "Structure",
  "name": "String",
  "desc": "A Unicode string value that is a collection of characters.",
  "items": [
    {
      "name": "isEmpty",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether a string has no characters."
    },
    {
      "name": "count",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of characters in a string."
    },
    {
      "name": "localizedStringWithFormat",
      "type": "static func",
      "desc": "Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "CVarArg..."
        }
      ],
      "returnType": "String"
    },
    {
      "name": "write",
      "type": "func",
      "desc": "Appends the given string to this string.",
      "params": [
        {
          "type": "String"
        }
      ]
    },
    {
      "name": "write<Target>",
      "type": "func",
      "desc": "Writes the string into the given output stream.",
      "params": [
        {
          "name": "to",
          "type": "inout Target"
        }
      ]
    },
    {
      "name": "append",
      "type": "func",
      "desc": "Appends the given string to this string.",
      "params": [
        {
          "type": "String"
        }
      ]
    },
    {
      "name": "append",
      "type": "func",
      "desc": "Appends the given character to the string.",
      "params": [
        {
          "type": "Character"
        }
      ]
    },
    {
      "name": "append",
      "type": "func",
      "params": [
        {
          "name": "contentsOf",
          "type": "String"
        }
      ]
    },
    {
      "name": "append",
      "type": "func",
      "params": [
        {
          "name": "contentsOf",
          "type": "Substring"
        }
      ]
    },
    {
      "name": "append<S>",
      "type": "func",
      "desc": "Appends the characters in the given sequence to the string.",
      "params": [
        {
          "name": "contentsOf",
          "type": "S"
        }
      ]
    },
    {
      "name": "append<S>",
      "type": "func",
      "desc": "Adds the elements of a sequence or collection to the end of this collection.",
      "params": [
        {
          "name": "contentsOf",
          "type": "S"
        }
      ]
    },
    {
      "name": "reserveCapacity",
      "type": "func",
      "desc": "Reserves enough space in the string’s underlying storage to store the specified number of ASCII characters.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "+",
      "type": "static func",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "+=",
      "type": "static func",
      "params": [
        {
          "type": "inout String"
        },
        {
          "type": "String"
        }
      ]
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection.",
      "params": [
        {
          "type": "Other"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "Other"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of two collections.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "Other"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "+= <Other>",
      "type": "static func",
      "desc": "Appends the elements of a sequence to a range-replaceable collection.",
      "params": [
        {
          "type": "inout String"
        },
        {
          "type": "Other"
        }
      ]
    },
    {
      "name": "insert",
      "type": "func",
      "desc": "Inserts a new character at the specified position.",
      "params": [
        {
          "type": "Character"
        },
        {
          "name": "at",
          "type": "String.Index"
        }
      ]
    },
    {
      "name": "insert",
      "type": "func",
      "desc": "Inserts a new element into the collection at the specified position.",
      "params": [
        {
          "type": "Character"
        },
        {
          "name": "at",
          "type": "Index"
        }
      ]
    },
    {
      "name": "insert<C>",
      "type": "func",
      "desc": "Inserts the elements of a sequence into the collection at the specified position.",
      "params": [
        {
          "name": "contentsOf",
          "type": "C"
        },
        {
          "name": "at",
          "type": "Index"
        }
      ]
    },
    {
      "name": "insert<S>",
      "type": "func",
      "desc": "Inserts a collection of characters at the specified position.",
      "params": [
        {
          "name": "contentsOf",
          "type": "S"
        },
        {
          "name": "at",
          "type": "String.Index"
        }
      ]
    },
    {
      "name": "replaceSubrange<C>",
      "type": "func",
      "desc": "Replaces the text within the specified bounds with the given characters.",
      "params": [
        {
          "type": "Range<String.Index>"
        },
        {
          "name": "with",
          "type": "C"
        }
      ]
    },
    {
      "name": "replaceSubrange<C, R>",
      "type": "func",
      "desc": "Replaces the specified subrange of elements with the given collection.",
      "params": [
        {
          "type": "R"
        },
        {
          "name": "with",
          "type": "C"
        }
      ]
    },
    {
      "name": "remove",
      "type": "func",
      "desc": "Removes and returns the character at the specified position.",
      "params": [
        {
          "name": "at",
          "type": "String.Index"
        }
      ],
      "returnType": "Character"
    },
    {
      "name": "remove",
      "type": "func",
      "desc": "Removes and returns the element at the specified position.",
      "params": [
        {
          "name": "at",
          "type": "Index"
        }
      ],
      "returnType": "Character"
    },
    {
      "name": "removeAll",
      "type": "func",
      "desc": "Replaces this string with the empty string.",
      "params": [
        {
          "name": "keepingCapacity",
          "type": "Bool"
        }
      ]
    },
    {
      "name": "removeFirst",
      "type": "func",
      "desc": "Removes and returns the first element of the collection.",
      "params": [],
      "returnType": "Character"
    },
    {
      "name": "removeFirst",
      "type": "func",
      "desc": "Removes the specified number of elements from the beginning of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "removeLast",
      "type": "func",
      "desc": "Removes and returns the last element of the collection.",
      "params": [],
      "returnType": "Character"
    },
    {
      "name": "removeLast",
      "type": "func",
      "desc": "Removes the specified number of elements from the end of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "removeSubrange",
      "type": "func",
      "desc": "Removes the characters in the given range.",
      "params": [
        {
          "type": "Range<String.Index>"
        }
      ]
    },
    {
      "name": "removeSubrange",
      "type": "func",
      "desc": "Removes the elements in the specified subrange from the collection.",
      "params": [
        {
          "type": "Range<Index>"
        }
      ]
    },
    {
      "name": "removeSubrange<R>",
      "type": "func",
      "desc": "Removes the elements in the specified subrange from the collection.",
      "params": [
        {
          "type": "R"
        }
      ]
    },
    {
      "name": "dropFirst",
      "type": "func",
      "desc": "Returns a subsequence containing all but the given number of initial elements.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "dropLast",
      "type": "func",
      "desc": "Returns a subsequence containing all but the specified number of final elements.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "popLast",
      "type": "func",
      "desc": "Removes and returns the last element of the collection.",
      "params": [],
      "returnType": "Character?"
    },
    {
      "name": "lowercased",
      "type": "func",
      "desc": "Returns a lowercase version of the string.",
      "params": [],
      "returnType": "String"
    },
    {
      "name": "uppercased",
      "type": "func",
      "desc": "Returns an uppercase version of the string.",
      "params": [],
      "returnType": "String"
    },
    {
      "name": "==",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are equal.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "== <RHS>",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are equal.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "!=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are not equal.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "!= <RHS>",
      "type": "static func",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "< <RHS>",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<= <RHS>",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "> <RHS>",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">= <RHS>",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "RHS"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "elementsEqual<OtherSequence>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.",
      "params": [
        {
          "type": "OtherSequence"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "starts<PossiblePrefix>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.",
      "params": [
        {
          "name": "with",
          "type": "PossiblePrefix"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "lexicographicallyPrecedes<OtherSequence>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.",
      "params": [
        {
          "type": "OtherSequence"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "hasPrefix",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the string begins with the specified prefix.",
      "params": [
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "hasSuffix",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the string ends with the specified suffix.",
      "params": [
        {
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "contains",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element.",
      "params": [
        {
          "type": "Character"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "firstIndex",
      "type": "func",
      "desc": "Returns the first index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Character"
        }
      ],
      "returnType": "Index?"
    },
    {
      "name": "lastIndex",
      "type": "func",
      "desc": "Returns the last index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Character"
        }
      ],
      "returnType": "Index?"
    },
    {
      "name": "max",
      "type": "func",
      "desc": "Returns the maximum element in the sequence.",
      "params": [],
      "returnType": "Character?"
    },
    {
      "name": "max<T>",
      "type": "func",
      "params": [
        {
          "type": "T"
        },
        {
          "type": "T"
        }
      ],
      "returnType": "T"
    },
    {
      "name": "min",
      "type": "func",
      "desc": "Returns the minimum element in the sequence.",
      "params": [],
      "returnType": "Character?"
    },
    {
      "name": "min<T>",
      "type": "func",
      "params": [
        {
          "type": "T"
        },
        {
          "type": "T"
        }
      ],
      "returnType": "T"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence from the start of the collection through the specified position.",
      "params": [
        {
          "name": "through",
          "type": "Index"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position.",
      "params": [
        {
          "name": "upTo",
          "type": "Index"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "suffix",
      "type": "func",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "suffix",
      "type": "func",
      "desc": "Returns a subsequence from the specified position to the end of the collection.",
      "params": [
        {
          "name": "from",
          "type": "Index"
        }
      ],
      "returnType": "Substring"
    },
    {
      "name": "split",
      "type": "func",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.",
      "params": [
        {
          "name": "separator",
          "type": "Character"
        },
        {
          "name": "maxSplits",
          "type": "Int"
        },
        {
          "name": "omittingEmptySubsequences",
          "type": "Bool"
        }
      ],
      "returnType": "[Substring]"
    },
    {
      "name": "first",
      "type": "var",
      "datatype": "Character?",
      "desc": "The first element of the collection."
    },
    {
      "name": "last",
      "type": "var",
      "datatype": "Character?",
      "desc": "The last element of the collection."
    },
    {
      "name": "randomElement",
      "type": "func",
      "desc": "Returns a random element of the collection.",
      "params": [],
      "returnType": "Character?"
    },
    {
      "name": "randomElement<T>",
      "type": "func",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "Character?"
    },
    {
      "name": "availableStringEncodings",
      "type": "static var",
      "datatype": "[String.Encoding]",
      "desc": "Returns an Array of the encodings string objects support in the application’s environment."
    },
    {
      "name": "defaultCStringEncoding",
      "type": "static var",
      "datatype": "String.Encoding",
      "desc": "Returns the C-string encoding assumed for any method accepting a C string as an argument."
    },
    {
      "name": "localizedName",
      "type": "static func",
      "desc": "Returns a human-readable string giving the name of a given encoding.",
      "params": [
        {
          "name": "of",
          "type": "String.Encoding"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "unicodeScalars",
      "type": "var",
      "datatype": "String.UnicodeScalarView",
      "desc": "The string’s value represented as a collection of Unicode scalar values."
    },
    {
      "name": "utf16",
      "type": "var",
      "datatype": "String.UTF16View",
      "desc": "A UTF-16 encoding of self."
    },
    {
      "name": "utf8",
      "type": "var",
      "datatype": "String.UTF8View",
      "desc": "A UTF-8 encoding of self."
    },
    {
      "name": "lazy",
      "type": "var",
      "datatype": "LazySequence<String>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "enumerated",
      "type": "func",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.",
      "params": [],
      "returnType": "EnumeratedSequence<String>"
    },
    {
      "name": "makeIterator",
      "type": "func",
      "desc": "Returns an iterator over the elements of the collection.",
      "params": [],
      "returnType": "String.Iterator"
    },
    {
      "name": "underestimatedCount",
      "type": "var",
      "datatype": "Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "sorted",
      "type": "func",
      "desc": "Returns the elements of the sequence, sorted.",
      "params": [],
      "returnType": "[Character]"
    },
    {
      "name": "reversed",
      "type": "func",
      "desc": "Returns a view presenting the elements of the collection in reverse order.",
      "params": [],
      "returnType": "ReversedCollection<String>"
    },
    {
      "name": "shuffled",
      "type": "func",
      "desc": "Returns the elements of the sequence, shuffled.",
      "params": [],
      "returnType": "[Character]"
    },
    {
      "name": "shuffled<T>",
      "type": "func",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.",
      "params": [
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "[Character]"
    },
    {
      "name": "utf8CString",
      "type": "var",
      "datatype": "ContiguousArray<CChar>",
      "desc": "A contiguously stored null-terminated UTF-8 representation of the string."
    },
    {
      "name": "startIndex",
      "type": "var",
      "datatype": "String.Index",
      "desc": "The position of the first character in a nonempty string."
    },
    {
      "name": "endIndex",
      "type": "var",
      "datatype": "String.Index",
      "desc": "A string’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the position immediately after the given index.",
      "params": [
        {
          "name": "after",
          "type": "String.Index"
        }
      ],
      "returnType": "String.Index"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Replaces the given index with its successor.",
      "params": [
        {
          "name": "after",
          "type": "inout Index"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the position immediately before the given index.",
      "params": [
        {
          "name": "before",
          "type": "String.Index"
        }
      ],
      "returnType": "String.Index"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Replaces the given index with its predecessor.",
      "params": [
        {
          "name": "before",
          "type": "inout Index"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns an index that is the specified distance from the given index.",
      "params": [
        {
          "type": "String.Index"
        },
        {
          "name": "offsetBy",
          "type": "String.IndexDistance"
        }
      ],
      "returnType": "String.Index"
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.",
      "params": [
        {
          "type": "String.Index"
        },
        {
          "name": "offsetBy",
          "type": "String.IndexDistance"
        },
        {
          "name": "limitedBy",
          "type": "String.Index"
        }
      ],
      "returnType": "String.Index?"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Offsets the given index by the specified distance.",
      "params": [
        {
          "type": "inout Index"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        }
      ]
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index.",
      "params": [
        {
          "type": "inout Index"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        },
        {
          "name": "limitedBy",
          "type": "Index"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "distance",
      "type": "func",
      "desc": "Returns the distance between two indices.",
      "params": [
        {
          "name": "from",
          "type": "String.Index"
        },
        {
          "name": "to",
          "type": "String.Index"
        }
      ],
      "returnType": "String.IndexDistance"
    },
    {
      "name": "indices",
      "type": "var",
      "datatype": "DefaultIndices<String>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "..<",
      "type": "static func",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "Range<String>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a closed range that contains both of its bounds.",
      "params": [
        {
          "type": "String"
        },
        {
          "type": "String"
        }
      ],
      "returnType": "ClosedRange<String>"
    },
    {
      "name": "..<",
      "type": "static func",
      "desc": "Returns a partial range up to, but not including, its upper bound.",
      "params": [
        {
          "type": "String"
        }
      ],
      "returnType": "PartialRangeUpTo<String>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a partial range up to, and including, its upper bound.",
      "params": [
        {
          "type": "String"
        }
      ],
      "returnType": "PartialRangeThrough<String>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a partial range extending upward from a lower bound.",
      "params": [
        {
          "type": "String"
        }
      ],
      "returnType": "PartialRangeFrom<String>"
    },
    {
      "name": "encode",
      "type": "func",
      "desc": "Encodes this value into the given encoder.",
      "params": [
        {
          "name": "to",
          "type": "Encoder"
        }
      ]
    },
    {
      "name": "description",
      "type": "var",
      "datatype": "String",
      "desc": "The value of this string."
    },
    {
      "name": "debugDescription",
      "type": "var",
      "datatype": "String",
      "desc": "A representation of the string that is suitable for debugging."
    },
    {
      "name": "customMirror",
      "type": "var",
      "datatype": "Mirror",
      "desc": "A mirror that reflects the String instance."
    },
    {
      "name": "hashValue",
      "type": "var",
      "datatype": "Int",
      "desc": "The hash value."
    },
    {
      "name": "hash",
      "type": "func",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher.",
      "params": [
        {
          "name": "into",
          "type": "inout Hasher"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the first index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Character"
        }
      ],
      "returnType": "Index?"
    },
    {
      "name": "customPlaygroundQuickLook",
      "type": "var",
      "datatype": "_PlaygroundQuickLook",
      "desc": "A custom playground Quick Look for the String instance."
    },
    {
      "name": "dataValue",
      "type": "var",
      "datatype": "MLDataValue",
      "desc": "The string wrapped in a data value."
    },
    {
      "name": "dataValueType",
      "type": "static var",
      "datatype": "MLDataValue.ValueType",
      "desc": "The underlying type a string uses when it wraps itself in a data value."
    },
    {
      "name": "identifierValue",
      "type": "var",
      "datatype": "MLDataValue",
      "desc": "The string value of the unique identifier wrapped in a data value."
    },
    {
      "name": "isContiguousUTF8",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns whether this string is capable of providing access to validly-encoded UTF-8 contents in contiguous memory in O(1) time."
    },
    {
      "name": "applying",
      "type": "func",
      "desc": "Applies the given difference to this collection.",
      "params": [
        {
          "type": "CollectionDifference<Character>"
        }
      ],
      "returnType": "String?"
    },
    {
      "name": "difference<C>",
      "type": "func",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection.",
      "params": [
        {
          "name": "from",
          "type": "C"
        }
      ],
      "returnType": "CollectionDifference<Character>"
    },
    {
      "name": "makeContiguousUTF8",
      "type": "func",
      "desc": "If this string is not contiguous, make it so. If this mutates the string, it will invalidate any pre-existing indices.",
      "params": []
    }
  ]
}
