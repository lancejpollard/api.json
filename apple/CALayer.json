{
  "type": "Class",
  "name": "CALayer",
  "desc": "An object that manages image-based content and allows you to perform animations on that content.",
  "items": [
    {
      "name": "presentation",
      "type": "func",
      "desc": "Returns a copy of the presentation layer object that represents the state of the layer as it currently appears onscreen.",
      "params": [],
      "returnType": "Self?"
    },
    {
      "name": "model",
      "type": "func",
      "desc": "Returns the model layer object associated with the receiver, if any.",
      "params": [],
      "returnType": "Self"
    },
    {
      "name": "delegate",
      "type": "var",
      "datatype": "CALayerDelegate?",
      "desc": "The layer’s delegate object."
    },
    {
      "name": "contents",
      "type": "var",
      "datatype": "Any?",
      "desc": "An object that provides the contents of the layer. Animatable."
    },
    {
      "name": "contentsRect",
      "type": "var",
      "datatype": "CGRect",
      "desc": "The rectangle, in the unit coordinate space, that defines the portion of the layer’s contents that should be used. Animatable."
    },
    {
      "name": "contentsCenter",
      "type": "var",
      "datatype": "CGRect",
      "desc": "The rectangle that defines how the layer contents are scaled if the layer’s contents are resized. Animatable."
    },
    {
      "name": "display",
      "type": "func",
      "desc": "Reloads the content of this layer.",
      "params": []
    },
    {
      "name": "draw",
      "type": "func",
      "desc": "Draws the layer’s content using the specified graphics context.",
      "params": [
        {
          "name": "in",
          "type": "CGContext"
        }
      ]
    },
    {
      "name": "contentsGravity",
      "type": "var",
      "datatype": "CALayerContentsGravity",
      "desc": "A constant that specifies how the layer's contents are positioned or scaled within its bounds."
    },
    {
      "name": "opacity",
      "type": "var",
      "datatype": "Float",
      "desc": "The opacity of the receiver. Animatable."
    },
    {
      "name": "isHidden",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether the layer is displayed. Animatable."
    },
    {
      "name": "masksToBounds",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether sublayers are clipped to the layer’s bounds. Animatable."
    },
    {
      "name": "mask",
      "type": "var",
      "datatype": "CALayer?",
      "desc": "An optional layer whose alpha channel is used to mask the layer’s content."
    },
    {
      "name": "isDoubleSided",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether the layer displays its content when facing away from the viewer. Animatable."
    },
    {
      "name": "cornerRadius",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The radius to use when drawing rounded corners for the layer’s background. Animatable."
    },
    {
      "name": "maskedCorners",
      "type": "var",
      "datatype": "CACornerMask"
    },
    {
      "name": "borderWidth",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The width of the layer’s border. Animatable."
    },
    {
      "name": "borderColor",
      "type": "var",
      "datatype": "CGColor?",
      "desc": "The color of the layer’s border. Animatable."
    },
    {
      "name": "backgroundColor",
      "type": "var",
      "datatype": "CGColor?",
      "desc": "The background color of the receiver. Animatable."
    },
    {
      "name": "shadowOpacity",
      "type": "var",
      "datatype": "Float",
      "desc": "The opacity of the layer’s shadow. Animatable."
    },
    {
      "name": "shadowRadius",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The blur radius (in points) used to render the layer’s shadow. Animatable."
    },
    {
      "name": "shadowOffset",
      "type": "var",
      "datatype": "CGSize",
      "desc": "The offset (in points) of the layer’s shadow. Animatable."
    },
    {
      "name": "shadowColor",
      "type": "var",
      "datatype": "CGColor?",
      "desc": "The color of the layer’s shadow. Animatable."
    },
    {
      "name": "shadowPath",
      "type": "var",
      "datatype": "CGPath?",
      "desc": "The shape of the layer’s shadow. Animatable."
    },
    {
      "name": "style",
      "type": "var",
      "datatype": "[AnyHashable",
      "desc": "An optional dictionary used to store property values that aren't explicitly defined by the layer."
    },
    {
      "name": "allowsEdgeAntialiasing",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether the layer is allowed to perform edge antialiasing."
    },
    {
      "name": "allowsGroupOpacity",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether the layer is allowed to composite itself as a group separate from its parent."
    },
    {
      "name": "filters",
      "type": "var",
      "datatype": "[Any]?",
      "desc": "An array of Core Image filters to apply to the contents of the layer and its sublayers. Animatable."
    },
    {
      "name": "compositingFilter",
      "type": "var",
      "datatype": "Any?",
      "desc": "A CoreImage filter used to composite the layer and the content behind it. Animatable."
    },
    {
      "name": "backgroundFilters",
      "type": "var",
      "datatype": "[Any]?",
      "desc": "An array of Core Image filters to apply to the content immediately behind the layer. Animatable."
    },
    {
      "name": "minificationFilter",
      "type": "var",
      "datatype": "CALayerContentsFilter",
      "desc": "The filter used when reducing the size of the content."
    },
    {
      "name": "minificationFilterBias",
      "type": "var",
      "datatype": "Float",
      "desc": "The bias factor used by the minification filter to determine the levels of detail."
    },
    {
      "name": "magnificationFilter",
      "type": "var",
      "datatype": "CALayerContentsFilter",
      "desc": "The filter used when increasing the size of the content."
    },
    {
      "name": "isOpaque",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the layer contains completely opaque content."
    },
    {
      "name": "edgeAntialiasingMask",
      "type": "var",
      "datatype": "CAEdgeAntialiasingMask",
      "desc": "A bitmask defining how the edges of the receiver are rasterized."
    },
    {
      "name": "contentsAreFlipped",
      "type": "func",
      "desc": "Returns a Boolean indicating whether the layer content is implicitly flipped when rendered.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "isGeometryFlipped",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean that indicates whether the geometry of the layer and its sublayers is flipped vertically."
    },
    {
      "name": "drawsAsynchronously",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether drawing commands are deferred and processed asynchronously in a background thread."
    },
    {
      "name": "shouldRasterize",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean that indicates whether the layer is rendered as a bitmap before compositing. Animatable"
    },
    {
      "name": "rasterizationScale",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The scale at which to rasterize content, relative to the coordinate space of the layer. Animatable"
    },
    {
      "name": "contentsFormat",
      "type": "var",
      "datatype": "CALayerContentsFormat",
      "desc": "A hint for the desired storage format of the layer contents."
    },
    {
      "name": "render",
      "type": "func",
      "desc": "Renders the layer and its sublayers into the specified context.",
      "params": [
        {
          "name": "in",
          "type": "CGContext"
        }
      ]
    },
    {
      "name": "frame",
      "type": "var",
      "datatype": "CGRect",
      "desc": "The layer’s frame rectangle."
    },
    {
      "name": "bounds",
      "type": "var",
      "datatype": "CGRect",
      "desc": "The layer’s bounds rectangle. Animatable."
    },
    {
      "name": "position",
      "type": "var",
      "datatype": "CGPoint",
      "desc": "The layer’s position in its superlayer’s coordinate space. Animatable."
    },
    {
      "name": "zPosition",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The layer’s position on the z axis. Animatable."
    },
    {
      "name": "anchorPointZ",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The anchor point for the layer’s position along the z axis. Animatable."
    },
    {
      "name": "anchorPoint",
      "type": "var",
      "datatype": "CGPoint",
      "desc": "Defines the anchor point of the layer's bounds rectangle. Animatable."
    },
    {
      "name": "contentsScale",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The scale factor applied to the layer."
    },
    {
      "name": "transform",
      "type": "var",
      "datatype": "CATransform3D",
      "desc": "The transform applied to the layer’s contents. Animatable."
    },
    {
      "name": "sublayerTransform",
      "type": "var",
      "datatype": "CATransform3D",
      "desc": "Specifies the transform to apply to sublayers when rendering. Animatable."
    },
    {
      "name": "affineTransform",
      "type": "func",
      "desc": "Returns an affine version of the layer’s transform.",
      "params": [],
      "returnType": "CGAffineTransform"
    },
    {
      "name": "setAffineTransform",
      "type": "func",
      "desc": "Sets the layer’s transform to the specified affine transform.",
      "params": [
        {
          "type": "CGAffineTransform"
        }
      ]
    },
    {
      "name": "sublayers",
      "type": "var",
      "datatype": "[CALayer]?",
      "desc": "An array containing the layer’s sublayers."
    },
    {
      "name": "superlayer",
      "type": "var",
      "datatype": "CALayer?",
      "desc": "The superlayer of the layer."
    },
    {
      "name": "addSublayer",
      "type": "func",
      "desc": "Appends the layer to the layer’s list of sublayers.",
      "params": [
        {
          "type": "CALayer"
        }
      ]
    },
    {
      "name": "removeFromSuperlayer",
      "type": "func",
      "desc": "Detaches the layer from its parent layer.",
      "params": []
    },
    {
      "name": "insertSublayer",
      "type": "func",
      "desc": "Inserts the specified layer into the receiver’s list of sublayers at the specified index.",
      "params": [
        {
          "type": "CALayer"
        },
        {
          "name": "at",
          "type": "UInt32"
        }
      ]
    },
    {
      "name": "insertSublayer",
      "type": "func",
      "desc": "Inserts the specified sublayer below a different sublayer that already belongs to the receiver.",
      "params": [
        {
          "type": "CALayer"
        },
        {
          "name": "below",
          "type": "CALayer?"
        }
      ]
    },
    {
      "name": "insertSublayer",
      "type": "func",
      "desc": "Inserts the specified sublayer above a different sublayer that already belongs to the receiver.",
      "params": [
        {
          "type": "CALayer"
        },
        {
          "name": "above",
          "type": "CALayer?"
        }
      ]
    },
    {
      "name": "replaceSublayer",
      "type": "func",
      "desc": "Replaces the specified sublayer with a different layer object.",
      "params": [
        {
          "type": "CALayer"
        },
        {
          "name": "with",
          "type": "CALayer"
        }
      ]
    },
    {
      "name": "setNeedsDisplay",
      "type": "func",
      "desc": "Marks the layer’s contents as needing to be updated.",
      "params": []
    },
    {
      "name": "setNeedsDisplay",
      "type": "func",
      "desc": "Marks the region within the specified rectangle as needing to be updated.",
      "params": [
        {
          "type": "CGRect"
        }
      ]
    },
    {
      "name": "needsDisplayOnBoundsChange",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean indicating whether the layer contents must be updated when its bounds rectangle changes."
    },
    {
      "name": "displayIfNeeded",
      "type": "func",
      "desc": "Initiates the update process for a layer if it is currently marked as needing an update.",
      "params": []
    },
    {
      "name": "needsDisplay",
      "type": "func",
      "desc": "Returns a Boolean indicating whether the layer has been marked as needing an update.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "needsDisplay",
      "type": "class func",
      "desc": "Returns a Boolean indicating whether changes to the specified key require the layer to be redisplayed.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "add",
      "type": "func",
      "desc": "Add the specified animation object to the layer’s render tree.",
      "params": [
        {
          "type": "CAAnimation"
        },
        {
          "name": "forKey",
          "type": "String?"
        }
      ]
    },
    {
      "name": "animation",
      "type": "func",
      "desc": "Returns the animation object with the specified identifier.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "CAAnimation?"
    },
    {
      "name": "removeAllAnimations",
      "type": "func",
      "desc": "Remove all animations attached to the layer.",
      "params": []
    },
    {
      "name": "removeAnimation",
      "type": "func",
      "desc": "Remove the animation object with the specified key.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ]
    },
    {
      "name": "animationKeys",
      "type": "func",
      "desc": "Returns an array of strings that identify the animations currently attached to the layer.",
      "params": [],
      "returnType": "[String]?"
    },
    {
      "name": "layoutManager",
      "type": "var",
      "datatype": "CALayoutManager?",
      "desc": "The object responsible for laying out the layer’s sublayers."
    },
    {
      "name": "setNeedsLayout",
      "type": "func",
      "desc": "Invalidates the layer’s layout and marks it as needing an update.",
      "params": []
    },
    {
      "name": "layoutSublayers",
      "type": "func",
      "desc": "Tells the layer to update its layout.",
      "params": []
    },
    {
      "name": "layoutIfNeeded",
      "type": "func",
      "desc": "Recalculate the receiver’s layout, if required.",
      "params": []
    },
    {
      "name": "needsLayout",
      "type": "func",
      "desc": "Returns a Boolean indicating whether the layer has been marked as needing a layout update.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "autoresizingMask",
      "type": "var",
      "datatype": "CAAutoresizingMask",
      "desc": "A bitmask defining how the layer is resized when the bounds of its superlayer changes."
    },
    {
      "name": "resize",
      "type": "func",
      "desc": "Informs the receiver that the size of its superlayer changed.",
      "params": [
        {
          "name": "withOldSuperlayerSize",
          "type": "CGSize"
        }
      ]
    },
    {
      "name": "resizeSublayers",
      "type": "func",
      "desc": "Informs the receiver’s sublayers that the receiver’s size has changed.",
      "params": [
        {
          "name": "withOldSize",
          "type": "CGSize"
        }
      ]
    },
    {
      "name": "preferredFrameSize",
      "type": "func",
      "desc": "Returns the preferred size of the layer in the coordinate space of its superlayer.",
      "params": [],
      "returnType": "CGSize"
    },
    {
      "name": "constraints",
      "type": "var",
      "datatype": "[CAConstraint]?",
      "desc": "The constraints used to position current layer’s sublayers."
    },
    {
      "name": "addConstraint",
      "type": "func",
      "desc": "Adds the specified constraint to the layer.",
      "params": [
        {
          "type": "CAConstraint"
        }
      ]
    },
    {
      "name": "action",
      "type": "func",
      "desc": "Returns the action object assigned to the specified key.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "CAAction?"
    },
    {
      "name": "actions",
      "type": "var",
      "datatype": "[String",
      "desc": "A dictionary containing layer actions."
    },
    {
      "name": "defaultAction",
      "type": "class func",
      "desc": "Returns the default action for the current class.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "CAAction?"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts the point from the specified layer’s coordinate system to the receiver’s coordinate system.",
      "params": [
        {
          "type": "CGPoint"
        },
        {
          "name": "from",
          "type": "CALayer?"
        }
      ],
      "returnType": "CGPoint"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts the point from the receiver’s coordinate system to the specified layer’s coordinate system.",
      "params": [
        {
          "type": "CGPoint"
        },
        {
          "name": "to",
          "type": "CALayer?"
        }
      ],
      "returnType": "CGPoint"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts the rectangle from the specified layer’s coordinate system to the receiver’s coordinate system.",
      "params": [
        {
          "type": "CGRect"
        },
        {
          "name": "from",
          "type": "CALayer?"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts the rectangle from the receiver’s coordinate system to the specified layer’s coordinate system.",
      "params": [
        {
          "type": "CGRect"
        },
        {
          "name": "to",
          "type": "CALayer?"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "convertTime",
      "type": "func",
      "desc": "Converts the time interval from the specified layer’s time space to the receiver’s time space.",
      "params": [
        {
          "type": "CFTimeInterval"
        },
        {
          "name": "from",
          "type": "CALayer?"
        }
      ],
      "returnType": "CFTimeInterval"
    },
    {
      "name": "convertTime",
      "type": "func",
      "desc": "Converts the time interval from the receiver’s time space to the specified layer’s time space",
      "params": [
        {
          "type": "CFTimeInterval"
        },
        {
          "name": "to",
          "type": "CALayer?"
        }
      ],
      "returnType": "CFTimeInterval"
    },
    {
      "name": "hitTest",
      "type": "func",
      "desc": "Returns the farthest descendant of the receiver in the layer hierarchy (including itself) that contains the specified point.",
      "params": [
        {
          "type": "CGPoint"
        }
      ],
      "returnType": "CALayer?"
    },
    {
      "name": "contains",
      "type": "func",
      "desc": "Returns whether the receiver contains a specified point.",
      "params": [
        {
          "type": "CGPoint"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "visibleRect",
      "type": "var",
      "datatype": "CGRect",
      "desc": "The visible region of the layer in its own coordinate space."
    },
    {
      "name": "scroll",
      "type": "func",
      "desc": "Initiates a scroll in the layer’s closest ancestor scroll layer so that the specified point lies at the origin of the scroll layer.",
      "params": [
        {
          "type": "CGPoint"
        }
      ]
    },
    {
      "name": "scrollRectToVisible",
      "type": "func",
      "desc": "Initiates a scroll in the layer’s closest ancestor scroll layer so that the specified rectangle becomes visible.",
      "params": [
        {
          "type": "CGRect"
        }
      ]
    },
    {
      "name": "name",
      "type": "var",
      "datatype": "String?",
      "desc": "The name of the receiver."
    },
    {
      "name": "shouldArchiveValue",
      "type": "func",
      "desc": "Returns a Boolean indicating whether the value of the specified key should be archived.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "defaultValue",
      "type": "class func",
      "desc": "Specifies the default value associated with the specified key.",
      "params": [
        {
          "name": "forKey",
          "type": "String"
        }
      ],
      "returnType": "Any?"
    },
    {
      "name": "cornerCurve",
      "type": "var",
      "datatype": "CALayerCornerCurve"
    },
    {
      "name": "cornerCurveExpansionFactor",
      "type": "class func",
      "params": [
        {
          "type": "CALayerCornerCurve"
        }
      ],
      "returnType": "CGFloat"
    }
  ]
}
