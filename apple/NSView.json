{
  "type": "Class",
  "name": "NSView",
  "desc": "The infrastructure for drawing, printing, and handling events in an app.",
  "items": [
    {
      "name": "prepareForReuse",
      "type": "func",
      "desc": "Restores the view to an initial state so that it can be reused.",
      "params": []
    },
    {
      "name": "superview",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The view that is the parent of the current view."
    },
    {
      "name": "subviews",
      "type": "var",
      "datatype": "[NSView]",
      "desc": "The array of views embedded in the current view."
    },
    {
      "name": "window",
      "type": "var",
      "datatype": "NSWindow?",
      "desc": "The view’s window object, if it is installed in a window."
    },
    {
      "name": "addSubview",
      "type": "func",
      "desc": "Adds a view to the view’s subviews so it’s displayed above its siblings.",
      "params": [
        {
          "type": "NSView"
        }
      ]
    },
    {
      "name": "addSubview",
      "type": "func",
      "desc": "Inserts a view among the view’s subviews so it’s displayed immediately above or below another view.",
      "params": [
        {
          "type": "NSView"
        },
        {
          "name": "positioned",
          "type": "NSWindow.OrderingMode"
        },
        {
          "name": "relativeTo",
          "type": "NSView?"
        }
      ]
    },
    {
      "name": "didAddSubview",
      "type": "func",
      "desc": "Overridden by subclasses to perform additional actions when subviews are added to the view.",
      "params": [
        {
          "type": "NSView"
        }
      ]
    },
    {
      "name": "removeFromSuperview",
      "type": "func",
      "desc": "Unlinks the view from its superview and its window, removes it from the responder chain, and invalidates its cursor rectangles.",
      "params": []
    },
    {
      "name": "removeFromSuperviewWithoutNeedingDisplay",
      "type": "func",
      "desc": "Unlinks the view from its superview and its window and removes it from the responder chain, but does not invalidate its cursor rectangles to cause redrawing.",
      "params": []
    },
    {
      "name": "replaceSubview",
      "type": "func",
      "desc": "Replaces one of the view’s subviews with another view.",
      "params": [
        {
          "type": "NSView"
        },
        {
          "name": "with",
          "type": "NSView"
        }
      ]
    },
    {
      "name": "isDescendant",
      "type": "func",
      "desc": "Returns true if the view is a subview of a given view or if it’s identical to that view; otherwise, it returns false.",
      "params": [
        {
          "name": "of",
          "type": "NSView"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "opaqueAncestor",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The view’s closest opaque ancestor, which might be the view itself."
    },
    {
      "name": "ancestorShared",
      "type": "func",
      "desc": "Returns the closest ancestor shared by the view and another specified view.",
      "params": [
        {
          "name": "with",
          "type": "NSView"
        }
      ],
      "returnType": "NSView?"
    },
    {
      "name": "sortSubviews",
      "type": "func",
      "desc": "Orders the view's immediate subviews using the specified comparator function.",
      "params": [
        {
          "type": "(NSView"
        },
        {
          "type": "NSView"
        },
        {
          "type": "UnsafeMutableRawPointer?"
        }
      ],
      "returnType": "ComparisonResult,"
    },
    {
      "name": "viewDidMoveToSuperview",
      "type": "func",
      "desc": "Informs the view that its superview has changed (possibly to nil).",
      "params": []
    },
    {
      "name": "viewDidMoveToWindow",
      "type": "func",
      "desc": "Informs the view that it has been added to a new view hierarchy.",
      "params": []
    },
    {
      "name": "viewWillMove",
      "type": "func",
      "desc": "Informs the view that its superview is about to change to the specified superview (which may be nil).",
      "params": [
        {
          "name": "toSuperview",
          "type": "NSView?"
        }
      ]
    },
    {
      "name": "viewWillMove",
      "type": "func",
      "desc": "Informs the view that it’s being added to the view hierarchy of the specified window object (which may be nil).",
      "params": [
        {
          "name": "toWindow",
          "type": "NSWindow?"
        }
      ]
    },
    {
      "name": "willRemoveSubview",
      "type": "func",
      "desc": "Overridden by subclasses to perform additional actions before subviews are removed from the view.",
      "params": [
        {
          "type": "NSView"
        }
      ]
    },
    {
      "name": "enclosingMenuItem",
      "type": "var",
      "datatype": "NSMenuItem?",
      "desc": "The menu item containing the view or any of its superviews in the view hierarchy."
    },
    {
      "name": "frame",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The view’s frame rectangle, which defines its position and size in its superview’s coordinate system."
    },
    {
      "name": "setFrameOrigin",
      "type": "func",
      "desc": "Sets the origin of the view’s frame rectangle to the specified point, effectively repositioning it within its superview.",
      "params": [
        {
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "setFrameSize",
      "type": "func",
      "desc": "Sets the size of the view’s frame rectangle to the specified dimensions, resizing it within its superview without affecting its coordinate system.",
      "params": [
        {
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "frameRotation",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The angle of rotation, measured in degrees, applied to the view’s frame rectangle relative to its superview’s coordinate system."
    },
    {
      "name": "bounds",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The view’s bounds rectangle, which expresses its location and size in its own coordinate system."
    },
    {
      "name": "setBoundsOrigin",
      "type": "func",
      "desc": "Sets the origin of the view’s bounds rectangle to a specified point.",
      "params": [
        {
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "setBoundsSize",
      "type": "func",
      "desc": "Sets the size of the view’s bounds rectangle to specified dimensions, inversely scaling its coordinate system relative to its frame rectangle.",
      "params": [
        {
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "boundsRotation",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The angle of rotation, measured in degrees, applied to the view’s bounds rectangle relative to its frame rectangle."
    },
    {
      "name": "wantsLayer",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view uses a layer as its backing store."
    },
    {
      "name": "wantsUpdateLayer",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating which drawing path the view takes when updating its contents."
    },
    {
      "name": "layer",
      "type": "var",
      "datatype": "CALayer?",
      "desc": "The Core Animation layer that the view uses as its backing store."
    },
    {
      "name": "makeBackingLayer",
      "type": "func",
      "desc": "Creates the view’s backing layer.",
      "params": [],
      "returnType": "CALayer"
    },
    {
      "name": "layerContentsPlacement",
      "type": "var",
      "datatype": "NSView.LayerContentsPlacement",
      "desc": "The current layer contents placement policy."
    },
    {
      "name": "layerContentsRedrawPolicy",
      "type": "var",
      "datatype": "NSView.LayerContentsRedrawPolicy",
      "desc": "The contents redraw policy for the view’s layer."
    },
    {
      "name": "canDrawSubviewsIntoLayer",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view incorporates content from its subviews into its own layer."
    },
    {
      "name": "layerUsesCoreImageFilters",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view’s layer uses Core Image filters and needs in-process rendering."
    },
    {
      "name": "alphaValue",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The opacity of the view."
    },
    {
      "name": "frameCenterRotation",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The rotation angle of the view around the center of its layer."
    },
    {
      "name": "backgroundFilters",
      "type": "var",
      "datatype": "[CIFilter]",
      "desc": "An array of Core Image filters to apply to the view’s background."
    },
    {
      "name": "compositingFilter",
      "type": "var",
      "datatype": "CIFilter?",
      "desc": "The Core Image filter used to composite the view’s contents with its background."
    },
    {
      "name": "contentFilters",
      "type": "var",
      "datatype": "[CIFilter]",
      "desc": "An array of Core Image filters to apply to the contents of the view and its sublayers."
    },
    {
      "name": "shadow",
      "type": "var",
      "datatype": "NSShadow?",
      "desc": "The shadow displayed underneath the view."
    },
    {
      "name": "updateLayer",
      "type": "func",
      "desc": "Updates the view’s content by modifying its underlying layer.",
      "params": []
    },
    {
      "name": "draw",
      "type": "func",
      "desc": "Overridden by subclasses to draw the view’s image within the specified rectangle.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "canDraw",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether drawing commands will produce any results."
    },
    {
      "name": "canDrawConcurrently",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view can draw its contents on a background thread."
    },
    {
      "name": "visibleRect",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The portion of the view that is not clipped by its superviews."
    },
    {
      "name": "getRectsBeingDrawn",
      "type": "func",
      "desc": "Returns by indirection a list of nonoverlapping rectangles that define the area the view is being asked to draw in draw(_:).",
      "params": [
        {
          "type": "UnsafeMutablePointer<UnsafePointer<NSRect>?>?"
        },
        {
          "name": "count",
          "type": "UnsafeMutablePointer<Int>?"
        }
      ]
    },
    {
      "name": "needsToDraw",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the specified rectangle intersects any part of the area that the view is being asked to draw.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "wantsDefaultClipping",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether AppKit’s default clipping behavior is in effect."
    },
    {
      "name": "bitmapImageRepForCachingDisplay",
      "type": "func",
      "desc": "Returns a bitmap-representation object suitable for caching the specified portion of the view.",
      "params": [
        {
          "name": "in",
          "type": "NSRect"
        }
      ],
      "returnType": "NSBitmapImageRep?"
    },
    {
      "name": "cacheDisplay",
      "type": "func",
      "desc": "Draws the specified area of the view, and its descendants, into a provided bitmap-representation object.",
      "params": [
        {
          "name": "in",
          "type": "NSRect"
        },
        {
          "name": "to",
          "type": "NSBitmapImageRep"
        }
      ]
    },
    {
      "name": "printView",
      "type": "func",
      "desc": "This action method opens the Print panel, and if the user chooses an option other than canceling, prints the view and all its subviews to the device specified in the Print panel.",
      "params": [
        {
          "type": "Any?"
        }
      ]
    },
    {
      "name": "beginPage",
      "type": "func",
      "desc": "Called at the beginning of each page, this method sets up the coordinate system so that a region inside the view’s bounds is translated to a specified location.",
      "params": [
        {
          "name": "in",
          "type": "NSRect"
        },
        {
          "name": "atPlacement",
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "dataWithEPS",
      "type": "func",
      "desc": "Returns EPS data that draws the region of the view within a specified rectangle.",
      "params": [
        {
          "name": "inside",
          "type": "NSRect"
        }
      ],
      "returnType": "Data"
    },
    {
      "name": "dataWithPDF",
      "type": "func",
      "desc": "Returns PDF data that draws the region of the view within a specified rectangle.",
      "params": [
        {
          "name": "inside",
          "type": "NSRect"
        }
      ],
      "returnType": "Data"
    },
    {
      "name": "printJobTitle",
      "type": "var",
      "datatype": "String",
      "desc": "The view’s print job title."
    },
    {
      "name": "pageHeader",
      "type": "var",
      "datatype": "NSAttributedString",
      "desc": "A default header string that includes the print job title and date."
    },
    {
      "name": "pageFooter",
      "type": "var",
      "datatype": "NSAttributedString",
      "desc": "A default footer string that includes the current page number and page count."
    },
    {
      "name": "writeEPS",
      "type": "func",
      "desc": "Writes EPS data that draws the region of the view within a specified rectangle onto a pasteboard.",
      "params": [
        {
          "name": "inside",
          "type": "NSRect"
        },
        {
          "name": "to",
          "type": "NSPasteboard"
        }
      ]
    },
    {
      "name": "writePDF",
      "type": "func",
      "desc": "Writes PDF data that draws the region of the view within a specified rectangle onto a pasteboard.",
      "params": [
        {
          "name": "inside",
          "type": "NSRect"
        },
        {
          "name": "to",
          "type": "NSPasteboard"
        }
      ]
    },
    {
      "name": "drawPageBorder",
      "type": "func",
      "desc": "Allows applications that use the AppKit pagination facility to draw additional marks on each logical page.",
      "params": [
        {
          "name": "with",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "drawSheetBorder",
      "type": "func",
      "desc": "Allows applications that use the AppKit pagination facility to draw additional marks on each printed sheet.",
      "params": [
        {
          "name": "with",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "heightAdjustLimit",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The fraction of the page that can be pushed onto the next page during automatic pagination to prevent items such as lines of text from being divided across pages."
    },
    {
      "name": "widthAdjustLimit",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The fraction of the page that can be pushed onto the next page during automatic pagination to prevent items such as small images or text columns from being divided across pages."
    },
    {
      "name": "adjustPageWidthNew",
      "type": "func",
      "desc": "Overridden by subclasses to adjust page width during automatic pagination.",
      "params": [
        {
          "type": "UnsafeMutablePointer<CGFloat>"
        },
        {
          "name": "left",
          "type": "CGFloat"
        },
        {
          "name": "right",
          "type": "CGFloat"
        },
        {
          "name": "limit",
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "adjustPageHeightNew",
      "type": "func",
      "desc": "Overridden by subclasses to adjust page height during automatic pagination.",
      "params": [
        {
          "type": "UnsafeMutablePointer<CGFloat>"
        },
        {
          "name": "top",
          "type": "CGFloat"
        },
        {
          "name": "bottom",
          "type": "CGFloat"
        },
        {
          "name": "limit",
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "knowsPageRange",
      "type": "func",
      "desc": "Returns true if the view handles page boundaries, false otherwise.",
      "params": [
        {
          "type": "NSRangePointer"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "rectForPage",
      "type": "func",
      "desc": "Implemented by subclasses to determine the portion of the view to be printed for the specified page number.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "locationOfPrintRect",
      "type": "func",
      "desc": "Invoked by printView(_:) to determine the location of the region of the view being printed on the physical page.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "setNeedsDisplay",
      "type": "func",
      "desc": "Marks the region of the view within the specified rectangle as needing display, increasing the view’s existing invalid region to include it.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "needsDisplay",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that determines whether the view needs to be redrawn before being displayed."
    },
    {
      "name": "display",
      "type": "func",
      "desc": "Displays the view and all its subviews if possible, invoking each of the NSView methods lockFocus(), draw(_:), and unlockFocus() as necessary.",
      "params": []
    },
    {
      "name": "display",
      "type": "func",
      "desc": "Acts as display(), but confining drawing to a rectangular region of the view.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "displayIgnoringOpacity",
      "type": "func",
      "desc": "Displays the view but confines drawing to a specified region and does not back up to the first opaque ancestor—it simply causes the view and its descendants to execute their drawing code.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "displayIgnoringOpacity",
      "type": "func",
      "desc": "Causes the view and its descendants to be redrawn to the specified graphics context.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "in",
          "type": "NSGraphicsContext"
        }
      ]
    },
    {
      "name": "displayIfNeeded",
      "type": "func",
      "desc": "Displays the view and all its subviews if any part of the view has been marked as needing display.",
      "params": []
    },
    {
      "name": "displayIfNeeded",
      "type": "func",
      "desc": "Acts as displayIfNeeded(), confining drawing to a specified region of the view.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "displayIfNeededIgnoringOpacity",
      "type": "func",
      "desc": "Acts as displayIfNeeded(), except that this method doesn’t back up to the first opaque ancestor—it simply causes the view and its descendants to execute their drawing code.",
      "params": []
    },
    {
      "name": "displayIfNeededIgnoringOpacity",
      "type": "func",
      "desc": "Acts as displayIfNeeded(), but confining drawing to aRect and not backing up to the first opaque ancestor—it simply causes the view and its descendants to execute their drawing code.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "translateRectsNeedingDisplay",
      "type": "func",
      "desc": "Translates the display rectangles by the specified delta.",
      "params": [
        {
          "name": "in",
          "type": "NSRect"
        },
        {
          "name": "by",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "isOpaque",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view fills its frame rectangle with opaque content."
    },
    {
      "name": "viewWillDraw",
      "type": "func",
      "desc": "Informs the view that it’s required to draw content.",
      "params": []
    },
    {
      "name": "backingAlignedRect",
      "type": "func",
      "desc": "Returns a backing store pixel-aligned rectangle in local view coordinates.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "options",
          "type": "AlignmentOptions"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convertFromBacking",
      "type": "func",
      "desc": "Converts a point from its pixel aligned backing store coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSPoint"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convertToBacking",
      "type": "func",
      "desc": "Converts a point from the view’s interior coordinate system to its pixel aligned backing store coordinate system.",
      "params": [
        {
          "type": "NSPoint"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convertFromLayer",
      "type": "func",
      "desc": "Convert the point from the layer's interior coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSPoint"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convertToLayer",
      "type": "func",
      "desc": "Convert the size from the view’s interior coordinate system to the layer's interior coordinate system.",
      "params": [
        {
          "type": "NSPoint"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convertFromBacking",
      "type": "func",
      "desc": "Converts a rectangle from its pixel aligned backing store coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convertToBacking",
      "type": "func",
      "desc": "Converts a rectangle from the view’s interior coordinate system to its pixel aligned backing store coordinate system.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convertFromLayer",
      "type": "func",
      "desc": "Convert the rectangle from the layer's interior coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convertToLayer",
      "type": "func",
      "desc": "Convert the size from the view’s interior coordinate system to the layer's interior coordinate system.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convertFromBacking",
      "type": "func",
      "desc": "Converts a size from its pixel aligned backing store coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSSize"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convertToBacking",
      "type": "func",
      "desc": "Converts a size from the view’s interior coordinate system to its pixel aligned backing store coordinate system.",
      "params": [
        {
          "type": "NSSize"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convertFromLayer",
      "type": "func",
      "desc": "Convert the size from the layer's interior coordinate system to the view’s interior coordinate system.",
      "params": [
        {
          "type": "NSSize"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convertToLayer",
      "type": "func",
      "desc": "Convert the size from the view’s interior coordinate system to the layer's interior coordinate system.",
      "params": [
        {
          "type": "NSSize"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a point from the coordinate system of a given view to that of the view.",
      "params": [
        {
          "type": "NSPoint"
        },
        {
          "name": "from",
          "type": "NSView?"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a point from the view’s coordinate system to that of a given view.",
      "params": [
        {
          "type": "NSPoint"
        },
        {
          "name": "to",
          "type": "NSView?"
        }
      ],
      "returnType": "NSPoint"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a size from another view’s coordinate system to that of the view.",
      "params": [
        {
          "type": "NSSize"
        },
        {
          "name": "from",
          "type": "NSView?"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a size from the view’s coordinate system to that of another view.",
      "params": [
        {
          "type": "NSSize"
        },
        {
          "name": "to",
          "type": "NSView?"
        }
      ],
      "returnType": "NSSize"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a rectangle from the coordinate system of another view to that of the view.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "from",
          "type": "NSView?"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "convert",
      "type": "func",
      "desc": "Converts a rectangle from the view’s coordinate system to that of another view.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "to",
          "type": "NSView?"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "centerScanRect",
      "type": "func",
      "desc": "Converts the corners of a specified rectangle to lie on the center of device pixels, which is useful in compensating for rendering overscanning when the coordinate system has been scaled.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "translateOrigin",
      "type": "func",
      "desc": "Translates the view’s coordinate system so that its origin moves to a new location.",
      "params": [
        {
          "name": "to",
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "scaleUnitSquare",
      "type": "func",
      "desc": "Scales the view’s coordinate system so that the unit square scales to the specified dimensions.",
      "params": [
        {
          "name": "to",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "rotate",
      "type": "func",
      "desc": "Rotates the view’s bounds rectangle by a specified degree value around the origin of the coordinate system, (0.0, 0.0).",
      "params": [
        {
          "name": "byDegrees",
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "isFlipped",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view uses a flipped coordinate system."
    },
    {
      "name": "isRotatedFromBase",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view or any of its ancestors has ever had a rotation factor applied to its frame or bounds."
    },
    {
      "name": "isRotatedOrScaledFromBase",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view or any of its ancestors has ever had a rotation factor applied to its frame or bounds, or has been scaled from the window’s base coordinate system."
    },
    {
      "name": "autoresizesSubviews",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view applies the autoresizing behavior to its subviews when its frame size changes."
    },
    {
      "name": "autoresizingMask",
      "type": "var",
      "datatype": "NSView.AutoresizingMask",
      "desc": "The options that determine how the view is resized relative to its superview."
    },
    {
      "name": "resizeSubviews",
      "type": "func",
      "desc": "Informs the view’s subviews that the view’s bounds rectangle size has changed.",
      "params": [
        {
          "name": "withOldSize",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "resize",
      "type": "func",
      "desc": "Informs the view that the bounds size of its superview has changed.",
      "params": [
        {
          "name": "withOldSuperviewSize",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "bottomAnchor",
      "type": "var",
      "datatype": "NSLayoutYAxisAnchor",
      "desc": "A layout anchor representing the bottom edge of the view’s frame."
    },
    {
      "name": "centerXAnchor",
      "type": "var",
      "datatype": "NSLayoutXAxisAnchor",
      "desc": "A layout anchor representing the horizontal center of the view’s frame."
    },
    {
      "name": "centerYAnchor",
      "type": "var",
      "datatype": "NSLayoutYAxisAnchor",
      "desc": "A layout anchor representing the vertical center of the view’s frame."
    },
    {
      "name": "firstBaselineAnchor",
      "type": "var",
      "datatype": "NSLayoutYAxisAnchor",
      "desc": "A layout anchor representing the baseline for the topmost line of text in the view."
    },
    {
      "name": "heightAnchor",
      "type": "var",
      "datatype": "NSLayoutDimension",
      "desc": "A layout anchor representing the height of the view’s frame."
    },
    {
      "name": "lastBaselineAnchor",
      "type": "var",
      "datatype": "NSLayoutYAxisAnchor",
      "desc": "A layout anchor representing the baseline for the bottommost line of text in the view."
    },
    {
      "name": "leadingAnchor",
      "type": "var",
      "datatype": "NSLayoutXAxisAnchor",
      "desc": "A layout anchor representing the leading edge of the view’s frame."
    },
    {
      "name": "leftAnchor",
      "type": "var",
      "datatype": "NSLayoutXAxisAnchor",
      "desc": "A layout anchor representing the left edge of the view’s frame."
    },
    {
      "name": "rightAnchor",
      "type": "var",
      "datatype": "NSLayoutXAxisAnchor",
      "desc": "A layout anchor representing the right edge of the view’s frame."
    },
    {
      "name": "topAnchor",
      "type": "var",
      "datatype": "NSLayoutYAxisAnchor",
      "desc": "A layout anchor representing the top edge of the view’s frame."
    },
    {
      "name": "trailingAnchor",
      "type": "var",
      "datatype": "NSLayoutXAxisAnchor",
      "desc": "A layout anchor representing the trailing edge of the view’s frame."
    },
    {
      "name": "widthAnchor",
      "type": "var",
      "datatype": "NSLayoutDimension",
      "desc": "A layout anchor representing the width of the view’s frame."
    },
    {
      "name": "constraints",
      "type": "var",
      "datatype": "[NSLayoutConstraint]",
      "desc": "Returns the constraints held by the view."
    },
    {
      "name": "addConstraint",
      "type": "func",
      "desc": "Adds a constraint on the layout of the receiving view or its subviews.",
      "params": [
        {
          "type": "NSLayoutConstraint"
        }
      ]
    },
    {
      "name": "addConstraints",
      "type": "func",
      "desc": "Adds multiple constraints on the layout of the receiving view or its subviews.",
      "params": [
        {
          "type": "[NSLayoutConstraint]"
        }
      ]
    },
    {
      "name": "removeConstraint",
      "type": "func",
      "desc": "Removes the specified constraint from the view.",
      "params": [
        {
          "type": "NSLayoutConstraint"
        }
      ]
    },
    {
      "name": "removeConstraints",
      "type": "func",
      "desc": "Removes the specified constraints from the view.",
      "params": [
        {
          "type": "[NSLayoutConstraint]"
        }
      ]
    },
    {
      "name": "addLayoutGuide",
      "type": "func",
      "desc": "Adds the provided layout guide to the view.",
      "params": [
        {
          "type": "NSLayoutGuide"
        }
      ]
    },
    {
      "name": "layoutGuides",
      "type": "var",
      "datatype": "[NSLayoutGuide]",
      "desc": "The array of layout guide objects owned by this view."
    },
    {
      "name": "removeLayoutGuide",
      "type": "func",
      "desc": "Removes the provided layout guide from the view.",
      "params": [
        {
          "type": "NSLayoutGuide"
        }
      ]
    },
    {
      "name": "fittingSize",
      "type": "var",
      "datatype": "NSSize",
      "desc": "The minimum size of the view that satisfies the constraints it holds."
    },
    {
      "name": "intrinsicContentSize",
      "type": "var",
      "datatype": "NSSize",
      "desc": "The natural size for the receiving view, considering only properties of the view itself."
    },
    {
      "name": "invalidateIntrinsicContentSize",
      "type": "func",
      "desc": "Invalidates the view’s intrinsic content size.",
      "params": []
    },
    {
      "name": "contentCompressionResistancePriority",
      "type": "func",
      "desc": "Returns the priority with which a view resists being made smaller than its intrinsic size.",
      "params": [
        {
          "name": "for",
          "type": "NSLayoutConstraint.Orientation"
        }
      ],
      "returnType": "NSLayoutConstraint.Priority"
    },
    {
      "name": "setContentCompressionResistancePriority",
      "type": "func",
      "desc": "Sets the priority with which a view resists being made smaller than its intrinsic size.",
      "params": [
        {
          "type": "NSLayoutConstraint.Priority"
        },
        {
          "name": "for",
          "type": "NSLayoutConstraint.Orientation"
        }
      ]
    },
    {
      "name": "contentHuggingPriority",
      "type": "func",
      "desc": "Returns the priority with which a view resists being made larger than its intrinsic size.",
      "params": [
        {
          "name": "for",
          "type": "NSLayoutConstraint.Orientation"
        }
      ],
      "returnType": "NSLayoutConstraint.Priority"
    },
    {
      "name": "setContentHuggingPriority",
      "type": "func",
      "desc": "Sets the priority with which a view resists being made larger than its intrinsic size.",
      "params": [
        {
          "type": "NSLayoutConstraint.Priority"
        },
        {
          "name": "for",
          "type": "NSLayoutConstraint.Orientation"
        }
      ]
    },
    {
      "name": "alignmentRect",
      "type": "func",
      "desc": "Returns the view’s alignment rectangle for a given frame.",
      "params": [
        {
          "name": "forFrame",
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "frame",
      "type": "func",
      "desc": "Returns the view’s frame for a given alignment rectangle.",
      "params": [
        {
          "name": "forAlignmentRect",
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "alignmentRectInsets",
      "type": "var",
      "datatype": "NSEdgeInsets",
      "desc": "The insets (in points) from the view’s frame that define its content rectangle."
    },
    {
      "name": "baselineOffsetFromBottom",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The distance (in points) between the bottom of the view’s alignment rectangle and its baseline."
    },
    {
      "name": "firstBaselineOffsetFromTop",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The distance (in points) between the top of the view’s alignment rectangle and its topmost baseline."
    },
    {
      "name": "lastBaselineOffsetFromBottom",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The distance (in points) between the bottom of the view’s alignment rectangle and its bottommost baseline."
    },
    {
      "name": "needsLayout",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view needs a layout pass before it can be drawn."
    },
    {
      "name": "layout",
      "type": "func",
      "desc": "Perform layout in concert with the constraint-based layout system.",
      "params": []
    },
    {
      "name": "layoutSubtreeIfNeeded",
      "type": "func",
      "desc": "Updates the layout of the receiving view and its subviews based on the current views and constraints.",
      "params": []
    },
    {
      "name": "needsUpdateConstraints",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view’s constraints need to be updated."
    },
    {
      "name": "updateConstraints",
      "type": "func",
      "desc": "Update constraints for the view.",
      "params": []
    },
    {
      "name": "updateConstraintsForSubtreeIfNeeded",
      "type": "func",
      "desc": "Updates the constraints for the receiving view and its subviews.",
      "params": []
    },
    {
      "name": "requiresConstraintBasedLayout",
      "type": "class var",
      "datatype": "Bool",
      "desc": "Returns a Boolean value indicating whether the view depends on the constraint-based layout system."
    },
    {
      "name": "translatesAutoresizingMaskIntoConstraints",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view’s autoresizing mask is translated into constraints for the constraint-based layout system."
    },
    {
      "name": "constraintsAffectingLayout",
      "type": "func",
      "desc": "Returns the constraints impacting the layout of the view for a given orientation.",
      "params": [
        {
          "name": "for",
          "type": "NSLayoutConstraint.Orientation"
        }
      ],
      "returnType": "[NSLayoutConstraint]"
    },
    {
      "name": "hasAmbiguousLayout",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the constraints impacting the layout of the view incompletely specify the location of the view."
    },
    {
      "name": "exerciseAmbiguityInLayout",
      "type": "func",
      "desc": "Randomly changes the frame of a view with an ambiguous layout between the different valid values.",
      "params": []
    },
    {
      "name": "lockFocus",
      "type": "func",
      "desc": "Locks the focus on the view, so subsequent commands take effect in the view’s window and coordinate system.",
      "params": []
    },
    {
      "name": "lockFocusIfCanDraw",
      "type": "func",
      "desc": "Locks the focus to the view atomically if the canDraw method returns true and returns the value of canDraw.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "lockFocusIfCanDraw",
      "type": "func",
      "desc": "Locks the focus to the view atomically if drawing can occur in the specified graphics context.",
      "params": [
        {
          "name": "in",
          "type": "NSGraphicsContext"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "unlockFocus",
      "type": "func",
      "desc": "Unlocks focus from the current view.",
      "params": []
    },
    {
      "name": "focusView",
      "type": "class var",
      "datatype": "NSView?",
      "desc": "Returns the currently focused NSView object, or nil if there is none."
    },
    {
      "name": "focusRingType",
      "type": "var",
      "datatype": "NSFocusRingType",
      "desc": "The type of focus ring drawn around the view."
    },
    {
      "name": "focusRingMaskBounds",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The focus ring mask bounds, specified in the view’s coordinate space."
    },
    {
      "name": "drawFocusRingMask",
      "type": "func",
      "desc": "Draws the focus ring mask for the view.",
      "params": []
    },
    {
      "name": "noteFocusRingMaskChanged",
      "type": "func",
      "desc": "Invoked to notify the view that the focus ring mask requires updating.",
      "params": []
    },
    {
      "name": "setKeyboardFocusRingNeedsDisplay",
      "type": "func",
      "desc": "Invalidates the area around the focus ring.",
      "params": [
        {
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "defaultFocusRingType",
      "type": "class var",
      "datatype": "NSFocusRingType",
      "desc": "Returns the default focus ring type."
    },
    {
      "name": "allowsVibrancy",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view ensures it is vibrant on top of other content."
    },
    {
      "name": "enterFullScreenMode",
      "type": "func",
      "desc": "Sets the view to full screen mode.",
      "params": [
        {
          "type": "NSScreen"
        },
        {
          "name": "withOptions",
          "type": "[NSView.FullScreenModeOptionKey"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "exitFullScreenMode",
      "type": "func",
      "desc": "Instructs the view to exit full screen mode.",
      "params": [
        {
          "name": "options",
          "type": "[NSView.FullScreenModeOptionKey"
        }
      ]
    },
    {
      "name": "isInFullScreenMode",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view is in full screen mode."
    },
    {
      "name": "isHidden",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view is hidden."
    },
    {
      "name": "isHiddenOrHasHiddenAncestor",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view is hidden from sight because it, or one of its ancestors, is marked as hidden."
    },
    {
      "name": "viewDidHide",
      "type": "func",
      "desc": "Invoked when the view is hidden, either directly, or in response to an ancestor being hidden.",
      "params": []
    },
    {
      "name": "viewDidUnhide",
      "type": "func",
      "desc": "Invoked when the view is unhidden, either directly, or in response to an ancestor being unhidden",
      "params": []
    },
    {
      "name": "inLiveResize",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view is being rendered as part of a live resizing operation."
    },
    {
      "name": "preservesContentDuringLiveResize",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view optimizes live-resize operations by preserving content that has not moved."
    },
    {
      "name": "getRectsExposedDuringLiveResize",
      "type": "func",
      "desc": "Returns a list of rectangles indicating the newly exposed areas of the view.",
      "params": [
        {
          "type": "UnsafeMutablePointer<NSRect>"
        },
        {
          "name": "count",
          "type": "UnsafeMutablePointer<Int>"
        }
      ]
    },
    {
      "name": "rectPreservedDuringLiveResize",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The rectangle identifying the portion of your view that did not change during a live resize operation."
    },
    {
      "name": "viewWillStartLiveResize",
      "type": "func",
      "desc": "Informs the view of the start of a live resize—the user has started resizing the view.",
      "params": []
    },
    {
      "name": "viewDidEndLiveResize",
      "type": "func",
      "desc": "Informs the view of the end of a live resize—the user has finished resizing the view.",
      "params": []
    },
    {
      "name": "gestureRecognizers",
      "type": "var",
      "datatype": "[NSGestureRecognizer]",
      "desc": "The gesture recognize objects currently attached to the view."
    },
    {
      "name": "addGestureRecognizer",
      "type": "func",
      "desc": "Attaches a gesture recognizer to the view.",
      "params": [
        {
          "type": "NSGestureRecognizer"
        }
      ]
    },
    {
      "name": "removeGestureRecognizer",
      "type": "func",
      "desc": "Detaches a gesture recognizer from the view.",
      "params": [
        {
          "type": "NSGestureRecognizer"
        }
      ]
    },
    {
      "name": "acceptsFirstMouse",
      "type": "func",
      "desc": "Overridden by subclasses to return true if the view should be sent a mouseDown(with:) message for an initial mouse-down event, false if not.",
      "params": [
        {
          "name": "for",
          "type": "NSEvent?"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "hitTest",
      "type": "func",
      "desc": "Returns the farthest descendant of the view in the view hierarchy (including itself) that contains a specified point, or nil if that point lies completely outside the view.",
      "params": [
        {
          "type": "NSPoint"
        }
      ],
      "returnType": "NSView?"
    },
    {
      "name": "isMousePoint",
      "type": "func",
      "desc": "Returns whether a region of the view contains a specified point, accounting for whether the view is flipped or not.",
      "params": [
        {
          "type": "NSPoint"
        },
        {
          "name": "in",
          "type": "NSRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "performKeyEquivalent",
      "type": "func",
      "desc": "Implemented by subclasses to respond to key equivalents (also known as keyboard shortcuts).",
      "params": [
        {
          "name": "with",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "mouseDownCanMoveWindow",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view can pass mouse down events through to its superviews."
    },
    {
      "name": "inputContext",
      "type": "var",
      "datatype": "NSTextInputContext?",
      "desc": "The text input context object for the view."
    },
    {
      "name": "acceptsTouchEvents",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view accepts touch events."
    },
    {
      "name": "wantsRestingTouches",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view wants resting touches."
    },
    {
      "name": "canBecomeKeyView",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view can become key view."
    },
    {
      "name": "needsPanelToBecomeKey",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view needs its panel to become the key window before it can handle keyboard input and navigation."
    },
    {
      "name": "nextKeyView",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The view object that follows the current view in the key view loop."
    },
    {
      "name": "nextValidKeyView",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The closest view object in the key view loop that follows the current view in the key view loop and accepts first responder status."
    },
    {
      "name": "previousKeyView",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The view object preceding the current view in the key view loop."
    },
    {
      "name": "previousValidKeyView",
      "type": "var",
      "datatype": "NSView?",
      "desc": "The closest view object in the key view loop that precedes the current view and accepts first responder status."
    },
    {
      "name": "prepareContent",
      "type": "func",
      "desc": "Prepares the overdraw region for drawing.",
      "params": [
        {
          "name": "in",
          "type": "NSRect"
        }
      ]
    },
    {
      "name": "preparedContentRect",
      "type": "var",
      "datatype": "NSRect",
      "desc": "The portion of the view that has been rendered and is available for responsive scrolling."
    },
    {
      "name": "scroll",
      "type": "func",
      "desc": "Scrolls the view’s closest ancestor NSClipView object so a point in the view lies at the origin of the clip view's bounds rectangle.",
      "params": [
        {
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "scrollToVisible",
      "type": "func",
      "desc": "Scrolls the view’s closest ancestor NSClipView object the minimum distance needed so a specified region of the view becomes visible in the clip view.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "autoscroll",
      "type": "func",
      "desc": "Scrolls the view’s closest ancestor NSClipView object proportionally to the distance of an event that occurs outside of it.",
      "params": [
        {
          "name": "with",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "adjustScroll",
      "type": "func",
      "desc": "Overridden by subclasses to modify a given rectangle, returning the altered rectangle.",
      "params": [
        {
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "scroll",
      "type": "func",
      "desc": "Copies the visible portion of the view’s rendered image within a region and lays that portion down again at a specified offset .",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "by",
          "type": "NSSize"
        }
      ]
    },
    {
      "name": "enclosingScrollView",
      "type": "var",
      "datatype": "NSScrollView?",
      "desc": "The nearest ancestor scroll view that contains the current view."
    },
    {
      "name": "scroll",
      "type": "func",
      "desc": "Notifies the superview of a clip view that the clip view needs to reset the origin of its bounds rectangle.",
      "params": [
        {
          "type": "NSClipView"
        },
        {
          "name": "to",
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "reflectScrolledClipView",
      "type": "func",
      "desc": "Notifies a clip view’s superview that either the clip view’s bounds rectangle or the document view’s frame rectangle has changed, and that any indicators of the scroll position need to be adjusted.",
      "params": [
        {
          "type": "NSClipView"
        }
      ]
    },
    {
      "name": "registerForDraggedTypes",
      "type": "func",
      "desc": "Registers the pasteboard types that the view will accept as the destination of an image-dragging session.",
      "params": [
        {
          "type": "[NSPasteboard.PasteboardType]"
        }
      ]
    },
    {
      "name": "unregisterDraggedTypes",
      "type": "func",
      "desc": "Unregisters the view as a possible destination in a dragging session.",
      "params": []
    },
    {
      "name": "registeredDraggedTypes",
      "type": "var",
      "datatype": "[NSPasteboard.PasteboardType]",
      "desc": "The array of pasteboard drag types that the view can accept."
    },
    {
      "name": "beginDraggingSession",
      "type": "func",
      "desc": "Initiates a dragging session with a group of dragging items.",
      "params": [
        {
          "name": "with",
          "type": "[NSDraggingItem]"
        },
        {
          "name": "event",
          "type": "NSEvent"
        },
        {
          "name": "source",
          "type": "NSDraggingSource"
        }
      ],
      "returnType": "NSDraggingSession"
    },
    {
      "name": "dragFile",
      "type": "func",
      "desc": "Initiates a dragging operation from the view, allowing the user to drag a file icon to any application that has window or view objects that accept files.",
      "params": [
        {
          "type": "String"
        },
        {
          "name": "from",
          "type": "NSRect"
        },
        {
          "name": "slideBack",
          "type": "Bool"
        },
        {
          "name": "event",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "dragPromisedFiles",
      "type": "func",
      "desc": "Initiates a dragging operation from the view, allowing the user to drag one or more promised files (or directories) into any application that has window or view objects that accept promised file data.",
      "params": [
        {
          "name": "ofTypes",
          "type": "[String]"
        },
        {
          "name": "from",
          "type": "NSRect"
        },
        {
          "name": "source",
          "type": "Any"
        },
        {
          "name": "slideBack",
          "type": "Bool"
        },
        {
          "name": "event",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "shouldDelayWindowOrdering",
      "type": "func",
      "desc": "Allows the user to drag objects from the view without activating the app or moving the window of the view forward, possibly obscuring the destination.",
      "params": [
        {
          "name": "for",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "rectForSmartMagnification",
      "type": "func",
      "desc": "Returns the appropriate rectangle to use when magnifying around the specified point.",
      "params": [
        {
          "name": "at",
          "type": "NSPoint"
        },
        {
          "name": "in",
          "type": "NSRect"
        }
      ],
      "returnType": "NSRect"
    },
    {
      "name": "postsFrameChangedNotifications",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view posts notifications when its frame rectangle changes."
    },
    {
      "name": "postsBoundsChangedNotifications",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view posts notifications when its bounds rectangle changes."
    },
    {
      "name": "viewDidChangeBackingProperties",
      "type": "func",
      "desc": "Responds when the view’s backing store properties change.",
      "params": []
    },
    {
      "name": "viewWithTag",
      "type": "func",
      "desc": "Returns the view’s nearest descendant (including itself) with a specific tag, or nil if no subview has that tag.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "NSView?"
    },
    {
      "name": "tag",
      "type": "var",
      "datatype": "Int",
      "desc": "The view’s tag, which is an integer that you use to identify the view within your app."
    },
    {
      "name": "addToolTip",
      "type": "func",
      "desc": "Creates a tooltip for a defined area the view and returns a tag that identifies the tooltip rectangle.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "owner",
          "type": "Any"
        },
        {
          "name": "userData",
          "type": "UnsafeMutableRawPointer?"
        }
      ],
      "returnType": "NSView.ToolTipTag"
    },
    {
      "name": "removeAllToolTips",
      "type": "func",
      "desc": "Removes all tooltips assigned to the view.",
      "params": []
    },
    {
      "name": "removeToolTip",
      "type": "func",
      "desc": "Removes the tooltip identified by specified tag.",
      "params": [
        {
          "type": "NSView.ToolTipTag"
        }
      ]
    },
    {
      "name": "toolTip",
      "type": "var",
      "datatype": "String?",
      "desc": "The text for the view’s tooltip."
    },
    {
      "name": "addTrackingRect",
      "type": "func",
      "desc": "Establishes  an area for tracking mouse-entered and mouse-exited events within the view and returns a tag that identifies the tracking rectangle.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "owner",
          "type": "Any"
        },
        {
          "name": "userData",
          "type": "UnsafeMutableRawPointer?"
        },
        {
          "name": "assumeInside",
          "type": "Bool"
        }
      ],
      "returnType": "NSView.TrackingRectTag"
    },
    {
      "name": "removeTrackingRect",
      "type": "func",
      "desc": "Removes the tracking rectangle identified by a tag.",
      "params": [
        {
          "type": "NSView.TrackingRectTag"
        }
      ]
    },
    {
      "name": "addTrackingArea",
      "type": "func",
      "desc": "Adds a given tracking area to the view.",
      "params": [
        {
          "type": "NSTrackingArea"
        }
      ]
    },
    {
      "name": "removeTrackingArea",
      "type": "func",
      "desc": "Removes a given tracking area from the view.",
      "params": [
        {
          "type": "NSTrackingArea"
        }
      ]
    },
    {
      "name": "trackingAreas",
      "type": "var",
      "datatype": "[NSTrackingArea]",
      "desc": "An array of the view’s tracking areas."
    },
    {
      "name": "updateTrackingAreas",
      "type": "func",
      "desc": "Invoked automatically when the view’s geometry changes such that its tracking areas need to be recalculated.",
      "params": []
    },
    {
      "name": "addCursorRect",
      "type": "func",
      "desc": "Establishes  the cursor to be used when the mouse pointer lies within a specified region.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "cursor",
          "type": "NSCursor"
        }
      ]
    },
    {
      "name": "removeCursorRect",
      "type": "func",
      "desc": "Completely removes a cursor rectangle from the view.",
      "params": [
        {
          "type": "NSRect"
        },
        {
          "name": "cursor",
          "type": "NSCursor"
        }
      ]
    },
    {
      "name": "discardCursorRects",
      "type": "func",
      "desc": "Invalidates all cursor rectangles set up using addCursorRect(_:cursor:).",
      "params": []
    },
    {
      "name": "resetCursorRects",
      "type": "func",
      "desc": "Overridden by subclasses to define their default cursor rectangles.",
      "params": []
    },
    {
      "name": "menu",
      "type": "func",
      "desc": "Overridden by subclasses to return a context-sensitive pop-up menu for a given mouse-down event.",
      "params": [
        {
          "name": "for",
          "type": "NSEvent"
        }
      ],
      "returnType": "NSMenu?"
    },
    {
      "name": "defaultMenu",
      "type": "class var",
      "datatype": "NSMenu?",
      "desc": "Overridden by subclasses to return the default pop-up menu for instances of the receiving class."
    },
    {
      "name": "willOpenMenu",
      "type": "func",
      "desc": "Called just before a contextual menu for a view is opened on screen.",
      "params": [
        {
          "type": "NSMenu"
        },
        {
          "name": "with",
          "type": "NSEvent"
        }
      ]
    },
    {
      "name": "didCloseMenu",
      "type": "func",
      "desc": "Called after a contextual menu that was displayed from the receiving view has been closed.",
      "params": [
        {
          "type": "NSMenu"
        },
        {
          "name": "with",
          "type": "NSEvent?"
        }
      ]
    },
    {
      "name": "beginDocument",
      "type": "func",
      "desc": "Invoked at the beginning of the printing session, this method sets up the current graphics context.",
      "params": []
    },
    {
      "name": "endDocument",
      "type": "func",
      "desc": "This method is invoked at the end of the printing session.",
      "params": []
    },
    {
      "name": "endPage",
      "type": "func",
      "desc": "Writes the end of a conforming page.",
      "params": []
    },
    {
      "name": "showDefinition",
      "type": "func",
      "desc": "Shows a window displaying the definition of the attributed string at the specified point.",
      "params": [
        {
          "name": "for",
          "type": "NSAttributedString?"
        },
        {
          "name": "at",
          "type": "NSPoint"
        }
      ]
    },
    {
      "name": "showDefinition",
      "type": "func",
      "desc": "Shows a window displaying the definition of the specified range of the attributed string.",
      "params": [
        {
          "name": "for",
          "type": "NSAttributedString?"
        },
        {
          "name": "range",
          "type": "NSRange"
        },
        {
          "name": "options",
          "type": "[NSView.DefinitionOptionKey"
        },
        {
          "name": "baselineOriginProvider",
          "type": "((NSRange"
        }
      ],
      "returnType": "NSPoint)?)"
    },
    {
      "name": "isDrawingFindIndicator",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view or one of its ancestors is being drawn for a find indicator."
    },
    {
      "name": "userInterfaceLayoutDirection",
      "type": "var",
      "datatype": "NSUserInterfaceLayoutDirection",
      "desc": "The layout direction for content in the view."
    },
    {
      "name": "wantsBestResolutionOpenGLSurface",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view wants an OpenGL backing surface with a resolution greater than 1 pixel per point."
    },
    {
      "name": "pressureConfiguration",
      "type": "var",
      "datatype": "NSPressureConfiguration?",
      "desc": "Configures the behavior and progression of the Force Touch trackpad when responding to touch input produced by the user when the cursor is over the view."
    },
    {
      "name": "shouldDrawColor",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the view is being drawn to an environment that supports color.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "allocateGState",
      "type": "func",
      "desc": "Causes the view to maintain a private graphics state object, which encapsulates all parameters of the graphics environment.",
      "params": []
    },
    {
      "name": "gState",
      "type": "func",
      "desc": "Returns the identifier for the view’s graphics state object, or 0 if the view doesn’t have a graphics state object.",
      "params": [],
      "returnType": "Int"
    },
    {
      "name": "setUpGState",
      "type": "func",
      "desc": "Overridden by subclasses to (re)initialize the view’s graphics state object.",
      "params": []
    },
    {
      "name": "renewGState",
      "type": "func",
      "desc": "Invalidates the view’s graphics state object, if it has one.",
      "params": []
    },
    {
      "name": "releaseGState",
      "type": "func",
      "desc": "Frees the view’s graphics state object, if it has one.",
      "params": []
    },
    {
      "name": "m NSBorderType",
      "type": "enum",
      "desc": "These constants specify the type of a view’s border."
    },
    {
      "name": "m NSView.LayerContentsRedrawPolicy",
      "type": "enum",
      "desc": "Constants that specify how layer resizing is handled when a view is layer-backed or layer-hosting. For more information, see the  layerContentsRedrawPolicy property."
    },
    {
      "name": "m NSView.LayerContentsPlacement",
      "type": "enum",
      "desc": "These constants specify the location of the layer content when the content is not rerendered in response to view resizing. For more information, see the layerContentsPlacement property."
    },
    {
      "name": "boundsDidChangeNotification",
      "type": "class let",
      "datatype": "NSNotification.Name",
      "desc": "Posted whenever the NSView’s bounds rectangle changes to a new value independently of the frame rectangle, but only when the view’s postsBoundsChangedNotifications property is true."
    },
    {
      "name": "frameDidChangeNotification",
      "type": "class let",
      "datatype": "NSNotification.Name",
      "desc": "Posted whenever the view’s frame rectangle changes to a new value, but only when the view’s postsFrameChangedNotifications property is true."
    },
    {
      "name": "didUpdateTrackingAreasNotification",
      "type": "class let",
      "datatype": "NSNotification.Name",
      "desc": "Posted whenever an NSView object recalculates its tracking areas."
    },
    {
      "name": "globalFrameDidChangeNotification",
      "type": "class let",
      "datatype": "NSNotification.Name",
      "desc": "Posted whenever an NSView object that has attached surfaces (that is, NSOpenGLContext objects) moves to a different screen, or other cases where the NSOpenGLContext object needs to be updated."
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that aRulerView allowed the user to add aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "didAdd",
          "type": "NSRulerMarker"
        }
      ]
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that aRulerView allowed the user to move aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "didMove",
          "type": "NSRulerMarker"
        }
      ]
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that aRulerView allowed the user to remove aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "didRemove",
          "type": "NSRulerMarker"
        }
      ]
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that the user has pressed the mouse button while the cursor is in the ruler area of aRulerView.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "handleMouseDownWith",
          "type": "NSEvent"
        }
      ]
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Requests permission for aRulerView to add aMarker, an NSRulerMarker being dragged onto the ruler by the user.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "shouldAdd",
          "type": "NSRulerMarker"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Requests permission for aRulerView to move aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "shouldMove",
          "type": "NSRulerMarker"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Requests permission for aRulerView to remove aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "shouldRemove",
          "type": "NSRulerMarker"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that aRulerView will add the new NSRulerMarker, aMarker.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "willAdd",
          "type": "NSRulerMarker"
        },
        {
          "name": "atLocation",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client that aRulerView will move aMarker, an NSRulerMarker already on the ruler view.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "willMove",
          "type": "NSRulerMarker"
        },
        {
          "name": "toLocation",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "rulerView",
      "type": "func",
      "desc": "Informs the client view that aRulerView is about to be appropriated by newClient.",
      "params": [
        {
          "type": "NSRulerView"
        },
        {
          "name": "willSetClientView",
          "type": "NSView"
        }
      ]
    },
    {
      "name": "m NSView.BackgroundStyle",
      "type": "enum",
      "desc": "Background styles used with the backgroundStyle and interiorBackgroundStyle properties."
    }
  ]
}
