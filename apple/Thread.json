{
  "type": "Class",
  "name": "Thread",
  "desc": "A thread of execution.",
  "items": [
    {
      "name": "detachNewThreadSelector",
      "type": "class func",
      "desc": "Detaches a new thread and uses the specified selector as the thread entry point.",
      "params": [
        {
          "type": "Selector"
        },
        {
          "name": "toTarget",
          "type": "Any"
        },
        {
          "name": "with",
          "type": "Any?"
        }
      ]
    },
    {
      "name": "start",
      "type": "func",
      "desc": "Starts the receiver.",
      "params": []
    },
    {
      "name": "main",
      "type": "func",
      "desc": "The main entry point routine for the thread.",
      "params": []
    },
    {
      "name": "sleep",
      "type": "class func",
      "desc": "Blocks the current thread until the time specified.",
      "params": [
        {
          "name": "until",
          "type": "Date"
        }
      ]
    },
    {
      "name": "sleep",
      "type": "class func",
      "desc": "Sleeps the thread for a given time interval.",
      "params": [
        {
          "name": "forTimeInterval",
          "type": "TimeInterval"
        }
      ]
    },
    {
      "name": "exit",
      "type": "class func",
      "desc": "Terminates the current thread.",
      "params": []
    },
    {
      "name": "cancel",
      "type": "func",
      "desc": "Changes the cancelled state of the receiver to indicate that it should exit.",
      "params": []
    },
    {
      "name": "isExecuting",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the receiver is executing."
    },
    {
      "name": "isFinished",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the receiver has finished execution."
    },
    {
      "name": "isCancelled",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the receiver is cancelled."
    },
    {
      "name": "isMainThread",
      "type": "class var",
      "datatype": "Bool",
      "desc": "Returns a Boolean value that indicates whether the current thread is the main thread."
    },
    {
      "name": "isMainThread",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the receiver is the main thread."
    },
    {
      "name": "main",
      "type": "class var",
      "datatype": "Thread",
      "desc": "Returns the NSThread object representing the main thread."
    },
    {
      "name": "isMultiThreaded",
      "type": "class func",
      "desc": "Returns whether the application is multithreaded.",
      "params": [],
      "returnType": "Bool"
    },
    {
      "name": "current",
      "type": "class var",
      "datatype": "Thread",
      "desc": "Returns the thread object representing the current thread of execution."
    },
    {
      "name": "callStackReturnAddresses",
      "type": "class var",
      "datatype": "[NSNumber]",
      "desc": "Returns an array containing the call stack return addresses."
    },
    {
      "name": "callStackSymbols",
      "type": "class var",
      "datatype": "[String]",
      "desc": "Returns an array containing the call stack symbols."
    },
    {
      "name": "threadDictionary",
      "type": "var",
      "datatype": "NSMutableDictionary",
      "desc": "The thread object's dictionary."
    },
    {
      "name": "NSAssertionHandlerKey",
      "type": "let",
      "datatype": "String"
    },
    {
      "name": "name",
      "type": "var",
      "datatype": "String?",
      "desc": "The name of the receiver."
    },
    {
      "name": "stackSize",
      "type": "var",
      "datatype": "Int",
      "desc": "The stack size of the receiver, in bytes."
    },
    {
      "name": "qualityOfService",
      "type": "var",
      "datatype": "QualityOfService"
    },
    {
      "name": "QualityOfService",
      "type": "enum",
      "desc": "Used to indicate the nature and importance of work to the system. Work with higher quality of service classes receive more resources than work with lower quality of service classes whenever there is resource contention."
    },
    {
      "name": "threadPriority",
      "type": "class func",
      "desc": "Returns the current thread’s priority.",
      "params": [],
      "returnType": "Double"
    },
    {
      "name": "threadPriority",
      "type": "var",
      "datatype": "Double",
      "desc": "The receiver’s priority"
    },
    {
      "name": "setThreadPriority",
      "type": "class func",
      "desc": "Sets the current thread’s priority.",
      "params": [
        {
          "type": "Double"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "NSDidBecomeSingleThreaded",
      "type": "static let",
      "datatype": "NSNotification.Name",
      "desc": "Not implemented."
    },
    {
      "name": "NSThreadWillExit",
      "type": "static let",
      "datatype": "NSNotification.Name",
      "desc": "An NSThread object posts this notification when it receives the exit() message, before the thread exits. Observer methods invoked to receive this notification execute in the exiting thread, before it exits."
    },
    {
      "name": "NSWillBecomeMultiThreaded",
      "type": "static let",
      "datatype": "NSNotification.Name",
      "desc": "Posted when the first thread is detached from the current thread. The NSThread class posts this notification at most once—the first time a thread is detached using detachNewThreadSelector(_:toTarget:with:) or the start() method. Subsequent invocations of those methods do not post this notification. Observers of this notification have their notification method invoked in the main thread, not the new thread. The observer notification methods always execute before the new thread begins executing."
    }
  ]
}
