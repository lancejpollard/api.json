{
  "type": "Class",
  "name": "NSAppleEventManager",
  "desc": "A mechanism for registering handler routines for specific types of Apple events and dispatching events to those handlers.",
  "items": [
    {
      "name": "shared",
      "type": "class func",
      "desc": "Returns the single instance of NSAppleEventManager, creating it first if it doesnâ€™t exist.",
      "params": [],
      "returnType": "NSAppleEventManager"
    },
    {
      "name": "removeEventHandler",
      "type": "func",
      "desc": "If an Apple event handler has been registered for the event specified by eventClass and eventID, removes it.",
      "params": [
        {
          "name": "forEventClass",
          "type": "AEEventClass"
        },
        {
          "name": "andEventID",
          "type": "AEEventID"
        }
      ]
    },
    {
      "name": "setEventHandler",
      "type": "func",
      "desc": "Registers the Apple event handler specified by handler for the event specified by eventClass and eventID.",
      "params": [
        {
          "type": "Any"
        },
        {
          "name": "andSelector",
          "type": "Selector"
        },
        {
          "name": "forEventClass",
          "type": "AEEventClass"
        },
        {
          "name": "andEventID",
          "type": "AEEventID"
        }
      ]
    },
    {
      "name": "dispatchRawAppleEvent",
      "type": "func",
      "desc": "Causes the Apple event specified by theAppleEvent to be dispatched to the appropriate Apple event handler, if one has been registered by calling setEventHandler(_:andSelector:forEventClass:andEventID:).",
      "params": [
        {
          "type": "UnsafePointer<AppleEvent>"
        },
        {
          "name": "withRawReply",
          "type": "UnsafeMutablePointer<AppleEvent>"
        },
        {
          "name": "handlerRefCon",
          "type": "SRefCon"
        }
      ],
      "returnType": "OSErr"
    },
    {
      "name": "appleEvent",
      "type": "func",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the descriptor for the event whose handling was suspended.",
      "params": [
        {
          "name": "forSuspensionID",
          "type": "NSAppleEventManager.SuspensionID"
        }
      ],
      "returnType": "NSAppleEventDescriptor"
    },
    {
      "name": "currentAppleEvent",
      "type": "var",
      "datatype": "NSAppleEventDescriptor?",
      "desc": "Returns the descriptor for currentAppleEvent if an Apple event is being handled on the current thread."
    },
    {
      "name": "currentReplyAppleEvent",
      "type": "var",
      "datatype": "NSAppleEventDescriptor?",
      "desc": "Returns the corresponding reply event descriptor if an Apple event is being handled on the current thread."
    },
    {
      "name": "replyAppleEvent",
      "type": "func",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the corresponding reply event descriptor.",
      "params": [
        {
          "name": "forSuspensionID",
          "type": "NSAppleEventManager.SuspensionID"
        }
      ],
      "returnType": "NSAppleEventDescriptor"
    },
    {
      "name": "resume",
      "type": "func",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), signal that handling of the suspended event may now continue.",
      "params": [
        {
          "name": "withSuspensionID",
          "type": "NSAppleEventManager.SuspensionID"
        }
      ]
    },
    {
      "name": "setCurrentAppleEventAndReplyEventWithSuspensionID",
      "type": "func",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), sets the values that will be returned by subsequent invocations of currentAppleEvent and currentReplyAppleEvent to be the event whose handling was suspended and its corresponding reply event, respectively.",
      "params": [
        {
          "type": "NSAppleEventManager.SuspensionID"
        }
      ]
    },
    {
      "name": "suspendCurrentAppleEvent",
      "type": "func",
      "desc": "Suspends the handling of the current event and returns an ID that must be used to resume the handling of the event if an Apple event is being handled on the current thread.",
      "params": [],
      "returnType": "NSAppleEventManager.SuspensionID?"
    }
  ]
}
