{
  "type": "Generic Structure",
  "name": "Array",
  "desc": "An ordered, random-access collection.",
  "items": [
    {
      "name": "isEmpty",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "count",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of elements in the array."
    },
    {
      "name": "capacity",
      "type": "var",
      "datatype": "Int",
      "desc": "The total number of elements that the array can contain without allocating new storage."
    },
    {
      "name": "first",
      "type": "var",
      "datatype": "Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "last",
      "type": "var",
      "datatype": "Element?",
      "desc": "The last element of the collection."
    },
    {
      "name": "randomElement",
      "type": "func",
      "desc": "Returns a random element of the collection.",
      "params": [],
      "returnType": "Element?"
    },
    {
      "name": "randomElement<T>",
      "type": "func",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "Element?"
    },
    {
      "name": "append",
      "type": "func",
      "desc": "Adds a new element at the end of the array.",
      "params": [
        {
          "type": "Element"
        }
      ]
    },
    {
      "name": "insert",
      "type": "func",
      "desc": "Inserts a new element at the specified position.",
      "params": [
        {
          "type": "Element"
        },
        {
          "name": "at",
          "type": "Int"
        }
      ]
    },
    {
      "name": "insert<C>",
      "type": "func",
      "desc": "Inserts the elements of a sequence into the collection at the specified position.",
      "params": [
        {
          "name": "contentsOf",
          "type": "C"
        },
        {
          "name": "at",
          "type": "Int"
        }
      ]
    },
    {
      "name": "replaceSubrange<C>",
      "type": "func",
      "desc": "Replaces a range of elements with the elements in the specified collection.",
      "params": [
        {
          "type": "Range<Int>"
        },
        {
          "name": "with",
          "type": "C"
        }
      ]
    },
    {
      "name": "replaceSubrange<C, R>",
      "type": "func",
      "desc": "Replaces the specified subrange of elements with the given collection.",
      "params": [
        {
          "type": "R"
        },
        {
          "name": "with",
          "type": "C"
        }
      ]
    },
    {
      "name": "reserveCapacity",
      "type": "func",
      "desc": "Reserves enough space to store the specified number of elements.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "append<S>",
      "type": "func",
      "desc": "Adds the elements of a sequence to the end of the array.",
      "params": [
        {
          "name": "contentsOf",
          "type": "S"
        }
      ]
    },
    {
      "name": "append<S>",
      "type": "func",
      "desc": "Adds the elements of a sequence or collection to the end of this collection.",
      "params": [
        {
          "name": "contentsOf",
          "type": "S"
        }
      ]
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection.",
      "params": [
        {
          "type": "Other"
        },
        {
          "type": "Array<Element>"
        }
      ],
      "returnType": "Array<Element>"
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence.",
      "params": [
        {
          "type": "Array<Element>"
        },
        {
          "type": "Other"
        }
      ],
      "returnType": "Array<Element>"
    },
    {
      "name": "+",
      "type": "static func",
      "params": [
        {
          "type": "Array<Element>"
        },
        {
          "type": "Array<Element>"
        }
      ],
      "returnType": "Array<Element>"
    },
    {
      "name": "+ <Other>",
      "type": "static func",
      "desc": "Creates a new collection by concatenating the elements of two collections.",
      "params": [
        {
          "type": "Array<Element>"
        },
        {
          "type": "Other"
        }
      ],
      "returnType": "Array<Element>"
    },
    {
      "name": "+= <Other>",
      "type": "static func",
      "desc": "Appends the elements of a sequence to a range-replaceable collection.",
      "params": [
        {
          "type": "inout Array<Element>"
        },
        {
          "type": "Other"
        }
      ]
    },
    {
      "name": "+=",
      "type": "static func",
      "params": [
        {
          "type": "inout Array<Element>"
        },
        {
          "type": "Array<Element>"
        }
      ]
    },
    {
      "name": "remove",
      "type": "func",
      "desc": "Removes and returns the element at the specified position.",
      "params": [
        {
          "name": "at",
          "type": "Int"
        }
      ],
      "returnType": "Element"
    },
    {
      "name": "removeFirst",
      "type": "func",
      "desc": "Removes and returns the first element of the collection.",
      "params": [],
      "returnType": "Element"
    },
    {
      "name": "removeFirst",
      "type": "func",
      "desc": "Removes the specified number of elements from the beginning of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "removeLast",
      "type": "func",
      "desc": "Removes and returns the last element of the collection.",
      "params": [],
      "returnType": "Element"
    },
    {
      "name": "removeLast",
      "type": "func",
      "desc": "Removes the specified number of elements from the end of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "removeSubrange",
      "type": "func",
      "desc": "Removes the elements in the specified subrange from the collection.",
      "params": [
        {
          "type": "Range<Int>"
        }
      ]
    },
    {
      "name": "removeSubrange<R>",
      "type": "func",
      "desc": "Removes the elements in the specified subrange from the collection.",
      "params": [
        {
          "type": "R"
        }
      ]
    },
    {
      "name": "removeAll",
      "type": "func",
      "desc": "Removes all elements from the array.",
      "params": [
        {
          "name": "keepingCapacity",
          "type": "Bool"
        }
      ]
    },
    {
      "name": "popLast",
      "type": "func",
      "desc": "Removes and returns the last element of the collection.",
      "params": [],
      "returnType": "Element?"
    },
    {
      "name": "contains",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element.",
      "params": [
        {
          "type": "Element"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "firstIndex",
      "type": "func",
      "desc": "Returns the first index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Element"
        }
      ],
      "returnType": "Int?"
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the first index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Element"
        }
      ],
      "returnType": "Int?"
    },
    {
      "name": "lastIndex",
      "type": "func",
      "desc": "Returns the last index where the specified value appears in the collection.",
      "params": [
        {
          "name": "of",
          "type": "Element"
        }
      ],
      "returnType": "Int?"
    },
    {
      "name": "min",
      "type": "func",
      "desc": "Returns the minimum element in the sequence.",
      "params": [],
      "returnType": "Element?"
    },
    {
      "name": "max",
      "type": "func",
      "desc": "Returns the maximum element in the sequence.",
      "params": [],
      "returnType": "Element?"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence from the start of the collection through the specified position.",
      "params": [
        {
          "name": "through",
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "prefix",
      "type": "func",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position.",
      "params": [
        {
          "name": "upTo",
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "suffix",
      "type": "func",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "suffix",
      "type": "func",
      "desc": "Returns a subsequence from the specified position to the end of the collection.",
      "params": [
        {
          "name": "from",
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "dropFirst",
      "type": "func",
      "desc": "Returns a subsequence containing all but the given number of initial elements.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "dropLast",
      "type": "func",
      "desc": "Returns a subsequence containing all but the specified number of final elements.",
      "params": [
        {
          "type": "Int"
        }
      ],
      "returnType": "ArraySlice<Element>"
    },
    {
      "name": "lazy",
      "type": "var",
      "datatype": "LazySequence<Array<Element>>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "enumerated",
      "type": "func",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.",
      "params": [],
      "returnType": "EnumeratedSequence<Array<Element>>"
    },
    {
      "name": "makeIterator",
      "type": "func",
      "desc": "Returns an iterator over the elements of the collection.",
      "params": [],
      "returnType": "IndexingIterator<Array<Element>>"
    },
    {
      "name": "underestimatedCount",
      "type": "var",
      "datatype": "Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "sort",
      "type": "func",
      "desc": "Sorts the collection in place.",
      "params": []
    },
    {
      "name": "sorted",
      "type": "func",
      "desc": "Returns the elements of the sequence, sorted.",
      "params": [],
      "returnType": "[Element]"
    },
    {
      "name": "reverse",
      "type": "func",
      "desc": "Reverses the elements of the collection in place.",
      "params": []
    },
    {
      "name": "reversed",
      "type": "func",
      "desc": "Returns a view presenting the elements of the collection in reverse order.",
      "params": [],
      "returnType": "ReversedCollection<Array<Element>>"
    },
    {
      "name": "shuffle",
      "type": "func",
      "desc": "Shuffles the collection in place.",
      "params": []
    },
    {
      "name": "shuffle<T>",
      "type": "func",
      "desc": "Shuffles the collection in place, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "using",
          "type": "inout T"
        }
      ]
    },
    {
      "name": "shuffled",
      "type": "func",
      "desc": "Returns the elements of the sequence, shuffled.",
      "params": [],
      "returnType": "[Element]"
    },
    {
      "name": "shuffled<T>",
      "type": "func",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.",
      "params": [
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "[Element]"
    },
    {
      "name": "swapAt",
      "type": "func",
      "desc": "Exchanges the values at the specified indices of the collection.",
      "params": [
        {
          "type": "Int"
        },
        {
          "type": "Int"
        }
      ]
    },
    {
      "name": "split",
      "type": "func",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.",
      "params": [
        {
          "name": "separator",
          "type": "Element"
        },
        {
          "name": "maxSplits",
          "type": "Int"
        },
        {
          "name": "omittingEmptySubsequences",
          "type": "Bool"
        }
      ],
      "returnType": "[ArraySlice<Element>]"
    },
    {
      "name": "joined",
      "type": "func",
      "desc": "Returns the elements of this sequence of sequences, concatenated.",
      "params": [],
      "returnType": "FlattenSequence<Array<Element>>"
    },
    {
      "name": "joined<Separator>",
      "type": "func",
      "desc": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.",
      "params": [
        {
          "name": "separator",
          "type": "Separator"
        }
      ],
      "returnType": "JoinedSequence<Array<Element>>"
    },
    {
      "name": "joined",
      "type": "func",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.",
      "params": [
        {
          "name": "separator",
          "type": "String"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "joined",
      "type": "func",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.",
      "params": [
        {
          "name": "separator",
          "type": "String"
        }
      ],
      "returnType": "String"
    },
    {
      "name": "==",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two arrays contain the same elements in the same order.",
      "params": [
        {
          "type": "Array<Element>"
        },
        {
          "type": "Array<Element>"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "!=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are not equal.",
      "params": [
        {
          "type": "Array<Element>"
        },
        {
          "type": "Array<Element>"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "elementsEqual<OtherSequence>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.",
      "params": [
        {
          "type": "OtherSequence"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "starts<PossiblePrefix>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.",
      "params": [
        {
          "name": "with",
          "type": "PossiblePrefix"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "lexicographicallyPrecedes<OtherSequence>",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.",
      "params": [
        {
          "type": "OtherSequence"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "startIndex",
      "type": "var",
      "datatype": "Int",
      "desc": "The position of the first element in a nonempty array."
    },
    {
      "name": "endIndex",
      "type": "var",
      "datatype": "Int",
      "desc": "The array’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the position immediately after the given index.",
      "params": [
        {
          "name": "after",
          "type": "Int"
        }
      ],
      "returnType": "Int"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Replaces the given index with its successor.",
      "params": [
        {
          "name": "after",
          "type": "inout Int"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns the position immediately before the given index.",
      "params": [
        {
          "name": "before",
          "type": "Int"
        }
      ],
      "returnType": "Int"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Replaces the given index with its predecessor.",
      "params": [
        {
          "name": "before",
          "type": "inout Int"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns an index that is the specified distance from the given index.",
      "params": [
        {
          "type": "Int"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        }
      ],
      "returnType": "Int"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Offsets the given index by the specified distance.",
      "params": [
        {
          "type": "inout Int"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        }
      ]
    },
    {
      "name": "index",
      "type": "func",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.",
      "params": [
        {
          "type": "Int"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        },
        {
          "name": "limitedBy",
          "type": "Int"
        }
      ],
      "returnType": "Int?"
    },
    {
      "name": "formIndex",
      "type": "func",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index.",
      "params": [
        {
          "type": "inout Int"
        },
        {
          "name": "offsetBy",
          "type": "Int"
        },
        {
          "name": "limitedBy",
          "type": "Int"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "distance",
      "type": "func",
      "desc": "Returns the distance between two indices.",
      "params": [
        {
          "name": "from",
          "type": "Int"
        },
        {
          "name": "to",
          "type": "Int"
        }
      ],
      "returnType": "Int"
    },
    {
      "name": "indices",
      "type": "var",
      "datatype": "Range<Int>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "encode",
      "type": "func",
      "desc": "Encodes the elements of this array into the given encoder in an unkeyed container.",
      "params": [
        {
          "name": "to",
          "type": "Encoder"
        }
      ]
    },
    {
      "name": "description",
      "type": "var",
      "datatype": "String",
      "desc": "A textual representation of the array and its elements."
    },
    {
      "name": "debugDescription",
      "type": "var",
      "datatype": "String",
      "desc": "A textual representation of the array and its elements, suitable for debugging."
    },
    {
      "name": "customMirror",
      "type": "var",
      "datatype": "Mirror",
      "desc": "A mirror that reflects the array."
    },
    {
      "name": "hash",
      "type": "func",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher.",
      "params": [
        {
          "name": "into",
          "type": "inout Hasher"
        }
      ]
    },
    {
      "name": "dataValue",
      "type": "var",
      "datatype": "MLDataValue",
      "desc": "The array wrapped in a data value."
    },
    {
      "name": "dataValueType",
      "type": "static var",
      "datatype": "MLDataValue.ValueType",
      "desc": "The underlying type an array uses when it wraps itself in a data value."
    },
    {
      "name": "hashValue",
      "type": "var",
      "datatype": "Int",
      "desc": "The hash value."
    },
    {
      "name": "regions",
      "type": "var",
      "datatype": "CollectionOfOne<Array<UInt8>>"
    },
    {
      "name": "applying",
      "type": "func",
      "desc": "Applies the given difference to this collection.",
      "params": [
        {
          "type": "CollectionDifference<Element>"
        }
      ],
      "returnType": "Array<Element>?"
    },
    {
      "name": "difference<C>",
      "type": "func",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection.",
      "params": [
        {
          "name": "from",
          "type": "C"
        }
      ],
      "returnType": "CollectionDifference<Element>"
    }
  ]
}
