{
  "type": "Class",
  "name": "MTLRenderPipelineDescriptor",
  "desc": "An argument of options you pass to a device to get a render pipeline state object.",
  "items": [
    {
      "name": "vertexFunction",
      "type": "var",
      "datatype": "MTLFunction?",
      "desc": "A programmable function that processes individual vertices in a rendering pass."
    },
    {
      "name": "fragmentFunction",
      "type": "var",
      "datatype": "MTLFunction?",
      "desc": "A programmable function that processes individual fragments in a rendering pass."
    },
    {
      "name": "vertexDescriptor",
      "type": "var",
      "datatype": "MTLVertexDescriptor?",
      "desc": "The organization of vertex data in an attributeâ€™s argument table."
    },
    {
      "name": "vertexBuffers",
      "type": "var",
      "datatype": "MTLPipelineBufferDescriptorArray",
      "desc": "An array that contains the buffer mutability options for a render pipeline's vertex function."
    },
    {
      "name": "fragmentBuffers",
      "type": "var",
      "datatype": "MTLPipelineBufferDescriptorArray",
      "desc": "An array that contains the buffer mutability options for a render pipeline's fragment function."
    },
    {
      "name": "reset",
      "type": "func",
      "desc": "Specifies the default rendering pipeline state values for the descriptor.",
      "params": []
    },
    {
      "name": "colorAttachments",
      "type": "var",
      "datatype": "MTLRenderPipelineColorAttachmentDescriptorArray",
      "desc": "An array of attachments that store color data."
    },
    {
      "name": "depthAttachmentPixelFormat",
      "type": "var",
      "datatype": "MTLPixelFormat",
      "desc": "The pixel format of the attachment that stores depth data."
    },
    {
      "name": "stencilAttachmentPixelFormat",
      "type": "var",
      "datatype": "MTLPixelFormat",
      "desc": "The pixel format of the attachment that stores stencil data."
    },
    {
      "name": "sampleCount",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of samples in each fragment."
    },
    {
      "name": "isAlphaToCoverageEnabled",
      "type": "var",
      "datatype": "Bool",
      "desc": "Indicates whether the alpha channel fragment output for colorAttachments is read and used to compute a sample coverage mask."
    },
    {
      "name": "isAlphaToOneEnabled",
      "type": "var",
      "datatype": "Bool",
      "desc": "Indicates whether the alpha channel values for colorAttachments are forced to 1.0, which is the largest representable value."
    },
    {
      "name": "isRasterizationEnabled",
      "type": "var",
      "datatype": "Bool",
      "desc": "Determines whether primitives are rasterized."
    },
    {
      "name": "inputPrimitiveTopology",
      "type": "var",
      "datatype": "MTLPrimitiveTopologyClass",
      "desc": "Indicates the type of primitive topology being rendered."
    },
    {
      "name": "rasterSampleCount",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of samples in each fragment."
    },
    {
      "name": "MTLPrimitiveTopologyClass",
      "type": "enum",
      "desc": "The primitive topologies available for rendering."
    },
    {
      "name": "maxTessellationFactor",
      "type": "var",
      "datatype": "Int",
      "desc": "Specifies the maximum tessellation factor to be used by the tessellator when tessellating a patch (or patches)."
    },
    {
      "name": "isTessellationFactorScaleEnabled",
      "type": "var",
      "datatype": "Bool",
      "desc": "Determines whether the tessellation factor is scaled."
    },
    {
      "name": "tessellationFactorFormat",
      "type": "var",
      "datatype": "MTLTessellationFactorFormat",
      "desc": "The format of the tessellation factors specified in the tessellation factor buffer."
    },
    {
      "name": "tessellationControlPointIndexType",
      "type": "var",
      "datatype": "MTLTessellationControlPointIndexType",
      "desc": "The size of the control point indices in a control point index buffer."
    },
    {
      "name": "tessellationFactorStepFunction",
      "type": "var",
      "datatype": "MTLTessellationFactorStepFunction",
      "desc": "The step function used to determine the tessellation factors for a patch from the tessellation factor buffer."
    },
    {
      "name": "tessellationOutputWindingOrder",
      "type": "var",
      "datatype": "MTLWinding",
      "desc": "The winding order of triangles output by the tessellator."
    },
    {
      "name": "tessellationPartitionMode",
      "type": "var",
      "datatype": "MTLTessellationPartitionMode",
      "desc": "The partitioning mode used by the tessellator to derive the number and spacing of segments used to subdivide a corresponding edge."
    },
    {
      "name": "MTLTessellationFactorFormat",
      "type": "enum",
      "desc": "The format of the tessellation factors in a tessellation factor buffer."
    },
    {
      "name": "MTLTessellationControlPointIndexType",
      "type": "enum",
      "desc": "The size of the control point indices in a control point index buffer."
    },
    {
      "name": "MTLTessellationFactorStepFunction",
      "type": "enum",
      "desc": "The step function used to determine the tessellation factors for a patch from the tessellation factor buffer."
    },
    {
      "name": "MTLTessellationPartitionMode",
      "type": "enum",
      "desc": "The partitioning mode used by the tessellator to derive the number and spacing of segments used to subdivide a corresponding edge."
    },
    {
      "name": "label",
      "type": "var",
      "datatype": "String?",
      "desc": "A string that identifies the render pipeline descriptor."
    },
    {
      "name": "supportIndirectCommandBuffers",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that determines whether the render pipeline state can be used in an indirect command buffer."
    },
    {
      "name": "maxVertexAmplificationCount",
      "type": "var",
      "datatype": "Int",
      "desc": "The maximum vertex amplification count you can set when encoding render commands."
    }
  ]
}
