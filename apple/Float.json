{
  "type": "Structure",
  "name": "Float",
  "desc": "A single-precision, floating-point value type.",
  "items": [
    {
      "name": "random",
      "type": "static func",
      "desc": "Returns a random value within the specified range.",
      "params": [
        {
          "name": "in",
          "type": "Range<Float>"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "random<T>",
      "type": "static func",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "in",
          "type": "Range<Float>"
        },
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "random",
      "type": "static func",
      "desc": "Returns a random value within the specified range.",
      "params": [
        {
          "name": "in",
          "type": "ClosedRange<Float>"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "random<T>",
      "type": "static func",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "in",
          "type": "ClosedRange<Float>"
        },
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "addingProduct",
      "type": "func",
      "desc": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "addProduct",
      "type": "func",
      "desc": "Adds the product of the two given values to this value in place, computed without intermediate rounding.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ]
    },
    {
      "name": "squareRoot",
      "type": "func",
      "desc": "Returns the square root of the value, rounded to a representable value.",
      "params": [],
      "returnType": "Float"
    },
    {
      "name": "formSquareRoot",
      "type": "func",
      "desc": "Replaces this value with its square root, rounded to a representable value.",
      "params": []
    },
    {
      "name": "remainder",
      "type": "func",
      "desc": "Returns the remainder of this value divided by the given value.",
      "params": [
        {
          "name": "dividingBy",
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "formRemainder",
      "type": "func",
      "desc": "Replaces this value with the remainder of itself divided by the given value.",
      "params": [
        {
          "name": "dividingBy",
          "type": "Float"
        }
      ]
    },
    {
      "name": "truncatingRemainder",
      "type": "func",
      "desc": "Returns the remainder of this value divided by the given value using truncating division.",
      "params": [
        {
          "name": "dividingBy",
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "formTruncatingRemainder",
      "type": "func",
      "desc": "Replaces this value with the remainder of itself divided by the given value using truncating division.",
      "params": [
        {
          "name": "dividingBy",
          "type": "Float"
        }
      ]
    },
    {
      "name": "negate",
      "type": "func",
      "desc": "Replaces this value with its additive inverse.",
      "params": []
    },
    {
      "name": "rounded",
      "type": "func",
      "desc": "Returns this value rounded to an integral value using “schoolbook rounding.”",
      "params": [],
      "returnType": "Float"
    },
    {
      "name": "rounded",
      "type": "func",
      "desc": "Returns this value rounded to an integral value using the specified rounding rule.",
      "params": [
        {
          "type": "FloatingPointRoundingRule"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "round",
      "type": "func",
      "desc": "Rounds this value to an integral value using “schoolbook rounding.”",
      "params": []
    },
    {
      "name": "round",
      "type": "func",
      "desc": "Rounds the value to an integral value using the specified rounding rule.",
      "params": [
        {
          "type": "FloatingPointRoundingRule"
        }
      ]
    },
    {
      "name": "isEqual",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this instance is equal to the given value.",
      "params": [
        {
          "name": "to",
          "type": "Float"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isLess",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this instance is less than the given value.",
      "params": [
        {
          "name": "than",
          "type": "Float"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isLessThanOrEqualTo",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this instance is less than or equal to the given value.",
      "params": [
        {
          "type": "Float"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isTotallyOrdered",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.",
      "params": [
        {
          "name": "belowOrEqualTo",
          "type": "Float"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "maximum",
      "type": "static func",
      "desc": "Returns the greater of the two given values.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "maximumMagnitude",
      "type": "static func",
      "desc": "Returns the value with greater magnitude.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "minimum",
      "type": "static func",
      "desc": "Returns the lesser of the two given values.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "minimumMagnitude",
      "type": "static func",
      "desc": "Returns the value with lesser magnitude.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "magnitude",
      "type": "var",
      "datatype": "Float",
      "desc": "The magnitude of this value."
    },
    {
      "name": "sign",
      "type": "var",
      "datatype": "FloatingPointSign",
      "desc": "The sign of the floating-point value."
    },
    {
      "name": "ulp",
      "type": "var",
      "datatype": "Float",
      "desc": "The unit in the last place of this value."
    },
    {
      "name": "significand",
      "type": "var",
      "datatype": "Float",
      "desc": "The significand of the floating-point value."
    },
    {
      "name": "exponent",
      "type": "var",
      "datatype": "Int",
      "desc": "The exponent of the floating-point value."
    },
    {
      "name": "nextUp",
      "type": "var",
      "datatype": "Float",
      "desc": "The least representable value that compares greater than this value."
    },
    {
      "name": "nextDown",
      "type": "var",
      "datatype": "Float",
      "desc": "The greatest representable value that compares less than this value."
    },
    {
      "name": "binade",
      "type": "var",
      "datatype": "Float",
      "desc": "The floating-point value with the same sign and exponent as this value, but with a significand of 1.0."
    },
    {
      "name": "pi",
      "type": "static var",
      "datatype": "Float",
      "desc": "The mathematical constant pi."
    },
    {
      "name": "infinity",
      "type": "static var",
      "datatype": "Float",
      "desc": "Positive infinity."
    },
    {
      "name": "greatestFiniteMagnitude",
      "type": "static var",
      "datatype": "Float",
      "desc": "The greatest finite number representable by this type."
    },
    {
      "name": "nan",
      "type": "static var",
      "datatype": "Float",
      "desc": "A quiet NaN (“not a number”)."
    },
    {
      "name": "signalingNaN",
      "type": "static var",
      "datatype": "Float",
      "desc": "A signaling NaN (“not a number”)."
    },
    {
      "name": "ulpOfOne",
      "type": "static var",
      "datatype": "Float",
      "desc": "The unit in the last place of 1.0."
    },
    {
      "name": "leastNormalMagnitude",
      "type": "static var",
      "datatype": "Float",
      "desc": "The least positive normal number."
    },
    {
      "name": "leastNonzeroMagnitude",
      "type": "static var",
      "datatype": "Float",
      "desc": "The least positive number."
    },
    {
      "name": "zero",
      "type": "static var",
      "datatype": "Float",
      "desc": "The zero value."
    },
    {
      "name": "bitPattern",
      "type": "var",
      "datatype": "UInt32",
      "desc": "The bit pattern of the value’s encoding."
    },
    {
      "name": "significandBitPattern",
      "type": "var",
      "datatype": "UInt32",
      "desc": "The raw encoding of the value’s significand field."
    },
    {
      "name": "significandWidth",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of bits required to represent the value’s significand."
    },
    {
      "name": "exponentBitPattern",
      "type": "var",
      "datatype": "UInt",
      "desc": "The raw encoding of the value’s exponent field."
    },
    {
      "name": "significandBitCount",
      "type": "static var",
      "datatype": "Int",
      "desc": "The available number of fractional significand bits."
    },
    {
      "name": "exponentBitCount",
      "type": "static var",
      "datatype": "Int",
      "desc": "The number of bits used to represent the type’s exponent."
    },
    {
      "name": "radix",
      "type": "static var",
      "datatype": "Int",
      "desc": "The radix, or base of exponentiation, for a floating-point type."
    },
    {
      "name": "isZero",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance is equal to zero."
    },
    {
      "name": "isFinite",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether this instance is finite."
    },
    {
      "name": "isInfinite",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance is infinite."
    },
    {
      "name": "isNaN",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance is NaN (“not a number”)."
    },
    {
      "name": "isSignalingNaN",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance is a signaling NaN."
    },
    {
      "name": "isNormal",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether this instance is normal."
    },
    {
      "name": "isSubnormal",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance is subnormal."
    },
    {
      "name": "isCanonical",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the instance’s representation is in its canonical form."
    },
    {
      "name": "floatingPointClass",
      "type": "var",
      "datatype": "FloatingPointClassification",
      "desc": "The classification of this value."
    },
    {
      "name": "encode",
      "type": "func",
      "desc": "Encodes this value into the given encoder.",
      "params": [
        {
          "name": "to",
          "type": "Encoder"
        }
      ]
    },
    {
      "name": "..<",
      "type": "static func",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "Range<Float>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a closed range that contains both of its bounds.",
      "params": [
        {
          "type": "Float"
        },
        {
          "type": "Float"
        }
      ],
      "returnType": "ClosedRange<Float>"
    },
    {
      "name": "hash",
      "type": "func",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher.",
      "params": [
        {
          "name": "into",
          "type": "inout Hasher"
        }
      ]
    },
    {
      "name": "description",
      "type": "var",
      "datatype": "String",
      "desc": "A textual representation of the value."
    },
    {
      "name": "debugDescription",
      "type": "var",
      "datatype": "String",
      "desc": "A textual representation of the value, suitable for debugging."
    },
    {
      "name": "customMirror",
      "type": "var",
      "datatype": "Mirror",
      "desc": "A mirror that reflects the Float instance."
    },
    {
      "name": "hashValue",
      "type": "var",
      "datatype": "Int",
      "desc": "The hash value."
    },
    {
      "name": "advanced",
      "type": "func",
      "desc": "Returns a value that is offset the specified distance from this value.",
      "params": [
        {
          "name": "by",
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "distance",
      "type": "func",
      "desc": "Returns the distance from this value to the given value, expressed as a stride.",
      "params": [
        {
          "name": "to",
          "type": "Float"
        }
      ],
      "returnType": "Float"
    },
    {
      "name": "write<Target>",
      "type": "func",
      "desc": "Writes a textual representation of this instance into the given output stream.",
      "params": [
        {
          "name": "to",
          "type": "inout Target"
        }
      ]
    },
    {
      "name": "customPlaygroundQuickLook",
      "type": "var",
      "datatype": "_PlaygroundQuickLook",
      "desc": "A custom playground Quick Look for the Float instance."
    },
    {
      "name": "magnitudeSquared",
      "type": "var",
      "datatype": "Double"
    },
    {
      "name": "scale",
      "type": "func",
      "params": [
        {
          "name": "by",
          "type": "Double"
        }
      ]
    },
    {
      "name": "+=",
      "type": "static func",
      "desc": "Adds two values and stores the result in the left-hand-side variable.",
      "params": [
        {
          "type": "inout Float"
        },
        {
          "type": "Float"
        }
      ]
    },
    {
      "name": "-=",
      "type": "static func",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.",
      "params": [
        {
          "type": "inout Float"
        },
        {
          "type": "Float"
        }
      ]
    }
  ]
}
