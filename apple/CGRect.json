{
  "type": "Structure",
  "name": "CGRect",
  "desc": "A structure that contains the location and dimensions of a rectangle.",
  "items": [
    {
      "name": "infinite",
      "type": "static let",
      "datatype": "CGRect",
      "desc": "A rectangle that has infinite extent."
    },
    {
      "name": "null",
      "type": "static let",
      "datatype": "CGRect",
      "desc": "The null rectangle, representing an invalid value."
    },
    {
      "name": "zero",
      "type": "static var",
      "datatype": "CGRect",
      "desc": "The rectangle whose origin and size are both zero."
    },
    {
      "name": "origin",
      "type": "var",
      "datatype": "CGPoint",
      "desc": "A point that specifies the coordinates of the rectangle’s origin."
    },
    {
      "name": "size",
      "type": "var",
      "datatype": "CGSize",
      "desc": "A size that specifies the height and width of the rectangle."
    },
    {
      "name": "height",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the height of a rectangle."
    },
    {
      "name": "width",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the width of a rectangle."
    },
    {
      "name": "minX",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the smallest value for the x-coordinate of the rectangle."
    },
    {
      "name": "midX",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the x- coordinate that establishes the center of a rectangle."
    },
    {
      "name": "maxX",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the largest value of the x-coordinate for the rectangle."
    },
    {
      "name": "minY",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the smallest value for the y-coordinate of the rectangle."
    },
    {
      "name": "midY",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the y-coordinate that establishes the center of the rectangle."
    },
    {
      "name": "maxY",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "Returns the largest value for the y-coordinate of the rectangle."
    },
    {
      "name": "standardized",
      "type": "var",
      "datatype": "CGRect",
      "desc": "Returns a rectangle with a positive width and height."
    },
    {
      "name": "integral",
      "type": "var",
      "datatype": "CGRect",
      "desc": "Returns the smallest rectangle that results from converting the source rectangle values to integers."
    },
    {
      "name": "applying",
      "type": "func",
      "desc": "Applies an affine transform to a rectangle.",
      "params": [
        {
          "type": "CGAffineTransform"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "insetBy",
      "type": "func",
      "desc": "Returns a rectangle that is smaller or larger than the source rectangle, with the same center point.",
      "params": [
        {
          "name": "dx",
          "type": "CGFloat"
        },
        {
          "name": "dy",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "offsetBy",
      "type": "func",
      "desc": "Returns a rectangle with an origin that is offset from that of the source rectangle.",
      "params": [
        {
          "name": "dx",
          "type": "CGFloat"
        },
        {
          "name": "dy",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "union",
      "type": "func",
      "desc": "Returns the smallest rectangle that contains the two source rectangles.",
      "params": [
        {
          "type": "CGRect"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "intersection",
      "type": "func",
      "desc": "Returns the intersection of two rectangles.",
      "params": [
        {
          "type": "CGRect"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "CGRectEdge",
      "type": "enum",
      "desc": "Coordinates that establish the edges of a rectangle."
    },
    {
      "name": "intersects",
      "type": "func",
      "desc": "Returns whether two rectangles intersect.",
      "params": [
        {
          "type": "CGRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "contains",
      "type": "func",
      "desc": "Returns whether a rectangle contains a specified point.",
      "params": [
        {
          "type": "CGPoint"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "contains",
      "type": "func",
      "desc": "Returns whether the first rectangle contains the second rectangle.",
      "params": [
        {
          "type": "CGRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isEmpty",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns whether a rectangle has zero width or height, or is a null rectangle."
    },
    {
      "name": "isInfinite",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns whether a rectangle is infinite."
    },
    {
      "name": "isNull",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns whether the rectangle is equal to the null rectangle."
    },
    {
      "name": "dictionaryRepresentation",
      "type": "var",
      "datatype": "CFDictionary",
      "desc": "Returns a dictionary representation of the provided rectangle."
    },
    {
      "name": "debugDescription",
      "type": "var",
      "datatype": "String"
    },
    {
      "name": "customMirror",
      "type": "var",
      "datatype": "Mirror",
      "desc": "A representation of the rectangle’s structure and display style for use in debugging."
    },
    {
      "name": "customPlaygroundQuickLook",
      "type": "var",
      "datatype": "PlaygroundQuickLook",
      "desc": "A representation of the rectangle for use in Playgrounds."
    },
    {
      "name": "equalTo",
      "type": "func",
      "desc": "Returns whether two rectangles are equal in size and position.",
      "params": [
        {
          "type": "CGRect"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "animatableData",
      "type": "var",
      "datatype": "CGRect.AnimatableData"
    },
    {
      "name": "clip",
      "type": "func",
      "params": []
    },
    {
      "name": "encode",
      "type": "func",
      "params": [
        {
          "name": "to",
          "type": "Encoder"
        }
      ]
    },
    {
      "name": "fill",
      "type": "func",
      "params": [
        {
          "name": "using",
          "type": "NSCompositingOperation"
        }
      ]
    },
    {
      "name": "frame",
      "type": "func",
      "params": [
        {
          "name": "withWidth",
          "type": "CGFloat"
        },
        {
          "name": "using",
          "type": "NSCompositingOperation"
        }
      ]
    },
    {
      "name": "inset",
      "type": "func",
      "desc": "Adjusts a rectangle by the given edge insets.",
      "params": [
        {
          "name": "by",
          "type": "UIEdgeInsets"
        }
      ],
      "returnType": "CGRect"
    },
    {
      "name": "==",
      "type": "static func",
      "params": [
        {
          "type": "CGRect"
        },
        {
          "type": "CGRect"
        }
      ],
      "returnType": "Bool"
    }
  ]
}
