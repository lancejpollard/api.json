{
  "type": "Class",
  "name": "UIViewController",
  "desc": "An object that manages a view hierarchy for your UIKit app.",
  "items": [
    {
      "name": "storyboard",
      "type": "var",
      "datatype": "UIStoryboard?",
      "desc": "The storyboard from which the view controller originated."
    },
    {
      "name": "nibName",
      "type": "var",
      "datatype": "String?",
      "desc": "The name of the view controller's nib file, if one was specified."
    },
    {
      "name": "nibBundle",
      "type": "var",
      "datatype": "Bundle?",
      "desc": "The view controller's nib bundle if it exists."
    },
    {
      "name": "view",
      "type": "var",
      "datatype": "UIView!",
      "desc": "The view that the controller manages."
    },
    {
      "name": "viewIfLoaded",
      "type": "var",
      "datatype": "UIView?",
      "desc": "The view controller’s view, or nil if the view is not yet loaded."
    },
    {
      "name": "isViewLoaded",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view is currently loaded into memory."
    },
    {
      "name": "loadView",
      "type": "func",
      "desc": "Creates the view that the controller manages.",
      "params": []
    },
    {
      "name": "viewDidLoad",
      "type": "func",
      "desc": "Called after the controller's view is loaded into memory.",
      "params": []
    },
    {
      "name": "loadViewIfNeeded",
      "type": "func",
      "desc": "Loads the view controller’s view if it has not yet been loaded.",
      "params": []
    },
    {
      "name": "title",
      "type": "var",
      "datatype": "String?",
      "desc": "A localized string that represents the view this controller manages."
    },
    {
      "name": "preferredContentSize",
      "type": "var",
      "datatype": "CGSize",
      "desc": "The preferred size for the view controller’s view."
    },
    {
      "name": "viewWillAppear",
      "type": "func",
      "desc": "Notifies the view controller that its view is about to be added to a view hierarchy.",
      "params": [
        {
          "type": "Bool"
        }
      ]
    },
    {
      "name": "viewDidAppear",
      "type": "func",
      "desc": "Notifies the view controller that its view was added to a view hierarchy.",
      "params": [
        {
          "type": "Bool"
        }
      ]
    },
    {
      "name": "viewWillDisappear",
      "type": "func",
      "desc": "Notifies the view controller that its view is about to be removed from a view hierarchy.",
      "params": [
        {
          "type": "Bool"
        }
      ]
    },
    {
      "name": "viewDidDisappear",
      "type": "func",
      "desc": "Notifies the view controller that its view was removed from a view hierarchy.",
      "params": [
        {
          "type": "Bool"
        }
      ]
    },
    {
      "name": "isBeingDismissed",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller is being dismissed."
    },
    {
      "name": "isBeingPresented",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller is being presented."
    },
    {
      "name": "isMovingFromParent",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller is being removed from a parent view controller."
    },
    {
      "name": "isMovingToParent",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller is being moved to a parent view controller."
    },
    {
      "name": "additionalSafeAreaInsets",
      "type": "var",
      "datatype": "UIEdgeInsets",
      "desc": "Custom insets that you specify to modify the view controller's safe area."
    },
    {
      "name": "viewSafeAreaInsetsDidChange",
      "type": "func",
      "desc": "Called to notify the view controller that the safe area insets of its root view changed.",
      "params": []
    },
    {
      "name": "viewRespectsSystemMinimumLayoutMargins",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller's view uses the system-defined minimum layout margins."
    },
    {
      "name": "systemMinimumLayoutMargins",
      "type": "var",
      "datatype": "NSDirectionalEdgeInsets",
      "desc": "The minimum layout margins for the view controller's root view."
    },
    {
      "name": "viewLayoutMarginsDidChange",
      "type": "func",
      "desc": "Called to notify the view controller that the layout margins of its root view changed.",
      "params": []
    },
    {
      "name": "edgesForExtendedLayout",
      "type": "var",
      "datatype": "UIRectEdge",
      "desc": "The edges that you extend for your view controller."
    },
    {
      "name": "extendedLayoutIncludesOpaqueBars",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether or not the extended layout includes opaque bars."
    },
    {
      "name": "viewWillLayoutSubviews",
      "type": "func",
      "desc": "Called to notify the view controller that its view is about to layout its subviews.",
      "params": []
    },
    {
      "name": "viewDidLayoutSubviews",
      "type": "func",
      "desc": "Called to notify the view controller that its view has just laid out its subviews.",
      "params": []
    },
    {
      "name": "updateViewConstraints",
      "type": "func",
      "desc": "Called when the view controller's view needs to update its constraints.",
      "params": []
    },
    {
      "name": "shouldAutorotate",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns a Boolean value indicating whether the view controller's contents should auto rotate."
    },
    {
      "name": "supportedInterfaceOrientations",
      "type": "var",
      "datatype": "UIInterfaceOrientationMask",
      "desc": "The interface orientations that the view controller supports."
    },
    {
      "name": "preferredInterfaceOrientationForPresentation",
      "type": "var",
      "datatype": "UIInterfaceOrientation",
      "desc": "Returns the interface orientation to use when presenting the view controller."
    },
    {
      "name": "attemptRotationToDeviceOrientation",
      "type": "class func",
      "desc": "Attempts to rotate all windows to the orientation of the device.",
      "params": []
    },
    {
      "name": "shouldPerformSegue",
      "type": "func",
      "desc": "Determines whether the segue with the specified identifier should be performed.",
      "params": [
        {
          "name": "withIdentifier",
          "type": "String"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "prepare",
      "type": "func",
      "desc": "Notifies the view controller that a segue is about to be performed.",
      "params": [
        {
          "name": "for",
          "type": "UIStoryboardSegue"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ]
    },
    {
      "name": "performSegue",
      "type": "func",
      "desc": "Initiates the segue with the specified identifier from the current view controller's storyboard file.",
      "params": [
        {
          "name": "withIdentifier",
          "type": "String"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ]
    },
    {
      "name": "allowedChildrenForUnwinding",
      "type": "func",
      "desc": "Returns an array of child view controllers to search for an unwind segue destination.",
      "params": [
        {
          "name": "from",
          "type": "UIStoryboardUnwindSegueSource"
        }
      ],
      "returnType": "[UIViewController]"
    },
    {
      "name": "childContaining",
      "type": "func",
      "desc": "Returns the child view controller that contains the source of the unwind segue.",
      "params": [
        {
          "type": "UIStoryboardUnwindSegueSource"
        }
      ],
      "returnType": "UIViewController?"
    },
    {
      "name": "canPerformUnwindSegueAction",
      "type": "func",
      "desc": "Called on a view controller to determine whether it responds to an unwind action.",
      "params": [
        {
          "type": "Selector"
        },
        {
          "name": "from",
          "type": "UIViewController"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "unwind",
      "type": "func",
      "desc": "Called when an unwind segue transitions to a new view controller.",
      "params": [
        {
          "name": "for",
          "type": "UIStoryboardSegue"
        },
        {
          "name": "towards",
          "type": "UIViewController"
        }
      ]
    },
    {
      "name": "show",
      "type": "func",
      "desc": "Presents a view controller in a primary context.",
      "params": [
        {
          "type": "UIViewController"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ]
    },
    {
      "name": "showDetailViewController",
      "type": "func",
      "desc": "Presents a view controller in a secondary (or detail) context.",
      "params": [
        {
          "type": "UIViewController"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ]
    },
    {
      "name": "modalPresentationStyle",
      "type": "var",
      "datatype": "UIModalPresentationStyle",
      "desc": "The presentation style for modally presented view controllers."
    },
    {
      "name": "UIModalPresentationStyle",
      "type": "enum",
      "desc": "Modal presentation styles available when presenting view controllers."
    },
    {
      "name": "modalTransitionStyle",
      "type": "var",
      "datatype": "UIModalTransitionStyle",
      "desc": "The transition style to use when presenting the view controller."
    },
    {
      "name": "UIModalTransitionStyle",
      "type": "enum",
      "desc": "Transition styles available when presenting view controllers."
    },
    {
      "name": "isModalInPresentation",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller enforces a modal behavior."
    },
    {
      "name": "definesPresentationContext",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether this view controller's view is covered when the view controller or one of its descendants presents a view controller."
    },
    {
      "name": "providesPresentationContextTransitionStyle",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the view controller specifies the transition style for view controllers it presents."
    },
    {
      "name": "disablesAutomaticKeyboardDismissal",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns a Boolean indicating whether the current input view is dismissed automatically when changing controls."
    },
    {
      "name": "showDetailTargetDidChangeNotification",
      "type": "class let",
      "datatype": "NSNotification.Name",
      "desc": "Posted when a split view controller is expanded or collapsed."
    },
    {
      "name": "transitioningDelegate",
      "type": "var",
      "datatype": "UIViewControllerTransitioningDelegate?",
      "desc": "The delegate object that provides transition animator, interactive controller, and custom presentation controller objects."
    },
    {
      "name": "transitionCoordinator",
      "type": "var",
      "datatype": "UIViewControllerTransitionCoordinator?",
      "desc": "Returns the active transition coordinator object."
    },
    {
      "name": "targetViewController",
      "type": "func",
      "desc": "Returns the view controller that responds to the action.",
      "params": [
        {
          "name": "forAction",
          "type": "Selector"
        },
        {
          "name": "sender",
          "type": "Any?"
        }
      ],
      "returnType": "UIViewController?"
    },
    {
      "name": "presentationController",
      "type": "var",
      "datatype": "UIPresentationController?",
      "desc": "The presentation controller that’s managing the current view controller."
    },
    {
      "name": "popoverPresentationController",
      "type": "var",
      "datatype": "UIPopoverPresentationController?",
      "desc": "The nearest popover presentation controller that is managing the current view controller."
    },
    {
      "name": "restoresFocusAfterTransition",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether an item that previously was focused should again become focused when the item's view controller becomes visible and focusable."
    },
    {
      "name": "collapseSecondaryViewController",
      "type": "func",
      "desc": "Called when a split view controller transitions to a compact-width size class.",
      "params": [
        {
          "type": "UIViewController"
        },
        {
          "name": "for",
          "type": "UISplitViewController"
        }
      ]
    },
    {
      "name": "separateSecondaryViewController",
      "type": "func",
      "desc": "Called when a split view controller transitions to a regular-width size class.",
      "params": [
        {
          "name": "for",
          "type": "UISplitViewController"
        }
      ],
      "returnType": "UIViewController?"
    },
    {
      "name": "overrideUserInterfaceStyle",
      "type": "var",
      "datatype": "UIUserInterfaceStyle",
      "desc": "The user interface style adopted by the view controller and all of its children."
    },
    {
      "name": "preferredUserInterfaceStyle",
      "type": "var",
      "datatype": "UIUserInterfaceStyle",
      "desc": "The preferred interface style for this view controller."
    },
    {
      "name": "childViewControllerForUserInterfaceStyle",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "The child view controller that supports the preferred user interface style."
    },
    {
      "name": "setNeedsUserInterfaceAppearanceUpdate",
      "type": "func",
      "desc": "Notifies the view controller that a change occurred that might affect the preferred interface style.",
      "params": []
    },
    {
      "name": "UIUserInterfaceStyle",
      "type": "enum",
      "desc": "Constants indicating the interface style for the app."
    },
    {
      "name": "children",
      "type": "var",
      "datatype": "[UIViewController]",
      "desc": "An array of view controllers that are children of the current view controller."
    },
    {
      "name": "addChild",
      "type": "func",
      "desc": "Adds the specified view controller as a child of the current view controller.",
      "params": [
        {
          "type": "UIViewController"
        }
      ]
    },
    {
      "name": "removeFromParent",
      "type": "func",
      "desc": "Removes the view controller from its parent.",
      "params": []
    },
    {
      "name": "shouldAutomaticallyForwardAppearanceMethods",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns a Boolean value indicating whether appearance methods are forwarded to child view controllers."
    },
    {
      "name": "beginAppearanceTransition",
      "type": "func",
      "desc": "Tells a child controller its appearance is about to change.",
      "params": [
        {
          "type": "Bool"
        },
        {
          "name": "animated",
          "type": "Bool"
        }
      ]
    },
    {
      "name": "endAppearanceTransition",
      "type": "func",
      "desc": "Tells a child controller its appearance has changed.",
      "params": []
    },
    {
      "name": "setOverrideTraitCollection",
      "type": "func",
      "desc": "Changes the traits assigned to the specified child view controller.",
      "params": [
        {
          "type": "UITraitCollection?"
        },
        {
          "name": "forChild",
          "type": "UIViewController"
        }
      ]
    },
    {
      "name": "overrideTraitCollection",
      "type": "func",
      "desc": "Retrieves the trait collection for a child view controller.",
      "params": [
        {
          "name": "forChild",
          "type": "UIViewController"
        }
      ],
      "returnType": "UITraitCollection?"
    },
    {
      "name": "hierarchyInconsistencyException",
      "type": "class let",
      "datatype": "NSExceptionName",
      "desc": "Raised if the view controller hierarchy is inconsistent with the view hierarchy."
    },
    {
      "name": "willMove",
      "type": "func",
      "desc": "Called just before the view controller is added or removed from a container view controller.",
      "params": [
        {
          "name": "toParent",
          "type": "UIViewController?"
        }
      ]
    },
    {
      "name": "didMove",
      "type": "func",
      "desc": "Called after the view controller is added or removed from a container view controller.",
      "params": [
        {
          "name": "toParent",
          "type": "UIViewController?"
        }
      ]
    },
    {
      "name": "presentingViewController",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "The view controller that presented this view controller."
    },
    {
      "name": "presentedViewController",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy."
    },
    {
      "name": "parent",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "The parent view controller of the recipient."
    },
    {
      "name": "splitViewController",
      "type": "var",
      "datatype": "UISplitViewController?",
      "desc": "The nearest ancestor in the view controller hierarchy that is a split view controller."
    },
    {
      "name": "navigationController",
      "type": "var",
      "datatype": "UINavigationController?",
      "desc": "The nearest ancestor in the view controller hierarchy that is a navigation controller."
    },
    {
      "name": "tabBarController",
      "type": "var",
      "datatype": "UITabBarController?",
      "desc": "The nearest ancestor in the view controller hierarchy that is a tab bar controller."
    },
    {
      "name": "navigationItem",
      "type": "var",
      "datatype": "UINavigationItem",
      "desc": "The navigation item used to represent the view controller in a parent's navigation bar."
    },
    {
      "name": "hidesBottomBarWhenPushed",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the toolbar at the bottom of the screen is hidden when the view controller is pushed on to a navigation controller."
    },
    {
      "name": "setToolbarItems",
      "type": "func",
      "desc": "Sets the toolbar items to be displayed along with the view controller.",
      "params": [
        {
          "type": "[UIBarButtonItem]?"
        },
        {
          "name": "animated",
          "type": "Bool"
        }
      ]
    },
    {
      "name": "toolbarItems",
      "type": "var",
      "datatype": "[UIBarButtonItem]?",
      "desc": "The toolbar items associated with the view controller."
    },
    {
      "name": "tabBarItem",
      "type": "var",
      "datatype": "UITabBarItem!",
      "desc": "The tab bar item that represents the view controller when added to a tab bar controller."
    },
    {
      "name": "tabBarObservedScrollView",
      "type": "var",
      "datatype": "UIScrollView?",
      "desc": "The full-screen scroll view to synchronize with a scrolling tab bar."
    },
    {
      "name": "extensionContext",
      "type": "var",
      "datatype": "NSExtensionContext?",
      "desc": "Returns the extension context of the view controller."
    },
    {
      "name": "preferredScreenEdgesDeferringSystemGestures",
      "type": "var",
      "datatype": "UIRectEdge",
      "desc": "The screen edges for which you want your gestures to take precedence over the system gestures"
    },
    {
      "name": "childForScreenEdgesDeferringSystemGestures",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "Returns the child view controller that should be queried to see if its gestures should take precedence."
    },
    {
      "name": "setNeedsUpdateOfScreenEdgesDeferringSystemGestures",
      "type": "func",
      "desc": "Call this method when you change the screen edges that you use for deferring system gestures.",
      "params": []
    },
    {
      "name": "prefersHomeIndicatorAutoHidden",
      "type": "var",
      "datatype": "Bool",
      "desc": "Returns a Boolean indicating whether the system is allowed to hide the visual indicator for returning to the Home screen."
    },
    {
      "name": "childForHomeIndicatorAutoHidden",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "Returns the child view controller that is consulted about its preference for displaying a visual indicator for returning to the Home screen."
    },
    {
      "name": "setNeedsUpdateOfHomeIndicatorAutoHidden",
      "type": "func",
      "desc": "Notifies UIKit that your view controller updated its preference regarding the visual indicator for returning to the Home screen.",
      "params": []
    },
    {
      "name": "childForStatusBarHidden",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "Called when the system needs the view controller to use for determining status bar hidden/unhidden state."
    },
    {
      "name": "childForStatusBarStyle",
      "type": "var",
      "datatype": "UIViewController?",
      "desc": "Called when the system needs the view controller to use for determining status bar style."
    },
    {
      "name": "preferredStatusBarStyle",
      "type": "var",
      "datatype": "UIStatusBarStyle",
      "desc": "The preferred status bar style for the view controller."
    },
    {
      "name": "prefersStatusBarHidden",
      "type": "var",
      "datatype": "Bool",
      "desc": "Specifies whether the view controller prefers the status bar to be hidden or shown."
    },
    {
      "name": "modalPresentationCapturesStatusBarAppearance",
      "type": "var",
      "datatype": "Bool",
      "desc": "Specifies whether a view controller, presented non-fullscreen, takes over control of status bar appearance from the presenting view controller."
    },
    {
      "name": "preferredStatusBarUpdateAnimation",
      "type": "var",
      "datatype": "UIStatusBarAnimation",
      "desc": "Specifies the animation style to use for hiding and showing the status bar for the view controller."
    },
    {
      "name": "setNeedsStatusBarAppearanceUpdate",
      "type": "func",
      "desc": "Indicates to the system that the view controller status bar attributes have changed.",
      "params": []
    },
    {
      "name": "performsActionsWhilePresentingModally",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller performs menu-related actions."
    },
    {
      "name": "addKeyCommand",
      "type": "func",
      "desc": "Associates the specified keyboard shortcut with the view controller.",
      "params": [
        {
          "type": "UIKeyCommand"
        }
      ]
    },
    {
      "name": "removeKeyCommand",
      "type": "func",
      "desc": "Removes the key command from the view controller.",
      "params": [
        {
          "type": "UIKeyCommand"
        }
      ]
    },
    {
      "name": "isEditing",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value indicating whether the view controller currently allows the user to edit the view contents."
    },
    {
      "name": "setEditing",
      "type": "func",
      "desc": "Sets whether the view controller shows an editable view.",
      "params": [
        {
          "type": "Bool"
        },
        {
          "name": "animated",
          "type": "Bool"
        }
      ]
    },
    {
      "name": "editButtonItem",
      "type": "var",
      "datatype": "UIBarButtonItem",
      "desc": "Returns a bar button item that toggles its title and associated state between Edit and Done."
    },
    {
      "name": "didReceiveMemoryWarning",
      "type": "func",
      "desc": "Sent to the view controller when the app receives a memory warning.",
      "params": []
    },
    {
      "name": "restorationIdentifier",
      "type": "var",
      "datatype": "String?",
      "desc": "The identifier that determines whether the view controller supports state restoration."
    },
    {
      "name": "restorationClass",
      "type": "var",
      "datatype": "UIViewControllerRestoration.Type?",
      "desc": "The class responsible for recreating this view controller when restoring the app's state."
    },
    {
      "name": "encodeRestorableState",
      "type": "func",
      "desc": "Encodes state-related information for the view controller.",
      "params": [
        {
          "name": "with",
          "type": "NSCoder"
        }
      ]
    },
    {
      "name": "decodeRestorableState",
      "type": "func",
      "desc": "Decodes and restores state-related information for the view controller.",
      "params": [
        {
          "name": "with",
          "type": "NSCoder"
        }
      ]
    },
    {
      "name": "applicationFinishedRestoringState",
      "type": "func",
      "desc": "Called on restored view controllers after other object decoding is complete.",
      "params": []
    },
    {
      "name": "playgroundLiveViewRepresentation",
      "type": "var",
      "datatype": "PlaygroundLiveViewRepresentation"
    },
    {
      "name": "childViewControllerForTouchBar",
      "type": "var",
      "datatype": "UIViewController?"
    },
    {
      "name": "setNeedsTouchBarUpdate",
      "type": "func",
      "params": []
    }
  ]
}
