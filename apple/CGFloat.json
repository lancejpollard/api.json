{
  "type": "Structure",
  "name": "CGFloat",
  "desc": "The basic type for floating-point scalar values in Core Graphics and related frameworks.",
  "items": [
    {
      "name": "binade",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The least-magnitude member of the binade of self."
    },
    {
      "name": "bitPattern",
      "type": "var",
      "datatype": "UInt"
    },
    {
      "name": "customMirror",
      "type": "var",
      "datatype": "Mirror",
      "desc": "A mirror that reflects the CGFloat instance."
    },
    {
      "name": "description",
      "type": "var",
      "datatype": "String",
      "desc": "A textual representation of self."
    },
    {
      "name": "exponent",
      "type": "var",
      "datatype": "Int",
      "desc": "The integer part of the base-r logarithm of the magnitude of self, where r is the radix (2 for binary, 10 for decimal). Implements the IEEE 754 logB operation."
    },
    {
      "name": "exponentBitPattern",
      "type": "var",
      "datatype": "UInt",
      "desc": "The raw encoding of the exponent field of the floating-point value."
    },
    {
      "name": "floatingPointClass",
      "type": "var",
      "datatype": "FloatingPointClassification"
    },
    {
      "name": "hashValue",
      "type": "var",
      "datatype": "Int",
      "desc": "The hash value."
    },
    {
      "name": "isCanonical",
      "type": "var",
      "datatype": "Bool",
      "desc": "True if and only if self is canonical."
    },
    {
      "name": "isFinite",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is zero, subnormal, or normal (not infinity or NaN)."
    },
    {
      "name": "isInfinite",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is infinity."
    },
    {
      "name": "isNaN",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is NaN."
    },
    {
      "name": "isNormal",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is normal (not zero, subnormal, infinity, or NaN)."
    },
    {
      "name": "isSignalingNaN",
      "type": "var",
      "datatype": "Bool",
      "desc": "True if and only if self is a signaling NaN."
    },
    {
      "name": "isSubnormal",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is subnormal."
    },
    {
      "name": "isZero",
      "type": "var",
      "datatype": "Bool",
      "desc": "true iff self is +0.0 or -0.0."
    },
    {
      "name": "magnitude",
      "type": "var",
      "datatype": "CGFloat"
    },
    {
      "name": "magnitudeSquared",
      "type": "var",
      "datatype": "Double"
    },
    {
      "name": "native",
      "type": "var",
      "datatype": "CGFloat.NativeType",
      "desc": "The native value."
    },
    {
      "name": "native",
      "type": "var",
      "datatype": "CGFloat.NativeType",
      "desc": "The native value."
    },
    {
      "name": "nextDown",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The greatest representable value that compares less than this value."
    },
    {
      "name": "nextUp",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The least representable value that compares greater than self."
    },
    {
      "name": "sign",
      "type": "var",
      "datatype": "FloatingPointSign",
      "desc": "minus if the sign bit of self is set, and plus otherwise. Implements the IEEE 754 signbit operation."
    },
    {
      "name": "significand",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The significant digits, or mantissa, of the floating-point number."
    },
    {
      "name": "significandBitPattern",
      "type": "var",
      "datatype": "UInt",
      "desc": "The raw encoding of the significand field of the floating-point value."
    },
    {
      "name": "significandWidth",
      "type": "var",
      "datatype": "Int",
      "desc": "The number of bits required to represent significand."
    },
    {
      "name": "ulp",
      "type": "var",
      "datatype": "CGFloat",
      "desc": "The unit in the last place of self."
    },
    {
      "name": "exponentBitCount",
      "type": "static var",
      "datatype": "Int",
      "desc": "The number of bits used to represent the exponent."
    },
    {
      "name": "greatestFiniteMagnitude",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The greatest finite number."
    },
    {
      "name": "infinity",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The positive infinity."
    },
    {
      "name": "leastNonzeroMagnitude",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The least positive number."
    },
    {
      "name": "leastNormalMagnitude",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The least positive normal number."
    },
    {
      "name": "nan",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "A quiet NaN."
    },
    {
      "name": "pi",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The mathematical constant π (3.14159…)."
    },
    {
      "name": "radix",
      "type": "static var",
      "datatype": "Int",
      "desc": "The radix, or base of exponentiation, for a floating-point type."
    },
    {
      "name": "signalingNaN",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "A signaling NaN (not-a-number)."
    },
    {
      "name": "significandBitCount",
      "type": "static var",
      "datatype": "Int",
      "desc": "For fixed-width floating-point types, this is the number of fractional significand bits."
    },
    {
      "name": "ulpOfOne",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The unit in the last place of 1.0."
    },
    {
      "name": "zero",
      "type": "static var",
      "datatype": "CGFloat",
      "desc": "The zero value."
    },
    {
      "name": "addProduct",
      "type": "func",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "addingProduct",
      "type": "func",
      "desc": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "advanced",
      "type": "func",
      "desc": "Returns a Self x such that self.distance(to: x) approximates n.",
      "params": [
        {
          "name": "by",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "distance",
      "type": "func",
      "desc": "Returns a stride x such that self.advanced(by: x) approximates other.",
      "params": [
        {
          "name": "to",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "encode",
      "type": "func",
      "params": [
        {
          "name": "to",
          "type": "Encoder"
        }
      ]
    },
    {
      "name": "formRemainder",
      "type": "func",
      "params": [
        {
          "name": "dividingBy",
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "formSquareRoot",
      "type": "func",
      "params": []
    },
    {
      "name": "formTruncatingRemainder",
      "type": "func",
      "desc": "Replace self with the remainder of self divided by other using truncating division. Similar to the C standard library function fmod.",
      "params": [
        {
          "name": "dividingBy",
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "hash",
      "type": "func",
      "params": [
        {
          "name": "into",
          "type": "inout Hasher"
        }
      ]
    },
    {
      "name": "isEqual",
      "type": "func",
      "desc": "IEEE 754 equality predicate.",
      "params": [
        {
          "name": "to",
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isLess",
      "type": "func",
      "desc": "IEEE 754 less-than predicate.",
      "params": [
        {
          "name": "than",
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isLessThanOrEqualTo",
      "type": "func",
      "desc": "IEEE 754 less-than-or-equal predicate.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "isTotallyOrdered",
      "type": "func",
      "desc": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.",
      "params": [
        {
          "name": "belowOrEqualTo",
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "negate",
      "type": "func",
      "desc": "Replace self with its additive inverse.",
      "params": []
    },
    {
      "name": "remainder",
      "type": "func",
      "desc": "Returns the remainder of this value divided by the given value.",
      "params": [
        {
          "name": "dividingBy",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "round",
      "type": "func",
      "desc": "Rounds this value to an integral value using “schoolbook rounding.”",
      "params": []
    },
    {
      "name": "round",
      "type": "func",
      "params": [
        {
          "type": "FloatingPointRoundingRule"
        }
      ]
    },
    {
      "name": "rounded",
      "type": "func",
      "desc": "Returns this value rounded to an integral value using “schoolbook rounding.”",
      "params": [],
      "returnType": "CGFloat"
    },
    {
      "name": "rounded",
      "type": "func",
      "desc": "Returns this value rounded to an integral value using the specified rounding rule.",
      "params": [
        {
          "type": "FloatingPointRoundingRule"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "scale",
      "type": "func",
      "params": [
        {
          "name": "by",
          "type": "Double"
        }
      ]
    },
    {
      "name": "squareRoot",
      "type": "func",
      "desc": "Returns the square root of the value, rounded to a representable value.",
      "params": [],
      "returnType": "CGFloat"
    },
    {
      "name": "truncatingRemainder",
      "type": "func",
      "desc": "Returns the remainder of this value divided by the given value using truncating division.",
      "params": [
        {
          "name": "dividingBy",
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "maximum",
      "type": "static func",
      "desc": "Returns the greater of the two given values.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "maximumMagnitude",
      "type": "static func",
      "desc": "Returns the value with greater magnitude.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "minimum",
      "type": "static func",
      "desc": "Returns the lesser of the two given values.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "minimumMagnitude",
      "type": "static func",
      "desc": "Returns the value with lesser magnitude.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "random",
      "type": "static func",
      "desc": "Returns a random value within the specified range.",
      "params": [
        {
          "name": "in",
          "type": "ClosedRange<CGFloat>"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "random",
      "type": "static func",
      "desc": "Returns a random value within the specified range.",
      "params": [
        {
          "name": "in",
          "type": "Range<CGFloat>"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "random<T>",
      "type": "static func",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "in",
          "type": "ClosedRange<CGFloat>"
        },
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "random<T>",
      "type": "static func",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness.",
      "params": [
        {
          "name": "in",
          "type": "Range<CGFloat>"
        },
        {
          "name": "using",
          "type": "inout T"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "!=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are not equal.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "*",
      "type": "static func",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "*=",
      "type": "static func",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "+",
      "type": "static func",
      "desc": "Returns the given number unchanged.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "+",
      "type": "static func",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "+=",
      "type": "static func",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "+=",
      "type": "static func",
      "desc": "Adds two values and stores the result in the left-hand-side variable.",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "-",
      "type": "static func",
      "desc": "Returns the additive inverse of the specified value.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "-",
      "type": "static func",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "-=",
      "type": "static func",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "-=",
      "type": "static func",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a partial range extending upward from a lower bound.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "PartialRangeFrom<CGFloat>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a partial range up to, and including, its upper bound.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "PartialRangeThrough<CGFloat>"
    },
    {
      "name": "...",
      "type": "static func",
      "desc": "Returns a closed range that contains both of its bounds.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "ClosedRange<CGFloat>"
    },
    {
      "name": "..<",
      "type": "static func",
      "desc": "Returns a partial range up to, but not including, its upper bound.",
      "params": [
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "PartialRangeUpTo<CGFloat>"
    },
    {
      "name": "..<",
      "type": "static func",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Range<CGFloat>"
    },
    {
      "name": "/",
      "type": "static func",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "CGFloat"
    },
    {
      "name": "/=",
      "type": "static func",
      "params": [
        {
          "type": "inout CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ]
    },
    {
      "name": "<",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "<=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "==",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are equal.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "==",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether two values are equal.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": ">=",
      "type": "static func",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.",
      "params": [
        {
          "type": "CGFloat"
        },
        {
          "type": "CGFloat"
        }
      ],
      "returnType": "Bool"
    }
  ]
}
