{
  "type": "Class",
  "name": "NSButton",
  "desc": "A control that defines an area on the screen that can be used to trigger actions.",
  "items": [
    {
      "name": "setButtonType",
      "type": "func",
      "desc": "Sets the button’s type, which affects its user interface and behavior when clicked.",
      "params": [
        {
          "type": "NSButton.ButtonType"
        }
      ]
    },
    {
      "name": "getPeriodicDelay",
      "type": "func",
      "desc": "Returns by reference the delay and interval periods for a continuous button.",
      "params": [
        {
          "type": "UnsafeMutablePointer<Float>"
        },
        {
          "name": "interval",
          "type": "UnsafeMutablePointer<Float>"
        }
      ]
    },
    {
      "name": "setPeriodicDelay",
      "type": "func",
      "desc": "Sets the message delay and interval periods for a continuous button.",
      "params": [
        {
          "type": "Float"
        },
        {
          "name": "interval",
          "type": "Float"
        }
      ]
    },
    {
      "name": "alternateTitle",
      "type": "var",
      "datatype": "String",
      "desc": "The title that the button displays when the button is in an on state."
    },
    {
      "name": "attributedTitle",
      "type": "var",
      "datatype": "NSAttributedString",
      "desc": "The title that the button displays in an off state, as an attributed string."
    },
    {
      "name": "attributedAlternateTitle",
      "type": "var",
      "datatype": "NSAttributedString",
      "desc": "The title that the button displays as an attributed string when the button is in an on state."
    },
    {
      "name": "title",
      "type": "var",
      "datatype": "String",
      "desc": "The title displayed on the button when it’s in an off state."
    },
    {
      "name": "sound",
      "type": "var",
      "datatype": "NSSound?",
      "desc": "The sound that plays when the user clicks the button."
    },
    {
      "name": "isSpringLoaded",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether spring loading is enabled for the button."
    },
    {
      "name": "maxAcceleratorLevel",
      "type": "var",
      "datatype": "Int",
      "desc": "An integer value indicating the maximum pressure level for a button of type NSMultiLevelAcceleratorButton."
    },
    {
      "name": "image",
      "type": "var",
      "datatype": "NSImage?",
      "desc": "The image that appears on the button when it’s in an off state, or nil if there is no such image."
    },
    {
      "name": "alternateImage",
      "type": "var",
      "datatype": "NSImage?",
      "desc": "An alternate image that appears on the button when the button is in an on state."
    },
    {
      "name": "imagePosition",
      "type": "var",
      "datatype": "NSControl.ImagePosition",
      "desc": "The position of the button’s image relative to its title."
    },
    {
      "name": "NSControl.ImagePosition",
      "type": "enum",
      "desc": "Constants for specifying the position of a button’s image relative to its title."
    },
    {
      "name": "isBordered",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that determines whether the button has a border."
    },
    {
      "name": "isTransparent",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the button is transparent."
    },
    {
      "name": "bezelStyle",
      "type": "var",
      "datatype": "NSButton.BezelStyle",
      "desc": "The appearance of the button’s border."
    },
    {
      "name": "bezelColor",
      "type": "var",
      "datatype": "NSColor?",
      "desc": "The color of the button's bezel, in appearances that support it."
    },
    {
      "name": "showsBorderOnlyWhileMouseInside",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that determines whether the button displays its border only when the pointer is over it."
    },
    {
      "name": "imageHugsTitle",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that determines how the button’s image and title are positioned together within the button bezel."
    },
    {
      "name": "imageScaling",
      "type": "var",
      "datatype": "NSImageScaling",
      "desc": "The scaling mode applied to make the cell’s image fit the frame of the image view."
    },
    {
      "name": "allowsMixedState",
      "type": "var",
      "datatype": "Bool",
      "desc": "A Boolean value that indicates whether the button allows a mixed state."
    },
    {
      "name": "state",
      "type": "var",
      "datatype": "NSControl.StateValue",
      "desc": "The button’s state."
    },
    {
      "name": "setNextState",
      "type": "func",
      "desc": "Sets the button to its next state.",
      "params": []
    },
    {
      "name": "highlight",
      "type": "func",
      "desc": "Highlights (or unhighlights) the button.",
      "params": [
        {
          "type": "Bool"
        }
      ]
    },
    {
      "name": "keyEquivalent",
      "type": "var",
      "datatype": "String",
      "desc": "The key-equivalent character of the button."
    },
    {
      "name": "keyEquivalentModifierMask",
      "type": "var",
      "datatype": "NSEvent.ModifierFlags",
      "desc": "The mask specifying the modifier keys for the button’s key equivalent."
    },
    {
      "name": "performKeyEquivalent",
      "type": "func",
      "desc": "Checks the button's key equivalent against the specified event and, if they match, simulates the button being clicked.",
      "params": [
        {
          "name": "with",
          "type": "NSEvent"
        }
      ],
      "returnType": "Bool"
    },
    {
      "name": "activeCompressionOptions",
      "type": "var",
      "datatype": "NSUserInterfaceCompressionOptions"
    },
    {
      "name": "contentTintColor",
      "type": "var",
      "datatype": "NSColor?"
    },
    {
      "name": "compress",
      "type": "func",
      "params": [
        {
          "name": "withPrioritizedCompressionOptions",
          "type": "[NSUserInterfaceCompressionOptions]"
        }
      ]
    },
    {
      "name": "minimumSize",
      "type": "func",
      "params": [
        {
          "name": "withPrioritizedCompressionOptions",
          "type": "[NSUserInterfaceCompressionOptions]"
        }
      ],
      "returnType": "NSSize"
    }
  ]
}
