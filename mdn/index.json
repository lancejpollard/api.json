[
  {
    "title": "AbsoluteOrientationSensor",
    "calls": {
      "constructors": [
        {
          "term": "AbsoluteOrientationSensor.AbsoluteOrientationSensor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbsoluteOrientationSensor/AbsoluteOrientationSensor",
          "desc": "Creates a new AbsoluteOrientationSensor object."
        }
      ]
    }
  },
  {
    "title": "AbstractRange",
    "calls": {
      "properties": [
        {
          "term": "collapsed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/collapsed",
          "desc": "A Boolean value which is true if the range is collapsed. A collapsed range is one whose start position and end position are the same, resulting in a zero-character-long range."
        },
        {
          "term": "endContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endContainer",
          "desc": "The DOM Node in which the end of the range, as specified by the endOffset property, is located."
        },
        {
          "term": "endOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endOffset",
          "desc": "An integer value indicating the offset, in characters, from the beginning of the node's contents to the beginning of the range represented by the range object. This value must be less than the length of the endContainer node."
        },
        {
          "term": "startContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startContainer",
          "desc": "The DOM Node in which the beginning of the range, as specified by the startOffset property, is located."
        },
        {
          "term": "startOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startOffset",
          "desc": "An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer."
        }
      ]
    }
  },
  {
    "title": "AbstractWorker",
    "calls": {
      "handlers": [
        {
          "term": "AbstractWorker.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
          "desc": "An EventListener which is invoked whenever an ErrorEvent of type error bubbles through the worker."
        }
      ]
    }
  },
  {
    "title": "Accelerometer",
    "calls": {
      "constructors": [
        {
          "term": "Accelerometer.Accelerometer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer/Accelerometer",
          "desc": "Creates a new Accelerometer object."
        }
      ],
      "properties": [
        {
          "term": "Accelerometer.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer/x",
          "desc": "Returns a double containing the acceleration of the device along the device's x axis."
        },
        {
          "term": "Accelerometer.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer/y",
          "desc": "Returns a double containing the acceleration of the device along the device's y axis."
        },
        {
          "term": "Accelerometer.z Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer/z",
          "desc": "Returns a double containing the acceleration of the device along the device's z axis."
        }
      ]
    }
  },
  {
    "title": "AddressErrors",
    "calls": {
      "properties": [
        {
          "term": "addressLine",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/addressLine",
          "desc": "A DOMString which, if present, indicates that the addressLine property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "city",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/city",
          "desc": "A DOMString which, if present, indicates that the city property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "country",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/country",
          "desc": "A DOMString which, if present, indicates that the country property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "dependentLocality",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/dependentLocality",
          "desc": "A DOMString which, if present, indicates that the dependentLocality property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "organization",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/organization",
          "desc": "A DOMString which, if present, indicates that the organization property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "phone",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/phone",
          "desc": "A DOMString which, if present, indicates that the phone property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "postalCode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/postalCode",
          "desc": "A DOMString which, if present, indicates that the postalCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "recipient",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/recipient",
          "desc": "A DOMString which, if present, indicates that the recipient property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "region",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/region",
          "desc": "A DOMString which, if present, indicates that the region property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "regionCode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/regionCode",
          "desc": "A DOMString which, if present, indicates that the regionCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        },
        {
          "term": "sortingCode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors/sortingCode",
          "desc": "A DOMString which, if present, indicates that the sortingCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
        }
      ]
    }
  },
  {
    "title": "AesCbcParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to AES-CBC."
        },
        {
          "term": "iv",
          "link": null,
          "desc": "A BufferSource. The initialization vector. Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret (for example, it may be transmitted unencrypted along with the ciphertext)."
        }
      ]
    }
  },
  {
    "title": "AesCtrParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to AES-CTR."
        },
        {
          "term": "counter",
          "link": null,
          "desc": "A BufferSource — the initial value of the counter block. This must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter."
        },
        {
          "term": "length",
          "link": null,
          "desc": "A Number — the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap: if the message is n blocks and the counter is m bits long, then the following must be true: n <= 2m. The NIST SP800-38A standard, which defines CTR, suggests that the counter should occupy half of the counter block (see Appendix B.2), so for AES it would be 64."
        }
      ]
    }
  },
  {
    "title": "AesGcmParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to AES-GCM."
        },
        {
          "term": "iv",
          "link": null,
          "desc": "A BufferSource — the initialization vector. This must be unique for every encryption operation carried out with a given key. Put another way: never reuse an IV with the same key. The AES-GCM specification recommends that the IV should be 96 bits long, and typically contains bits from a random number generator. Section 8.2 of the specification outlines methods for constructing IVs. Note that the IV does not have to be secret, just unique: so it is OK, for example, to transmit it in the clear alongside the encrypted message."
        },
        {
          "term": "additionalData Optional",
          "link": null,
          "desc": "A BufferSource. This contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If additionalData is given here then the same data must be given in the corresponding call to decrypt(): if the data given to the decrypt() call does not match the original data, the decryption will throw an exception. This gives you a way to authenticate associated data without having to encrypt it. The bit length of additionalData must be ≤ 264-1. The additionalData property is optional and may be omitted without compromising the security of the encryption operation."
        },
        {
          "term": "tagLength Optional",
          "link": null,
          "desc": "A Number. This determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption. According to the Web Crypto specification this must have one of the following values: 32, 64, 96, 104, 112, 120, or 128. The AES-GCM specification recommends that it should be 96, 104, 112, 120 or 128, although 32 or 64 bits may be acceptable in some applications: Appendix C of the specification provides additional guidance here. tagLength is optional and defaults to 128 if it is not specified."
        }
      ]
    }
  },
  {
    "title": "AesKeyGenParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to AES-CBC, AES-CTR, AES-GCM, or AES-KW, depending on the algorithm you want to use."
        },
        {
          "term": "length",
          "link": null,
          "desc": "A Number — the length in bits of the key to generate. This must be one of: 128, 192, or 256."
        }
      ]
    }
  },
  {
    "title": "AmbientLightSensor",
    "calls": {
      "constructors": [
        {
          "term": "AmbientLightSensor.AmbientLightSensor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor/AmbientLightSensor",
          "desc": "Creates a new AmbientLightSensor object."
        }
      ],
      "properties": [
        {
          "term": "AmbientLightSensor.illuminance",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor/illuminance",
          "desc": "Returns the current light level in lux of the ambient light level around the hosting device."
        }
      ]
    }
  },
  {
    "title": "AnalyserNode",
    "calls": {
      "constructors": [
        {
          "term": "AnalyserNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/AnalyserNode",
          "desc": "Creates a new instance of an AnalyserNode object."
        }
      ],
      "properties": [
        {
          "term": "AnalyserNode.fftSize",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize",
          "desc": "Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain."
        },
        {
          "term": "AnalyserNode.frequencyBinCount Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount",
          "desc": "Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization."
        },
        {
          "term": "AnalyserNode.minDecibels",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels",
          "desc": "Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using getByteFrequencyData()."
        },
        {
          "term": "AnalyserNode.maxDecibels",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels",
          "desc": "Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using getByteFrequencyData()."
        },
        {
          "term": "AnalyserNode.smoothingTimeConstant",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant",
          "desc": "Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother."
        }
      ],
      "methods": [
        {
          "term": "AnalyserNode.getFloatFrequencyData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData",
          "desc": "Copies the current frequency data into a Float32Array array passed into it."
        },
        {
          "term": "AnalyserNode.getByteFrequencyData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData",
          "desc": "Copies the current frequency data into a Uint8Array (unsigned byte array) passed into it."
        },
        {
          "term": "AnalyserNode.getFloatTimeDomainData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData",
          "desc": "Copies the current waveform, or time-domain, data into a Float32Array array passed into it."
        },
        {
          "term": "AnalyserNode.getByteTimeDomainData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData",
          "desc": "Copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it."
        }
      ]
    }
  },
  {
    "title": "ANGLE_instanced_arrays",
    "calls": {
      "methods": [
        {
          "term": "ext.drawArraysInstancedANGLE()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE",
          "desc": "Behaves identically to gl.drawArrays() except that multiple instances of the range of elements are executed, and the instance advances for each iteration."
        },
        {
          "term": "ext.drawElementsInstancedANGLE()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE",
          "desc": "Behaves identically to gl.drawElements() except that multiple instances of the set of elements are executed and the instance advances between each set."
        },
        {
          "term": "ext.vertexAttribDivisorANGLE()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE",
          "desc": "Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE()."
        }
      ]
    }
  },
  {
    "title": "Animation",
    "calls": {
      "constructors": [
        {
          "term": "Animation()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation",
          "desc": "Creates a new Animation object instance."
        }
      ],
      "properties": [
        {
          "term": "Animation.currentTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime",
          "desc": "The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a timeline, is inactive or hasn't been played yet, its value is null."
        },
        {
          "term": "Animation.effect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect",
          "desc": "Gets and sets the AnimationEffect associated with this animation. This will usually be a KeyframeEffect object."
        },
        {
          "term": "Animation.finished Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished",
          "desc": "Returns the current finished Promise for this animation."
        },
        {
          "term": "Animation.id",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/id",
          "desc": "Gets and sets the String used to identify the animation."
        },
        {
          "term": "Animation.pending Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending",
          "desc": "Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation."
        },
        {
          "term": "Animation.playState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState",
          "desc": "Returns an enumerated value describing the playback state of an animation."
        },
        {
          "term": "Animation.playbackRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate",
          "desc": "Gets or sets the playback rate of the animation."
        },
        {
          "term": "Animation.ready Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready",
          "desc": "Returns the current ready Promise for this animation."
        },
        {
          "term": "animation.replaceState",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/replaceState",
          "desc": "Returns the replace state of the animation. This will be active if the animation has been replaced, or persisted if Animation.persist() has been invoked on it."
        },
        {
          "term": "Animation.startTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime",
          "desc": "Gets or sets the scheduled time when an animation's playback should begin."
        },
        {
          "term": "Animation.timeline",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline",
          "desc": "Gets or sets the timeline associated with this animation."
        }
      ],
      "handlers": [
        {
          "term": "Animation.oncancel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel",
          "desc": "Gets and sets the event handler for the cancel event."
        },
        {
          "term": "Animation.onfinish",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish",
          "desc": "Gets and sets the event handler for the finish event."
        },
        {
          "term": "animation.onremove",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/onremove",
          "desc": "Allows you to set and run an event handler that fires when the animation is removed (i.e., put into an active replace state)."
        }
      ],
      "methods": [
        {
          "term": "Animation.cancel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/cancel",
          "desc": "Clears all keyframeEffects caused by this animation and aborts its playback."
        },
        {
          "term": "animation.commitStyles()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/commitStyles",
          "desc": "Commits the end styling state of an animation to the element being animated, even after that animation has been removed. It will cause the end styling state to be written to the element being animated, in the form of properties inside a style attribute."
        },
        {
          "term": "Animation.finish()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish",
          "desc": "Seeks either end of an animation, depending on whether the animation is playing or reversing."
        },
        {
          "term": "Animation.pause()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/pause",
          "desc": "Suspends playing of an animation."
        },
        {
          "term": "animation.persist()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/persist",
          "desc": "Explicitly persists an animation, when it would otherwise be removed due to the browser's Automatically removing filling animations behavior."
        },
        {
          "term": "Animation.play()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/play",
          "desc": "Starts or resumes playing of an animation, or begins the animation again if it previously finished."
        },
        {
          "term": "Animation.reverse()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/reverse",
          "desc": "Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning."
        },
        {
          "term": "Animation.updatePlaybackRate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Animation/updatePlaybackRate",
          "desc": "Sets the speed of an animation after first synchronizing its playback position."
        }
      ]
    }
  },
  {
    "title": "AnimationEffect",
    "calls": {
      "methods": [
        {
          "term": "AnimationEffect.getTiming()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getTiming",
          "desc": "Returns the EffectTiming object associated with the animation containing all the animation's timing values."
        },
        {
          "term": "AnimationEffect.getComputedTiming()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getComputedTiming",
          "desc": "Returns the calculated timing properties for this AnimationEffect."
        },
        {
          "term": "AnimationEffect.updateTiming()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/updateTiming",
          "desc": "Updates the specified timing properties of this AnimationEffect."
        }
      ]
    }
  },
  {
    "title": "AnimationTimeline",
    "calls": {
      "properties": [
        {
          "term": "AnimationTimeline.currentTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline/currentTime",
          "desc": "Returns the time value in milliseconds for this timeline or null if this timeline is inactive."
        }
      ]
    }
  },
  {
    "title": "ArrayBufferView",
    "calls": {}
  },
  {
    "title": "Attr",
    "calls": {
      "properties": [
        {
          "term": "name Read only",
          "link": "",
          "desc": "The attribute's name."
        },
        {
          "term": "namespaceURI Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI",
          "desc": "A DOMString representing the namespace URI of the attribute, or null if there is no namespace."
        },
        {
          "term": "localName Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/localName",
          "desc": "A DOMString representing the local part of the qualified name of the attribute."
        },
        {
          "term": "prefix Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/prefix",
          "desc": "A DOMString representing the namespace prefix of the attribute, or null if no prefix is specified."
        },
        {
          "term": "ownerElement Read only",
          "link": "",
          "desc": "The element holding the attribute. Note: DOM Level 4 removed this property. The assumption was that since you get an Attr object from an Element, you should already know the associated element. As that doesn't hold true in cases like Attr objects being returned by Document.evaluate, the DOM Living Standard reintroduced the property. Gecko outputs a deprecation note starting from Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4). This note was removed again in Gecko 49.0 (Firefox 49.0 / Thunderbird 49.0 / SeaMonkey 2.46)."
        },
        {
          "term": "specified Read only",
          "link": "",
          "desc": "This property always returns true. Originally, it returned true if the attribute was explicitly specified in the source code or by a script, and false if its value came from the default one defined in the document's DTD."
        },
        {
          "term": "value",
          "link": "",
          "desc": "The attribute's value."
        }
      ]
    }
  },
  {
    "title": "AudioBuffer",
    "calls": {
      "constructors": [
        {
          "term": "AudioBuffer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/AudioBuffer",
          "desc": "Creates and returns a new AudioBuffer object instance."
        }
      ],
      "properties": [
        {
          "term": "AudioBuffer.sampleRate Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate",
          "desc": "Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer."
        },
        {
          "term": "AudioBuffer.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length",
          "desc": "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer."
        },
        {
          "term": "AudioBuffer.duration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration",
          "desc": "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer."
        },
        {
          "term": "AudioBuffer.numberOfChannels Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels",
          "desc": "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer."
        }
      ],
      "methods": [
        {
          "term": "AudioBuffer.getChannelData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData",
          "desc": "Returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel)."
        },
        {
          "term": "AudioBuffer.copyFromChannel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel",
          "desc": "Copies the samples from the specified channel of the AudioBuffer to the destination array."
        },
        {
          "term": "AudioBuffer.copyToChannel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel",
          "desc": "Copies the samples to the specified channel of the AudioBuffer, from the source array."
        }
      ]
    }
  },
  {
    "title": "AudioBufferSourceNode",
    "calls": {
      "constructors": [
        {
          "term": "AudioBufferSourceNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/AudioBufferSourceNode",
          "desc": "Creates and returns a new AudioBufferSourceNode object. An AudioBufferSourceNode can be instantiated using the AudioContext.createBufferSource() method."
        }
      ],
      "properties": [
        {
          "term": "AudioBufferSourceNode.buffer",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer",
          "desc": "An AudioBuffer that defines the audio asset to be played, or when set to the value null, defines a single channel of silence (in which every sample is 0.0)."
        },
        {
          "term": "AudioBufferSourceNode.detune",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune",
          "desc": "Is a k-rate AudioParam representing detuning of playback in cents. This value is compounded with playbackRate to determine the speed at which the sound is played. Its default value is 0 (meaning no detuning), and its nominal range is -∞ to ∞."
        },
        {
          "term": "AudioBufferSourceNode.loop",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop",
          "desc": "A Boolean attribute indicating if the audio asset must be replayed when the end of the AudioBuffer is reached. Its default value is false."
        },
        {
          "term": "AudioBufferSourceNode.loopStart Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart",
          "desc": "A floating-point value indicating the time, in seconds, at which playback of the AudioBuffer must begin when loop is true. Its default value is 0 (meaning that at the beginning of each loop, playback begins at the start of the audio buffer)."
        },
        {
          "term": "AudioBufferSourceNode.loopEnd Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd",
          "desc": "A floating-point number indicating the time, in seconds, at which playback of the AudioBuffer stops and loops back to the time indicated by loopStart, if loop is true. The default value is 0."
        },
        {
          "term": "AudioBufferSourceNode.playbackRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate",
          "desc": "An a-rate AudioParam that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with detune to determine the final playback rate."
        }
      ]
    }
  },
  {
    "title": "AudioContext",
    "calls": {
      "constructors": [
        {
          "term": "AudioContext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext",
          "desc": "Creates and returns a new AudioContext object."
        }
      ],
      "properties": [
        {
          "term": "AudioContext.baseLatency Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency",
          "desc": "Returns the number of seconds of processing latency incurred by the AudioContext passing the audio from the AudioDestinationNode to the audio subsystem."
        },
        {
          "term": "AudioContext.outputLatency Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency",
          "desc": "Returns an estimation of the output latency of the current audio context."
        }
      ],
      "methods": [
        {
          "term": "AudioContext.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close",
          "desc": "Closes the audio context, releasing any system audio resources that it uses."
        },
        {
          "term": "AudioContext.createMediaElementSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource",
          "desc": "Creates a MediaElementAudioSourceNode associated with an HTMLMediaElement. This can be used to play and manipulate audio from <video> or <audio> elements."
        },
        {
          "term": "AudioContext.createMediaStreamSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource",
          "desc": "Creates a MediaStreamAudioSourceNode associated with a MediaStream representing an audio stream which may come from the local computer microphone or other sources."
        },
        {
          "term": "AudioContext.createMediaStreamDestination()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination",
          "desc": "Creates a MediaStreamAudioDestinationNode associated with a MediaStream representing an audio stream which may be stored in a local file or sent to another computer."
        },
        {
          "term": "AudioContext.createMediaStreamTrackSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource",
          "desc": "Creates a MediaStreamTrackAudioSourceNode associated with a MediaStream representing an media stream track."
        },
        {
          "term": "AudioContext.getOutputTimestamp()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp",
          "desc": "Returns a new AudioTimestamp object containing two audio timestamp values relating to the current audio context."
        },
        {
          "term": "AudioContext.resume()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume",
          "desc": "Resumes the progression of time in an audio context that has previously been suspended/paused."
        },
        {
          "term": "AudioContext.suspend()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend",
          "desc": "Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process."
        }
      ]
    }
  },
  {
    "title": "AudioContextLatencyCategory",
    "calls": {}
  },
  {
    "title": "AudioContextOptions",
    "calls": {
      "properties": [
        {
          "term": "latencyHint Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions/latencyHint",
          "desc": "The type of playback that the context will be used for, as a value from the AudioContextLatencyCategory enum or a double-precision floating-point value indicating the preferred maximum latency of the context in seconds. The user agent may or may not choose to meet this request; check the value of AudioContext.baseLatency to determine the true latency after creating the context."
        },
        {
          "term": "sampleRate Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions/sampleRate",
          "desc": "The sampleRate to be used by the AudioContext, specified in samples per second. The value may be any value supported by AudioBuffer. If not specified, the preferred sample rate for the context's output device is used by default."
        }
      ]
    }
  },
  {
    "title": "AudioDestinationNode",
    "calls": {
      "properties": [
        {
          "term": "AudioDestinationNode.maxChannelCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount",
          "desc": "Is an unsigned long defining the maximum number of channels that the physical device can handle."
        }
      ]
    }
  },
  {
    "title": "AudioListener",
    "calls": {
      "properties": [
        {
          "term": "AudioListener.positionX",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionX",
          "desc": "Represents the horizontal position of the listener in a right-hand cartesian coordinate system. The default is 0."
        },
        {
          "term": "AudioListener.positionY",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionY",
          "desc": "Represents the vertical position of the listener in a right-hand cartesian coordinate system. The default is 0."
        },
        {
          "term": "AudioListener.positionZ",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionZ",
          "desc": "Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate system. The default is 0."
        },
        {
          "term": "AudioListener.forwardX",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardX",
          "desc": "Represents the horizontal position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
        },
        {
          "term": "AudioListener.forwardY",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardY",
          "desc": "Represents the vertical position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
        },
        {
          "term": "AudioListener.forwardZ",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardZ",
          "desc": "Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is -1."
        },
        {
          "term": "AudioListener.upX",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upX",
          "desc": "Represents the horizontal position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
        },
        {
          "term": "AudioListener.upY",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upY",
          "desc": "Represents the vertical position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 1."
        },
        {
          "term": "AudioListener.upZ",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upZ",
          "desc": "Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
        }
      ],
      "methods": [
        {
          "term": "AudioListener.setOrientation() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setOrientation",
          "desc": "Sets the orientation of the listener."
        },
        {
          "term": "AudioListener.setPosition() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition",
          "desc": "Sets the position of the listener."
        }
      ]
    }
  },
  {
    "title": "AudioNode",
    "calls": {
      "properties": [
        {
          "term": "AudioNode.context Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context",
          "desc": "Returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in."
        },
        {
          "term": "AudioNode.numberOfInputs Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs",
          "desc": "Returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0."
        },
        {
          "term": "AudioNode.numberOfOutputs Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs",
          "desc": "Returns the number of outputs coming out of the node. Destination nodes — like AudioDestinationNode — have a value of 0 for this attribute."
        },
        {
          "term": "AudioNode.channelCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount",
          "desc": "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of AudioNode.channelCountMode."
        },
        {
          "term": "AudioNode.channelCountMode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode",
          "desc": "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs."
        },
        {
          "term": "AudioNode.channelInterpretation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation",
          "desc": "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen. The possible values are \"speakers\" or \"discrete\"."
        }
      ],
      "methods": [
        {
          "term": "AudioNode.connect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect",
          "desc": "Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an AudioParam."
        },
        {
          "term": "AudioNode.disconnect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect",
          "desc": "Allows us to disconnect the current node from another one it is already connected to."
        }
      ]
    }
  },
  {
    "title": "AudioNodeOptions",
    "calls": {
      "properties": [
        {
          "term": "channelCount Optional",
          "link": null,
          "desc": "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See AudioNode.channelCount for more information.) Its usage and precise definition depend on the value of AudioNodeOptions.channelCountMode."
        },
        {
          "term": "channelCountMode Optional",
          "link": null,
          "desc": "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See AudioNode.channelCountMode for more information including default values.)"
        },
        {
          "term": "channelInterpretation Optional",
          "link": null,
          "desc": "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen. The possible values are \"speakers\" or \"discrete\". (See AudioNode.channelCountMode for more information including default values.)"
        }
      ]
    }
  },
  {
    "title": "AudioParam",
    "calls": {
      "properties": [
        {
          "term": "AudioParam.defaultValue Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue",
          "desc": "Represents the initial volume of the attribute as defined by the specific AudioNode creating the AudioParam."
        },
        {
          "term": "AudioParam.maxValue Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/maxValue",
          "desc": "Represents the maximum possible value for the parameter's nominal (effective) range."
        },
        {
          "term": "AudioParam.minValue Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/minValue",
          "desc": "Represents the minimum possible value for the parameter's nominal (effective) range."
        },
        {
          "term": "AudioParam.value",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value",
          "desc": "Represents the parameter's current value as of the current time; initially set to the value of defaultValue."
        }
      ],
      "methods": [
        {
          "term": "AudioParam.setValueAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime",
          "desc": "Schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given by the value parameter."
        },
        {
          "term": "AudioParam.linearRampToValueAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime",
          "desc": "Schedules a gradual linear change in the value of the AudioParam. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter."
        },
        {
          "term": "AudioParam.exponentialRampToValueAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime",
          "desc": "Schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter."
        },
        {
          "term": "AudioParam.setTargetAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime",
          "desc": "Schedules the start of a change to the value of the AudioParam. The change starts at the time specified in startTime and exponentially moves towards the value given by the target parameter. The exponential decay rate is defined by the timeConstant parameter, which is a time measured in seconds."
        },
        {
          "term": "AudioParam.setValueCurveAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime",
          "desc": "Schedules the values of the AudioParam to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time."
        },
        {
          "term": "AudioParam.cancelScheduledValues()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues",
          "desc": "Cancels all scheduled future changes to the AudioParam."
        },
        {
          "term": "AudioParam.cancelAndHoldAtTime()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime",
          "desc": "Cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods."
        }
      ]
    }
  },
  {
    "title": "AudioParamDescriptor",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "The DOMString which represents the name of the AudioParam. Under this name the AudioParam will be available in the parameters property of the node, and under this name the AudioWorkletProcessor.process method will acquire the calculated values of this AudioParam."
        },
        {
          "term": "automationRate Optional",
          "link": null,
          "desc": "Either \"a-rate\", or \"k-rate\" string which represents an automation rate of this AudioParam. Defaults to \"a-rate\"."
        },
        {
          "term": "minValue Optional",
          "link": null,
          "desc": "A float which represents minimum value of the AudioParam. Defaults to -3.4028235e38."
        },
        {
          "term": "maxValue Optional",
          "link": null,
          "desc": "A float which represents maximum value of the AudioParam. Defaults to 3.4028235e38."
        },
        {
          "term": "defaultValue Optional",
          "link": null,
          "desc": "A float which represents initial value of the AudioParam. Defaults to 0."
        }
      ]
    }
  },
  {
    "title": "AudioScheduledSourceNode",
    "calls": {
      "methods": [
        {
          "term": "start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start",
          "desc": "Schedules the node to begin playing the constant sound at the specified time. If no time is specified, the node begins playing immediately."
        },
        {
          "term": "stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop",
          "desc": "Schedules the node to stop playing at the specified time. If no time is specified, the node stops playing at once."
        }
      ]
    }
  },
  {
    "title": "AudioTrack",
    "calls": {
      "properties": [
        {
          "term": "enabled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/enabled",
          "desc": "A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to false mutes the track's audio."
        },
        {
          "term": "id Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/id",
          "desc": "A DOMString which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling AudioTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification."
        },
        {
          "term": "kind Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/kind",
          "desc": "A DOMString specifying the category into which the track falls. For example, the main audio track would have a kind of \"main\"."
        },
        {
          "term": "label Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/label",
          "desc": "A DOMString providing a human-readable label for the track. For example, an audio commentary track for a movie might have a label of \"Commentary with director John Q. Public and actors John Doe and Jane Eod.\" This string is empty if no label is provided."
        },
        {
          "term": "language Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/language",
          "desc": "A DOMString specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as \"en-US\" or \"pt-BR\"."
        },
        {
          "term": "sourceBuffer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/sourceBuffer",
          "desc": "The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source."
        }
      ]
    }
  },
  {
    "title": "AudioTrackList",
    "calls": {
      "properties": [
        {
          "term": "length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/length",
          "desc": "The number of tracks in the list."
        }
      ],
      "handlers": [
        {
          "term": "onaddtrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onaddtrack",
          "desc": "An event handler to be called when the addtrack event is fired, indicating that a new audio track has been added to the media element."
        },
        {
          "term": "onchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onchange",
          "desc": "An event handler to be called when the change event occurs. This occurs when one or more tracks have been enabled or disabled by their enabled flag being changed."
        },
        {
          "term": "onremovetrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onremovetrack",
          "desc": "An event handler to call when the removetrack event is sent, indicating that an audio track has been removed from the media element."
        }
      ],
      "methods": [
        {
          "term": "getTrackById()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/getTrackById",
          "desc": "Returns the AudioTrack found within the AudioTrackList whose id matches the specified string. If no match is found, null is returned."
        }
      ]
    }
  },
  {
    "title": "AudioWorklet",
    "calls": {}
  },
  {
    "title": "AudioWorkletGlobalScope",
    "calls": {
      "properties": [
        {
          "term": "currentFrame Read only",
          "link": "",
          "desc": "Returns an integer that represents the ever-increasing current sample-frame of the audio block being processed. It is incremented by 128 (the size of a render quantum) after the processing of each audio block."
        },
        {
          "term": "currentTime Read only",
          "link": "",
          "desc": "Returns a double that represents the ever-increasing context time of the audio block being processed. It is equal to the currentTime property of the BaseAudioContext the worklet belongs to."
        },
        {
          "term": "sampleRate Read only",
          "link": "",
          "desc": "Returns a float that represents the sample rate of the associated BaseAudioContext."
        }
      ],
      "methods": [
        {
          "term": "registerProcessor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor",
          "desc": "Registers a class derived from the AudioWorkletProcessor interface. The class can then be used by creating an AudioWorkletNode, providing its registered name."
        }
      ]
    }
  },
  {
    "title": "AudioWorkletNodeOptions",
    "calls": {
      "properties": [
        {
          "term": "numberOfInputs Optional",
          "link": null,
          "desc": "The value to initialize the numberOfInputs property to. Defaults to 1."
        },
        {
          "term": "numberOfOutputs Optional",
          "link": null,
          "desc": "The value to initialize the numberOfOutputs property to. Defaults to 1."
        },
        {
          "term": "outputChannelCount Optional",
          "link": null,
          "desc": "An array defining the number of channels for each output. For example, outputChannelCount: [n, m] specifies the number of channels in the first output to be n and the second output to be m. The array length must match numberOfOutputs."
        },
        {
          "term": "parameterData Optional",
          "link": null,
          "desc": "An object containing the initial values of custom AudioParam objects on this node (in its parameters property), with key being the name of a custom parameter and value being its initial value."
        },
        {
          "term": "processorOptions Optional",
          "link": null,
          "desc": "Any additional data that can be used for custom initialization of the underlying AudioWorkletProcessor."
        }
      ]
    }
  },
  {
    "title": "AudioWorkletProcessor",
    "calls": {
      "constructors": [
        {
          "term": "AudioWorkletProcessor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor",
          "desc": "Creates a new instance of an AudioWorkletProcessor object."
        }
      ],
      "properties": [
        {
          "term": "port Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/port",
          "desc": "Returns a MessagePort used for bidirectional communication between the processor and the AudioWorkletNode which it belongs to. The other end is available under the port property of the node."
        }
      ]
    }
  },
  {
    "title": "AuthenticatorAssertionResponse",
    "calls": {
      "properties": [
        {
          "term": "AuthenticatorAssertionResponse.clientDataJSON Secure contextRead only",
          "link": null,
          "desc": "The client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse."
        },
        {
          "term": "AuthenticatorAssertionResponse.authenticatorData Secure contextRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData",
          "desc": "An ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator."
        },
        {
          "term": "AuthenticatorAssertionResponse.signature Secure contextRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/signature",
          "desc": "An assertion signature over AuthenticatorAssertionResponse.authenticatorData and AuthenticatorResponse.clientDataJSON. The assertion signature is created with the private key of keypair that was created during the navigator.credentials.create() call and verified using the public key of that same keypair."
        },
        {
          "term": "AuthenticatorAssertionResponse.userHandle Secure contextRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/userHandle",
          "desc": "An ArrayBuffer containing an opaque user identifier."
        }
      ]
    }
  },
  {
    "title": "AuthenticatorAttestationResponse",
    "calls": {
      "properties": [
        {
          "term": "AuthenticatorAttestationResponse.clientDataJSON Secure contextRead only",
          "link": null,
          "desc": "Client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse."
        },
        {
          "term": "AuthenticatorAttestationResponse.attestationObject Secure contextRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse/attestationObject",
          "desc": "An ArrayBuffer containing authenticator data and an attestation statement for a newly-created key pair."
        }
      ],
      "methods": [
        {
          "term": "AuthenticatorAttestationResponse.getTransports()Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse/getTransports",
          "desc": "Returns an Array of strings describing which transport methods (e.g. usb, nfc) are believed to be supported with the authenticator. The array may be empty if the information is not available."
        }
      ]
    }
  },
  {
    "title": "AuthenticatorResponse",
    "calls": {
      "properties": [
        {
          "term": "AuthenticatorResponse.clientDataJSON",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorResponse/clientDataJSON",
          "desc": "A JSON string in an ArrayBuffer, representing the client data that was passed to CredentialsContainer.create() or CredentialsContainer.get()."
        }
      ]
    }
  },
  {
    "title": "BarcodeDetector",
    "calls": {
      "methods": [
        {
          "term": "detect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector/detect",
          "desc": "Returns a Promise which fulfills with an array of detectedBarcode objects with the following properties: boundingBox: A DOMRectReadOnly, which returns the dimensions of a rectangle representing the extent of a detected barcode, aligned with the image. cornerPoints: The x and y co-ordinates of the four corner points of the detected barcode relative to the image, starting with the top left and working clockwise. This may not be square due to perspective distortions within the image. format: The detected barcode format. (For a full list of formats see the [landing page]) rawValue: A String decoded from the barcode data."
        },
        {
          "term": "getSupportedFormats()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector/getSupportedFormats",
          "desc": "Returns a Promise which fulfills with an Array of supported barcode format types."
        }
      ]
    }
  },
  {
    "title": "BaseAudioContext",
    "calls": {
      "properties": [
        {
          "term": "BaseAudioContext.audioWorklet \n    This is an experimental API that should not be used in production code.\n    \n Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet",
          "desc": "Returns the AudioWorklet object, which can be used to create and manage AudioNodes in which JavaScript code implementing the AudioWorkletProcessor interface are run in the background to process audio data."
        },
        {
          "term": "BaseAudioContext.currentTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime",
          "desc": "Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at 0."
        },
        {
          "term": "BaseAudioContext.destination Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination",
          "desc": "Returns an AudioDestinationNode representing the final destination of all audio in the context. It can be thought of as the audio-rendering device."
        },
        {
          "term": "BaseAudioContext.listener Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener",
          "desc": "Returns the AudioListener object, used for 3D spatialization."
        },
        {
          "term": "BaseAudioContext.sampleRate Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate",
          "desc": "Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an AudioContext cannot be changed."
        },
        {
          "term": "BaseAudioContext.state Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state",
          "desc": "Returns the current state of the AudioContext."
        }
      ],
      "handlers": [
        {
          "term": "BaseAudioContext.onstatechange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange",
          "desc": "An event handler that runs when an event of type statechange has fired. This occurs when the AudioContext's state changes, due to the calling of one of the state change methods (AudioContext.suspend, AudioContext.resume, or AudioContext.close)."
        }
      ],
      "methods": [
        {
          "term": "BaseAudioContext.createAnalyser()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser",
          "desc": "Creates an AnalyserNode, which can be used to expose audio time and frequency data and for example to create data visualisations."
        },
        {
          "term": "BaseAudioContext.createBiquadFilter()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter",
          "desc": "Creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etc"
        },
        {
          "term": "BaseAudioContext.createBuffer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer",
          "desc": "Creates a new, empty AudioBuffer object, which can then be populated by data and played via an AudioBufferSourceNode."
        },
        {
          "term": "BaseAudioContext.createBufferSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource",
          "desc": "Creates an AudioBufferSourceNode, which can be used to play and manipulate audio data contained within an AudioBuffer object. AudioBuffers are created using AudioContext.createBuffer() or returned by AudioContext.decodeAudioData() when it successfully decodes an audio track."
        },
        {
          "term": "BaseAudioContext.createConstantSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConstantSource",
          "desc": "Creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value."
        },
        {
          "term": "BaseAudioContext.createChannelMerger()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelMerger",
          "desc": "Creates a ChannelMergerNode, which is used to combine channels from multiple audio streams into a single audio stream."
        },
        {
          "term": "BaseAudioContext.createChannelSplitter()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelSplitter",
          "desc": "Creates a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately."
        },
        {
          "term": "BaseAudioContext.createConvolver()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConvolver",
          "desc": "Creates a ConvolverNode, which can be used to apply convolution effects to your audio graph, for example a reverberation effect."
        },
        {
          "term": "BaseAudioContext.createDelay()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDelay",
          "desc": "Creates a DelayNode, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph."
        },
        {
          "term": "BaseAudioContext.createDynamicsCompressor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDynamicsCompressor",
          "desc": "Creates a DynamicsCompressorNode, which can be used to apply acoustic compression to an audio signal."
        },
        {
          "term": "BaseAudioContext.createGain()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain",
          "desc": "Creates a GainNode, which can be used to control the overall volume of the audio graph."
        },
        {
          "term": "BaseAudioContext.createIIRFilter()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createIIRFilter",
          "desc": "Creates an IIRFilterNode, which represents a second order filter configurable as several different common filter types."
        },
        {
          "term": "BaseAudioContext.createOscillator()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createOscillator",
          "desc": "Creates an OscillatorNode, a source representing a periodic waveform. It basically generates a tone."
        },
        {
          "term": "BaseAudioContext.createPanner()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPanner",
          "desc": "Creates a PannerNode, which is used to spatialise an incoming audio stream in 3D space."
        },
        {
          "term": "BaseAudioContext.createPeriodicWave()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave",
          "desc": "Creates a PeriodicWave, used to define a periodic waveform that can be used to determine the output of an OscillatorNode."
        },
        {
          "term": "BaseAudioContext.createScriptProcessor() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createScriptProcessor",
          "desc": "Creates a ScriptProcessorNode, which can be used for direct audio processing via JavaScript."
        },
        {
          "term": "BaseAudioContext.createStereoPanner()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createStereoPanner",
          "desc": "Creates a StereoPannerNode, which can be used to apply stereo panning to an audio source."
        },
        {
          "term": "BaseAudioContext.createWaveShaper()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createWaveShaper",
          "desc": "Creates a WaveShaperNode, which is used to implement non-linear distortion effects."
        },
        {
          "term": "BaseAudioContext.decodeAudioData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData",
          "desc": "Asynchronously decodes audio file data contained in an ArrayBuffer. In this case, the ArrayBuffer is usually loaded from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer. This method only works on complete files, not fragments of audio files."
        }
      ]
    }
  },
  {
    "title": "BasicCardRequest",
    "calls": {
      "properties": [
        {
          "term": "BasicCardRequest.supportedNetworks Optional Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BasicCardRequest/supportedNetworks",
          "desc": "An optional array of DOMStrings representing the card networks that the retailer supports (e.g. \"amex\", \"mastercard\"); see Card network identifiers for a complete list. If the property is missing, it implies that all networks are supported."
        }
      ]
    }
  },
  {
    "title": "BeforeUnloadEvent",
    "calls": {}
  },
  {
    "title": "BiquadFilterNode",
    "calls": {
      "constructors": [
        {
          "term": "BiquadFilterNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode",
          "desc": "Creates a new instance of a BiquadFilterNode object."
        }
      ],
      "properties": [
        {
          "term": "BiquadFilterNode.frequency Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency",
          "desc": "Is an a-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz)."
        },
        {
          "term": "BiquadFilterNode.detune Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune",
          "desc": "Is an a-rate AudioParam representing detuning of the frequency in cents."
        },
        {
          "term": "BiquadFilterNode.Q Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q",
          "desc": "Is an a-rate AudioParam, a double representing a Q factor, or quality factor."
        },
        {
          "term": "BiquadFilterNode.gain Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain",
          "desc": "Is an a-rate AudioParam, a double representing the gain used in the current filtering algorithm."
        },
        {
          "term": "BiquadFilterNode.type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type",
          "desc": "Is a string value defining the kind of filtering algorithm the node is implementing. The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below) type Description frequency Q gain lowpass Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated. The cutoff frequency. Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak. Not used highpass Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through. The cutoff frequency. Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak. Not used bandpass Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through. The center of the range of frequencies. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. Not used lowshelf Standard second-order lowshelf filter. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged. The upper limit of the frequencies getting a boost or an attenuation. Not used The boost, in dB, to be applied; if negative, it will be an attenuation. highshelf Standard second-order highshelf filter. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged. The lower limit of the frequencies getting a boost or an attenuation. Not used The boost, in dB, to be applied; if negative, it will be an attenuation. peaking Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged. The middle of the frequency range getting a boost or an attenuation. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. The boost, in dB, to be applied; if negative, it will be an attenuation. notch Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated. The center of the range of frequencies. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. Not used allpass Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies. The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs. Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be. Not used"
        }
      ],
      "methods": [
        {
          "term": "BiquadFilterNode.getFrequencyResponse()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse",
          "desc": "From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies."
        }
      ]
    }
  },
  {
    "title": "Blob",
    "calls": {
      "constructors": [
        {
          "term": "Blob()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob",
          "desc": "Returns a newly created Blob object which contains a concatenation of all of the data in the array passed into the constructor."
        }
      ]
    }
  },
  {
    "title": "BlobEvent",
    "calls": {
      "constructors": [
        {
          "term": "BlobEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/BlobEvent",
          "desc": "Creates a BlobEvent event with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "BlobEvent.data Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/data",
          "desc": "A Blob representing the data associated with the event. The event was fired on the EventTarget because of something happening on that specific Blob."
        },
        {
          "term": "BlobEvent.timecode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/timecode",
          "desc": "A DOMHighResTimeStamp indicating the difference between the timestamp of the first chunk in data and the timestamp of the first chunk in the first BlobEvent produced by this recorder. Note that the timecode in the first produced BlobEvent does not need to be zero."
        }
      ]
    }
  },
  {
    "title": "BudgetService",
    "calls": {
      "methods": [
        {
          "term": "BudgetService.getCost()",
          "link": null,
          "desc": "Returns a Promise that resolves to a double, indicating the worst-case background operation cost of the provided background operation."
        },
        {
          "term": "BudgetService.getBudget()",
          "link": null,
          "desc": "Returns a Promise that resolves to an array of BudgetState objects, indicating the expected state of the budget at times in the future."
        },
        {
          "term": "BudgetService.reserve()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/reserve",
          "desc": "Returns a Promise that resolves to a boolean, indicating whether the requested budget operation can be reserved."
        }
      ]
    }
  },
  {
    "title": "BufferSource",
    "calls": {}
  },
  {
    "title": "ByteString",
    "calls": {}
  },
  {
    "title": "CanvasGradient",
    "calls": {
      "methods": [
        {
          "term": "CanvasGradient.addColorStop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop",
          "desc": "Adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, inclusive, an INDEX_SIZE_ERR is raised; if the color can't be parsed as a CSS <color>, a SYNTAX_ERR is raised."
        }
      ]
    }
  },
  {
    "title": "CanvasImageSource",
    "calls": {}
  },
  {
    "title": "CanvasPattern",
    "calls": {
      "methods": [
        {
          "term": "CanvasPattern.setTransform()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform",
          "desc": "Applies an SVGMatrix or DOMMatrix representing a linear transform to the pattern."
        }
      ]
    }
  },
  {
    "title": "CanvasRenderingContext2D",
    "calls": {}
  },
  {
    "title": "CDATASection",
    "calls": {}
  },
  {
    "title": "ChannelMergerNode",
    "calls": {
      "constructors": [
        {
          "term": "ChannelMergerNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode/ChannelMergerNode",
          "desc": "Creates a new ChannelMergerNode object instance."
        }
      ]
    }
  },
  {
    "title": "ChannelSplitterNode",
    "calls": {
      "constructors": [
        {
          "term": "ChannelSplitterNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode/ChannelSplitterNode",
          "desc": "Creates a new ChannelSplitterNode object instance."
        }
      ]
    }
  },
  {
    "title": "CharacterData",
    "calls": {
      "properties": [
        {
          "term": "CharacterData.data",
          "link": "",
          "desc": "Is a DOMString representing the textual data contained in this object."
        },
        {
          "term": "CharacterData.length Read only",
          "link": "",
          "desc": "Returns an unsigned long representing the size of the string contained in CharacterData.data."
        },
        {
          "term": "NonDocumentTypeChildNode.nextElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
          "desc": "Returns the Element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
        },
        {
          "term": "NonDocumentTypeChildNode.previousElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
          "desc": "Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
        }
      ],
      "methods": [
        {
          "term": "CharacterData.appendData()",
          "link": "",
          "desc": "Appends the given DOMString to the CharacterData.data string; when this method returns, data contains the concatenated DOMString."
        },
        {
          "term": "CharacterData.deleteData()",
          "link": "",
          "desc": "Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened DOMString."
        },
        {
          "term": "CharacterData.insertData()",
          "link": "",
          "desc": "Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified DOMString."
        },
        {
          "term": "ChildNode.remove() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
          "desc": "Removes the object from its parent children list."
        },
        {
          "term": "CharacterData.replaceData()",
          "link": "",
          "desc": "Replaces the specified amount of characters, starting at the specified offset, with the specified DOMString; when this method returns, data contains the modified DOMString."
        },
        {
          "term": "CharacterData.substringData()",
          "link": "",
          "desc": "Returns a DOMString containing the part of CharacterData.data of the specified length and starting at the specified offset."
        }
      ]
    }
  },
  {
    "title": "Clipboard",
    "calls": {
      "methods": [
        {
          "term": "read()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read",
          "desc": "Requests arbitrary data (such as images) from the clipboard, returning a Promise. When the data has been retrieved, the promise is resolved with a DataTransfer object that provides the data."
        },
        {
          "term": "readText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText",
          "desc": "Requests text from the system clipboard; returns a Promise which is resolved with a DOMString containing the clipboard's text once it's available."
        },
        {
          "term": "write()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write",
          "desc": "Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned Promise."
        },
        {
          "term": "writeText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText",
          "desc": "Writes text to the system clipboard, returning a Promise which is resolved once the text is fully copied into the clipboard."
        }
      ]
    }
  },
  {
    "title": "ClipboardItem",
    "calls": {
      "constructors": [
        {
          "term": "ClipboardItem.ClipboardItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/ClipboardItem",
          "desc": "Creates a new ClipboardItem object, with the MIME type as the key and Blob as the value"
        }
      ],
      "properties": [
        {
          "term": "types Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/types",
          "desc": "Returns an Array of MIME types available within the ClipboardItem."
        }
      ],
      "methods": [
        {
          "term": "getType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/getType",
          "desc": "Returns a Promise that resolves with a Blob of the requested MIME type, or an error if the MIME type is not found."
        }
      ]
    }
  },
  {
    "title": "CloseEvent",
    "calls": {
      "constructors": [
        {
          "term": "CloseEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent",
          "desc": "Creates a new CloseEvent."
        }
      ],
      "properties": [
        {
          "term": "CloseEvent.code Read only",
          "link": "",
          "desc": "Returns an unsigned short containing the close code sent by the server. The following values are permitted status codes. The following definitions are sourced from the IANA website [Ref]. Note that the 1xxx codes are only WebSocket-internal and not for the same meaning by the transported data (like when the application-layer protocol is invalid). The only permitted codes to be specified in Firefox are 1000 and 3000 to 4999 [Source, Bug]. Status code Name Description 0–999 Reserved and not used. 1000 Normal Closure Normal closure; the connection successfully completed whatever purpose for which it was created. 1001 Going Away The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection. 1002 Protocol Error The endpoint is terminating the connection due to a protocol error. 1003 Unsupported Data The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data). 1004 Reserved. A meaning might be defined in the future. 1005 No Status Received Reserved. Indicates that no status code was provided even though one was expected. 1006 Abnormal Closure Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected. 1007 Invalid frame payload data The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message). 1008 Policy Violation The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable. 1009 Message too big The endpoint is terminating the connection because a data frame was received that is too large. 1010 Missing Extension The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't. 1011 Internal Error The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request. 1012 Service Restart The server is terminating the connection because it is restarting. [Ref] 1013 Try Again Later The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref] 1014 Bad Gateway The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code. 1015 TLS Handshake Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified). 1016–1999 Reserved for future use by the WebSocket standard. 2000–2999 Reserved for use by WebSocket extensions. 3000–3999 Available for use by libraries and frameworks. May not be used by applications. Available for registration at the IANA via first-come, first-serve. 4000–4999 Available for use by applications."
        },
        {
          "term": "CloseEvent.reason Read only",
          "link": "",
          "desc": "Returns a DOMString indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol."
        },
        {
          "term": "CloseEvent.wasClean Read only",
          "link": "",
          "desc": "Returns a Boolean that Indicates whether or not the connection was cleanly closed."
        }
      ],
      "methods": [
        {
          "term": "CloseEvent.initCloseEvent() \n    This API has not been standardized.\n    \n    \n \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/initCloseEvent",
          "desc": "Initializes the value of a CloseEvent created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the CloseEvent() constructor instead."
        }
      ]
    }
  },
  {
    "title": "Comment",
    "calls": {
      "constructors": [
        {
          "term": "Comment() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Comment/Comment",
          "desc": "Returns a Comment object with the parameter as its textual content."
        }
      ]
    }
  },
  {
    "title": "CompositionEvent",
    "calls": {
      "constructors": [
        {
          "term": "CompositionEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/CompositionEvent",
          "desc": "Creates a new CompositionEvent object instance."
        }
      ],
      "properties": [
        {
          "term": "CompositionEvent.data Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data",
          "desc": "Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the CompositionEvent object."
        },
        {
          "term": "CompositionEvent.locale Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/locale",
          "desc": "Returns the locale of current input method (for example, the keyboard layout locale if the composition is associated with IME)."
        }
      ],
      "methods": [
        {
          "term": "CompositionEvent.initCompositionEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/initCompositionEvent",
          "desc": "Initializes the attributes of a CompositionEvent object."
        }
      ]
    }
  },
  {
    "title": "console",
    "calls": {
      "methods": [
        {
          "term": "console.assert()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/console/assert",
          "desc": "Log a message and stack trace to console if the first argument is false."
        },
        {
          "term": "console.clear()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/clear",
          "desc": "Clear the console."
        },
        {
          "term": "console.count()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/count",
          "desc": "Log the number of times this line has been called with the given label."
        },
        {
          "term": "console.countReset()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/countReset",
          "desc": "Resets the value of the counter with the given label."
        },
        {
          "term": "console.debug()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/debug",
          "desc": "Outputs a message to the console with the log level debug."
        },
        {
          "term": "console.dir()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/dir",
          "desc": "Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects."
        },
        {
          "term": "console.dirxml()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/dirxml",
          "desc": "Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible."
        },
        {
          "term": "console.error()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/error",
          "desc": "Outputs an error message. You may use string substitution and additional arguments with this method."
        },
        {
          "term": "console.exception() \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "An alias for error()."
        },
        {
          "term": "console.group()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/group",
          "desc": "Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd()."
        },
        {
          "term": "console.groupCollapsed()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/groupCollapsed",
          "desc": "Creates a new inline group, indenting all following output by another level. However, unlike group() this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call groupEnd()."
        },
        {
          "term": "console.groupEnd()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/groupEnd",
          "desc": "Exits the current inline group."
        },
        {
          "term": "console.info()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/info",
          "desc": "Informative logging of information. You may use string substitution and additional arguments with this method."
        },
        {
          "term": "console.log()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/log",
          "desc": "For general output of logging information. You may use string substitution and additional arguments with this method."
        },
        {
          "term": "console.profile() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/profile",
          "desc": "Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile."
        },
        {
          "term": "console.profileEnd() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd",
          "desc": "Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool)."
        },
        {
          "term": "console.table()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/table",
          "desc": "Displays tabular data as a table."
        },
        {
          "term": "console.time()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/time",
          "desc": "Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page."
        },
        {
          "term": "console.timeEnd()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/timeEnd",
          "desc": "Stops the specified timer and logs the elapsed time in seconds since it started."
        },
        {
          "term": "console.timeLog()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/timeLog",
          "desc": "Logs the value of the specified timer to the console."
        },
        {
          "term": "console.timeStamp() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/timeStamp",
          "desc": "Adds a marker to the browser's Timeline or Waterfall tool."
        },
        {
          "term": "console.trace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/trace",
          "desc": "Outputs a stack trace."
        },
        {
          "term": "console.warn()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/warn",
          "desc": "Outputs a warning message. You may use string substitution and additional arguments with this method."
        }
      ]
    }
  },
  {
    "title": "ConstantSourceNode",
    "calls": {
      "constructors": [
        {
          "term": "ConstantSourceNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/ConstantSourceNode",
          "desc": "Creates and returns a new ConstantSourceNode instance, optionally specifying an object which establishes initial values for the object's properties. You can also create a ConstantSourceNode whose properties are initialized to their default values by calling AudioContext.createConstantSource()."
        }
      ],
      "properties": [
        {
          "term": "offset",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/offset",
          "desc": "An AudioParam which specifies the value that this source continuously outputs. The default value is 1.0."
        }
      ],
      "handlers": [
        {
          "term": "onended",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended",
          "desc": "Fired whenever the ConstantSourceNode data has stopped playing."
        }
      ],
      "methods": [
        {
          "term": "start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start",
          "desc": "Schedules a sound to playback at an exact time."
        },
        {
          "term": "stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop",
          "desc": "Schedules a sound to stop playback at an exact time."
        }
      ]
    }
  },
  {
    "title": "ConstrainBoolean",
    "calls": {
      "properties": [
        {
          "term": "exact",
          "link": null,
          "desc": "A Boolean which indicates a value the property must have."
        },
        {
          "term": "ideal",
          "link": null,
          "desc": "A Boolean value indicating the ideal, but not required, value the property should ideally have. If possible, this value will be used, but the user agent will use the other value if it needs to in order to come up with a workable configuration."
        }
      ]
    }
  },
  {
    "title": "ConstrainDOMString",
    "calls": {
      "properties": [
        {
          "term": "exact",
          "link": null,
          "desc": "Either a single DOMString which must be the value of the property, or an array of DOMString objects one of which must be the property's value. If the property can't be set to one of the listed values, matching will fail."
        },
        {
          "term": "ideal",
          "link": null,
          "desc": "Either a single DOMString or an array of DOMStrings specifying ideal values for the property. If possible, one of the listed values will be used, but if it's not possible, the user agent will use the closest possible match."
        }
      ]
    }
  },
  {
    "title": "ConstrainDouble",
    "calls": {
      "properties": [
        {
          "term": "exact",
          "link": null,
          "desc": "A double-precision floating-point number specifying a specific, required, value the property must have to be considered acceptable."
        },
        {
          "term": "ideal",
          "link": null,
          "desc": "A double-precision floating-point number specifying a value the property would ideally have, but which can be considered optional if necessary to find a match."
        }
      ]
    }
  },
  {
    "title": "ConstrainULong",
    "calls": {
      "properties": [
        {
          "term": "exact",
          "link": null,
          "desc": "An integer specifying precise, required, value the property must have to be considered acceptable."
        },
        {
          "term": "ideal",
          "link": null,
          "desc": "An integer specifying a value the property would ideally have, but which can be considered optional if necessary to find a match."
        }
      ]
    }
  },
  {
    "title": "ContactsManager",
    "calls": {
      "methods": [
        {
          "term": "select()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContactsManager/select",
          "desc": "Returns a Promise which, when resolved, presents the user with a contact picker which allows them to select contact(s) they wish to share."
        },
        {
          "term": "getProperties()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContactsManager/getProperties",
          "desc": "Returns a Promise which resolves with an Array of strings indicating which contact properties are available."
        }
      ]
    }
  },
  {
    "title": "ContentIndex",
    "calls": {
      "methods": [
        {
          "term": "ContentIndex.add()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndex/add",
          "desc": "Registers an item with the content index."
        },
        {
          "term": "ContentIndex.delete()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndex/delete",
          "desc": "Unregisters an item from the currently indexed content."
        },
        {
          "term": "ContentIndex.getAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndex/getAll",
          "desc": "Returns a Promise that resolves with an iterable list of content index entries."
        }
      ]
    }
  },
  {
    "title": "ContentIndexEvent",
    "calls": {
      "constructors": [
        {
          "term": "ContentIndexEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndexEvent/ContentIndexEvent",
          "desc": "Creates and returns a new ContentIndexEvent object whose type and other options are configured as specified."
        }
      ],
      "properties": [
        {
          "term": "id Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndexEvent/id",
          "desc": "A String which identifies the deleted content index via it's id."
        }
      ]
    }
  },
  {
    "title": "ConvolverNode",
    "calls": {
      "constructors": [
        {
          "term": "ConvolverNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/ConvolverNode",
          "desc": "Creates a new ConvolverNode object instance."
        }
      ],
      "properties": [
        {
          "term": "ConvolverNode.buffer",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer",
          "desc": "A mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect."
        },
        {
          "term": "ConvolverNode.normalize",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize",
          "desc": "A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not."
        }
      ]
    }
  },
  {
    "title": "Crypto",
    "calls": {
      "properties": [
        {
          "term": "Crypto.subtle Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle",
          "desc": "Returns a SubtleCrypto object providing access to common cryptographic primitives, like hashing, signing, encryption, or decryption."
        }
      ],
      "methods": [
        {
          "term": "Crypto.getRandomValues()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues",
          "desc": "Fills the passed TypedArray with cryptographically sound random values."
        }
      ]
    }
  },
  {
    "title": "CryptoKey",
    "calls": {
      "properties": [
        {
          "term": "CryptoKey.type",
          "link": null,
          "desc": "String which may take one of the following values: \"secret\": This key is a secret key for use with a symmetric algorithm. \"private\": This key is the private half of an asymmetric algorithm's CryptoKeyPair. \"public\": This key is the public half of an asymmetric algorithm's CryptoKeyPair."
        },
        {
          "term": "CryptoKey.extractable",
          "link": null,
          "desc": "Boolean indicating whether or not the key may be extracted using SubtleCrypto.exportKey() or SubtleCrypto.wrapKey(). true: The key may be extracted. false The key may not be extracted. exportKey() or wrapKey() will throw an exception if used to extract this key."
        },
        {
          "term": "CryptoKey.algorithm",
          "link": null,
          "desc": "An object describing the algorithm for which this key can be used and any associated extra parameters. AesKeyGenParams if the algorithm is any of the AES variants. RsaHashedKeyGenParams if the algorithm is any of the RSA variants. EcKeyGenParams if the algorithm is any of the EC variants. HmacKeyGenParams if the algorithm is HMAC."
        },
        {
          "term": "CryptoKey.usages",
          "link": null,
          "desc": "An Array of strings, indicating what can be done with the key. Possible values for array elements are: \"encrypt\": The key may be used to encrypt messages. \"decrypt\": The key may be used to decrypt messages. \"sign\": The key may be used to sign messages. \"verify\": The key may be used to verify signatures. \"deriveKey\": The key may be used in deriving a new key. \"deriveBits\": The key may be used in deriving bits. \"wrapKey\": The key may be used to wrap a key. \"unwrapKey\": The key may be used to unwrap a key."
        }
      ]
    }
  },
  {
    "title": "CryptoKeyPair",
    "calls": {
      "properties": [
        {
          "term": "CryptoKeyPair.privateKey",
          "link": null,
          "desc": "A CryptoKey object representing the private key. For encryption and decryption algorithms, this key is used to decrypt. For signing and verification algorithms it is used to sign."
        },
        {
          "term": "CryptoKeyPair.publicKey",
          "link": null,
          "desc": "A CryptoKey object representing the public key. For encryption and decryption algorithms, this key is used to encrypt. For signing and verification algorithms it is used to verify signatures."
        }
      ]
    }
  },
  {
    "title": "CSS",
    "calls": {}
  },
  {
    "title": "CSSAnimation",
    "calls": {
      "properties": [
        {
          "term": "CSSAnimation.animationNameRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSAnimation/animationName",
          "desc": "Returns the animation name as a CSSOMString."
        }
      ]
    }
  },
  {
    "title": "CSSConditionRule",
    "calls": {
      "properties": [
        {
          "term": "CSSConditionRule.conditionText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule/conditionText",
          "desc": "Represents the text of the condition of the rule."
        }
      ]
    }
  },
  {
    "title": "CSSCounterStyleRule",
    "calls": {
      "properties": [
        {
          "term": "CSSCounterStyleRule.name",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the <counter-style-name> defined for the associated rule."
        },
        {
          "term": "CSSCounterStyleRule.system",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the system descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.symbols",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.additiveSymbols",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the additive-symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.negative",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the negative descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.prefix",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the prefix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.suffix",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the suffix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.range",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the range descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.pad",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the pad descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.speakAs",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the speak-as descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        },
        {
          "term": "CSSCounterStyleRule.fallback",
          "link": "",
          "desc": "Is a DOMString object that contains the serialization of the fallback descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
        }
      ]
    }
  },
  {
    "title": "CSSFontFaceRule",
    "calls": {
      "properties": [
        {
          "term": "CSSFontFaceRule.styleRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule/style",
          "desc": "Returns a CSSStyleDeclaration."
        }
      ]
    }
  },
  {
    "title": "CSSGroupingRule",
    "calls": {
      "methods": [
        {
          "term": "CSSGroupingRule.deleteRule",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule/deleteRule",
          "desc": "Deletes a rule from the style sheet."
        },
        {
          "term": "CSSGroupingRule.insertRule",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule/insertRule",
          "desc": "Inserts a new style rule into the current style sheet."
        }
      ]
    }
  },
  {
    "title": "CSSImportRule",
    "calls": {
      "properties": [
        {
          "term": "CSSImportRule.hrefRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule/href",
          "desc": "Returns the url specified by the @import rule."
        },
        {
          "term": "CSSImportRule.mediaRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule/media",
          "desc": "Returns the value of the media attribute of the associated stylesheet."
        },
        {
          "term": "CSSImportRule.stylesheetRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule/stylesheet",
          "desc": "Returns the associated stylesheet."
        }
      ]
    }
  },
  {
    "title": "CSSKeyframeRule",
    "calls": {
      "properties": [
        {
          "term": "CSSKeyframeRule.keyText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule/keyText",
          "desc": "Represents the key of the keyframe, like '10%', '75%'. The from keyword maps to '0%' and the to keyword maps to '100%'."
        },
        {
          "term": "CSSKeyframeRule.styleRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSkeyframeRule/style",
          "desc": "Returns a CSSStyleDeclaration of the CSS style associated with the keyframe."
        }
      ]
    }
  },
  {
    "title": "CSSKeyframesRule",
    "calls": {
      "properties": [
        {
          "term": "CSSKeyframesRule.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/name",
          "desc": "Represents the name of the keyframes, used by the animation-name property."
        },
        {
          "term": "CSSKeyframesRule.cssRules Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/cssRules",
          "desc": "Returns a CSSRuleList of the keyframes in the list."
        }
      ],
      "methods": [
        {
          "term": "CSSKeyframesRule.appendRule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/appendRule",
          "desc": "Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a DOMString containing a keyframe in the same format as an entry of a @keyframes at-rule. If it contains more than one keyframe rule, a DOMException with a SYNTAX_ERR is thrown."
        },
        {
          "term": "CSSKeyframesRule.deleteRule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/deleteRule",
          "desc": "Deletes a keyframe rule from the current CSSKeyframesRule. The parameter is the index of the keyframe to be deleted, expressed as a DOMString resolving as a number between 0% and 100%."
        },
        {
          "term": "CSSKeyframesRule.findRule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule/findRule",
          "desc": "Returns a keyframe rule corresponding to the given key. The key is a DOMString containing an index of the keyframe to be returned, resolving to a percentage between 0% and 100%. If no such keyframe exists, findRule returns null."
        }
      ]
    }
  },
  {
    "title": "CSSMediaRule",
    "calls": {
      "properties": [
        {
          "term": "CSSMediaRule.media Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule/media",
          "desc": "Returns a MediaList representing the intended destination medium for style information."
        }
      ]
    }
  },
  {
    "title": "CSSNamespaceRule",
    "calls": {
      "properties": [
        {
          "term": "CSSNamespaceRule.namespaceURI",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/namespaceURI",
          "desc": "Returns a DOMString containing the text of the URI of the given namespace."
        },
        {
          "term": "CSSNamespaceRule.prefix",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/prefix",
          "desc": "Returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns an empty string."
        }
      ]
    }
  },
  {
    "title": "CSSOMString",
    "calls": {}
  },
  {
    "title": "CSSPageRule",
    "calls": {
      "properties": [
        {
          "term": "CSSPageRule.selectorText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule/selectorText",
          "desc": "Represents the text of the page selector associated with the at-rule."
        },
        {
          "term": "CSSPageRule.style Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule/style",
          "desc": "Returns the declaration block associated with the at-rule."
        }
      ]
    }
  },
  {
    "title": "CSSRule",
    "calls": {}
  },
  {
    "title": "CSSRuleList",
    "calls": {}
  },
  {
    "title": "CSSStyleDeclaration",
    "calls": {
      "methods": [
        {
          "term": "CSSStyleDeclaration.getPropertyPriority()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyPriority",
          "desc": "Returns the optional priority, \"important\"."
        },
        {
          "term": "CSSStyleDeclaration.getPropertyValue()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyValue",
          "desc": "Returns the property value given a property name."
        },
        {
          "term": "CSSStyleDeclaration.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/item",
          "desc": "Returns a CSS property name by its index, or the empty string if the index is out-of-bounds."
        },
        {
          "term": "CSSStyleDeclaration.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/item",
          "desc": "An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations."
        },
        {
          "term": "CSSStyleDeclaration.removeProperty()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/removeProperty",
          "desc": "Removes a property from the CSS declaration block."
        },
        {
          "term": "CSSStyleDeclaration.setProperty()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty",
          "desc": "Modifies an existing CSS property or creates a new CSS property in the declaration block."
        },
        {
          "term": "CSSStyleDeclaration.getPropertyCSSValue() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyCSSValue",
          "desc": "Only supported via getComputedStyle in Firefox. Returns the property value as a CSSPrimitiveValue or null for shorthand properties."
        }
      ]
    }
  },
  {
    "title": "CSSStyleRule",
    "calls": {
      "properties": [
        {
          "term": "CSSStyleRule.selectorText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText",
          "desc": "Returns the textual representation of the selector for this rule, e.g. \"h1,h2\"."
        },
        {
          "term": "CSSStyleRule.style Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/style",
          "desc": "Returns the CSSStyleDeclaration object for the rule."
        },
        {
          "term": "CSSStyleRule.styleMap Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/styleMap",
          "desc": "Returns a StylePropertyMap object which provides access to the rule's property-value pairs."
        }
      ]
    }
  },
  {
    "title": "CSSStyleSheet",
    "calls": {
      "properties": [
        {
          "term": "cssRules Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/cssRules",
          "desc": "Returns a live CSSRuleList which maintains an up-to-date list of the CSSRule objects that comprise the stylesheet. This is normally used to access individual rules like this: styleSheet.cssRules[i] // where i = 0..cssRules.length-1 To add or remove items in cssRules, use the CSSStyleSheet's insertRule() and deleteRule() methods."
        },
        {
          "term": "ownerRule Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/ownerRule",
          "desc": "If this stylesheet is imported into the document using an @import rule, the ownerRule property returns the corresponding CSSImportRule; otherwise, this property's value is null."
        }
      ],
      "methods": [
        {
          "term": "deleteRule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule",
          "desc": "Deletes the rule at the specified index into the stylesheet's rule list."
        },
        {
          "term": "insertRule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule",
          "desc": "Inserts a new rule at the specified position in the stylesheet, given the textual representation of the rule."
        }
      ]
    }
  },
  {
    "title": "CSSSupportsRule",
    "calls": {}
  },
  {
    "title": "CSSTransition",
    "calls": {
      "properties": [
        {
          "term": "CSSTransition.transitionPropertyRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSTransition/transitionProperty",
          "desc": "Returns the transition CSS property name as a CSSOMString."
        }
      ]
    }
  },
  {
    "title": "CustomEvent",
    "calls": {
      "constructors": [
        {
          "term": "CustomEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent",
          "desc": "Creates a CustomEvent."
        }
      ],
      "properties": [
        {
          "term": "CustomEvent.detail Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail",
          "desc": "Any data passed when initializing the event."
        }
      ],
      "methods": [
        {
          "term": "CustomEvent.initCustomEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent",
          "desc": "Initializes a CustomEvent object. If the event has already being dispatched, this method does nothing."
        }
      ]
    }
  },
  {
    "title": "DataTransfer",
    "calls": {
      "constructors": [
        {
          "term": "DataTransfer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/DataTransfer",
          "desc": "Creates and returns a new DataTransfer object."
        }
      ]
    }
  },
  {
    "title": "DataTransferItem",
    "calls": {
      "properties": [
        {
          "term": "DataTransferItem.kind Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind",
          "desc": "The kind of drag data item, string or file."
        },
        {
          "term": "DataTransferItem.type Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/type",
          "desc": "The drag data item's type, typically a MIME type."
        }
      ],
      "methods": [
        {
          "term": "DataTransferItem.getAsFile()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFile",
          "desc": "Returns the File object associated with the drag data item (or null if the drag item is not a file)."
        },
        {
          "term": "DataTransferItem.getAsFileSystemHandle()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle",
          "desc": "Returns a FileSystemFileHandle if the dragged item is a file, or a FileSystemDirectoryHandle if the dragged item is a directory."
        },
        {
          "term": "DataTransferItem.getAsString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsString",
          "desc": "Invokes the specified callback with the drag data item string as its argument."
        },
        {
          "term": "DataTransferItem.webkitGetAsEntry() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry",
          "desc": "Returns an object based on FileSystemEntry representing the selected file's entry in its file system. This will generally be either a FileSystemFileEntry or FileSystemDirectoryEntry object."
        }
      ]
    }
  },
  {
    "title": "DataTransferItemList",
    "calls": {
      "properties": [
        {
          "term": "DataTransferItemList.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/length",
          "desc": "An unsigned long that is the number of drag items in the list."
        }
      ],
      "methods": [
        {
          "term": "DataTransferItemList.add()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/add",
          "desc": "Adds an item (either a File object or a string) to the drag item list and returns a DataTransferItem object for the new item."
        },
        {
          "term": "DataTransferItemList.remove()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/remove",
          "desc": "Removes the drag item from the list at the given index."
        },
        {
          "term": "DataTransferItemList.clear()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear",
          "desc": "Removes all of the drag items from the list."
        },
        {
          "term": "DataTransferItemList.DataTransferItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/DataTransferItem",
          "desc": "Getter that returns a DataTransferItem at the given index."
        }
      ]
    }
  },
  {
    "title": "DedicatedWorkerGlobalScope",
    "calls": {
      "properties": [
        {
          "term": "DedicatedWorkerGlobalScope.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name",
          "desc": "The name that the Worker was (optionally) given when it was created using the Worker() constructor. This is mainly useful for debugging purposes."
        }
      ],
      "handlers": [
        {
          "term": "DedicatedWorkerGlobalScope.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage",
          "desc": "Is an EventHandler representing the code to be called when the message event is raised. These events are of type MessageEvent and will be called when the worker receives a message from the document that started it (i.e. from the Worker.postMessage method.)"
        },
        {
          "term": "DedicatedWorkerGlobalScope.onmessageerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror",
          "desc": "Is an EventHandler representing the code to be called when the messageerror event is raised."
        }
      ],
      "methods": [
        {
          "term": "DedicatedWorkerGlobalScope.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close",
          "desc": "Discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope."
        },
        {
          "term": "DedicatedWorkerGlobalScope.postMessage()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage",
          "desc": "Sends a message — which can consist of any JavaScript object — to the parent document that first spawned the worker."
        }
      ]
    }
  },
  {
    "title": "DelayNode",
    "calls": {
      "constructors": [
        {
          "term": "DelayNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/DelayNode",
          "desc": "Creates a new instance of an DelayNode object instance. Alternatively, you can use the BaseAudioContext.createDelay() factory method."
        }
      ],
      "properties": [
        {
          "term": "DelayNode.delayTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/delayTime",
          "desc": "Is an a-rate AudioParam representing the amount of delay to apply, specified in seconds."
        }
      ]
    }
  },
  {
    "title": "DeviceProximityEvent",
    "calls": {
      "properties": [
        {
          "term": "DeviceProximityEvent.max Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/max",
          "desc": "The maximum sensing distance the sensor is able to report, in centimeters."
        },
        {
          "term": "DeviceProximityEvent.min Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/min",
          "desc": "The minimum sensing distance the sensor is able to report, in centimeters. Ususally zero."
        },
        {
          "term": "DeviceProximityEvent.value Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/value",
          "desc": "The current device proximity, in centimeters."
        }
      ]
    }
  },
  {
    "title": "DirectoryEntrySync",
    "calls": {}
  },
  {
    "title": "DirectoryReaderSync",
    "calls": {}
  },
  {
    "title": "DisplayMediaStreamConstraints",
    "calls": {
      "properties": [
        {
          "term": "audio",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DisplayMediaStreamConstraints/audio",
          "desc": "A Boolean or MediaTrackConstraints value; if a Boolean, this value indicates whether or not to include an audio track in the MediaStream returned by getDisplayMedia(). If a MediaTrackConstraints object is provided here, an audio track is included in the stream, but the audio is processed to match the specified constraints after being retrieved from the hardware but before being added to the MediaStream. The default value is false."
        },
        {
          "term": "video",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DisplayMediaStreamConstraints/video",
          "desc": "If true (the default), the display contents are included in a MediaStreamTrack within the stream provided by getDisplayMedia(). Optionally, a MediaTrackConstraints object may be given, providing options specifying processing to be performed on the video data before adding it to the stream. A value of false is not permitted, and results in a TypeError being thrown."
        }
      ]
    }
  },
  {
    "title": "Document",
    "calls": {
      "constructors": [
        {
          "term": "Document()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/Document",
          "desc": "Creates a new Document object."
        }
      ],
      "properties": [
        {
          "term": "Document.body",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/body",
          "desc": "Returns the <body> or <frameset> node of the current document."
        },
        {
          "term": "Document.characterSetRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet",
          "desc": "Returns the character set being used by the document."
        },
        {
          "term": "Document.compatMode \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode",
          "desc": "Indicates whether the document is rendered in quirks or strict mode."
        },
        {
          "term": "Document.contentType \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType",
          "desc": "Returns the Content-Type from the MIME Header of the current document."
        },
        {
          "term": "Document.doctypeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype",
          "desc": "Returns the Document Type Definition (DTD) of the current document."
        },
        {
          "term": "Document.documentElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement",
          "desc": "Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element."
        },
        {
          "term": "Document.documentURIRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI",
          "desc": "Returns the document location as a string."
        },
        {
          "term": "Document.embedsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds",
          "desc": "Returns a list of the embedded <embed> elements within the current document."
        },
        {
          "term": "Document.fonts",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts",
          "desc": "Returns the FontFaceSet interface of the current document."
        },
        {
          "term": "Document.formsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/forms",
          "desc": "Returns a list of the <form> elements within the current document."
        },
        {
          "term": "Document.headRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/head",
          "desc": "Returns the <head> element of the current document."
        },
        {
          "term": "Document.hiddenRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden",
          "desc": "Returns a Boolean value indicating if the page is considered hidden or not."
        },
        {
          "term": "Document.imagesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/images",
          "desc": "Returns a list of the images in the current document."
        },
        {
          "term": "Document.implementationRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation",
          "desc": "Returns the DOM implementation associated with the current document."
        },
        {
          "term": "Document.linksRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/links",
          "desc": "Returns a list of all the hyperlinks in the document."
        },
        {
          "term": "Document.mozSyntheticDocument \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument",
          "desc": "Returns a Boolean that is true only if this document is synthetic, such as a standalone image, video, audio file, or the like."
        },
        {
          "term": "Document.pictureInPictureEnabledRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/pictureInPictureEnabled",
          "desc": "Returns true if the picture-in-picture feature is enabled"
        },
        {
          "term": "Document.pluginsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins",
          "desc": "Returns a list of the available plugins."
        },
        {
          "term": "Document.featurePolicy \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/featurePolicy",
          "desc": "Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document."
        },
        {
          "term": "Document.scriptsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts",
          "desc": "Returns all the <script> elements on the document."
        },
        {
          "term": "Document.scrollingElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement",
          "desc": "Returns a reference to the Element that scrolls the document."
        },
        {
          "term": "Document.timeline \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline",
          "desc": "Returns timeline as a special instance of DocumentTimeline that is automatically created on page load."
        },
        {
          "term": "Document.undoManager \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "",
          "desc": "…"
        },
        {
          "term": "Document.visibilityStateRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState",
          "desc": "Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded."
        }
      ],
      "handlers": [
        {
          "term": "Document.onafterscriptexecute \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute",
          "desc": "Represents the event handling code for the afterscriptexecute event."
        },
        {
          "term": "Document.onbeforescriptexecute \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute",
          "desc": "Represents the event handling code for the beforescriptexecute event."
        },
        {
          "term": "Document.oncopy \n    This API has not been standardized.",
          "link": "",
          "desc": "Represents the event handling code for the copy event."
        },
        {
          "term": "Document.oncut \n    This API has not been standardized.",
          "link": "",
          "desc": "Represents the event handling code for the cut event."
        },
        {
          "term": "Document.onfullscreenchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange",
          "desc": "Is an EventHandler representing the code to be called when the fullscreenchange event is raised."
        },
        {
          "term": "Document.onfullscreenerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror",
          "desc": "Is an EventHandler representing the code to be called when the fullscreenerror event is raised."
        },
        {
          "term": "Document.onpaste \n    This API has not been standardized.",
          "link": "",
          "desc": "Represents the event handling code for the paste event."
        },
        {
          "term": "Document.onreadystatechange",
          "link": "",
          "desc": "Represents the event handling code for the readystatechange event."
        },
        {
          "term": "Document.onselectionchange \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange",
          "desc": "Is an EventHandler representing the code to be called when the selectionchange event is raised."
        },
        {
          "term": "Document.onvisibilitychange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange",
          "desc": "Is an EventHandler representing the code to be called when the visibilitychange event is raised."
        }
      ],
      "methods": [
        {
          "term": "Document.adoptNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode",
          "desc": "Adopt node from an external document."
        },
        {
          "term": "Document.captureEvents() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "See Window.captureEvents."
        },
        {
          "term": "Document.caretRangeFromPoint() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint",
          "desc": "Gets a Range object for the document fragment under the specified coordinates."
        },
        {
          "term": "Document.createAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute",
          "desc": "Creates a new Attr object and returns it."
        },
        {
          "term": "Document.createAttributeNS()",
          "link": "",
          "desc": "Creates a new attribute node in a given namespace and returns it."
        },
        {
          "term": "Document.createCDATASection()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection",
          "desc": "Creates a new CDATA node and returns it."
        },
        {
          "term": "Document.createComment()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment",
          "desc": "Creates a new comment node and returns it."
        },
        {
          "term": "Document.createDocumentFragment()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment",
          "desc": "Creates a new document fragment."
        },
        {
          "term": "Document.createElement()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
          "desc": "Creates a new element with the given tag name."
        },
        {
          "term": "Document.createElementNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS",
          "desc": "Creates a new element with the given tag name and namespace URI."
        },
        {
          "term": "Document.createEntityReference() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createEntityReference",
          "desc": "Creates a new entity reference object and returns it."
        },
        {
          "term": "Document.createEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent",
          "desc": "Creates an event object."
        },
        {
          "term": "Document.createNodeIterator()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator",
          "desc": "Creates a NodeIterator object."
        },
        {
          "term": "Document.createProcessingInstruction()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction",
          "desc": "Creates a new ProcessingInstruction object."
        },
        {
          "term": "Document.createRange()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange",
          "desc": "Creates a Range object."
        },
        {
          "term": "Document.createTextNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode",
          "desc": "Creates a text node."
        },
        {
          "term": "Document.createTouch() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouch",
          "desc": "Creates a Touch object."
        },
        {
          "term": "Document.createTouchList() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouchList",
          "desc": "Creates a TouchList object."
        },
        {
          "term": "Document.createTreeWalker()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker",
          "desc": "Creates a TreeWalker object."
        },
        {
          "term": "Document.enableStyleSheetsForSet() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet",
          "desc": "Enables the style sheets for the specified style sheet set."
        },
        {
          "term": "Document.exitPictureInPicture()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPictureInPicture",
          "desc": "Remove the video from the floating picture-in-picture window back to its original container."
        },
        {
          "term": "Document.exitPointerLock() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock",
          "desc": "Release the pointer lock."
        },
        {
          "term": "Document.getElementsByClassName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName",
          "desc": "Returns a list of elements with the given class name."
        },
        {
          "term": "Document.getElementsByTagName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName",
          "desc": "Returns a list of elements with the given tag name."
        },
        {
          "term": "Document.getElementsByTagNameNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS",
          "desc": "Returns a list of elements with the given tag name and namespace."
        },
        {
          "term": "Document.hasStorageAccess() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/hasStorageAccess",
          "desc": "Returns a Promise that resolves with a boolean value indicating whether the document has access to its first-party storage."
        },
        {
          "term": "Document.importNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode",
          "desc": "Returns a clone of a node from an external document."
        },
        {
          "term": "Document.normalizeDocument() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Replaces entities, normalizes text nodes, etc."
        },
        {
          "term": "Document.releaseCapture() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture",
          "desc": "Releases the current mouse capture if it's on an element in this document."
        },
        {
          "term": "Document.releaseEvents() \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "See Window.releaseEvents()."
        },
        {
          "term": "Document.requestStorageAccess()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccess",
          "desc": "Returns a Promise that resolves if the access to first-party storage was granted, and rejects if access was denied."
        },
        {
          "term": "Document.routeEvent() \n    This API has not been standardized.\n    \n    \n Obsolete since Gecko 24",
          "link": "",
          "desc": "See Window.routeEvent()."
        },
        {
          "term": "Document.mozSetImageElement() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSetImageElement",
          "desc": "Allows you to change the element being used as the background image for a specified element ID."
        }
      ]
    }
  },
  {
    "title": "DocumentFragment",
    "calls": {
      "constructors": [
        {
          "term": "DocumentFragment()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment",
          "desc": "Creates and returns a new DocumentFragment object."
        }
      ],
      "properties": [
        {
          "term": "ParentNode.children Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
          "desc": "Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object."
        },
        {
          "term": "ParentNode.firstElementChild Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
          "desc": "Returns the Element that is the first child of the DocumentFragment object, or null if there is none."
        },
        {
          "term": "ParentNode.lastElementChild Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
          "desc": "Returns the Element that is the last child of the DocumentFragment object, or null if there is none."
        },
        {
          "term": "ParentNode.childElementCount Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
          "desc": "Returns an unsigned long giving the amount of child elements the DocumentFragment has."
        }
      ],
      "methods": [
        {
          "term": "DocumentFragment.querySelector()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector",
          "desc": "Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors."
        },
        {
          "term": "DocumentFragment.querySelectorAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll",
          "desc": "Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors."
        },
        {
          "term": "DocumentFragment.getElementById()",
          "link": "",
          "desc": "Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById()."
        }
      ]
    }
  },
  {
    "title": "DocumentOrShadowRoot",
    "calls": {
      "properties": [
        {
          "term": "DocumentOrShadowRoot.activeElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/activeElement",
          "desc": "Returns the Element within the shadow tree that has focus."
        },
        {
          "term": "DocumentOrShadowRoot.fullscreenElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement",
          "desc": "Returns the Element that's currently in full screen mode for this document."
        },
        {
          "term": "DocumentOrShadowRoot.pictureInPictureElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pictureInPictureElement",
          "desc": "Returns the HTMLVideoElement that's currently in picture-in-picture mode for this document."
        },
        {
          "term": "DocumentOrShadowRoot.pointerLockElement \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement",
          "desc": "Returns the element set as the target for mouse events while the pointer is locked. It returns null if lock is pending, the pointer is unlocked, or if the target is in another document."
        },
        {
          "term": "DocumentOrShadowRoot.styleSheetsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets",
          "desc": "Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document."
        }
      ],
      "methods": [
        {
          "term": "DocumentOrShadowRoot.caretPositionFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/caretPositionFromPoint",
          "desc": "Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node."
        },
        {
          "term": "DocumentOrShadowRoot.elementFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementFromPoint",
          "desc": "Returns the topmost element at the specified coordinates."
        },
        {
          "term": "DocumentOrShadowRoot.elementsFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementsFromPoint",
          "desc": "Returns an array of all elements at the specified coordinates."
        },
        {
          "term": "DocumentOrShadowRoot.getAnimations() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getAnimations",
          "desc": "Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document"
        },
        {
          "term": "DocumentOrShadowRoot.getSelection()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection",
          "desc": "Returns a Selection object representing the range of text selected by the user, or the current position of the caret."
        },
        {
          "term": "DocumentOrShadowRoot.nodeFromPoint() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot",
          "desc": "Returns the topmost node at the specified coordinates."
        },
        {
          "term": "DocumentOrShadowRoot.nodesFromPoint() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot",
          "desc": "Returns an array of all nodes at the specified coordinates."
        }
      ]
    }
  },
  {
    "title": "DocumentTimeline",
    "calls": {
      "constructors": [
        {
          "term": "DocumentTimeline()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline/DocumentTimeline",
          "desc": "Creates a new DocumentTimeline object associated with the active document of the current browsing context."
        }
      ],
      "properties": [
        {
          "term": "AnimationTimeline.currentTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline/currentTime",
          "desc": "Returns the time value in milliseconds for this timeline or null if it is inactive."
        }
      ]
    }
  },
  {
    "title": "DocumentType",
    "calls": {
      "properties": [
        {
          "term": "DocumentType.entities Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "A NamedNodeMap of entities declared in the DTD. Every node in this map implements the Entity interface."
        },
        {
          "term": "DocumentType.internalSubset Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "A DOMString of the internal subset, or null if there is none. Eg \"<!ELEMENT foo (bar)>\"."
        },
        {
          "term": "DocumentType.name Read only",
          "link": "",
          "desc": "A DOMString, eg \"html\" for <!DOCTYPE HTML>."
        },
        {
          "term": "DocumentType.notations Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "A NamedNodeMap with notations declared in the DTD. Every node in this map implements the Notation interface."
        },
        {
          "term": "DocumentType.publicId Read only",
          "link": "",
          "desc": "A DOMString, eg \"-//W3C//DTD HTML 4.01//EN\", empty string for HTML5."
        },
        {
          "term": "DocumentType.systemId Read only",
          "link": "",
          "desc": "A DOMString, eg \"http://www.w3.org/TR/html4/strict.dtd\", empty string for HTML5."
        }
      ],
      "methods": [
        {
          "term": "ChildNode.remove() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
          "desc": "Removes the object from its parent children list."
        }
      ]
    }
  },
  {
    "title": "DOMException",
    "calls": {
      "constructors": [
        {
          "term": "DOMException() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/DOMException",
          "desc": "Returns a DOMException object with a specified message and name."
        }
      ],
      "properties": [
        {
          "term": "DOMException.code \n    This deprecated API should no longer be used, but will probably still work.\n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/code",
          "desc": "Returns a short that contains one of the error code constants, or 0 if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the DOMException.name attribute."
        },
        {
          "term": "DOMException.message Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/message",
          "desc": "Returns a DOMString representing a message or description associated with the given error name."
        },
        {
          "term": "DOMException.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/name",
          "desc": "Returns a DOMString that contains one of the strings associated with an error name."
        }
      ]
    }
  },
  {
    "title": "DOMHighResTimeStamp",
    "calls": {}
  },
  {
    "title": "DOMImplementation",
    "calls": {
      "methods": [
        {
          "term": "DOMImplementation.createDocument()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument",
          "desc": "Creates and returns an XMLDocument."
        },
        {
          "term": "DOMImplementation.createDocumentType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType",
          "desc": "Creates and returns a DocumentType."
        },
        {
          "term": "DOMImplementation.createHTMLDocument()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument",
          "desc": "Creates and returns an HTML Document."
        },
        {
          "term": "DOMImplementation.hasFeature()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature",
          "desc": "Returns a Boolean indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior."
        }
      ]
    }
  },
  {
    "title": "DOMMatrixReadOnly",
    "calls": {
      "properties": [
        {
          "term": "is2D Read only",
          "link": null,
          "desc": "A Boolean flag whose value is true if the matrix was initialized as a 2D matrix. If false, the matrix is 3D."
        },
        {
          "term": "isIdentity Read only",
          "link": null,
          "desc": "A Boolean whose value is true if the matrix is the identity matrix. The identity matrix is one in which every value is 0 except those on the main diagonal from top-left to bottom-right corner (in other words, where the offsets in each direction are equal)."
        },
        {
          "term": "m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44",
          "link": null,
          "desc": "Double-precision floating-point values representing each component of a 4×4 matrix, where m11 through m14 are the first column, m21 through m24 are the second column, and so forth."
        },
        {
          "term": "a, b, c, d, e, f",
          "link": null,
          "desc": "Double-precision floating-point values representing the components of a 4×4 matrix which are required in order to perform 2D rotations and translations. These are aliases for specific components of a 4×4 matrix, as shown below. 2D 3D equivalent a m11 b m12 c m21 d m22 e m41 f m42"
        }
      ],
      "methods": [
        {
          "term": "DOMMatrixReadOnly.flipX()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/flipX",
          "desc": "Returns a new DOMMatrix created by flipping the source matrix around its X-axis. This is equivalent to multiplying the matrix by DOMMatrix(-1, 0, 0, 1, 0, 0). The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.flipY()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by flipping the source matrix around its Y-axis. This is equivalent to multiplying the matrix by DOMMatrix(1, 0, 0, -1, 0, 0). The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.inverse()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by inverting the source matrix. If the matrix cannot be inverted, the new matrix's components are all set to NaN and its is2D property is set to false. The original matrix is not altered."
        },
        {
          "term": "DOMMatrixReadOnly.multiply()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by computing the dot product of the source matrix and the specified matrix: A⋅B. If no matrix is specified as the multiplier, the matrix is multiplied by a matrix in which every element is 0 except the bottom-right corner and the element immediately above and to its left: m33 and m34. These have the default value of 1. The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.rotateAxisAngle()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by rotating the source matrix by the given angle around the specified vector. The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.rotate()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by rotating the source matrix around each of its axes by the specified number of degrees. The original matrix is not altered."
        },
        {
          "term": "DOMMatrixReadOnly.rotateFromVector()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by rotating the source matrix by the angle between the specified vector and (1, 0). The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.scale()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/scale",
          "desc": "Returns a new DOMMatrix created by scaling the source matrix by the amount specified for each axis, centered on the given origin. By default, the X and Z axes are scaled by 1 and the Y axis has no default scaling value. The default origin is (0, 0, 0). The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.scale3d()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by scaling the source 3D matrix by the given factor along all its axes, centered on the specified origin point. The default origin is (0, 0, 0). The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.scaleNonUniform() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Returns a new DOMMatrix created by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both 1, but the scaling factor for X must be specified. The default origin is (0, 0, 0). The original matrix is not changed."
        },
        {
          "term": "DOMMatrixReadOnly.skewX()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its X-axis. The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.skewY()",
          "link": "",
          "desc": "Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its Y-axis. The original matrix is not modified."
        },
        {
          "term": "DOMMatrixReadOnly.toFloat32Array()",
          "link": "",
          "desc": "Returns a new Float32Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as single-precision floating-point numbers in column-major (colexographical access, or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)"
        },
        {
          "term": "DOMMatrixReadOnly.toFloat64Array()",
          "link": "",
          "desc": "Returns a new Float64Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as double-precision floating-point numbers in column-major (colexographical access access or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)"
        },
        {
          "term": "DOMMatrixReadOnly.toJSON()",
          "link": "",
          "desc": "Returns a JSON representation of the DOMMatrixReadOnly object."
        },
        {
          "term": "DOMMatrixReadOnly.toString()",
          "link": "",
          "desc": "Creates and returns a DOMString object which contains a string representation of the matrix in CSS matrix syntax, using the appropriate CSS matrix notation. See the matrix() CSS function for details on this syntax. For a 2D matrix, the elements a through f are listed, for a total of six values and the form matrix(a, b, c, d, e, f). For a 3D matrix, the returned string contains all 16 elements and takes the form matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44). See the CSS matrix3d() function for details on the 3D notation's syntax. Throws an InvalidStateError exception if any of the elements in the matrix are non-finite (even if, in the case of a 2D matrix, the non-finite values are in elements not used by the 2D matrix representation)."
        },
        {
          "term": "DOMMatrixReadOnly.transformPoint()",
          "link": "",
          "desc": "Transforms the specified point using the matrix, returning a new DOMPoint object containing the transformed point. Neither the matrix nor the original point are altered."
        },
        {
          "term": "DOMMatrixReadOnly.translate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/translate",
          "desc": "Returns a new DOMMatrix containing a matrix calculated by translating the source matrix using the specified vector. By default, the vector is (0, 0, 0). The original matrix is not changed."
        }
      ]
    }
  },
  {
    "title": "DOMParser",
    "calls": {}
  },
  {
    "title": "DOMPoint",
    "calls": {
      "constructors": [
        {
          "term": "DOMPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/DOMPoint",
          "desc": "Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or a DOMPointInit dictionary to create a new point by calling the DOMPoint.fromPoint() static method."
        }
      ],
      "properties": [
        {
          "term": "DOMPoint.x",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x",
          "desc": "The x coordinate of the DOMPoint."
        },
        {
          "term": "DOMPoint.y",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y",
          "desc": "The y coordinate of the DOMPoint."
        },
        {
          "term": "DOMPoint.z",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z",
          "desc": "The z coordinate of the DOMPoint."
        },
        {
          "term": "DOMPoint.w",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w",
          "desc": "The perspective value of the DOMPoint."
        }
      ]
    }
  },
  {
    "title": "DOMPointInit",
    "calls": {
      "properties": [
        {
          "term": "DOMPointInit.x",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/x",
          "desc": "An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0."
        },
        {
          "term": "DOMPointInit.y",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/y",
          "desc": "An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0."
        },
        {
          "term": "DOMPointInit.z",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/z",
          "desc": "An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0."
        },
        {
          "term": "DOMPointInit.w",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/w",
          "desc": "The point's w perspective value, given as an unrestricted floating-point number. The default is 1."
        }
      ]
    }
  },
  {
    "title": "DOMPointReadOnly",
    "calls": {
      "constructors": [
        {
          "term": "DOMPointReadOnly()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/DOMPointReadOnly",
          "desc": "Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using aDOMPointInit object, you can instead use DOMPointReadOnly.fromPoint()."
        }
      ],
      "properties": [
        {
          "term": "DOMPointReadOnly.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x",
          "desc": "The point's horizontal coordinate, x."
        },
        {
          "term": "DOMPointReadOnly.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y",
          "desc": "The point's vertical coordinate, y."
        },
        {
          "term": "DOMPointReadOnly.z Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z",
          "desc": "The point's depth coordinate, z."
        },
        {
          "term": "DOMPointReadOnly.w Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w",
          "desc": "The point's perspective value, w."
        }
      ],
      "methods": [
        {
          "term": "matrixTransform()",
          "link": "",
          "desc": "Applies a matrix transform specified as a DOMMatrixInit object to the DOMPointReadOnly object."
        },
        {
          "term": "toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/toJSON",
          "desc": "Returns a JSON representation of the DOMPointReadOnly object."
        }
      ]
    }
  },
  {
    "title": "DOMRect",
    "calls": {
      "constructors": [
        {
          "term": "DOMRect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/DOMRect",
          "desc": "Creates a new DOMRect object."
        }
      ],
      "properties": [
        {
          "term": "DOMRectReadOnly.x",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/x",
          "desc": "The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle)."
        },
        {
          "term": "DOMRectReadOnly.y",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/y",
          "desc": "The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle)."
        },
        {
          "term": "DOMRectReadOnly.width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/width",
          "desc": "The width of the DOMRect."
        },
        {
          "term": "DOMRectReadOnly.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/height",
          "desc": "The height of the DOMRect."
        },
        {
          "term": "DOMRectReadOnly.top",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/top",
          "desc": "Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative.)"
        },
        {
          "term": "DOMRectReadOnly.right",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/right",
          "desc": "Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative.)"
        },
        {
          "term": "DOMRectReadOnly.bottom",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/bottom",
          "desc": "Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative.)"
        },
        {
          "term": "DOMRectReadOnly.left",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/left",
          "desc": "Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative.)"
        }
      ]
    }
  },
  {
    "title": "DOMRectReadOnly",
    "calls": {
      "constructors": [
        {
          "term": "DOMRectReadOnly()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/DOMRectReadOnly",
          "desc": "Defined to create a new DOMRectReadOnly object. Note that this constructor cannot be called by 3rd party JavaScript; doing so returns an \"Illegal constructor\" TypeError."
        }
      ],
      "properties": [
        {
          "term": "DOMRectReadOnly.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/x",
          "desc": "The x coordinate of the DOMRect's origin."
        },
        {
          "term": "DOMRectReadOnly.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/y",
          "desc": "The y coordinate of the DOMRect's origin."
        },
        {
          "term": "DOMRectReadOnly.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/width",
          "desc": "The width of the DOMRect."
        },
        {
          "term": "DOMRectReadOnly.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/height",
          "desc": "The height of the DOMRect."
        },
        {
          "term": "DOMRectReadOnly.top Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/top",
          "desc": "Returns the top coordinate value of the DOMRect (usually the same as y.)"
        },
        {
          "term": "DOMRectReadOnly.right Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/right",
          "desc": "Returns the right coordinate value of the DOMRect (usually the same as x + width)."
        },
        {
          "term": "DOMRectReadOnly.bottom Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/bottom",
          "desc": "Returns the bottom coordinate value of the DOMRect (usually the same as y + height)."
        },
        {
          "term": "DOMRectReadOnly.left Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/left",
          "desc": "Returns the left coordinate value of the DOMRect (usually the same as x)."
        }
      ]
    }
  },
  {
    "title": "DOMString",
    "calls": {}
  },
  {
    "title": "DOMStringList",
    "calls": {
      "properties": [
        {
          "term": "DOMStringList.length Read only",
          "link": "",
          "desc": "Returns the length of the list."
        }
      ],
      "methods": [
        {
          "term": "DOMStringList.item()",
          "link": "",
          "desc": "Returns a DOMString."
        },
        {
          "term": "DOMStringList.contains()",
          "link": "",
          "desc": "Returns Boolean indicating if the given string is in the list"
        }
      ]
    }
  },
  {
    "title": "DOMStringMap",
    "calls": {}
  },
  {
    "title": "DOMTimeStamp",
    "calls": {}
  },
  {
    "title": "DOMTokenList",
    "calls": {
      "properties": [
        {
          "term": "DOMTokenList.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/length",
          "desc": "Is an integer representing the number of objects stored in the object."
        },
        {
          "term": "DOMTokenList.value",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value",
          "desc": "A stringifier property that returns the value of the list as a DOMString."
        }
      ],
      "methods": [
        {
          "term": "DOMTokenList.item(index)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/item",
          "desc": "Returns the item in the list by its index, or undefined if index is greater than or equal to the list's length."
        },
        {
          "term": "DOMTokenList.contains(token)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains",
          "desc": "Returns true if the list contains the given token, otherwise false."
        },
        {
          "term": "DOMTokenList.add(token1[, token2[, ...tokenN]])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add",
          "desc": "Adds the specified token(s) to the list."
        },
        {
          "term": "DOMTokenList.remove(token1[, token2[, ...tokenN]])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove",
          "desc": "Removes the specified token(s) from the list."
        },
        {
          "term": "DOMTokenList.replace(oldToken, newToken)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace",
          "desc": "Replaces token with newToken."
        },
        {
          "term": "DOMTokenList.supports(token)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports",
          "desc": "Returns true if a given token is in the associated attribute's supported tokens."
        },
        {
          "term": "DOMTokenList.toggle(token [, force])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle",
          "desc": "Removes token from the list if it exists, or adds token to the list if it doesn't. Returns a boolean indicating whether token is in the list after the operation."
        },
        {
          "term": "DOMTokenList.entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/entries",
          "desc": "Returns an iterator, allowing you to go through all key/value pairs contained in this object."
        },
        {
          "term": "DOMTokenList.forEach(callback [, thisArg])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/forEach",
          "desc": "Executes a provided callback function once per DOMTokenList element."
        },
        {
          "term": "DOMTokenList.keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/keys",
          "desc": "Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object."
        },
        {
          "term": "DOMTokenList.values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/values",
          "desc": "Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object."
        }
      ]
    }
  },
  {
    "title": "DoubleRange",
    "calls": {
      "properties": [
        {
          "term": "max",
          "link": null,
          "desc": "A floating-point value specifying the largest permissible value of the property it describes."
        },
        {
          "term": "min",
          "link": null,
          "desc": "A floating-point value specifying the smallest permissible value of the property it describes."
        }
      ]
    }
  },
  {
    "title": "DragEvent",
    "calls": {
      "properties": [
        {
          "term": "DragEvent.dataTransfer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer",
          "desc": "The data that is transferred during a drag and drop interaction."
        }
      ]
    }
  },
  {
    "title": "DynamicsCompressorNode",
    "calls": {
      "constructors": [
        {
          "term": "DynamicsCompressorNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/DynamicsCompressorNode",
          "desc": "Creates a new instance of an DynamicsCompressorNode object."
        }
      ],
      "properties": [
        {
          "term": "DynamicsCompressorNode.threshold Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/threshold",
          "desc": "Is a k-rate AudioParam representing the decibel value above which the compression will start taking effect."
        },
        {
          "term": "DynamicsCompressorNode.knee Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/knee",
          "desc": "Is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion."
        },
        {
          "term": "DynamicsCompressorNode.ratio Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/ratio",
          "desc": "Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output."
        },
        {
          "term": "DynamicsCompressorNode.reduction Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/reduction",
          "desc": "Is a float representing the amount of gain reduction currently applied by the compressor to the signal."
        },
        {
          "term": "DynamicsCompressorNode.attack Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/attack",
          "desc": "Is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB."
        },
        {
          "term": "DynamicsCompressorNode.release Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/release",
          "desc": "Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB."
        }
      ]
    }
  },
  {
    "title": "EcdhKeyDeriveParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to ECDH."
        },
        {
          "term": "public",
          "link": null,
          "desc": "A CryptoKey object representing the public key of the other entity."
        }
      ]
    }
  },
  {
    "title": "EcdsaParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to ECDSA."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString. An identifier for the digest algorithm to use. This should be one of the following: SHA-256: selects the SHA-256 algorithm. SHA-384: selects the SHA-384 algorithm. SHA-512: selects the SHA-512 algorithm. Warning: SHA-1 is also supported here but the SHA-1 algorithm is considered vulnerable and should no longer be used."
        }
      ]
    }
  },
  {
    "title": "EcKeyGenParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to ECDSA or ECDH, depending on the algorithm you want to use."
        },
        {
          "term": "namedCurve",
          "link": null,
          "desc": "A DOMString representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves: P-256 P-384 P-521"
        }
      ]
    }
  },
  {
    "title": "EcKeyImportParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to ECDSA or ECDH, depending on the algorithm you want to use."
        },
        {
          "term": "namedCurve",
          "link": null,
          "desc": "A DOMString representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves: P-256 P-384 P-521"
        }
      ]
    }
  },
  {
    "title": "Element",
    "calls": {
      "properties": [
        {
          "term": "Element.attributes Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes",
          "desc": "Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element."
        },
        {
          "term": "Element.classList Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/classList",
          "desc": "Returns a DOMTokenList containing the list of class attributes."
        },
        {
          "term": "Element.className",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/className",
          "desc": "Is a DOMString representing the class of the element."
        },
        {
          "term": "Element.clientHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight",
          "desc": "Returns a Number representing the inner height of the element."
        },
        {
          "term": "Element.clientLeft Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft",
          "desc": "Returns a Number representing the width of the left border of the element."
        },
        {
          "term": "Element.clientTop Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop",
          "desc": "Returns a Number representing the width of the top border of the element."
        },
        {
          "term": "Element.clientWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth",
          "desc": "Returns a Number representing the inner width of the element."
        },
        {
          "term": "Element.computedName Read only",
          "link": "",
          "desc": "Returns a DOMString containing the label exposed to accessibility."
        },
        {
          "term": "Element.computedRole Read only",
          "link": "",
          "desc": "Returns a DOMString containing the ARIA role that has been applied to a particular element."
        },
        {
          "term": "Element.id",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/id",
          "desc": "Is a DOMString representing the id of the element."
        },
        {
          "term": "Element.innerHTML",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML",
          "desc": "Is a DOMString representing the markup of the element's content."
        },
        {
          "term": "Element.localName Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/localName",
          "desc": "A DOMString representing the local part of the qualified name of the element."
        },
        {
          "term": "Element.namespaceURI Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI",
          "desc": "The namespace URI of the element, or null if it is no namespace. Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the http://www.w3.org/1999/xhtml namespace in both HTML and XML trees."
        },
        {
          "term": "NonDocumentTypeChildNode.nextElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
          "desc": "Is an Element, the element immediately following the given one in the tree, or null if there's no sibling node."
        },
        {
          "term": "Element.outerHTML",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML",
          "desc": "Is a DOMString representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string."
        },
        {
          "term": "Element.part",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/part",
          "desc": "Represents the part identifier(s) of the element (i.e. set using the part attribute), returned as a DOMTokenList."
        },
        {
          "term": "Element.prefix Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix",
          "desc": "A DOMString representing the namespace prefix of the element, or null if no prefix is specified."
        },
        {
          "term": "NonDocumentTypeChildNode.previousElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
          "desc": "Is a Element, the element immediately preceding the given one in the tree, or null if there is no sibling element."
        },
        {
          "term": "Element.scrollHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight",
          "desc": "Returns a Number representing the scroll view height of an element."
        },
        {
          "term": "Element.scrollLeft",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft",
          "desc": "Is a Number representing the left scroll offset of the element."
        },
        {
          "term": "Element.scrollLeftMax \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax",
          "desc": "Returns a Number representing the maximum left scroll offset possible for the element."
        },
        {
          "term": "Element.scrollTop",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop",
          "desc": "A Number representing number of pixels the top of the document is scrolled vertically."
        },
        {
          "term": "Element.scrollTopMax \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax",
          "desc": "Returns a Number representing the maximum top scroll offset possible for the element."
        },
        {
          "term": "Element.scrollWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth",
          "desc": "Returns a Number representing the scroll view width of the element."
        },
        {
          "term": "Element.shadowRootRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot",
          "desc": "Returns the open shadow root that is hosted by the element, or null if no open shadow root is present."
        },
        {
          "term": "Element.openOrClosedShadowRoot \n    This API has not been standardized.\n    \n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/openOrClosedShadowRoot",
          "desc": "Returns the shadow root that is hosted by the element, regardless if its open or closed. Available only to WebExtensions."
        },
        {
          "term": "Element.slot \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/slot",
          "desc": "Returns the name of the shadow DOM slot the element is inserted in."
        },
        {
          "term": "Element.tabStop \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop",
          "desc": "Is a Boolean indicating if the element can receive input focus via the tab key."
        },
        {
          "term": "Element.tagName Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName",
          "desc": "Returns a String with the name of the tag for the given element."
        },
        {
          "term": "Element.undoManager \n    This is an experimental API that should not be used in production code.\n    \n Read only",
          "link": "",
          "desc": "Returns the UndoManager associated with the element."
        },
        {
          "term": "Element.undoScope \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a Boolean indicating if the element is an undo scope host, or not."
        }
      ],
      "methods": [
        {
          "term": "EventTarget.addEventListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
          "desc": "Registers an event handler to a specific event type on the element."
        },
        {
          "term": "Element.attachShadow()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow",
          "desc": "Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot."
        },
        {
          "term": "Element.animate() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/animate",
          "desc": "A shortcut method to create and run an animation on an element. Returns the created Animation object instance."
        },
        {
          "term": "Element.closest()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/closest",
          "desc": "Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter."
        },
        {
          "term": "Element.createShadowRoot() \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/createShadowRoot",
          "desc": "Creates a shadow DOM on the element, turning it into a shadow host. Returns a ShadowRoot."
        },
        {
          "term": "Element.computedStyleMap() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap",
          "desc": "Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration."
        },
        {
          "term": "EventTarget.dispatchEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",
          "desc": "Dispatches an event to this node in the DOM and returns a Boolean that indicates whether no handler canceled the event."
        },
        {
          "term": "Element.getAnimations() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations",
          "desc": "Returns an array of Animation objects currently active on the element."
        },
        {
          "term": "Element.getAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute",
          "desc": "Retrieves the value of the named attribute from the current node and returns it as an Object."
        },
        {
          "term": "Element.getAttributeNames()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames",
          "desc": "Returns an array of attribute names from the current element."
        },
        {
          "term": "Element.getAttributeNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS",
          "desc": "Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an Object."
        },
        {
          "term": "Element.getBoundingClientRect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect",
          "desc": "Returns the size of an element and its position relative to the viewport."
        },
        {
          "term": "Element.getClientRects()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects",
          "desc": "Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client."
        },
        {
          "term": "Element.getElementsByClassName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName",
          "desc": "Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter."
        },
        {
          "term": "Element.getElementsByTagName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName",
          "desc": "Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element."
        },
        {
          "term": "Element.getElementsByTagNameNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS",
          "desc": "Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element."
        },
        {
          "term": "Element.hasAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute",
          "desc": "Returns a Boolean indicating if the element has the specified attribute or not."
        },
        {
          "term": "Element.hasAttributeNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS",
          "desc": "Returns a Boolean indicating if the element has the specified attribute, in the specified namespace, or not."
        },
        {
          "term": "Element.hasAttributes()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes",
          "desc": "Returns a Boolean indicating if the element has one or more HTML attributes present."
        },
        {
          "term": "Element.hasPointerCapture()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture",
          "desc": "Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID."
        },
        {
          "term": "Element.insertAdjacentElement()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement",
          "desc": "Inserts a given element node at a given position relative to the element it is invoked upon."
        },
        {
          "term": "Element.insertAdjacentHTML()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML",
          "desc": "Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given."
        },
        {
          "term": "Element.insertAdjacentText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText",
          "desc": "Inserts a given text node at a given position relative to the element it is invoked upon."
        },
        {
          "term": "Element.matches()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/matches",
          "desc": "Returns a Boolean indicating whether or not the element would be selected by the specified selector string."
        },
        {
          "term": "Element.pseudo() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a CSSPseudoElement representing the child pseudo-element matched by the specified pseudo-element selector."
        },
        {
          "term": "Element.querySelector()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector",
          "desc": "Returns the first Node which matches the specified selector string relative to the element."
        },
        {
          "term": "Element.querySelectorAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll",
          "desc": "Returns a NodeList of nodes which match the specified selector string relative to the element."
        },
        {
          "term": "Element.releasePointerCapture()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture",
          "desc": "Releases (stops) pointer capture that was previously set for a specific pointer event."
        },
        {
          "term": "ChildNode.remove() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove",
          "desc": "Removes the element from the children list of its parent."
        },
        {
          "term": "Element.removeAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute",
          "desc": "Removes the named attribute from the current node."
        },
        {
          "term": "Element.removeAttributeNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS",
          "desc": "Removes the attribute with the specified name and namespace, from the current node."
        },
        {
          "term": "EventTarget.removeEventListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener",
          "desc": "Removes an event listener from the element."
        },
        {
          "term": "Element.requestFullscreen() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen",
          "desc": "Asynchronously asks the browser to make the element full-screen."
        },
        {
          "term": "Element.requestPointerLock() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock",
          "desc": "Allows to asynchronously ask for the pointer to be locked on the given element."
        },
        {
          "term": "Element.scroll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll",
          "desc": "Scrolls to a particular set of coordinates inside a given element."
        },
        {
          "term": "Element.scrollBy()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy",
          "desc": "Scrolls an element by the given amount."
        },
        {
          "term": "Element.scrollIntoView() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView",
          "desc": "Scrolls the page until the element gets into the view."
        },
        {
          "term": "Element.scrollTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo",
          "desc": "Scrolls to a particular set of coordinates inside a given element."
        },
        {
          "term": "Element.setAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute",
          "desc": "Sets the value of a named attribute of the current node."
        },
        {
          "term": "Element.setAttributeNS()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS",
          "desc": "Sets the value of the attribute with the specified name and namespace, from the current node."
        },
        {
          "term": "Element.setCapture() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture",
          "desc": "Sets up mouse event capture, redirecting all mouse events to this element."
        },
        {
          "term": "Element.setPointerCapture()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture",
          "desc": "Designates a specific element as the capture target of future pointer events."
        },
        {
          "term": "Element.toggleAttribute()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute",
          "desc": "Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element."
        }
      ]
    }
  },
  {
    "title": "ElementCSSInlineStyle",
    "calls": {
      "properties": [
        {
          "term": "style",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style",
          "desc": "The style read-only property returns the inline style of an element in the form of a CSSStyleDeclaration object that contains a list of all styles properties for that element with values assigned for the attributes that are defined in the element's inline style attribute."
        }
      ]
    }
  },
  {
    "title": "ErrorEvent",
    "calls": {
      "constructors": [
        {
          "term": "ErrorEvent()",
          "link": "",
          "desc": "Creates an ErrorEvent event with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "ErrorEvent.message Read only",
          "link": "",
          "desc": "Is a DOMString containing a human-readable error message describing the problem."
        },
        {
          "term": "ErrorEvent.filename Read only",
          "link": "",
          "desc": "Is a DOMString containing the name of the script file in which the error occurred."
        },
        {
          "term": "ErrorEvent.lineno Read only",
          "link": "",
          "desc": "Is an integer containing the line number of the script file on which the error occurred."
        },
        {
          "term": "ErrorEvent.colno Read only",
          "link": "",
          "desc": "Is an integer containing the column number of the script file on which the error occurred."
        },
        {
          "term": "ErrorEvent.error Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a JavaScript Object that is concerned by the event."
        }
      ]
    }
  },
  {
    "title": "Event",
    "calls": {
      "constructors": [
        {
          "term": "Event()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/Event",
          "desc": "Creates an Event object, returning it to the caller."
        }
      ],
      "properties": [
        {
          "term": "Event.bubbles Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles",
          "desc": "A boolean indicating whether or not the event bubbles up through the DOM."
        },
        {
          "term": "Event.cancelBubble",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble",
          "desc": "A historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event."
        },
        {
          "term": "Event.cancelable Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable",
          "desc": "A boolean indicating whether the event is cancelable."
        },
        {
          "term": "Event.composed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/composed",
          "desc": "A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM."
        },
        {
          "term": "Event.currentTarget Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget",
          "desc": "A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting."
        },
        {
          "term": "Event.deepPath \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath",
          "desc": "An Array of DOM Nodes through which the event has bubbled."
        },
        {
          "term": "Event.defaultPrevented Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented",
          "desc": "Indicates whether or not the call to event.preventDefault() canceled the event."
        },
        {
          "term": "Event.eventPhase Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase",
          "desc": "Indicates which phase of the event flow is being processed."
        },
        {
          "term": "Event.explicitOriginalTarget \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget",
          "desc": "The explicit original target of the event (Mozilla-specific.)"
        },
        {
          "term": "Event.originalTarget \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget",
          "desc": "The original target of the event, before any retargetings. (Mozilla-specific.)"
        },
        {
          "term": "Event.returnValue",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue",
          "desc": "A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use Event.preventDefault() and Event.defaultPrevented instead, but you can use returnValue if you choose to do so."
        },
        {
          "term": "Event.srcElement \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement",
          "desc": "A non-standard alias (from old versions of Microsoft Internet Explorer) for Event.target. Some other browsers are starting to support it for web compatibility purposes."
        },
        {
          "term": "Event.target Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/target",
          "desc": "A reference to the target to which the event was originally dispatched."
        },
        {
          "term": "Event.timeStamp Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp",
          "desc": "The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead."
        },
        {
          "term": "Event.type Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/type",
          "desc": "The name of the event. Case-insensitive."
        },
        {
          "term": "Event.isTrusted Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted",
          "desc": "Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, like Event.initEvent)."
        }
      ],
      "methods": [
        {
          "term": "Event.composedPath()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath",
          "desc": "Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed."
        },
        {
          "term": "Event.preventDefault()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault",
          "desc": "Cancels the event (if it is cancelable)."
        },
        {
          "term": "Event.stopImmediatePropagation()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation",
          "desc": "For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance)."
        },
        {
          "term": "Event.stopPropagation()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation",
          "desc": "Stops the propagation of events further along in the DOM."
        }
      ]
    }
  },
  {
    "title": "EventListener",
    "calls": {
      "methods": [
        {
          "term": "EventListener.handleEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent",
          "desc": "A function that is called whenever an event of the specified type occurs."
        }
      ]
    }
  },
  {
    "title": "EventSource",
    "calls": {
      "constructors": [
        {
          "term": "EventSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource",
          "desc": "Creates a new EventSource to handle receiving server-sent events from a specified URL, optionally in credentials mode."
        }
      ],
      "properties": [
        {
          "term": "EventSource.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState",
          "desc": "A number representing the state of the connection. Possible values are CONNECTING (0), OPEN (1), or CLOSED (2)."
        },
        {
          "term": "EventSource.url Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url",
          "desc": "A DOMString representing the URL of the source."
        },
        {
          "term": "EventSource.withCredentials Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials",
          "desc": "A Boolean indicating whether the EventSource object was instantiated with cross-origin (CORS) credentials set (true), or not (false, the default)."
        }
      ],
      "handlers": [
        {
          "term": "EventSource.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror",
          "desc": "Is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object."
        },
        {
          "term": "EventSource.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage",
          "desc": "Is an EventHandler called when a message event is received, that is when a message is coming from the source."
        },
        {
          "term": "EventSource.onopen",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen",
          "desc": "Is an EventHandler called when an open event is received, that is when the connection was just opened."
        }
      ],
      "methods": [
        {
          "term": "EventSource.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close",
          "desc": "Closes the connection, if any, and sets the readyState attribute to CLOSED. If the connection is already closed, the method does nothing."
        }
      ]
    }
  },
  {
    "title": "EventTarget",
    "calls": {
      "constructors": [
        {
          "term": "EventTarget()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget",
          "desc": "Creates a new EventTarget object instance."
        }
      ],
      "methods": [
        {
          "term": "EventTarget.addEventListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
          "desc": "Registers an event handler of a specific event type on the EventTarget."
        },
        {
          "term": "EventTarget.removeEventListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener",
          "desc": "Removes an event listener from the EventTarget."
        },
        {
          "term": "EventTarget.dispatchEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",
          "desc": "Dispatches an event to this EventTarget."
        }
      ]
    }
  },
  {
    "title": "EXT_blend_minmax",
    "calls": {}
  },
  {
    "title": "EXT_color_buffer_float",
    "calls": {}
  },
  {
    "title": "EXT_color_buffer_half_float",
    "calls": {}
  },
  {
    "title": "EXT_disjoint_timer_query",
    "calls": {
      "methods": [
        {
          "term": "ext.createQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/createQueryEXT",
          "desc": "Creates a new WebGLTimerQueryEXT."
        },
        {
          "term": "ext.deleteQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/deleteQueryEXT",
          "desc": "Deletes a given WebGLTimerQueryEXT."
        },
        {
          "term": "ext.isQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/isQueryEXT",
          "desc": "Returns true if a given object is a valid WebGLTimerQueryEXT."
        },
        {
          "term": "ext.beginQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/beginQueryEXT",
          "desc": "The timer starts when all commands prior to beginQueryEXT have been fully executed."
        },
        {
          "term": "ext.endQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/endQueryEXT",
          "desc": "The timer stops when all commands prior to endQueryEXT have been fully executed."
        },
        {
          "term": "ext.queryCounterEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/queryCounterEXT",
          "desc": "Records the current time into the corresponding query object."
        },
        {
          "term": "ext.getQueryEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryEXT",
          "desc": "Returns information about a query target."
        },
        {
          "term": "ext.getQueryObjectEXT()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryObjectEXT",
          "desc": "Return the state of a query object."
        }
      ]
    }
  },
  {
    "title": "EXT_float_blend",
    "calls": {}
  },
  {
    "title": "EXT_frag_depth",
    "calls": {}
  },
  {
    "title": "EXT_shader_texture_lod",
    "calls": {}
  },
  {
    "title": "EXT_sRGB",
    "calls": {}
  },
  {
    "title": "EXT_texture_compression_bptc",
    "calls": {}
  },
  {
    "title": "EXT_texture_compression_rgtc",
    "calls": {}
  },
  {
    "title": "EXT_texture_filter_anisotropic",
    "calls": {}
  },
  {
    "title": "EXT_texture_norm16",
    "calls": {}
  },
  {
    "title": "FeaturePolicy",
    "calls": {}
  },
  {
    "title": "FederatedCredential",
    "calls": {
      "constructors": [
        {
          "term": "FederatedCredential()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/FederatedCredential",
          "desc": "Creates a new FederatedCredential object."
        }
      ],
      "properties": [
        {
          "term": "FederatedCredential.provider Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider",
          "desc": "Returns a USVString containing a credential's federated identity provider."
        },
        {
          "term": "FederatedCredential.protocol Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol",
          "desc": "Returns a DOMString containing a credential's federated identity protocol."
        }
      ]
    }
  },
  {
    "title": "FetchEvent",
    "calls": {
      "constructors": [
        {
          "term": "FetchEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/FetchEvent",
          "desc": "Creates a new FetchEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to fetch event callbacks."
        }
      ],
      "properties": [
        {
          "term": "FetchEvent.clientId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId",
          "desc": "The id of the same-origin client that initiated the fetch."
        },
        {
          "term": "FetchEvent.preloadResponse Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadResponse",
          "desc": "A Promise for a Response, or undefined if this fetch is not a navigation, or navigation preload is not enabled."
        },
        {
          "term": "FetchEvent.replacesClientId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/replacesClientId",
          "desc": "The id of the client that is being replaced during a page navigation."
        },
        {
          "term": "FetchEvent.resultingClientId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/resultingClientId",
          "desc": "The id of the client that replaces the previous client during a page navigation."
        },
        {
          "term": "FetchEvent.request Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request",
          "desc": "The Request the browser intends to make."
        }
      ],
      "methods": [
        {
          "term": "FetchEvent.respondWith()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith",
          "desc": "Prevent the browser's default fetch handling, and provide (a promise for) a response yourself."
        },
        {
          "term": "ExtendableEvent.waitUntil()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil",
          "desc": "Extends the lifetime of the event. Used to notify the browser of tasks that extend beyond the returning of a response, such as streaming and caching."
        }
      ]
    }
  },
  {
    "title": "File",
    "calls": {
      "constructors": [
        {
          "term": "File()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/File/File",
          "desc": "Returns a newly constructed File."
        }
      ]
    }
  },
  {
    "title": "FileEntrySync",
    "calls": {}
  },
  {
    "title": "FileList",
    "calls": {}
  },
  {
    "title": "FileReader",
    "calls": {
      "constructors": [
        {
          "term": "FileReader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/FileReader",
          "desc": "Returns a newly constructed FileReader."
        }
      ],
      "properties": [
        {
          "term": "FileReader.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error",
          "desc": "A DOMException representing the error that occurred while reading the file."
        },
        {
          "term": "FileReader.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState",
          "desc": "A number indicating the state of the FileReader. This is one of the following: EMPTY 0 No data has been loaded yet. LOADING 1 Data is currently being loaded. DONE 2 The entire read request has been completed."
        },
        {
          "term": "FileReader.result Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/result",
          "desc": "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation."
        }
      ],
      "handlers": [
        {
          "term": "FileReader.onabort",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onabort",
          "desc": "A handler for the abort event. This event is triggered each time the reading operation is aborted."
        },
        {
          "term": "FileReader.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onerror",
          "desc": "A handler for the error event. This event is triggered each time the reading operation encounter an error."
        },
        {
          "term": "FileReader.onload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onload",
          "desc": "A handler for the load event. This event is triggered each time the reading operation is successfully completed."
        },
        {
          "term": "FileReader.onloadstart",
          "link": "",
          "desc": "A handler for the loadstart event. This event is triggered each time the reading is starting."
        },
        {
          "term": "FileReader.onloadend",
          "link": "",
          "desc": "A handler for the loadend event. This event is triggered each time the reading operation is completed (either in success or failure)."
        },
        {
          "term": "FileReader.onprogress",
          "link": "",
          "desc": "A handler for the progress event. This event is triggered while reading a Blob content."
        }
      ],
      "methods": [
        {
          "term": "FileReader.abort()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort",
          "desc": "Aborts the read operation. Upon return, the readyState will be DONE."
        },
        {
          "term": "FileReader.readAsArrayBuffer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer",
          "desc": "Starts reading the contents of the specified Blob, once finished, the result attribute contains an ArrayBuffer representing the file's data."
        },
        {
          "term": "FileReader.readAsBinaryString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString",
          "desc": "Starts reading the contents of the specified Blob, once finished, the result attribute contains the raw binary data from the file as a string."
        },
        {
          "term": "FileReader.readAsDataURL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL",
          "desc": "Starts reading the contents of the specified Blob, once finished, the result attribute contains a data: URL representing the file's data."
        },
        {
          "term": "FileReader.readAsText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText",
          "desc": "Starts reading the contents of the specified Blob, once finished, the result attribute contains the contents of the file as a text string. An optional encoding name can be specified."
        }
      ]
    }
  },
  {
    "title": "FileReaderSync",
    "calls": {
      "methods": [
        {
          "term": "FileReaderSync.readAsArrayBuffer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsArrayBuffer",
          "desc": "This method converts a specified Blob or a File into an ArrayBuffer representing the input data as a binary string."
        },
        {
          "term": "FileReaderSync.readAsBinaryString() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsBinaryString",
          "desc": "This method converts a specified Blob or a File into a DOMString representing the input data as a binary string. This method is deprecated, consider using readAsArrayBuffer() instead."
        },
        {
          "term": "FileReaderSync.readAsText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsText",
          "desc": "This method converts a specified Blob or a File into a DOMString representing the input data as a text string. The optional encoding parameter indicates the encoding to be used (e.g., iso-8859-1 or UTF-8). If not present, the method will apply a detection algorithm for it."
        },
        {
          "term": "FileReaderSync.readAsDataURL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsDataURL",
          "desc": "This method converts a specified Blob or a File into a DOMString representing the input data as a data URL."
        }
      ]
    }
  },
  {
    "title": "FileRequest",
    "calls": {
      "properties": [
        {
          "term": "FileRequest.lockedFile Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileRequest/lockedFile",
          "desc": "The LockedFile object from which the request was started."
        },
        {
          "term": "FileRequest.onprogress",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileRequest/onprogress",
          "desc": "A callback handler called repeatedly while the operation represented by the FileRequest is in progress."
        }
      ]
    }
  },
  {
    "title": "FileSystem",
    "calls": {
      "properties": [
        {
          "term": "FileSystem.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystem/name",
          "desc": "A USVString representing the file system's name. This name is unique among the entire list of exposed file systems."
        },
        {
          "term": "FileSystem.root Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystem/root",
          "desc": "A FileSystemDirectoryEntry object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system."
        }
      ]
    }
  },
  {
    "title": "FileSystemDirectoryEntry",
    "calls": {
      "methods": [
        {
          "term": "createReader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader",
          "desc": "Creates a FileSystemDirectoryReader object which can be used to read the entries in this directory."
        },
        {
          "term": "getDirectory()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/getDirectory",
          "desc": "Returns a FileSystemDirectoryEntry object representing a directory located at a given path, relative to the directory on which the method is called."
        },
        {
          "term": "getFile()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/getFile",
          "desc": "Returns a FileSystemFileEntry object representing a file located within the directory's hierarchy, given a path relative to the directory on which the method is called."
        }
      ]
    }
  },
  {
    "title": "FileSystemDirectoryHandle",
    "calls": {
      "methods": [
        {
          "term": "FileSystemDirectoryHandle.entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/entries",
          "desc": "Returns an Array of a given object's own enumerable property [key, value] pairs"
        },
        {
          "term": "FileSystemDirectoryHandle.getFileHandle()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getFileHandle",
          "desc": "Returns a FileSystemFileHandle for a file with the specified name, within the directory the method is called."
        },
        {
          "term": "FileSystemDirectoryHandle.getDirectoryHandle()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle",
          "desc": "Returns a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called."
        },
        {
          "term": "FileSystemDirectoryHandle.keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/keys",
          "desc": "Returns a new Array Iterator containing the keys for each item in FileSystemDirectoryHandle."
        },
        {
          "term": "FileSystemDirectoryHandle.removeEntry()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/removeEntry",
          "desc": "Attempts to remove an entry if the directory handle contains a file or directory called the name specified."
        },
        {
          "term": "FileSystemDirectoryHandle.resolve()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/resolve",
          "desc": "Returns an Array of directory names from the parent handle to the specified child entry, with the name of the child entry as the last array item."
        },
        {
          "term": "FileSystemDirectoryHandle.values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/values",
          "desc": "Returns a new Array Iterator containing the values for each index in the FileSystemDirectoryHandle object."
        }
      ]
    }
  },
  {
    "title": "FileSystemDirectoryReader",
    "calls": {
      "methods": [
        {
          "term": "readEntries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries",
          "desc": "Returns an array containing some number of the directory's entries. Each item in the array is an object based on FileSystemEntry—typically either FileSystemFileEntry or FileSystemDirectoryEntry."
        }
      ]
    }
  },
  {
    "title": "FileSystemEntry",
    "calls": {
      "properties": [
        {
          "term": "filesystem Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/filesystem",
          "desc": "A FileSystem object representing the file system in which the entry is located."
        },
        {
          "term": "fullPath Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/fullPath",
          "desc": "A USVString object which provides the full, absolute path from the file system's root to the entry; it can also be thought of as a path which is relative to the root directory, prepended with a \"/\" character."
        },
        {
          "term": "isDirectory Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isDirectory",
          "desc": "A Boolean which is true if the entry represents a directory; otherwise, it's false."
        },
        {
          "term": "isFile Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isFile",
          "desc": "A Boolean which is true if the entry represents a file. If it's not a file, this value is false."
        },
        {
          "term": "name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/name",
          "desc": "A USVString containing the name of the entry (the final part of the path, after the last \"/\" character)."
        }
      ],
      "methods": [
        {
          "term": "copyTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/copyTo",
          "desc": "Copies the file or directory to a new location on the file system."
        },
        {
          "term": "getMetadata()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getMetadata",
          "desc": "Obtains metadata about the file, such as its modification date and size."
        },
        {
          "term": "getParent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getParent",
          "desc": "Returns a FileSystemDirectoryEntry representing the entry's parent directory."
        },
        {
          "term": "moveTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/moveTo",
          "desc": "Moves the file or directory to a new location on the file system, or renames the file or directory."
        },
        {
          "term": "remove()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/remove",
          "desc": "Removes the specified file or directory. You can only remove directories which are empty."
        },
        {
          "term": "toURL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/toURL",
          "desc": "Creates and returns a URL which identifies the entry. This URL uses the URL scheme \"filesystem:\"."
        }
      ]
    }
  },
  {
    "title": "FileSystemEntrySync",
    "calls": {}
  },
  {
    "title": "FileSystemFileEntry",
    "calls": {
      "methods": [
        {
          "term": "file()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry/file",
          "desc": "Creates a new File object which can be used to read the file."
        }
      ]
    }
  },
  {
    "title": "FileSystemFileHandle",
    "calls": {
      "methods": [
        {
          "term": "getFile()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle/getFile",
          "desc": "Returns a file object representing the state on disk of the entry represented by the handle."
        },
        {
          "term": "createWritable()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle/createWritable",
          "desc": "Creates a FileSystemWritableFileStream that can be used to write to a file."
        }
      ]
    }
  },
  {
    "title": "FileSystemHandle",
    "calls": {
      "properties": [
        {
          "term": "kind Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/kind",
          "desc": "Returns the type of entry. This is 'file' if the associated entry is a file or 'directory'."
        },
        {
          "term": "name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/name",
          "desc": "Returns the name of the associated entry."
        }
      ],
      "methods": [
        {
          "term": "isSameEntry()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/isSameEntry",
          "desc": "Compares two handles to see if the associated entries (either a file or directory) match."
        },
        {
          "term": "queryPermission()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/queryPermission",
          "desc": "Queries the current permission state of the current handle."
        },
        {
          "term": "requestPermission()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle/requestPermission",
          "desc": "Requests read or readwrite permissions for the file handle."
        }
      ]
    }
  },
  {
    "title": "FileSystemSync",
    "calls": {}
  },
  {
    "title": "FileSystemWritableFileStream",
    "calls": {
      "methods": [
        {
          "term": "FileSystemWritableFileStream.write",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream/write",
          "desc": "Writes content into the file the method is called on, at the current file cursor offset."
        },
        {
          "term": "FileSystemWritableFileStream.seek",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream/seek",
          "desc": "Updates the current file cursor offset to the position (in bytes) specified."
        },
        {
          "term": "FileSystemWritableFileStream.truncate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream/truncate",
          "desc": "Resizes the file associated with the stream to be the specified size in bytes."
        }
      ]
    }
  },
  {
    "title": "FocusEvent",
    "calls": {
      "constructors": [
        {
          "term": "FocusEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent",
          "desc": "Creates a FocusEvent event with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "FocusEvent.relatedTarget",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget",
          "desc": "Is an EventTarget representing a secondary target for this event. In some cases (such as when tabbing in or out a page), this property may be set to null for security reasons."
        }
      ]
    }
  },
  {
    "title": "FontFace",
    "calls": {
      "constructors": [
        {
          "term": "FontFace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/FontFace",
          "desc": "Constructs and returns a new FontFace object, built from an external resource described by an URL or from an ArrayBuffer."
        }
      ],
      "properties": [
        {
          "term": "FontFace.display",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/display",
          "desc": "A CSSOMString that determines how a font face is displayed based on whether and when it is downloaded and ready to use."
        },
        {
          "term": "FontFace.family",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/family",
          "desc": "A CSSOMString that retrieves or sets the family of the font. It is equivalent to the font-family descriptor."
        },
        {
          "term": "FontFace.featureSettings",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/featureSettings",
          "desc": "A CSSOMString that retrieves or sets infrequently used font features that are not available from a font's variant properties. It is equivalent to the font-feature-settings descriptor."
        },
        {
          "term": "FontFace.loaded Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/loaded",
          "desc": "Returns a Promise that resolves with the current FontFace object when the font specified in the object's constructor is done loading or rejects with a SyntaxError."
        },
        {
          "term": "FontFace.status Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/status",
          "desc": "Returns an enumerated value indicating the status of the font, one of \"unloaded\", \"loading\", \"loaded\", or \"error\"."
        },
        {
          "term": "FontFace.stretch",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/stretch",
          "desc": "A CSSOMString that retrieves or sets how the font stretches. It is equivalent to the font-stretch descriptor."
        },
        {
          "term": "FontFace.style",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/style",
          "desc": "A CSSOMString that retrieves or sets the style of the font. It is equivalent to the font-style descriptor."
        },
        {
          "term": "FontFace.unicodeRange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange",
          "desc": "A CSSOMString that retrieves or sets the range of unicode codepoints encompassing the font. It is equivalent to the unicode-range descriptor."
        },
        {
          "term": "FontFace.variant",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/variant",
          "desc": "A CSSOMString that retrieves or sets the variant of the font. It is equivalent to the font-variant descriptor."
        },
        {
          "term": "FontFace.weight",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/weight",
          "desc": "A CSSOMString that contains the weight of the font. It is equivalent to the font-weight descriptor."
        }
      ],
      "methods": [
        {
          "term": "FontFace.load()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace/load",
          "desc": "Loads a font based on current object's constructor-passed requirements, including a location or source buffer, and returns a Promise that resolves with the current FontFace object."
        }
      ]
    }
  },
  {
    "title": "FormData",
    "calls": {
      "constructors": [
        {
          "term": "FormData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData",
          "desc": "Creates a new FormData object."
        }
      ],
      "methods": [
        {
          "term": "FormData.append()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/append",
          "desc": "Appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist."
        },
        {
          "term": "FormData.delete()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete",
          "desc": "Deletes a key/value pair from a FormData object."
        },
        {
          "term": "FormData.entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries",
          "desc": "Returns an iterator allowing to go through all key/value pairs contained in this object."
        },
        {
          "term": "FormData.get()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/get",
          "desc": "Returns the first value associated with a given key from within a FormData object."
        },
        {
          "term": "FormData.getAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll",
          "desc": "Returns an array of all the values associated with a given key from within a FormData."
        },
        {
          "term": "FormData.has()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/has",
          "desc": "Returns a boolean stating whether a FormData object contains a certain key."
        },
        {
          "term": "FormData.keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/keys",
          "desc": "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object."
        },
        {
          "term": "FormData.set()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/set",
          "desc": "Sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist."
        },
        {
          "term": "FormData.values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/values",
          "desc": "Returns an iterator allowing to go through all values contained in this object."
        }
      ]
    }
  },
  {
    "title": "FormDataEntryValue",
    "calls": {}
  },
  {
    "title": "FullscreenOptions",
    "calls": {
      "properties": [
        {
          "term": "navigationUIOptional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions/navigationUI",
          "desc": "A string controlling whether or not to keep browser user interface elements visible while the element is in full-screen mode. The default, \"auto\", lets the browser make this decision."
        }
      ]
    }
  },
  {
    "title": "GainNode",
    "calls": {
      "constructors": [
        {
          "term": "GainNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode/GainNode",
          "desc": "Creates a new instance of a GainNode object. You shouldn't manually create a gain node; instead, use the method AudioContext.createGain()."
        }
      ],
      "properties": [
        {
          "term": "GainNode.gain Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain",
          "desc": "Is an a-rate AudioParam representing the amount of gain to apply. You have to set AudioParam.value or use the methods of AudioParam to change the effect of gain."
        }
      ]
    }
  },
  {
    "title": "Gamepad",
    "calls": {
      "properties": [
        {
          "term": "Gamepad.axes Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes",
          "desc": "An array representing the controls with axes present on the device (e.g. analog thumb sticks)."
        },
        {
          "term": "Gamepad.buttons Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons",
          "desc": "An array of gamepadButton objects representing the buttons present on the device."
        },
        {
          "term": "Gamepad.connected Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected",
          "desc": "A boolean indicating whether the gamepad is still connected to the system."
        },
        {
          "term": "Gamepad.displayId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/displayId",
          "desc": "Returns the VRDisplay.displayId of an associated VRDisplay (if relevant) — the VRDisplay that the gamepad is controlling the displayed scene of."
        },
        {
          "term": "Gamepad.id Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id",
          "desc": "A DOMString containing identifying information about the controller."
        },
        {
          "term": "Gamepad.index Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index",
          "desc": "An integer that is auto-incremented to be unique for each device currently connected to the system."
        },
        {
          "term": "Gamepad.mapping Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping",
          "desc": "A string indicating whether the browser has remapped the controls on the device to a known layout."
        },
        {
          "term": "Gamepad.timestamp Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp",
          "desc": "A DOMHighResTimeStamp representing the last time the data for this gamepad was updated."
        }
      ]
    }
  },
  {
    "title": "GamepadButton",
    "calls": {
      "properties": [
        {
          "term": "GamepadButton.value Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value",
          "desc": "A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed."
        },
        {
          "term": "GamepadButton.pressed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/pressed",
          "desc": "A Boolean value indicating whether the button is currently pressed (true) or unpressed (false)."
        }
      ]
    }
  },
  {
    "title": "GamepadEvent",
    "calls": {
      "constructors": [
        {
          "term": "GamepadEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/GamepadEvent",
          "desc": "Returns a new GamepadEvent object."
        }
      ],
      "properties": [
        {
          "term": "GamepadEvent.gamepad Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/gamepad",
          "desc": "Returns a Gamepad object, providing access to the associated gamepad data for the event fired."
        }
      ]
    }
  },
  {
    "title": "Geolocation",
    "calls": {
      "methods": [
        {
          "term": "Geolocation.getCurrentPosition() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition",
          "desc": "Determines the device's current location and gives back a GeolocationPosition object with the data."
        },
        {
          "term": "Geolocation.watchPosition() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition",
          "desc": "Returns a long value representing the newly established callback function to be invoked whenever the device location changes."
        },
        {
          "term": "Geolocation.clearWatch() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/clearWatch",
          "desc": "Removes the particular handler previously installed using watchPosition()."
        }
      ]
    }
  },
  {
    "title": "GeolocationCoordinates",
    "calls": {
      "properties": [
        {
          "term": "GeolocationCoordinates.latitude Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/latitude",
          "desc": "Returns a double representing the position's latitude in decimal degrees."
        },
        {
          "term": "GeolocationCoordinates.longitude Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/longitude",
          "desc": "Returns a double representing the position's longitude in decimal degrees."
        },
        {
          "term": "GeolocationCoordinates.altitude Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/altitude",
          "desc": "Returns a double representing the position's altitude in meters, relative to sea level. This value can be null if the implementation cannot provide the data."
        },
        {
          "term": "GeolocationCoordinates.accuracy Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/accuracy",
          "desc": "Returns a double representing the accuracy of the latitude and longitude properties, expressed in meters."
        },
        {
          "term": "GeolocationCoordinates.altitudeAccuracy Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/altitudeAccuracy",
          "desc": "Returns a double representing the accuracy of the altitude expressed in meters. This value can be null."
        },
        {
          "term": "GeolocationCoordinates.heading Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/heading",
          "desc": "Returns a double representing the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. 0 degrees represents true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If speed is 0, heading is NaN. If the device is unable to provide heading information, this value is null."
        },
        {
          "term": "GeolocationCoordinates.speed Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates/speed",
          "desc": "Returns a double representing the velocity of the device in meters per second. This value can be null."
        }
      ]
    }
  },
  {
    "title": "GeolocationPosition",
    "calls": {
      "properties": [
        {
          "term": "GeolocationPosition.coords Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition/coords",
          "desc": "Returns a GeolocationCoordinates object defining the current location."
        },
        {
          "term": "GeolocationPosition.timestamp Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition/timestamp",
          "desc": "Returns a DOMTimeStamp representing the time at which the location was retrieved."
        }
      ]
    }
  },
  {
    "title": "GeolocationPositionError",
    "calls": {
      "properties": [
        {
          "term": "GeolocationPositionError.code Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError/code",
          "desc": "Returns an unsigned short representing the error code. The following values are possible: Value Associated constant Description 1 PERMISSION_DENIED The acquisition of the geolocation information failed because the page didn't have the permission to do it. 2 POSITION_UNAVAILABLE The acquisition of the geolocation failed because at least one internal source of position returned an internal error. 3 TIMEOUT The time allowed to acquire the geolocation, defined by PositionOptions.timeout information was reached before the information was obtained."
        },
        {
          "term": "GeolocationPositionError.message Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError/message",
          "desc": "Returns a human-readable DOMString describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface."
        }
      ]
    }
  },
  {
    "title": "GestureEvent",
    "calls": {
      "constructors": [
        {
          "term": "GestureEvent()",
          "link": "",
          "desc": "Creates a GestureEvent object."
        }
      ],
      "properties": [
        {
          "term": "GestureEvent.rotation Read only",
          "link": "",
          "desc": "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate anticlockwise rotation. Initial value: 0.0"
        },
        {
          "term": "GestureEvent.scale Read only",
          "link": "",
          "desc": "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the gesture. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0"
        }
      ],
      "methods": [
        {
          "term": "GestureEvent.initGestureEvent()",
          "link": "",
          "desc": "Initializes the value of an GestureEvent. If the event has already being dispatched, this method does nothing."
        }
      ]
    }
  },
  {
    "title": "getCandidateWindowClientRect",
    "calls": {}
  },
  {
    "title": "GlobalEventHandlers",
    "calls": {
      "handlers": [
        {
          "term": "GlobalEventHandlers.onabort",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort",
          "desc": "Is an EventHandler representing the code to be called when the abort event is raised."
        },
        {
          "term": "GlobalEventHandlers.onanimationcancel \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel",
          "desc": "An EventHandler called when an animationcancel event is sent, indicating that a running CSS animation has been canceled."
        },
        {
          "term": "GlobalEventHandlers.onanimationend \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend",
          "desc": "An EventHandler called when an animationend event is sent, indicating that a CSS animation has stopped playing."
        },
        {
          "term": "GlobalEventHandlers.onanimationiteration \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration",
          "desc": "An EventHandler called when an animationiteration event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence."
        },
        {
          "term": "GlobalEventHandlers.onanimationstart \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationstart",
          "desc": "An EventHandler called when an animationstart event is sent, indicating that a CSS animation has started playing."
        },
        {
          "term": "GlobalEventHandlers.onauxclick \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick",
          "desc": "An EventHandler called when an auxclick event is sent, indicating that a non-primary button has been pressed on an input device (e.g. a middle mouse button)."
        },
        {
          "term": "GlobalEventHandlers.onblur",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur",
          "desc": "Is an EventHandler representing the code to be called when the blur event is raised."
        },
        {
          "term": "GlobalEventHandlers.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror",
          "desc": "Is an OnErrorEventHandler representing the code to be called when the error event is raised."
        },
        {
          "term": "GlobalEventHandlers.onfocus",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus",
          "desc": "Is an EventHandler representing the code to be called when the focus event is raised."
        },
        {
          "term": "GlobalEventHandlers.oncancel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel",
          "desc": "Is an EventHandler representing the code to be called when the cancel event is raised."
        },
        {
          "term": "GlobalEventHandlers.oncanplay",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay",
          "desc": "Is an EventHandler representing the code to be called when the canplay event is raised."
        },
        {
          "term": "GlobalEventHandlers.oncanplaythrough",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough",
          "desc": "Is an EventHandler representing the code to be called when the canplaythrough event is raised."
        },
        {
          "term": "GlobalEventHandlers.onchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange",
          "desc": "Is an EventHandler representing the code to be called when the change event is raised."
        },
        {
          "term": "GlobalEventHandlers.onclick",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",
          "desc": "Is an EventHandler representing the code to be called when the click event is raised."
        },
        {
          "term": "GlobalEventHandlers.onclose",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose",
          "desc": "Is an EventHandler representing the code to be called when the close event is raised."
        },
        {
          "term": "GlobalEventHandlers.oncontextmenu",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu",
          "desc": "Is an EventHandler representing the code to be called when the contextmenu event is raised."
        },
        {
          "term": "GlobalEventHandlers.oncuechange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange",
          "desc": "Is an EventHandler representing the code to be called when the cuechange event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondblclick",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick",
          "desc": "Is an EventHandler representing the code to be called when the dblclick event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondrag",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag",
          "desc": "Is an EventHandler representing the code to be called when the drag event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragend",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend",
          "desc": "Is an EventHandler representing the code to be called when the dragend event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragenter",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter",
          "desc": "Is an EventHandler representing the code to be called when the dragenter event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragexit",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave",
          "desc": "Is an EventHandler representing the code to be called when the dragexit event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragleave",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave",
          "desc": "Is an EventHandler representing the code to be called when the dragleave event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragover",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover",
          "desc": "Is an EventHandler representing the code to be called when the dragover event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondragstart",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart",
          "desc": "Is an EventHandler representing the code to be called when the dragstart event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondrop",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop",
          "desc": "Is an EventHandler representing the code to be called when the drop event is raised."
        },
        {
          "term": "GlobalEventHandlers.ondurationchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange",
          "desc": "Is an EventHandler representing the code to be called when the durationchange event is raised."
        },
        {
          "term": "GlobalEventHandlers.onemptied",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied",
          "desc": "Is an EventHandler representing the code to be called when the emptied event is raised."
        },
        {
          "term": "GlobalEventHandlers.onended",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended",
          "desc": "Is an EventHandler representing the code to be called when the ended event is raised."
        },
        {
          "term": "GlobalEventHandlers.onformdata",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onformdata",
          "desc": "Is an EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed."
        },
        {
          "term": "GlobalEventHandlers.ongotpointercapture",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture",
          "desc": "Is an EventHandler representing the code to be called when the gotpointercapture event type is raised."
        },
        {
          "term": "GlobalEventHandlers.oninput",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput",
          "desc": "Is an EventHandler representing the code to be called when the input event is raised."
        },
        {
          "term": "GlobalEventHandlers.oninvalid",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid",
          "desc": "Is an EventHandler representing the code to be called when the invalid event is raised."
        },
        {
          "term": "GlobalEventHandlers.onkeydown",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown",
          "desc": "Is an EventHandler representing the code to be called when the keydown event is raised."
        },
        {
          "term": "GlobalEventHandlers.onkeypress",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress",
          "desc": "Is an EventHandler representing the code to be called when the keypress event is raised."
        },
        {
          "term": "GlobalEventHandlers.onkeyup",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup",
          "desc": "Is an EventHandler representing the code to be called when the keyup event is raised."
        },
        {
          "term": "GlobalEventHandlers.onload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload",
          "desc": "Is an EventHandler representing the code to be called when the load event is raised."
        },
        {
          "term": "GlobalEventHandlers.onloadeddata",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata",
          "desc": "Is an EventHandler representing the code to be called when the loadeddata event is raised."
        },
        {
          "term": "GlobalEventHandlers.onloadedmetadata",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata",
          "desc": "Is an EventHandler representing the code to be called when the loadedmetadata event is raised."
        },
        {
          "term": "GlobalEventHandlers.onloadend",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadend",
          "desc": "Is an EventHandler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)"
        },
        {
          "term": "GlobalEventHandlers.onloadstart",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart",
          "desc": "Is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)"
        },
        {
          "term": "GlobalEventHandlers.onlostpointercapture",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture",
          "desc": "Is an EventHandler representing the code to be called when the lostpointercapture event type is raised."
        },
        {
          "term": "GlobalEventHandlers.onmousedown",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown",
          "desc": "Is an EventHandler representing the code to be called when the mousedown event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmouseenter",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter",
          "desc": "Is an EventHandler representing the code to be called when the mouseenter event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmouseleave",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave",
          "desc": "Is an EventHandler representing the code to be called when the mouseleave event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmousemove",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove",
          "desc": "Is an EventHandler representing the code to be called when the mousemove event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmouseout",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout",
          "desc": "Is an EventHandler representing the code to be called when the mouseout event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmouseover",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover",
          "desc": "Is an EventHandler representing the code to be called when the mouseover event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmouseup",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup",
          "desc": "Is an EventHandler representing the code to be called when the mouseup event is raised."
        },
        {
          "term": "GlobalEventHandlers.onmousewheel \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousewheel",
          "desc": "Is an EventHandler representing the code to be called when the mousewheel event is raised. Deprecated. Use onwheel instead."
        },
        {
          "term": "GlobalEventHandlers.onwheel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel",
          "desc": "Is an EventHandler representing the code to be called when the wheel event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpause",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause",
          "desc": "Is an EventHandler representing the code to be called when the pause event is raised."
        },
        {
          "term": "GlobalEventHandlers.onplay",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay",
          "desc": "Is an EventHandler representing the code to be called when the play event is raised."
        },
        {
          "term": "GlobalEventHandlers.onplaying",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplaying",
          "desc": "Is an EventHandler representing the code to be called when the playing event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerdown",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown",
          "desc": "Is an EventHandler representing the code to be called when the pointerdown event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointermove",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove",
          "desc": "Is an EventHandler representing the code to be called when the pointermove event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerup",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup",
          "desc": "Is an EventHandler representing the code to be called when the pointerup event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointercancel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel",
          "desc": "Is an EventHandler representing the code to be called when the pointercancel event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerover",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover",
          "desc": "Is an EventHandler representing the code to be called when the pointerover event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerout",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout",
          "desc": "Is an EventHandler representing the code to be called when the pointerout event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerenter",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter",
          "desc": "Is an EventHandler representing the code to be called when the pointerenter event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerleave",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave",
          "desc": "Is an EventHandler representing the code to be called when the pointerleave event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerlockchange \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pointerlockchange event is raised."
        },
        {
          "term": "GlobalEventHandlers.onpointerlockerror \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pointerlockerror event is raised."
        },
        {
          "term": "GlobalEventHandlers.onprogress",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the progress event is raised."
        },
        {
          "term": "GlobalEventHandlers.onratechange",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the ratechange event is raised."
        },
        {
          "term": "GlobalEventHandlers.onreset",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset",
          "desc": "Is an EventHandler representing the code to be called when the reset event is raised."
        },
        {
          "term": "GlobalEventHandlers.onresize",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
          "desc": "Is an EventHandler representing the code to be called when the resize event is raised."
        },
        {
          "term": "GlobalEventHandlers.onscroll",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll",
          "desc": "Is an EventHandler representing the code to be called when the scroll event is raised."
        },
        {
          "term": "GlobalEventHandlers.onseeked",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the seeked event is raised."
        },
        {
          "term": "GlobalEventHandlers.onseeking",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the seeking event is raised."
        },
        {
          "term": "GlobalEventHandlers.onselect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect",
          "desc": "Is an EventHandler representing the code to be called when the select event is raised."
        },
        {
          "term": "GlobalEventHandlers.onselectstart",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart",
          "desc": "Is an EventHandler representing the code to be called when the selectionchange event is raised, i.e. when the user starts to make a new text selection on a web page."
        },
        {
          "term": "GlobalEventHandlers.onselectionchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange",
          "desc": "Is an EventHandler representing the code to be called when the selectionchange event is raised, i.e. when the text selected on a web page changes."
        },
        {
          "term": "GlobalEventHandlers.onshow",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the show event is raised."
        },
        {
          "term": "GlobalEventHandlers.onsort \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the sort event is raised."
        },
        {
          "term": "GlobalEventHandlers.onstalled",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the stalled event is raised."
        },
        {
          "term": "GlobalEventHandlers.onsubmit",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit",
          "desc": "Is an EventHandler representing the code to be called when the submit event is raised."
        },
        {
          "term": "GlobalEventHandlers.onsuspend",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the suspend event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontimeupdate",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the timeupdate event is raised."
        },
        {
          "term": "GlobalEventHandlers.onvolumechange",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the volumechange event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontouchcancel \n    This API has not been standardized.\n    \n    \n \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel",
          "desc": "Is an EventHandler representing the code to be called when the touchcancel event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontouchend \n    This API has not been standardized.\n    \n    \n \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend",
          "desc": "Is an EventHandler representing the code to be called when the touchend event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontouchmove \n    This API has not been standardized.\n    \n    \n \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove",
          "desc": "Is an EventHandler representing the code to be called when the touchmove event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontouchstart \n    This API has not been standardized.\n    \n    \n \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart",
          "desc": "Is an EventHandler representing the code to be called when the touchstart event is raised."
        },
        {
          "term": "GlobalEventHandlers.ontransitioncancel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel",
          "desc": "An EventHandler called when a transitioncancel event is sent, indicating that a CSS transition has been cancelled."
        },
        {
          "term": "GlobalEventHandlers.ontransitionend",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend",
          "desc": "An EventHandler called when a transitionend event is sent, indicating that a CSS transition has finished playing."
        },
        {
          "term": "GlobalEventHandlers.ontransitionrun",
          "link": "",
          "desc": "An EventHandler called when a transitionrun event is sent, indicating that a CSS transition is running, though not nessarilty started."
        },
        {
          "term": "GlobalEventHandlers.ontransitionstart",
          "link": "",
          "desc": "An EventHandler called when a transitionstart event is sent, indicating that a CSS transition has started transitioning."
        },
        {
          "term": "GlobalEventHandlers.onwaiting",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the waiting event is raised."
        }
      ]
    }
  },
  {
    "title": "Gyroscope",
    "calls": {
      "constructors": [
        {
          "term": "Gyroscope.Gyroscope()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope/Gyroscope",
          "desc": "Creates a new Gyroscope object."
        }
      ],
      "properties": [
        {
          "term": "Gyroscope.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope/x",
          "desc": "Returns a double, containing the angular velocity of the device along the device's x axis."
        },
        {
          "term": "Gyroscope.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope/y",
          "desc": "Returns a double, containing the angular velocity of the device along the device's y axis."
        },
        {
          "term": "Gyroscope.z Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope/z",
          "desc": "Returns a double, containing the angular velocity of the device along the device's z axis."
        }
      ]
    }
  },
  {
    "title": "HashChangeEvent",
    "calls": {
      "properties": [
        {
          "term": "HashChangeEvent.newURL Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/newURL",
          "desc": "The new URL to which the window is navigating."
        },
        {
          "term": "HashChangeEvent.oldURL Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL",
          "desc": "The previous URL from which the window was navigated."
        }
      ]
    }
  },
  {
    "title": "History",
    "calls": {
      "properties": [
        {
          "term": "length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/length",
          "desc": "Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1."
        },
        {
          "term": "scrollRestoration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/scrollRestoration",
          "desc": "Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either auto or manual."
        },
        {
          "term": "state Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/state",
          "desc": "Returns an any value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a popstate event."
        }
      ],
      "methods": [
        {
          "term": "back()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/back",
          "desc": "This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to history.go(-1). Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception."
        },
        {
          "term": "forward()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/forward",
          "desc": "This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to history.go(1). Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception."
        },
        {
          "term": "go()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/go",
          "desc": "Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling go() without parameters or a value of 0 reloads the current page. Internet Explorer lets you specify a string, instead of an integer, to go to a specific URL in the history list."
        },
        {
          "term": "pushState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/pushState",
          "desc": "Pushes the given data onto the session history stack with the specified title (and, if provided, URL). The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API."
        },
        {
          "term": "replaceState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState",
          "desc": "Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API."
        }
      ]
    }
  },
  {
    "title": "HkdfParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to HKDF."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the digest algorithm to use. This may be one of: SHA-1 SHA-256 SHA-384 SHA-512"
        },
        {
          "term": "salt",
          "link": null,
          "desc": "A BufferSource. The HKDF specification states that adding salt \"adds significantly to the strength of HKDF\". Ideally, the salt is a random or pseudo-random value with the same length as the output of the digest function. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret."
        },
        {
          "term": "info",
          "link": null,
          "desc": "A BufferSource representing application-specific contextual information. This is used to bind the derived key to an application or context, and enables you to derive different keys for different contexts while using the same input key material. It's important that this should be independent of the input key material itself. This property is required but may be an empty buffer."
        }
      ]
    }
  },
  {
    "title": "HmacImportParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to HMAC."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the name of the digest function to use. The can take a value of SHA-256, SHA-384, or SHA-512. Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable."
        },
        {
          "term": "length Optional",
          "link": null,
          "desc": "A Number representing the length in bits of the key. If this is omitted the length of the key is equal to the length of the digest generated by the digest function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default."
        }
      ]
    }
  },
  {
    "title": "HmacKeyGenParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to HMAC."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the name of the digest function to use. You can pass any of SHA-1, SHA-256, SHA-384, or SHA-512 here."
        },
        {
          "term": "length Optional",
          "link": null,
          "desc": "A Number — the length in bits of the key. If this is omitted the length of the key is equal to the length of the digest generated by the digest function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default."
        }
      ]
    }
  },
  {
    "title": "HTMLAnchorElement",
    "calls": {
      "properties": [
        {
          "term": "Element.accessKey",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey",
          "desc": "Is a DOMString representing a single character that switches input focus to the hyperlink."
        },
        {
          "term": "HTMLAnchorElement.download \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/download",
          "desc": "Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it."
        },
        {
          "term": "HTMLHyperlinkElementUtils.hash",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash",
          "desc": "Is a USVString representing the fragment identifier, including the leading hash mark ('#'), if any, in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.host",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/host",
          "desc": "Is a USVString representing the hostname and port (if it's not the default port) in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.hostname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hostname",
          "desc": "Is a USVString representing the hostname in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.href",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/href",
          "desc": "Is a USVString that is the result of parsing the href HTML attribute relative to the document, containing a valid URL of a linked resource."
        },
        {
          "term": "HTMLAnchorElement.hreflang",
          "link": "",
          "desc": "Is a DOMString that reflects the hreflang HTML attribute, indicating the language of the linked resource."
        },
        {
          "term": "HTMLHyperlinkElementUtils.password",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password",
          "desc": "Is a USVString containing the password specified before the domain name."
        },
        {
          "term": "HTMLHyperlinkElementUtils.origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin",
          "desc": "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
        },
        {
          "term": "HTMLHyperlinkElementUtils.pathname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname",
          "desc": "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
        },
        {
          "term": "HTMLHyperlinkElementUtils.port",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/port",
          "desc": "Is a USVString representing the port component, if any, of the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.protocol",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/protocol",
          "desc": "Is a USVString representing the protocol component, including trailing colon (':'), of the referenced URL."
        },
        {
          "term": "HTMLAnchorElement.referrerPolicy \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/referrerPolicy",
          "desc": "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use."
        },
        {
          "term": "HTMLAnchorElement.rel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel",
          "desc": "Is a DOMString that reflects the rel HTML attribute, specifying the relationship of the target object to the linked object."
        },
        {
          "term": "HTMLAnchorElement.relList Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList",
          "desc": "Returns a DOMTokenList that reflects the rel HTML attribute, as a list of tokens."
        },
        {
          "term": "HTMLHyperlinkElementUtils.search",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search",
          "desc": "Is a USVString representing the search element, including leading question mark ('?'), if any, of the referenced URL."
        },
        {
          "term": "HTMLElement.tabindex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/tabIndex",
          "desc": "Is a long containing the position of the element in the tabbing navigation order for the current document."
        },
        {
          "term": "HTMLAnchorElement.target",
          "link": "",
          "desc": "Is a DOMString that reflects the target HTML attribute, indicating where to display the linked resource."
        },
        {
          "term": "HTMLAnchorElement.text",
          "link": "",
          "desc": "Is a DOMString being a synonym for the Node.textContent property."
        },
        {
          "term": "HTMLAnchorElement.type",
          "link": "",
          "desc": "Is a DOMString that reflects the type HTML attribute, indicating the MIME type of the linked resource."
        },
        {
          "term": "HTMLHyperlinkElementUtils.username",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username",
          "desc": "Is a USVString containing the username specified before the domain name."
        }
      ],
      "methods": [
        {
          "term": "HTMLElement.blur()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/blur",
          "desc": "Removes the keyboard focus from the current element."
        },
        {
          "term": "HTMLElement.focus()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus",
          "desc": "Gives the keyboard focus to the current element."
        },
        {
          "term": "HTMLHyperlinkElementUtils.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/toString",
          "desc": "Returns a USVString containing the whole URL. It is a synonym for HTMLHyperlinkElementUtils.href, though it can't be used to modify the value."
        }
      ]
    }
  },
  {
    "title": "HTMLAreaElement",
    "calls": {
      "properties": [
        {
          "term": "Element.accessKey",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey",
          "desc": "Is a DOMString containing a single character that switches input focus to the control."
        },
        {
          "term": "HTMLAreaElement.alt",
          "link": "",
          "desc": "Is a DOMString that reflects the alt HTML attribute, containing alternative text for the element."
        },
        {
          "term": "HTMLAreaElement.coords",
          "link": "",
          "desc": "Is a DOMString that reflects the coords HTML attribute, containing coordinates to define the hot-spot region."
        },
        {
          "term": "HTMLAreaElement.download \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it."
        },
        {
          "term": "HTMLHyperlinkElementUtils.hash",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash",
          "desc": "Is a USVString containing the fragment identifier (including the leading hash mark (#)), if any, in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.host",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/host",
          "desc": "Is a USVString containing the hostname and port (if it's not the default port) in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.hostname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hostname",
          "desc": "Is a USVString containing the hostname in the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.href",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/href",
          "desc": "Is a USVString containing that reflects the href HTML attribute, containing a valid URL of a linked resource."
        },
        {
          "term": "HTMLAreaElement.noHref \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean flag indicating if the area is inactive (true) or active (false)."
        },
        {
          "term": "HTMLHyperlinkElementUtils.password",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password",
          "desc": "Is a USVString containing the password specified before the domain name."
        },
        {
          "term": "HTMLHyperlinkElementUtils.origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin",
          "desc": "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
        },
        {
          "term": "HTMLHyperlinkElementUtils.pathname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname",
          "desc": "Is a USVString containing the path name component, if any, of the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.port",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/port",
          "desc": "Is a USVString containing the port component, if any, of the referenced URL."
        },
        {
          "term": "HTMLHyperlinkElementUtils.protocol",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/protocol",
          "desc": "Is a USVString containing the protocol component (including trailing colon ':'), of the referenced URL."
        },
        {
          "term": "HTMLAreaElement.referrerPolicy \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/referrerPolicy",
          "desc": "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource."
        },
        {
          "term": "HTMLAreaElement.rel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel",
          "desc": "Is a DOMString that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource."
        },
        {
          "term": "HTMLAreaElement.relList Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList",
          "desc": "Returns a DOMTokenList that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens."
        },
        {
          "term": "HTMLHyperlinkElementUtils.search",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search",
          "desc": "Is a USVString containing the search element (including leading question mark '?'), if any, of the referenced URL."
        },
        {
          "term": "HTMLAreaElement.shape",
          "link": "",
          "desc": "Is a DOMString that reflects the shape HTML attribute, indicating the shape of the hot-spot, limited to known values."
        },
        {
          "term": "HTMLElement.tabIndex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/tabIndex",
          "desc": "Is a long containing the element's position in the tabbing order."
        },
        {
          "term": "HTMLAreaElement.target",
          "link": "",
          "desc": "Is a DOMString that reflects the target HTML attribute, indicating the browsing context in which to open the linked resource."
        },
        {
          "term": "HTMLHyperlinkElementUtils.username",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username",
          "desc": "Is a USVString containing the username specified before the domain name."
        }
      ],
      "methods": [
        {
          "term": "HTMLHyperlinkElementUtils.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/toString",
          "desc": "Returns a USVString containing the whole URL of the script executed in the Worker. It is a synonym for HTMLHyperlinkElementUtils.href."
        }
      ]
    }
  },
  {
    "title": "HTMLAudioElement",
    "calls": {
      "constructors": [
        {
          "term": "Audio()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio",
          "desc": "Creates and returns a new HTMLAudioElement object, optionally starting the process of loading an audio file into it if the file URL is given."
        }
      ]
    }
  },
  {
    "title": "HTMLBaseElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLBaseElement.href",
          "link": "",
          "desc": "Is a DOMString that reflects the href HTML attribute, containing a base URL for relative URLs in the document."
        },
        {
          "term": "HTMLBaseElement.target",
          "link": "",
          "desc": "Is a DOMString that reflects the target HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified."
        }
      ]
    }
  },
  {
    "title": "HTMLBodyElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLBodyElement.aLink \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the color of active hyperlinks."
        },
        {
          "term": "HTMLBodyElement.background \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it."
        },
        {
          "term": "HTMLBodyElement.bgColor \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the background color for the document."
        },
        {
          "term": "HTMLBodyElement.link \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the color of unvisited links."
        },
        {
          "term": "HTMLBodyElement.text \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the foreground color of text."
        },
        {
          "term": "HTMLBodyElement.vLink \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that represents the color of visited links."
        }
      ],
      "handlers": [
        {
          "term": "WindowEventHandlers.onafterprint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
          "desc": "Is an EventHandler representing the code to be called when the afterprint event is raised."
        },
        {
          "term": "WindowEventHandlers.onbeforeprint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint",
          "desc": "Is an EventHandler representing the code to be called when the beforeprint event is raised."
        },
        {
          "term": "WindowEventHandlers.onbeforeunload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
          "desc": "Is an EventHandler representing the code to be called when the beforeunload event is raised."
        },
        {
          "term": "WindowEventHandlers.onhashchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
          "desc": "Is an EventHandler representing the code to be called when the hashchange event is raised."
        },
        {
          "term": "WindowEventHandlers.onlanguagechange \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
          "desc": "Is an EventHandler representing the code to be called when the languagechange event is raised."
        },
        {
          "term": "WindowEventHandlers.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage",
          "desc": "Is an EventHandler called whenever an object receives a message event."
        },
        {
          "term": "WindowEventHandlers.onmessageerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror",
          "desc": "Is an eventHandler called whenever an object receives a messageerror event."
        },
        {
          "term": "WindowEventHandlers.onoffline",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the offline event is raised."
        },
        {
          "term": "WindowEventHandlers.ononline",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the online event is raised."
        },
        {
          "term": "WindowEventHandlers.onpagehide",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pagehide event is raised."
        },
        {
          "term": "WindowEventHandlers.onpageshow",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pageshow event is raised."
        },
        {
          "term": "WindowEventHandlers.onpopstate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
          "desc": "Is an EventHandler representing the code to be called when the popstate event is raised."
        },
        {
          "term": "WindowEventHandlers.onrejectionhandled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled",
          "desc": "An EventHandler representing the code executed when the rejectionhandled event is raised, indicating that a Promise was rejected and the rejection has been handled."
        },
        {
          "term": "GlobalEventHandlers.onresize",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize",
          "desc": "Is an EventHandler representing the code to be called when the resize event is raised."
        },
        {
          "term": "WindowEventHandlers.onstorage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage",
          "desc": "Is an EventHandler representing the code to be called when the storage event is raised."
        },
        {
          "term": "WindowEventHandlers.onunhandledrejection",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection",
          "desc": "An EventHandler representing the code executed when the unhandledrejection event is raised, indicating that a Promise was rejected but the rejection was not handled."
        },
        {
          "term": "WindowEventHandlers.onunload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
          "desc": "Is an EventHandler representing the code to be called when the unload event is raised."
        }
      ]
    }
  },
  {
    "title": "HTMLBRElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLBRElement.clear \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Is a DOMString indicating the flow of text around floating objects."
        }
      ]
    }
  },
  {
    "title": "HTMLButtonElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLButtonElement.accessKey",
          "link": "",
          "desc": "Is a DOMString indicating the single-character keyboard key to give access to the button."
        },
        {
          "term": "HTMLButtonElement.autofocus",
          "link": "",
          "desc": "Is a Boolean indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."
        },
        {
          "term": "HTMLButtonElement.disabled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/disabled",
          "desc": "Is a Boolean indicating whether or not the control is disabled, meaning that it does not accept any clicks."
        },
        {
          "term": "HTMLButtonElement.form Read only",
          "link": "",
          "desc": "Is a HTMLFormElement reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element. If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the null value if none matches."
        },
        {
          "term": "HTMLButtonElement.formAction",
          "link": "",
          "desc": "Is a DOMString reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the action attribute of the <form> element that owns this element."
        },
        {
          "term": "HTMLButtonElement.formEnctype",
          "link": "",
          "desc": "Is a DOMString reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element."
        },
        {
          "term": "HTMLButtonElement.formMethod",
          "link": "",
          "desc": "Is a DOMString reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element."
        },
        {
          "term": "HTMLButtonElement.formNoValidate",
          "link": "",
          "desc": "Is a Boolean indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element."
        },
        {
          "term": "HTMLButtonElement.formTarget",
          "link": "",
          "desc": "Is a DOMString reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element."
        },
        {
          "term": "HTMLButtonElement.labels Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/labels",
          "desc": "Is a NodeList that represents a list of <label> elements that are labels for this button."
        },
        {
          "term": "HTMLButtonElement.menu \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a HTMLMenuElement representing the menu element to be displayed if the button is clicked and is of type=\"menu\"."
        },
        {
          "term": "HTMLButtonElement.name",
          "link": "",
          "desc": "Is a DOMString representing the name of the object when submitted with a form. If specified, it must not be the empty string."
        },
        {
          "term": "HTMLButtonElement.tabIndex",
          "link": "",
          "desc": "Is a long that represents this element's position in the tabbing order."
        },
        {
          "term": "HTMLButtonElement.type",
          "link": "",
          "desc": "Is a DOMString indicating the behavior of the button. This is an enumerated attribute with the following possible values: submit: The button submits the form. This is the default value if the attribute is not specified, or if it is dynamically changed to an empty or invalid value. reset: The button resets the form. button: The button does nothing. menu: The button displays a menu. This is an experimental API that should not be used in production code."
        },
        {
          "term": "HTMLButtonElement.willValidate Read only",
          "link": "",
          "desc": "Is a Boolean indicating whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation, including: its type property is reset or button; it has a <datalist> ancestor; or the disabled property is set to true."
        },
        {
          "term": "HTMLButtonElement.validationMessage Read only",
          "link": "",
          "desc": "Is a DOMString representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "HTMLButtonElement.validity Read only",
          "link": "",
          "desc": "Is a ValidityState representing the validity states that this button is in."
        },
        {
          "term": "HTMLButtonElement.value",
          "link": "",
          "desc": "Is a DOMString representing the current form control value of the button."
        }
      ]
    }
  },
  {
    "title": "HTMLCanvasElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLCanvasElement.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height",
          "desc": "The height HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going down one column of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used. If no [separate] CSS height is assigned to the <canvas>, then this value will also be used as the height of the canvas in the length-unit CSS Pixel."
        },
        {
          "term": "HTMLCanvasElement.width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width",
          "desc": "The width HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going across one row of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used. If no [separate] CSS width is assigned to the <canvas>, then this value will also be used as the width of the canvas in the length-unit CSS Pixel."
        },
        {
          "term": "HTMLCanvasElement.mozOpaque \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque",
          "desc": "Is a Boolean reflecting the moz-opaque HTML attribute of the <canvas> element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported in Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead."
        },
        {
          "term": "HTMLCanvasElement.mozPrintCallback\n    This API has not been standardized.",
          "link": "",
          "desc": "Is a function that is Initially null. Web content can set this to a JavaScript function that will be called when the canvas is to be redrawn while the page is being printed. When called, the callback is passed a \"printState\" object that implements the MozCanvasPrintState interface. The callback can get the context to draw to from the printState object and must then call done() on it when finished. The purpose of mozPrintCallback is to obtain a higher resolution rendering of the canvas at the resolution of the printer being used. See this blog post."
        }
      ],
      "methods": [
        {
          "term": "HTMLCanvasElement.captureStream() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream",
          "desc": "Returns a CanvasCaptureMediaStream that is a real-time video capture of the surface of the canvas."
        },
        {
          "term": "HTMLCanvasElement.getContext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext",
          "desc": "Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with \"2d\" returns a CanvasRenderingContext2D object, whereas calling it with \"webgl\" (or \"experimental-webgl\") returns a WebGLRenderingContext object. This context is only available on browsers that implement WebGL."
        },
        {
          "term": "HTMLCanvasElement.toDataURL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL",
          "desc": "Returns a data-URL containing a representation of the image in the format specified by the type parameter (defaults to png). The returned image is in a resolution of 96dpi."
        },
        {
          "term": "HTMLCanvasElement.toBlob()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob",
          "desc": "Creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent."
        },
        {
          "term": "HTMLCanvasElement.transferControlToOffscreen() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen",
          "desc": "Transfers control to an OffscreenCanvas object, either on the main thread or on a worker."
        }
      ]
    }
  },
  {
    "title": "HTMLCollection",
    "calls": {
      "properties": [
        {
          "term": "HTMLCollection.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/length",
          "desc": "Returns the number of items in the collection."
        }
      ],
      "methods": [
        {
          "term": "HTMLCollection.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item",
          "desc": "Returns the specific node at the given zero-based index into the list. Returns null if the index is out of range."
        },
        {
          "term": "HTMLCollection.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item",
          "desc": "An alternative to accessing collection[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations."
        },
        {
          "term": "HTMLCollection.namedItem()",
          "link": "",
          "desc": "Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name."
        },
        {
          "term": "HTMLCollection.namedItem()",
          "link": "",
          "desc": "An alternative to accessing collection[name] (which instead returns undefined when name does not exist). This is mostly useful for non-JavaScript DOM implementations."
        }
      ]
    }
  },
  {
    "title": "HTMLDataElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLDataElement.value",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement/value",
          "desc": "Is a DOMString reflecting the value HTML attribute, containing a machine-readable form of the element's value."
        }
      ]
    }
  },
  {
    "title": "HTMLDataListElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLDataListElement.options Read only",
          "link": "",
          "desc": "Is a HTMLCollection representing a collection of the contained option elements."
        }
      ]
    }
  },
  {
    "title": "HTMLDetailsElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLDetailsElement.open",
          "link": "",
          "desc": "Is a boolean reflecting the open HTML attribute, indicating whether or not the element’s contents (not counting the <summary>) is to be shown to the user."
        }
      ]
    }
  },
  {
    "title": "HTMLDivElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLDivElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
        }
      ]
    }
  },
  {
    "title": "HTMLDListElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLDListElement.compact \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean indicating that spacing between list items should be reduced."
        }
      ]
    }
  },
  {
    "title": "HTMLDocument",
    "calls": {}
  },
  {
    "title": "HTMLElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLElement.accessKey",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey",
          "desc": "Is a DOMString representing the access key assigned to the element."
        },
        {
          "term": "HTMLElement.accessKeyLabel Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel",
          "desc": "Returns a DOMString containing the element's assigned access key."
        },
        {
          "term": "HTMLElement.contentEditable",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable",
          "desc": "Is a DOMString, where a value of true means the element is editable and a value of false means it isn't."
        },
        {
          "term": "HTMLElement.isContentEditable Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable",
          "desc": "Returns a Boolean that indicates whether or not the content of the element can be edited."
        },
        {
          "term": "HTMLElement.contextMenu \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contextMenu",
          "desc": "Is a HTMLMenuElement representing the contextual menu associated with the element. It may be null."
        },
        {
          "term": "HTMLOrForeignElement.dataset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/dataset",
          "desc": "Returns a DOMStringMap with which script can read and write the element's custom data attributes (data-*) ."
        },
        {
          "term": "HTMLElement.dir",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir",
          "desc": "Is a DOMString, reflecting the dir global attribute, representing the directionality of the element. Possible values are \"ltr\", \"rtl\", and \"auto\"."
        },
        {
          "term": "HTMLElement.draggable",
          "link": "",
          "desc": "Is a Boolean indicating if the element can be dragged."
        },
        {
          "term": "HTMLElement.enterkeyhint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint",
          "desc": "Is a DOMString defining what action label (or icon) to present for the enter key on virtual keyboards."
        },
        {
          "term": "HTMLElement.hidden",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden",
          "desc": "Is a Boolean indicating if the element is hidden or not."
        },
        {
          "term": "HTMLElement.inert",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert",
          "desc": "Is a Boolean indicating whether the user agent must act as though the given node is absent for the purposes of user interaction events, in-page text searches (\"find in page\"), and text selection."
        },
        {
          "term": "HTMLElement.innerText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText",
          "desc": "Represents the \"rendered\" text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard."
        },
        {
          "term": "HTMLElement.itemScope \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a Boolean representing the item scope."
        },
        {
          "term": "HTMLElement.itemType \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "",
          "desc": "Returns a DOMSettableTokenList…"
        },
        {
          "term": "HTMLElement.itemId \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString representing the item ID."
        },
        {
          "term": "HTMLElement.itemRef \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "",
          "desc": "Returns a DOMSettableTokenList…"
        },
        {
          "term": "HTMLElement.itemProp \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "",
          "desc": "Returns a DOMSettableTokenList…"
        },
        {
          "term": "HTMLElement.itemValue \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a Object representing the item value."
        },
        {
          "term": "HTMLElement.lang",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang",
          "desc": "Is a DOMString representing the language of an element's attributes, text, and element contents."
        },
        {
          "term": "HTMLElement.noModule",
          "link": "",
          "desc": "Is a Boolean indicating whether an import script can be executed in user agents that support module scripts."
        },
        {
          "term": "HTMLOrForeignElement.nonce",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/nonce",
          "desc": "Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed."
        },
        {
          "term": "HTMLElement.offsetHeight \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight",
          "desc": "Returns a double containing the height of an element, relative to the layout."
        },
        {
          "term": "HTMLElement.offsetLeft \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft",
          "desc": "Returns a double, the distance from this element's left border to its offsetParent's left border."
        },
        {
          "term": "HTMLElement.offsetParent \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent",
          "desc": "Returns a Element that is the element from which all offset calculations are currently computed."
        },
        {
          "term": "HTMLElement.offsetTop \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop",
          "desc": "Returns a double, the distance from this element's top border to its offsetParent's top border."
        },
        {
          "term": "HTMLElement.offsetWidth \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth",
          "desc": "Returns a double containing the width of an element, relative to the layout."
        },
        {
          "term": "HTMLElement.properties \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "",
          "desc": "Returns a HTMLPropertiesCollection…"
        },
        {
          "term": "HTMLElement.spellcheck",
          "link": "",
          "desc": "Is a Boolean that controls spell-checking. It is present on all HTML elements, though it doesn't have an effect on all of them."
        },
        {
          "term": "HTMLElement.style",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style",
          "desc": "Is a CSSStyleDeclaration, an object representing the declarations of an element's style attributes."
        },
        {
          "term": "HTMLOrForeignElement.tabIndex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/tabIndex",
          "desc": "Is a long representing the position of the element in the tabbing order."
        },
        {
          "term": "HTMLElement.title",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title",
          "desc": "Is a DOMString containing the text that appears in a popup box when mouse is over the element."
        },
        {
          "term": "HTMLElement.translate \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a Boolean representing the translation."
        }
      ],
      "handlers": [
        {
          "term": "HTMLElement.oncopy \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy",
          "desc": "Returns the event handling code for the copy event (bug 280959)."
        },
        {
          "term": "HTMLElement.oncut \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut",
          "desc": "Returns the event handling code for the cut event (bug 280959)."
        },
        {
          "term": "HTMLElement.onpaste \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste",
          "desc": "Returns the event handling code for the paste event (bug 280959)."
        },
        {
          "term": "TouchEventHandlers.ontouchstart \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchstart event."
        },
        {
          "term": "TouchEventHandlers.ontouchend \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchend event."
        },
        {
          "term": "TouchEventHandlers.ontouchmove \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchmove event."
        },
        {
          "term": "TouchEventHandlers.ontouchenter \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchenter event."
        },
        {
          "term": "TouchEventHandlers.ontouchleave \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchleave event."
        },
        {
          "term": "TouchEventHandlers.ontouchcancel \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the event handling code for the touchcancel event."
        }
      ],
      "methods": [
        {
          "term": "HTMLElement.attachInternals() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Attaches an ElementInternals instance to the custom element."
        },
        {
          "term": "HTMLOrForeignElement.blur()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/blur",
          "desc": "Removes keyboard focus from the currently focused element."
        },
        {
          "term": "HTMLElement.click()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click",
          "desc": "Sends a mouse click event to the element."
        },
        {
          "term": "HTMLOrForeignElement.focus()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus",
          "desc": "Makes the element the current keyboard focus."
        },
        {
          "term": "HTMLElement.forceSpellCheck() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/forceSpellCheck",
          "desc": "Runs the spell checker on the element's contents."
        }
      ]
    }
  },
  {
    "title": "HTMLEmbedElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLEmbedElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"center\", and \"justify\"."
        },
        {
          "term": "HTMLEmbedElement.height",
          "link": "",
          "desc": "Is a DOMString reflecting the height HTML attribute, containing the displayed height of the resource."
        },
        {
          "term": "HTMLEmbedElement.name \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the name of the embedded object."
        },
        {
          "term": "HTMLEmbedElement.src",
          "link": "",
          "desc": "Is a DOMString that reflects the src HTML attribute, containing the address of the resource."
        },
        {
          "term": "HTMLEmbedElement.type",
          "link": "",
          "desc": "Is a DOMString that reflects the type HTML attribute, containing the type of the resource."
        },
        {
          "term": "HTMLEmbedElement.width",
          "link": "",
          "desc": "Is a DOMString that reflects the width HTML attribute, containing the displayed width of the resource."
        }
      ]
    }
  },
  {
    "title": "HTMLFieldSetElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLFieldSetElement.disabled",
          "link": "",
          "desc": "A Boolean reflecting the disabled HTML attribute, indicating whether the user can interact with the control."
        },
        {
          "term": "HTMLFieldSetElement.elementsRead only",
          "link": "",
          "desc": "The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser."
        },
        {
          "term": "HTMLFieldSetElement.formRead only",
          "link": "",
          "desc": "An HTMLFormControlsCollection or HTMLCollection referencing the containing form element, if this element is in a form. If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the null value if none matches."
        },
        {
          "term": "HTMLFieldSetElement.name",
          "link": "",
          "desc": "A DOMString reflecting the name HTML attribute, containing the name of the field set. This can be used when accessing the field set in JavaScript. It is not part of the data which is sent to the server."
        },
        {
          "term": "HTMLFieldSetElement.typeRead only",
          "link": "",
          "desc": "The DOMString \"fieldset\"."
        },
        {
          "term": "HTMLFieldSetElement.validationMessage",
          "link": "",
          "desc": "A DOMString representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "HTMLFieldSetElement.validity",
          "link": "",
          "desc": "A ValidityState representing the validity states that this element is in."
        },
        {
          "term": "HTMLFieldSetElement.willValidate",
          "link": "",
          "desc": "A Boolean false, because <fieldset> objects are never candidates for constraint validation."
        }
      ],
      "methods": [
        {
          "term": "HTMLFieldSetElement.checkValidity()",
          "link": "",
          "desc": "Always returns true because <fieldset> objects are never candidates for constraint validation."
        },
        {
          "term": "HTMLFieldSetElement.reportValidity()",
          "link": "",
          "desc": "Always returns true because <fieldset> objects are never candidates for constraint validation."
        },
        {
          "term": "HTMLFieldSetElement.setCustomValidity()",
          "link": "",
          "desc": "Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate."
        }
      ]
    }
  },
  {
    "title": "HTMLFormControlsCollection",
    "calls": {
      "methods": [
        {
          "term": "HTMLFormControlsCollection.namedItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem",
          "desc": "Returns the RadioNodeList or the Element in the collection whose name or id matches the specified name, or null if no nodes match. Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")."
        }
      ]
    }
  },
  {
    "title": "HTMLFormElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLFormElement.elements Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements",
          "desc": "A HTMLFormControlsCollection holding all form controls belonging to this form element."
        },
        {
          "term": "HTMLFormElement.lengthRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length",
          "desc": "A long reflecting the number of controls in the form."
        },
        {
          "term": "HTMLFormElement.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name",
          "desc": "A DOMString reflecting the value of the form's name HTML attribute, containing the name of the form."
        },
        {
          "term": "HTMLFormElement.method",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method",
          "desc": "A DOMString reflecting the value of the form's method HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set."
        },
        {
          "term": "HTMLFormElement.target",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target",
          "desc": "A DOMString reflecting the value of the form's target HTML attribute, indicating where to display the results received from submitting the form."
        },
        {
          "term": "HTMLFormElement.action",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action",
          "desc": "A DOMString reflecting the value of the form's action HTML attribute, containing the URI of a program that processes the information submitted by the form."
        },
        {
          "term": "HTMLFormElement.encoding or HTMLFormElement.enctype",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding",
          "desc": "A DOMString reflecting the value of the form's enctype HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms."
        },
        {
          "term": "HTMLFormElement.acceptCharset",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset",
          "desc": "A DOMString reflecting the value of the form's accept-charset HTML attribute, representing the character encoding that the server accepts."
        },
        {
          "term": "HTMLFormElement.autocomplete",
          "link": "",
          "desc": "A DOMString reflecting the value of the form's autocomplete HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser."
        },
        {
          "term": "HTMLFormElement.noValidate",
          "link": "",
          "desc": "A Boolean reflecting the value of the form's novalidate HTML attribute, indicating whether the form should not be validated."
        }
      ],
      "methods": [
        {
          "term": "checkValidity()",
          "link": "",
          "desc": "Returns true if the element's child controls are subject to constraint validation and satisfy those constraints; returns false if some controls do not satisfy their constraints. Fires an event named invalid at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to false."
        },
        {
          "term": "reportValidity()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity",
          "desc": "Returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user."
        },
        {
          "term": "requestSubmit()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit",
          "desc": "Requests that the form be submitted using the specified submit button and its corresponding configuration."
        },
        {
          "term": "reset()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset",
          "desc": "Resets the form to its initial state."
        },
        {
          "term": "submit()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit",
          "desc": "Submits the form to the server."
        }
      ]
    }
  },
  {
    "title": "HTMLHeadElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLHeadElement.profile \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the URIs of one or more metadata profiles (white space separated)."
        }
      ]
    }
  },
  {
    "title": "HTMLHeadingElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLHeadingElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
        }
      ]
    }
  },
  {
    "title": "HTMLHRElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLHRElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString, an enumerated attribute indicating alignment of the rule with respect to the surrounding context."
        },
        {
          "term": "HTMLHRElement.color \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the name of the color of the rule."
        },
        {
          "term": "HTMLHRElement.noshade \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean that sets the rule to have no shading."
        },
        {
          "term": "HTMLHRElement.size \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the height of the rule."
        },
        {
          "term": "HTMLHRElement.width \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the width of the rule on the page."
        }
      ]
    }
  },
  {
    "title": "HTMLHtmlElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLHtmlElement.version \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement/version",
          "desc": "Is a DOMString representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Omit it."
        }
      ]
    }
  },
  {
    "title": "HTMLIFrameElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLIFrameElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that specifies the alignment of the frame with respect to the surrounding context."
        },
        {
          "term": "HTMLIFrameElement.allow \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a list of origins the frame is allowed to display content from. This attribute also accepts the values self and src which represent the origin in the iframe's src attribute. The default value is src."
        },
        {
          "term": "HTMLIFrameElement.allowfullscreen \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a Boolean indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details."
        },
        {
          "term": "HTMLIFrameElement.allowPaymentRequest",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest",
          "desc": "Is a Boolean indicating whether the Payment Request API may be invoked inside a cross-origin iframe."
        },
        {
          "term": "HTMLIFrameElement.contentDocument Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument",
          "desc": "Returns a Document, the active document in the inline frame's nested browsing context."
        },
        {
          "term": "HTMLIFrameElement.contentWindow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow",
          "desc": "Returns a WindowProxy, the window proxy for the nested browsing context."
        },
        {
          "term": "HTMLIFrameElement.csp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp",
          "desc": "Specifies the Content Security Policy that an embedded document must agree to enforce upon itself."
        },
        {
          "term": "HTMLIFrameElement.frameBorder \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that indicates whether to create borders between frames."
        },
        {
          "term": "HTMLIFrameElement.height",
          "link": "",
          "desc": "Is a DOMString that reflects the height HTML attribute, indicating the height of the frame."
        },
        {
          "term": "HTMLIFrameElement.longDesc \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that contains the URI of a long description of the frame."
        },
        {
          "term": "HTMLIFrameElement.marginHeight \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString being the height of the frame margin."
        },
        {
          "term": "HTMLIFrameElement.marginWidth \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString being the width of the frame margin."
        },
        {
          "term": "HTMLIFrameElement.name",
          "link": "",
          "desc": "Is a DOMString that reflects the name HTML attribute, containing a name by which to refer to the frame."
        },
        {
          "term": "HTMLIFrameElement.featurePolicy Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/featurePolicy",
          "desc": "Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document."
        },
        {
          "term": "HTMLIFrameElement.referrerPolicy \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy",
          "desc": "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource."
        },
        {
          "term": "HTMLIFrameElement.sandbox",
          "link": "",
          "desc": "Is a DOMSettableTokenList that reflects the sandbox HTML attribute, indicating extra restrictions on the behavior of the nested content."
        },
        {
          "term": "HTMLIFrameElement.scrolling \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that indicates whether the browser should provide scrollbars for the frame."
        },
        {
          "term": "HTMLIFrameElement.src",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src",
          "desc": "Is a DOMString that reflects the src HTML attribute, containing the address of the content to be embedded. Note that programmatically removing an <iframe>'s src attribute (e.g. via Element.removeAttribute()) causes about:blank to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS."
        },
        {
          "term": "HTMLIFrameElement.srcdoc",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc",
          "desc": "Is a DOMString that represents the content to display in the frame."
        },
        {
          "term": "HTMLIFrameElement.width",
          "link": "",
          "desc": "Is a DOMString that reflects the width HTML attribute, indicating the width of the frame."
        }
      ]
    }
  },
  {
    "title": "HTMLImageElement",
    "calls": {
      "constructors": [
        {
          "term": "Image()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image",
          "desc": "The Image() constructor creates and returns a new HTMLImageElement object representing an HTML <img> element which is not attached to any DOM tree. It accepts optional width and height parameters. When called without parameters, new Image() is equivalent to calling document.createElement(\"img\")."
        }
      ],
      "properties": [
        {
          "term": "HTMLImageElement.alt",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt",
          "desc": "A DOMString that reflects the alt HTML attribute, thus indicating the alternate fallback content to be displayed if the image has not been loaded."
        },
        {
          "term": "HTMLImageElement.complete Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete",
          "desc": "Returns a Boolean that is true if the browser has finished fetching the image, whether successful or not. That means this value is also true if the image has no src value indicating an image to load."
        },
        {
          "term": "HTMLImageElement.crossOrigin",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin",
          "desc": "A DOMString specifying the CORS setting for this image element. See CORS settings attributes for further details. This may be null if CORS is not used."
        },
        {
          "term": "HTMLImageElement.currentSrc Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc",
          "desc": "Returns a USVString representing the URL from which the currently displayed image was loaded. This may change as the image is adjusted due to changing conditions, as directed by any media queries which are in place."
        },
        {
          "term": "HTMLImageElement.decoding",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding",
          "desc": "An optional DOMString representing a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: sync to decode the image synchronously, async to decode it asynchronously, or auto to indicate no preference (which is the default). Read the decoding page for details on the implications of this property's values."
        },
        {
          "term": "HTMLImageElement.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height",
          "desc": "An integer value that reflects the height HTML attribute, indicating the rendered height of the image in CSS pixels."
        },
        {
          "term": "HTMLImageElement.isMap",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap",
          "desc": "A Boolean that reflects the ismap HTML attribute, indicating that the image is part of a server-side image map. This is different from a client-side image map, specified using an <img> element and a corresponding <map> which contains <area> elements indicating the clickable areas in the image. The image must be contained within an <a> element; see the ismap page for details."
        },
        {
          "term": "HTMLImageElement.loading",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading",
          "desc": "A DOMString providing a hint to the browser used to optimize loading the document by determining whether to load the image immediately (eager) or on an as-needed basis (lazy)."
        },
        {
          "term": "HTMLImageElement.naturalHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight",
          "desc": "Returns an integer value representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows 0. This is the height the image would be if it were rendered at its natural full size."
        },
        {
          "term": "HTMLImageElement.naturalWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth",
          "desc": "An integer value representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show 0. This is the width the image would be if it were rendered at its natural full size."
        },
        {
          "term": "HTMLImageElement.referrerPolicy",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy",
          "desc": "A DOMString that reflects the referrerpolicy HTML attribute, which tells the user agent how to decide which referrer to use in order to fetch the image. Read this article for details on the possible values of this string."
        },
        {
          "term": "HTMLImageElement.sizes",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes",
          "desc": "A DOMString reflecting the sizes HTML attribute. This string specifies a list of comma-separated conditional sizes for the image; that is, for a given viewport size, a particular image size is to be used. Read the documentation on the sizes page for details on the format of this string."
        },
        {
          "term": "HTMLImageElement.src",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src",
          "desc": "A USVString that reflects the src HTML attribute, which contains the full URL of the image including base URI. You can load a different image into the element by changing the URL in the src attribute."
        },
        {
          "term": "HTMLImageElement.srcset",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset",
          "desc": "A USVString reflecting the srcset HTML attribute. This specifies a list of candidate images, separated by commas (',', U+002C COMMA). Each candidate image is a URL followed by a space, followed by a specially-formatted string indicating the size of the image. The size may be specified either the width or a size multiple. Read the srcset page for specifics on the format of the size substring."
        },
        {
          "term": "HTMLImageElement.useMap",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap",
          "desc": "A DOMString reflecting the usemap HTML attribute, containing the page-local URL of the <map> element describing the image map to use. The page-local URL is a pound (hash) symbol (#) followed by the ID of the <map> element, such as #my-map-element. The <map> in turn contains <area> elements indicating the clickable areas in the image."
        },
        {
          "term": "HTMLImageElement.width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width",
          "desc": "An integer value that reflects the width HTML attribute, indicating the rendered width of the image in CSS pixels."
        },
        {
          "term": "HTMLImageElement.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/x",
          "desc": "An integer indicating the horizontal offset of the left border edge of the image's CSS layout box relative to the origin of the <html> element's containing block."
        },
        {
          "term": "HTMLImageElement.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/y",
          "desc": "The integer vertical offset of the top border edge of the image's CSS layout box relative to the origin of the <html> element's containing block."
        }
      ],
      "methods": [
        {
          "term": "HTMLImageElement.decode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode",
          "desc": "Returns a Promise that resolves when the image is decoded and it's safe to append the image to the DOM. This prevents rendering of the next frame from having to pause to decode the image, as would happen if an undecoded image were added to the DOM."
        }
      ]
    }
  },
  {
    "title": "HTMLInputElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLInputElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "string: Represents the alignment of the element. Use CSS instead."
        },
        {
          "term": "HTMLInputElement.useMap \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "string: Represents a client-side image map."
        }
      ],
      "methods": [
        {
          "term": "HTMLInputElement.stepDown()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown",
          "desc": "Decrements the value by (step * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception: if the method is not applicable to for the current type value, if the element has no step value, if the value cannot be converted to a number, if the resulting value is above the max or below the min."
        },
        {
          "term": "HTMLInputElement.stepUp()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp",
          "desc": "Increments the value by (step * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception: if the method is not applicable to for the current type value., if the element has no step value, if the value cannot be converted to a number, if the resulting value is above the max or below the min."
        },
        {
          "term": "HTMLInputElement.mozSetFileArray() \n    This API has not been standardized.",
          "link": "",
          "desc": "Sets the files selected on the input to the given array of File objects. This is an alternative to mozSetFileNameArray() which can be used in frame scripts: a chrome script can open files as File objects and send them via message manager."
        },
        {
          "term": "HTMLInputElement.mozGetFileNameArray() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozGetFileNameArray",
          "desc": "Returns an array of all the file names from the input."
        },
        {
          "term": "HTMLInputElement.mozSetFileNameArray() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement",
          "desc": "Sets the filenames for the files selected on the input. Not for use in frame scripts, because it accesses the file system."
        }
      ]
    }
  },
  {
    "title": "HTMLKeygenElement",
    "calls": {
      "properties": [
        {
          "term": "autofocus",
          "link": null,
          "desc": "Is a Boolean that reflects the autofocus HTML attribute, indicating that the form control should have input focus when the page loads."
        },
        {
          "term": "challenge",
          "link": null,
          "desc": "Is a DOMString that reflects the challenge HTML attribute, containing a challenge string that is packaged with the submitted key."
        },
        {
          "term": "form Read only",
          "link": null,
          "desc": "Is a HTMLFormElement that indicates the control's form owner, reflecting the form HTML attribute if it is defined."
        },
        {
          "term": "keytype",
          "link": null,
          "desc": "Is a DOMString that reflects the keytype HTML attribute, containing the type of key used."
        },
        {
          "term": "labels Read only  Unimplemented (see bug 556743)",
          "link": "https://bugzilla.mozilla.org/show_bug.cgi?id=556743",
          "desc": "Is a NodeList that represents a list of label elements associated with this keygen element."
        },
        {
          "term": "name",
          "link": null,
          "desc": "Is a DOMString that reflects the name HTML attribute, containing the name for the control that is submitted with form data."
        },
        {
          "term": "type Read only",
          "link": null,
          "desc": "Is a DOMString that must be the value keygen."
        },
        {
          "term": "validationMessage Read only",
          "link": null,
          "desc": "Is a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "validity Read only",
          "link": null,
          "desc": "Is a ValidityState representing the validity states that this element is in."
        },
        {
          "term": "willValidate",
          "link": null,
          "desc": "Is a Boolean that is always false because keygen objects are never candidates for constraint validation."
        }
      ]
    }
  },
  {
    "title": "HTMLLabelElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLLabelElement.control Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control",
          "desc": "Is a HTMLElement representing the control with which the label is associated."
        },
        {
          "term": "HTMLLabelElement.form Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/form",
          "desc": "Is a HTMLFormElement object representing the form with which the labeled control is associated, or null if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for HTMLLabelElement.control.form."
        },
        {
          "term": "HTMLLabelElement.htmlFor",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor",
          "desc": "Is a string containing the ID of the labeled control. This reflects the for attribute."
        }
      ]
    }
  },
  {
    "title": "HTMLLegendElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLLegendElement.form Read only",
          "link": "",
          "desc": "Is a HTMLFormElement representing the form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the form attribute on the parent fieldset element. Otherwise, it returns null."
        },
        {
          "term": "HTMLLegendElement.accessKey",
          "link": "",
          "desc": "Is a DOMString representing a single-character access key to give access to the element."
        },
        {
          "term": "HTMLLegendElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the alignment relative to the form set"
        }
      ]
    }
  },
  {
    "title": "HTMLLIElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLLIElement.type \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the type of the bullets, \"disc\", \"square\" or \"circle\". As the standard way of defining the list type is via the CSS list-style-type property, use the CSSOM methods to set it via a script."
        },
        {
          "term": "HTMLLIElement.value",
          "link": "",
          "desc": "Is a long indicating the ordinal position of the list element inside a given <ol>. It reflects the value attribute of the HTML <li> element, and can be smaller than 0. If the <li> element is not a child of an <ol> element, the property has no meaning."
        }
      ]
    }
  },
  {
    "title": "HTMLLinkElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLLinkElement.as",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/as",
          "desc": "Is a DOMString representing the type of content being loaded by the HTML link."
        },
        {
          "term": "HTMLLinkElement.crossOrigin \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString that corresponds to the CORS setting for this link element. See CORS settings attributes for details."
        },
        {
          "term": "HTMLLinkElement.disabled",
          "link": "",
          "desc": "Is a Boolean which represents whether the link is disabled; currently only used with style sheet links."
        },
        {
          "term": "HTMLLinkElement.href",
          "link": "",
          "desc": "Is a DOMString representing the URI for the target resource."
        },
        {
          "term": "HTMLLinkElement.hreflang",
          "link": "",
          "desc": "Is a DOMString representing the language code for the linked resource."
        },
        {
          "term": "HTMLLinkElement.media",
          "link": "",
          "desc": "Is a DOMString representing a list of one or more media formats to which the resource applies."
        },
        {
          "term": "HTMLLinkElement.referrerPolicy \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/referrerPolicy",
          "desc": "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use."
        },
        {
          "term": "HTMLLinkElement.rel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel",
          "desc": "Is a DOMString representing the forward relationship of the linked resource from the document to the resource."
        },
        {
          "term": "HTMLLinkElement.relList Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList",
          "desc": "Is a DOMTokenList that reflects the rel HTML attribute, as a list of tokens."
        },
        {
          "term": "HTMLLinkElement.sizes Read only",
          "link": "",
          "desc": "Is a DOMSettableTokenList that reflects the sizes HTML attribute, as a list of tokens."
        },
        {
          "term": "LinkStyle.sheet Read only",
          "link": "",
          "desc": "Returns the StyleSheet object associated with the given element, or null if there is none."
        },
        {
          "term": "HTMLLinkElement.type",
          "link": "",
          "desc": "Is a DOMString representing the MIME type of the linked resource."
        }
      ]
    }
  },
  {
    "title": "HTMLMapElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLMapElement.name",
          "link": "",
          "desc": "Is a DOMString representing the <map> element for referencing it other context. If the id attribute is set, this must have the same value; and it cannot be null or empty."
        },
        {
          "term": "HTMLMapElement.areas Read only",
          "link": "",
          "desc": "Is a live HTMLCollection representing the <area> elements associated to this <map>."
        }
      ]
    }
  },
  {
    "title": "HTMLMediaElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLMediaElement.audioTracks",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks",
          "desc": "A AudioTrackList that lists the AudioTrack objects contained in the element."
        },
        {
          "term": "HTMLMediaElement.autoplay",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay",
          "desc": "A Boolean that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption. Note: Automatically playing audio when the user doesn't expect or desire it is a poor user experience and should be avoided in most cases, though there are exceptions. See the Autoplay guide for media and Web Audio APIs for more information. Keep in mind that browsers may ignore autoplay requests, so you should ensure that your code isn't dependent on autoplay working."
        },
        {
          "term": "HTMLMediaElement.buffered Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered",
          "desc": "Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed."
        },
        {
          "term": "HTMLMediaElement.controller",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller",
          "desc": "Is a MediaController object that represents the media controller assigned to the element, or null if none is assigned."
        },
        {
          "term": "HTMLMediaElement.controls",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls",
          "desc": "Is a Boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed."
        },
        {
          "term": "HTMLMediaElement.controlsList Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList",
          "desc": "Returns a DOMTokenList that helps the user agent select what controls to show on the media element whenever the user agent shows its own set of controls. The DOMTokenList takes one or more of three possible values: nodownload, nofullscreen, and noremoteplayback."
        },
        {
          "term": "HTMLMediaElement.crossOrigin",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin",
          "desc": "A DOMString indicating the CORS setting for this media element."
        },
        {
          "term": "HTMLMediaElement.currentSrc Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc",
          "desc": "Returns a DOMString with the absolute URL of the chosen media resource."
        },
        {
          "term": "HTMLMediaElement.currentTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime",
          "desc": "A double-precision floating-point value indicating the current playback time in seconds; if the media has not started to play and has not been seeked, this value is the media's initial playback time. Setting this value seeks the media to the new time. The time is specified relative to the media's timeline."
        },
        {
          "term": "HTMLMediaElement.defaultMuted",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted",
          "desc": "A Boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default."
        },
        {
          "term": "HTMLMediaElement.defaultPlaybackRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate",
          "desc": "A double indicating the default playback rate for the media."
        },
        {
          "term": "HTMLMediaElement.disableRemotePlayback",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback",
          "desc": "A Boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI."
        },
        {
          "term": "HTMLMediaElement.duration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration",
          "desc": "A read-only double-precision floating-point value indicating the total duration of the media in seconds. If no media data is available, the returned value is NaN. If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity."
        },
        {
          "term": "HTMLMediaElement.ended Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended",
          "desc": "Returns a Boolean that indicates whether the media element has finished playing."
        },
        {
          "term": "HTMLMediaElement.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error",
          "desc": "Returns a MediaError object for the most recent error, or null if there has not been an error."
        },
        {
          "term": "HTMLMediaElement.loop",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop",
          "desc": "A Boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end."
        },
        {
          "term": "HTMLMediaElement.mediaGroup",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup",
          "desc": "A DOMString that reflects the mediagroup HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common MediaController."
        },
        {
          "term": "HTMLMediaElement.mediaKeys Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a MediaKeys object or null. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback."
        },
        {
          "term": "HTMLMediaElement.muted",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted",
          "desc": "Is a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise."
        },
        {
          "term": "HTMLMediaElement.networkState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState",
          "desc": "Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network."
        },
        {
          "term": "HTMLMediaElement.paused Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused",
          "desc": "Returns a Boolean that indicates whether the media element is paused."
        },
        {
          "term": "HTMLMediaElement.playbackRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate",
          "desc": "Is a double that indicates the rate at which the media is being played back."
        },
        {
          "term": "HTMLMediaElement.played Read only",
          "link": "",
          "desc": "Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any."
        },
        {
          "term": "HTMLMediaElement.preload",
          "link": "",
          "desc": "Is a DOMString that reflects the preload HTML attribute, indicating what data should be preloaded, if any. Possible values are: none, metadata, auto."
        },
        {
          "term": "HTMLMediaElement.preservesPitch \n    This API has not been standardized.",
          "link": "",
          "desc": "Is a Boolean that determines if the pitch of the sound will be preserved. If set to false, the pitch will adjust to the speed of the audio. This is implemented with prefixes in Firefox (mozPreservesPitch) and WebKit (webkitPreservesPitch)."
        },
        {
          "term": "HTMLMediaElement.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState",
          "desc": "Returns a unsigned short (enumeration) indicating the readiness state of the media."
        },
        {
          "term": "HTMLMediaElement.seekable Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable",
          "desc": "Returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any."
        },
        {
          "term": "HTMLMediaElement.seeking Read only",
          "link": "",
          "desc": "Returns a Boolean that indicates whether the media is in the process of seeking to a new position."
        },
        {
          "term": "HTMLMediaElement.sinkId Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId",
          "desc": "Returns a DOMString that is the unique ID of the audio device delivering output, or an empty string if it is using the user agent default. This ID should be one of the MediaDeviceInfo.deviceid values returned from MediaDevices.enumerateDevices(), id-multimedia, or id-communications."
        },
        {
          "term": "HTMLMediaElement.src",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src",
          "desc": "Is a DOMString that reflects the src HTML attribute, which contains the URL of a media resource to use."
        },
        {
          "term": "HTMLMediaElement.srcObject",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject",
          "desc": "Is a MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned."
        },
        {
          "term": "HTMLMediaElement.textTracks Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks",
          "desc": "Returns the list of TextTrack objects contained in the element."
        },
        {
          "term": "HTMLMediaElement.videoTracks Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks",
          "desc": "Returns the list of VideoTrack objects contained in the element."
        },
        {
          "term": "HTMLMediaElement.volume",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume",
          "desc": "Is a double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest)."
        }
      ],
      "handlers": [
        {
          "term": "HTMLMediaElement.onencrypted",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted",
          "desc": "Sets the EventHandler called when the media is encrypted."
        },
        {
          "term": "HTMLMediaElement.onwaitingforkey",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey",
          "desc": "Sets the EventHandler called when playback is blocked while waiting for an encryption key."
        }
      ],
      "methods": [
        {
          "term": "HTMLMediaElement.addTextTrack()",
          "link": "",
          "desc": "Adds a text track (such as a track for subtitles) to a media element."
        },
        {
          "term": "HTMLMediaElement.captureStream() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream",
          "desc": "Returns MediaStream, captures a stream of the media content."
        },
        {
          "term": "HTMLMediaElement.canPlayType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType",
          "desc": "Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string probably if the media should be playable, maybe if there's not enough information to determine whether the media will play or not, or an empty string if the media cannot be played."
        },
        {
          "term": "HTMLMediaElement.fastSeek()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek",
          "desc": "Directly seeks to the given time."
        },
        {
          "term": "HTMLMediaElement.load()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load",
          "desc": "Resets the media to the beginning and selects the best available source from the sources provided using the src attribute or the <source> element."
        },
        {
          "term": "HTMLMediaElement.pause()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause",
          "desc": "Pauses the media playback."
        },
        {
          "term": "HTMLMediaElement.play()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play",
          "desc": "Begins playback of the media."
        },
        {
          "term": "HTMLMediaElement.seekToNextFrame() \n    This API has not been standardized.\n    \n    \n \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame",
          "desc": "Seeks to the next frame in the media. This non-standard, experimental method makes it possible to manually drive reading and rendering of media at a custom speed, or to move through the media frame-by-frame to perform filtering or other operations."
        },
        {
          "term": "HTMLMediaElement.setMediaKeys() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys",
          "desc": "Returns Promise. Sets the MediaKeys keys to use when decrypting media during playback."
        },
        {
          "term": "HTMLMediaElement.setSinkId() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId",
          "desc": "Sets the ID of the audio device to use for output and returns a Promise. This only works when the application is authorized to use the specified device."
        }
      ]
    }
  },
  {
    "title": "HTMLMetaElement",
    "calls": {}
  },
  {
    "title": "HTMLMeterElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLMeterElement.high",
          "link": "",
          "desc": "A double representing the value of the high boundary, reflecting the high attribute."
        },
        {
          "term": "HTMLMeterElement.low",
          "link": "",
          "desc": "A double representing the value of the low boundary, reflecting the lowattribute."
        },
        {
          "term": "HTMLMeterElement.max",
          "link": "",
          "desc": "A double representing the maximum value, reflecting the max attribute."
        },
        {
          "term": "HTMLMeterElement.min",
          "link": "",
          "desc": "A double representing the minimum value, reflecting the min attribute."
        },
        {
          "term": "HTMLMeterElement.optimum",
          "link": "",
          "desc": "A double representing the optimum, reflecting the optimum attribute."
        },
        {
          "term": "HTMLMeterElement.value",
          "link": "",
          "desc": "A double representing the currrent value, reflecting the value attribute."
        },
        {
          "term": "HTMLMeterElement.labelsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement/labels",
          "desc": "A NodeList of <label> elements that are associated with the element."
        }
      ]
    }
  },
  {
    "title": "HTMLModElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLModElement.cite",
          "link": "",
          "desc": "Is a DOMString reflecting the cite HTML attribute, containing a URI of a resource explaining the change."
        },
        {
          "term": "HTMLModElement.dateTime",
          "link": "",
          "desc": "Is a DOMString reflecting the datetime HTML attribute, containing a date-and-time string representing a timestamp for the change."
        }
      ]
    }
  },
  {
    "title": "HTMLObjectElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLObjectElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
        },
        {
          "term": "HTMLObjectElement.archive \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that reflects the archive HTML attribute, containing a list of archives for resources for this object."
        },
        {
          "term": "HTMLObjectElement.border \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that reflects the border HTML attribute, specifying the width of a border around the object."
        },
        {
          "term": "HTMLObjectElement.code \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself."
        },
        {
          "term": "HTMLObjectElement.codeBase \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that reflects the codebase HTML attribute, specifying the base path to use to resolve relative URIs."
        },
        {
          "term": "HTMLObjectElement.codeType \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that reflects the codetype HTML attribute, specifying the content type of the data."
        },
        {
          "term": "HTMLObjectElement.contentDocument Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentDocument",
          "desc": "Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null."
        },
        {
          "term": "HTMLObjectElement.contentWindow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentWindow",
          "desc": "Returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null."
        },
        {
          "term": "HTMLObjectElement.data",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/data",
          "desc": "Returns a DOMString that reflects the data HTML attribute, specifying the address of a resource's data."
        },
        {
          "term": "HTMLObjectElement.declare \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean that reflects the declare HTML attribute, indicating that this is a declaration, not an instantiation, of the object."
        },
        {
          "term": "HTMLObjectElement.form Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/form",
          "desc": "Returns a HTMLFormElement representing the object element's form owner, or null if there isn't one."
        },
        {
          "term": "HTMLObjectElement.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/height",
          "desc": "Returns a DOMString that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels."
        },
        {
          "term": "HTMLObjectElement.hspace \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a long representing the horizontal space in pixels around the control."
        },
        {
          "term": "HTMLObjectElement.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/name",
          "desc": "Returns a DOMString that reflects the name HTML attribute, specifying the name of the browsing context."
        },
        {
          "term": "HTMLObjectElement.standby \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that reflects the standby HTML attribute, specifying a message to display while the object loads."
        },
        {
          "term": "HTMLObjectElement.tabindex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type",
          "desc": "Is a long representing the position of the element in the tabbing navigation order for the current document."
        },
        {
          "term": "HTMLObjectElement.type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type",
          "desc": "Is a DOMString that reflects the type HTML attribute, specifying the MIME type of the resource."
        },
        {
          "term": "HTMLObjectElement.typeMustMatch",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/typeMustMatch",
          "desc": "Is a Boolean that reflects the typemustmatch HTML attribute, indicating if the resource specified by data must only be played if it matches the type attribute."
        },
        {
          "term": "HTMLObjectElement.useMap",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/useMap",
          "desc": "Is a DOMString that reflects the usemap HTML attribute, specifying a <map> element to use."
        },
        {
          "term": "HTMLObjectElement.validationMessage Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage",
          "desc": "Returns a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "HTMLObjectElement.validity Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validity",
          "desc": "Returns a ValidityState with the validity states that this element is in."
        },
        {
          "term": "HTMLObjectElement.vspace \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a long representing the horizontal space in pixels around the control."
        },
        {
          "term": "HTMLObjectElement.width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/width",
          "desc": "Is a DOMString that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels."
        },
        {
          "term": "HTMLObjectElement.willValidate Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/willValidate",
          "desc": "Returns a Boolean that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects."
        }
      ],
      "methods": [
        {
          "term": "HTMLObjectElement.checkValidity()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/checkValidity",
          "desc": "Returns a Boolean that always is true, because object objects are never candidates for constraint validation."
        },
        {
          "term": "HTMLObjectElement.setCustomValidity()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity",
          "desc": "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate."
        }
      ]
    }
  },
  {
    "title": "HTMLOListElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLOListElement.reversed",
          "link": "",
          "desc": "Is a Boolean value reflecting the reversed and defining if the numbering is descending, that is its value is true, or ascending (false)."
        },
        {
          "term": "HTMLOListElement.start",
          "link": "",
          "desc": "Is a long value reflecting the start and defining the value of the first number of the first element of the list."
        },
        {
          "term": "HTMLOListElement.type",
          "link": "",
          "desc": "Is a DOMString value reflecting the type and defining the kind of marker to be used to display. It can have the following values: '1' meaning that decimal numbers are used: 1, 2, 3, 4, 5, … 'a' meaning that the lowercase latin alphabet is used: a, b, c, d, e, … 'A' meaning that the uppercase latin alphabet is used: A, B, C, D, E, … 'i' meaning that the lowercase latin numerals are used: i, ii, iii, iv, v, … 'I' meaning that the uppercase latin numerals are used: I, II, III, IV, V, …"
        },
        {
          "term": "HTMLOListElement.compact \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages."
        }
      ]
    }
  },
  {
    "title": "HTMLOptGroupElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLOptGroupElement.disabled",
          "link": "",
          "desc": "Is a boolean representing whether or not the whole list of children <option> is disabled (true) or not (false)."
        },
        {
          "term": "HTMLOptGroupElement.label",
          "link": "",
          "desc": "Is a DOMString representing the label for the group."
        }
      ]
    }
  },
  {
    "title": "HTMLOptionElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLOptionElement.defaultSelected",
          "link": "",
          "desc": "Is a Boolean that contains the initial value of the selected HTML attribute, indicating whether the option is selected by default or not."
        },
        {
          "term": "HTMLOptionElement.disabled",
          "link": "",
          "desc": "Is a Boolean representing the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an <optgroup> element that is disabled."
        },
        {
          "term": "HTMLOptionElement.form Read only",
          "link": "",
          "desc": "Is a HTMLFormElement representing the same value as the form of the corresponding <select> element, if the option is a descendant of a <select> element, or null if none is found."
        },
        {
          "term": "HTMLOptionElement.index Read only",
          "link": "",
          "desc": "Is a long representing the position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0."
        },
        {
          "term": "HTMLOptionElement.label Read only",
          "link": "",
          "desc": "Is a DOMString that reflects the value of the label HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content."
        },
        {
          "term": "HTMLOptionElement.selected",
          "link": "",
          "desc": "Is a Boolean that indicates whether the option is currently selected."
        },
        {
          "term": "HTMLOptionElement.text",
          "link": "",
          "desc": "Is a DOMString that contains the text content of the element."
        },
        {
          "term": "HTMLOptionElement.value",
          "link": "",
          "desc": "Is a DOMString that reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the Node.textContent property."
        }
      ],
      "methods": [
        {
          "term": "Option()",
          "link": null,
          "desc": "Is a constructor creating an HTMLOptionElement object. It has four values: the text to display, text, the value associated, value, the value of defaultSelected, and the value of selected. The last three values are optional."
        }
      ]
    }
  },
  {
    "title": "HTMLOptionsCollection",
    "calls": {}
  },
  {
    "title": "HTMLOrForeignElement",
    "calls": {
      "properties": [
        {
          "term": "dataset undefined",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/dataset",
          "desc": "The dataset read-only property of the HTMLOrForeignElement mixin provides read/write access to custom data attributes (data-*) on elements."
        },
        {
          "term": "nonce \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/nonce",
          "desc": "The nonce property of the HTMLOrForeignElement mixin returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed."
        },
        {
          "term": "tabIndex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/tabIndex",
          "desc": "The tabIndex property of the HTMLOrForeignElement mixin represents the tab order of the current element."
        }
      ]
    }
  },
  {
    "title": "HTMLOutputElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLOutputElement.defaultValue",
          "link": "",
          "desc": "A DOMString representing the default value of the element, initially the empty string."
        },
        {
          "term": "HTMLOutputElement.formRead only",
          "link": "",
          "desc": "An HTMLFormElement indicating the form associated with the control, reflecting the form HTML attribute if it is defined."
        },
        {
          "term": "HTMLOutputElement.htmlForRead only",
          "link": "",
          "desc": "A DOMTokenList reflecting the for HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated value."
        },
        {
          "term": "HTMLOutputElement.labelsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/labels",
          "desc": "A NodeList of <label> elements associated with the element."
        },
        {
          "term": "HTMLOutputElement.name",
          "link": "",
          "desc": "A DOMString reflecting the name HTML attribute, containing the name for the control that is submitted with form data."
        },
        {
          "term": "HTMLOutputElement.typeRead only",
          "link": "",
          "desc": "The DOMString \"output\"."
        },
        {
          "term": "HTMLOutputElement.validationMessageRead only",
          "link": "",
          "desc": "A DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "HTMLOutputElement.validityRead only",
          "link": "",
          "desc": "A ValidityState representing the validity states that this element is in."
        },
        {
          "term": "HTMLOutputElement.value",
          "link": "",
          "desc": "A DOMString representing the value of the contents of the elements. Behaves like the Node.textContent property."
        },
        {
          "term": "HTMLOutputElement.willValidateRead only",
          "link": "",
          "desc": "A Boolean indicating whether the element is a candidate for constraint validation."
        }
      ],
      "methods": [
        {
          "term": "HTMLOutputElement.checkValidity()",
          "link": "",
          "desc": "Checks the validity of the element and returns a Boolean holding the check result."
        },
        {
          "term": "HTMLOutputElement.reportValidity()",
          "link": "",
          "desc": "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, fires an invalid event at the element, and returns false; if there are no problems, it returns true."
        },
        {
          "term": "HTMLOutputElement.reportValidity()",
          "link": "",
          "desc": "When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user."
        },
        {
          "term": "HTMLOutputElement.setCustomValidity()",
          "link": "",
          "desc": "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate."
        }
      ]
    }
  },
  {
    "title": "HTMLParagraphElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLParagraphElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "A DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
        }
      ]
    }
  },
  {
    "title": "HTMLParamElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLParamElement.name",
          "link": "",
          "desc": "Is a DOMString representing the name of the parameter. It reflects the name attribute."
        },
        {
          "term": "HTMLParamElement.value",
          "link": "",
          "desc": "Is a DOMString representing the value associated to the parameter. It reflects the value attribute."
        },
        {
          "term": "HTMLParamElement.type \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString containing the type of the parameter when valueType has the \"ref\" value. It reflects the type attribute."
        },
        {
          "term": "HTMLParamElement.valueType \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString containing the type of the value. It reflects the valuetype attribute and has one of the values: \"data\", \"ref\", or \"object\"."
        }
      ]
    }
  },
  {
    "title": "HTMLPreElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLPreElement.width \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a long value reflecting the obsolete width attribute, containing a fixed-size length for the <pre> element."
        }
      ]
    }
  },
  {
    "title": "HTMLProgressElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLProgressElement.max",
          "link": "",
          "desc": "Is a double value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is 1.0."
        },
        {
          "term": "HTMLProgressElement.positionRead only",
          "link": "",
          "desc": "Returns a double value returning the result of dividing the current value (value) by the maximum value (max); if the progress bar is an indeterminate progress bar, it returns -1."
        },
        {
          "term": "HTMLProgressElement.value",
          "link": "",
          "desc": "Is a double value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns 0."
        },
        {
          "term": "HTMLProgressElement.labelsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/labels",
          "desc": "Returns NodeList containing the list of <label> elements that are labels for this element."
        }
      ]
    }
  },
  {
    "title": "HTMLQuoteElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLQuoteElement.cite",
          "link": "",
          "desc": "Is a DOMString reflecting the cite HTML attribute, containing a URL for the source of the quotation."
        }
      ]
    }
  },
  {
    "title": "HTMLScriptElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLScriptElement.type",
          "link": "",
          "desc": "Is a DOMString representing the MIME type of the script. It reflects the type attribute."
        },
        {
          "term": "HTMLScriptElement.src",
          "link": "",
          "desc": "Is a DOMString representing the URL of an external script. It reflects the src attribute."
        },
        {
          "term": "HTMLScriptElement.event \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString; an obsolete way of registering event handlers on elements in an HTML document."
        },
        {
          "term": "HTMLScriptElement.charset",
          "link": "",
          "desc": "Is a DOMString representing the character encoding of an external script. It reflects the charset attribute."
        },
        {
          "term": "HTMLScriptElement.defer",
          "link": "",
          "desc": "The async and defer attributes are Boolean attributes that control how the script should be executed. The defer and async attributes must not be specified if the src attribute is absent. There are three possible execution modes: If the async attribute is present, then the script will be executed asynchronously as soon as it downloads. If the async attribute is absent but the defer attribute is present, then the script is executed when the page has finished parsing. If neither attribute is present, then the script is fetched and executed immediately, blocking further parsing of the page. The defer attribute may be specified with the async attribute, so legacy browsers that only support defer (and not async) fall back to the defer behavior instead of the default blocking behavior. Note: The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. These algorithms describe the core ideas, but they rely on the parsing rules for <script> start and end tags in HTML, in foreign content, and in XML; the rules for the document.write() method; the handling of scripting; and so on."
        },
        {
          "term": "HTMLScriptElement.crossOrigin \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString reflecting the CORS setting for the script element. For scripts from other origins, this controls if error information will be exposed."
        },
        {
          "term": "HTMLScriptElement.text",
          "link": "",
          "desc": "Is a DOMString that joins and returns the contents of all Text nodes inside the <script> element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the textContent IDL attribute. Note: When inserted using the document.write() method, <script> elements execute (typically synchronously), but when inserted using innerHTML or outerHTML, they do not execute at all."
        },
        {
          "term": "HTMLScriptElement.noModule",
          "link": "",
          "desc": "Is a Boolean that if true, stops the script's execution in browsers that support ES2015 modules — used to run fallback scripts in older browsers that do not support JavaScript modules."
        },
        {
          "term": "HTMLScriptElement.referrerPolicy",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/referrerPolicy",
          "desc": "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the script, and fetches done by that script."
        }
      ]
    }
  },
  {
    "title": "HTMLSelectElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLSelectElement.autofocus",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus",
          "desc": "A Boolean reflecting the autofocus HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."
        },
        {
          "term": "HTMLSelectElement.disabled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled",
          "desc": "A Boolean reflecting the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks."
        },
        {
          "term": "HTMLSelectElement.formRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/form",
          "desc": "An HTMLFormElement referencing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null."
        },
        {
          "term": "HTMLSelectElement.labelsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/labels",
          "desc": "A NodeList of <label> elements associated with the element."
        },
        {
          "term": "HTMLSelectElement.length",
          "link": "",
          "desc": "An unsigned long The number of <option> elements in this select element."
        },
        {
          "term": "HTMLSelectElement.multiple",
          "link": "",
          "desc": "A Boolean reflecting the multiple HTML attribute, which indicates whether multiple items can be selected."
        },
        {
          "term": "HTMLSelectElement.name",
          "link": "",
          "desc": "A DOMString reflecting the name HTML attribute, containing the name of this control used by servers and DOM search functions."
        },
        {
          "term": "HTMLSelectElement.optionsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/options",
          "desc": "An HTMLOptionsCollection representing the set of <option> (HTMLOptionElement) elements contained by this element."
        },
        {
          "term": "HTMLSelectElement.required",
          "link": "",
          "desc": "A Boolean reflecting the required HTML attribute, which indicates whether the user is required to select a value before submitting the form."
        },
        {
          "term": "HTMLSelectElement.selectedIndex",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex",
          "desc": "A long reflecting the index of the first selected <option> element. The value -1 indicates no element is selected."
        },
        {
          "term": "HTMLSelectElement.selectedOptionsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions",
          "desc": "An HTMLCollection representing the set of <option> elements that are selected."
        },
        {
          "term": "HTMLSelectElement.size",
          "link": "",
          "desc": "A long reflecting the size HTML attribute, which contains the number of visible items in the control. The default is 1, unless multiple is true, in which case it is 4."
        },
        {
          "term": "HTMLSelectElement.typeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type",
          "desc": "A DOMString represeting the form control's type. When multiple is true, it returns \"select-multiple\"; otherwise, it returns \"select-one\"."
        },
        {
          "term": "HTMLSelectElement.validationMessageRead only",
          "link": "",
          "desc": "A DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
        },
        {
          "term": "HTMLSelectElement.validityRead only",
          "link": "",
          "desc": "A ValidityState reflecting the validity state that this control is in."
        },
        {
          "term": "HTMLSelectElement.value",
          "link": "",
          "desc": "A DOMString reflecting the value of the form control. Returns the value property of the first selected option element if there is one, otherwise the empty string."
        },
        {
          "term": "HTMLSelectElement.willValidateRead only",
          "link": "",
          "desc": "A Boolean that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation."
        }
      ],
      "methods": [
        {
          "term": "HTMLSelectElement.add()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add",
          "desc": "Adds an element to the collection of option elements for this select element."
        },
        {
          "term": "HTMLSelectElement.blur()\n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Removes input focus from this element. This method is now implemented on HTMLElement."
        },
        {
          "term": "HTMLSelectElement.checkValidity()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity",
          "desc": "Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element (and returns false)."
        },
        {
          "term": "HTMLSelectElement.focus()\n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Gives input focus to this element. This method is now implemented on HTMLElement."
        },
        {
          "term": "HTMLSelectElement.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item",
          "desc": "Gets an item from the options collection for this <select> element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly."
        },
        {
          "term": "HTMLSelectElement.namedItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem",
          "desc": "Gets the item in the options collection with the specified name. The name string can match either the id or the name attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly."
        },
        {
          "term": "HTMLSelectElement.remove()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove",
          "desc": "Removes the element at the specified index from the options collection for this select element."
        },
        {
          "term": "HTMLSelectElement.reportValidity()",
          "link": "",
          "desc": "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, it fires a cancelable invalid event at the element, and returns false; if there are no problems, it returns true."
        },
        {
          "term": "HTMLSelectElement.setCustomValidity()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity",
          "desc": "Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error."
        }
      ]
    }
  },
  {
    "title": "HTMLSlotElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLSlotElement.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name",
          "desc": "DOMString: Can be used to get and set the slot's name."
        }
      ],
      "methods": [
        {
          "term": "HTMLSlotElement.assignedNodes()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes",
          "desc": "Returns a sequence of the nodes assigned to this slot, and if the flatten option is set to true, the assigned nodes of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content."
        },
        {
          "term": "HTMLSlotElement.assignedElements()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements",
          "desc": "Returns a sequence of the elements assigned to this slot (and no other nodes). If the flatten option is set to true, it also returns the assigned elements of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content."
        }
      ]
    }
  },
  {
    "title": "HTMLSourceElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLSourceElement.media",
          "link": "",
          "desc": "Is a DOMString reflecting the media HTML attribute, containing the intended type of the media resource."
        },
        {
          "term": "HTMLSourceElement.sizes \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString representing image sizes between breakpoints"
        },
        {
          "term": "HTMLSourceElement.src",
          "link": "",
          "desc": "Is a DOMString reflecting the src HTML attribute, containing the URL for the media resource. The HTMLSourceElement.src property has a meaning only when the associated <source> element is nested in a media element that is a <video> or an <audio> element. It has no meaning and is ignored when it is nested in a <picture> element. Note: If the src property is updated (along with any siblings), the parent HTMLMediaElement's load method should be called when done, since <source> elements are not re-scanned automatically."
        },
        {
          "term": "HTMLSourceElement.srcset \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Is a DOMString reflecting the srcset HTML attribute, containing a list of candidate images, separated by a comma (',', U+002C COMMA). A candidate image is a URL followed by a 'w' with the width of the images, or an 'x' followed by the pixel density."
        },
        {
          "term": "HTMLSourceElement.type",
          "link": "",
          "desc": "Is a DOMString reflecting the type HTML attribute, containing the type of the media resource."
        }
      ]
    }
  },
  {
    "title": "HTMLSpanElement",
    "calls": {}
  },
  {
    "title": "HTMLStyleElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLStyleElement.media",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media",
          "desc": "Is a DOMString representing the intended destination medium for style information."
        },
        {
          "term": "HTMLStyleElement.type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type",
          "desc": "Is a DOMString representing the type of style being applied by this statement."
        },
        {
          "term": "HTMLStyleElement.disabled",
          "link": "",
          "desc": "Is a Boolean value representing whether or not the stylesheet is disabled (true) or not (false)."
        },
        {
          "term": "LinkStyle.sheet Read only",
          "link": "",
          "desc": "Returns the StyleSheet object associated with the given element, or null if there is none"
        },
        {
          "term": "HTMLStyleElement.scoped \n    This API has not been standardized.\n    \n    \n \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped",
          "desc": "Is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true)."
        }
      ]
    }
  },
  {
    "title": "HTMLTableCaptionElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableCaptionElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString which represents an enumerated attribute indicating alignment of the caption with respect to the table."
        }
      ]
    }
  },
  {
    "title": "HTMLTableCellElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableCellElement.abbr",
          "link": "",
          "desc": "A DOMString which can be used on <th> elements (not on <td>), specifying an alternative label for the header cell. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of abbr is an abbreviation or acronym, but can be any text that's appropriate contextually."
        },
        {
          "term": "HTMLTableCellElement.cellIndex Read only",
          "link": "",
          "desc": "A long integer representing the cell's position in the cells collection of the <tr> the cell is contained within. If the cell doesn't belong to a <tr>, it returns -1."
        },
        {
          "term": "HTMLTableCellElement.colSpan",
          "link": "",
          "desc": "An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the colspan attribute."
        },
        {
          "term": "HTMLTableCellElement.headers Read only",
          "link": "",
          "desc": "Is a DOMSettableTokenList describing a list of id of <th> elements that represents headers associated with the cell. It reflects the headers attribute."
        },
        {
          "term": "HTMLTableCellElement.rowSpan",
          "link": "",
          "desc": "An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the rowspan attribute."
        },
        {
          "term": "HTMLTableCellElement.scope",
          "link": "",
          "desc": "A DOMString indicating the scope of a <th> cell. Header cells can be configured, using the scope property, the apply to a specified row or column, or to the not-yet-scoped cells within the current row group (that is, the same ancestor <thead>, <tbody>, or <tfoot> element). If no value is specified for scope, the header is not associated directly with cells in this way. Permitted values for scope are: col The header cell applies to the following cells in the same column (or columns, if colspan is used as well), until either the end of the column or another <th> in the column establishes a new scope. colgroup The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group. row The header cell applies to the following cells in the same row (or rows, if rowspan is used as well), until either the end of the row or another <th> in the same row establishes a new scope. rowgroup The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group. The empty string (\"\") The header cell has no predefined scope; the user agent will establish the scope based on contextual clues."
        }
      ]
    }
  },
  {
    "title": "HTMLTableColElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableColElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that indicates the horizontal alignment of the cell data in the column."
        },
        {
          "term": "HTMLTableColElement.ch \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the alignment character for cell data."
        },
        {
          "term": "HTMLTableColElement.chOff \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the offset for the alignment character."
        },
        {
          "term": "HTMLTableColElement.span",
          "link": "",
          "desc": "Is an unsigned long that reflects the span HTML attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer."
        },
        {
          "term": "HTMLTableColElement.vAlign \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString that indicates the vertical alignment of the cell data in the column."
        },
        {
          "term": "HTMLTableColElement.width \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing the default column width."
        }
      ]
    }
  },
  {
    "title": "HTMLTableElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableElement.caption",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption",
          "desc": "Is a HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <caption>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first <caption> that is a child of this element is removed from the tree, if any."
        },
        {
          "term": "HTMLTableElement.tHead",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead",
          "desc": "Is a HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <thead>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element, and the first <thead> that is a child of this element is removed from the tree, if any."
        },
        {
          "term": "HTMLTableElement.tFoot",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot",
          "desc": "Is a HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <tfoot>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of this element is removed from the tree, if any."
        },
        {
          "term": "HTMLTableElement.rowsRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows",
          "desc": "Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child of one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes."
        },
        {
          "term": "HTMLTableElement.tBodiesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies",
          "desc": "Returns a live HTMLCollection containing all the <tbody> of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes."
        }
      ],
      "methods": [
        {
          "term": "HTMLTableElement.createTHead()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead",
          "desc": "Returns an HTMLTableSectionElement representing the first <thead> that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element."
        },
        {
          "term": "HTMLTableElement.deleteTHead()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead",
          "desc": "Removes the first <thead> that is a child of the element."
        },
        {
          "term": "HTMLTableElement.createTFoot()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot",
          "desc": "Returns an HTMLTableSectionElement representing the first <tfoot> that is a child of the element. If none is found, a new one is created and inserted in the tree as the last child."
        },
        {
          "term": "HTMLTableElement.deleteTFoot()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot",
          "desc": "Removes the first <tfoot> that is a child of the element."
        },
        {
          "term": "HTMLTableElement.createTBody()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTBody",
          "desc": "Returns a HTMLTableSectionElement representing a new <tbody> that is a child of the element. It is inserted in the tree after the last element that is a <tbody>, or as the last child if there is no such element."
        },
        {
          "term": "HTMLTableElement.createCaption()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption",
          "desc": "Returns an HTMLElement representing the first <caption> that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the <table> element."
        },
        {
          "term": "HTMLTableElement.deleteCaption()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption",
          "desc": "Removes the first <caption> that is a child of the element."
        },
        {
          "term": "HTMLTableElement.insertRow()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow",
          "desc": "Returns an HTMLTableRowElement representing a new row of the table. It inserts it in the rows collection immediately before the <tr> element at the given index position. If necessary a <tbody> is created. If the index is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the collection, a DOMException with the value IndexSizeError is raised."
        },
        {
          "term": "HTMLTableElement.deleteRow()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow",
          "desc": "Removes the row corresponding to the index given in parameter. If the index value is -1 the last row is removed; if it smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value IndexSizeError is raised."
        }
      ]
    }
  },
  {
    "title": "HTMLTableRowElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableRowElement.cells Read only",
          "link": "",
          "desc": "Returns a live HTMLCollection containing the cells in the row. The HTMLCollection is live and is automatically updated when cells are added or removed."
        },
        {
          "term": "HTMLTableRowElement.rowIndex Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex",
          "desc": "Returns a long value which gives the logical position of the row within the entire table. If the row is not part of a table, returns -1."
        },
        {
          "term": "HTMLTableRowElement.sectionRowIndex Read only",
          "link": "",
          "desc": "Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1."
        }
      ],
      "methods": [
        {
          "term": "HTMLTableRowElement.deleteCell()",
          "link": "",
          "desc": "Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than 0, it raises a DOMException with the IndexSizeError value."
        },
        {
          "term": "HTMLTableRowElement.insertCell()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell",
          "desc": "Inserts a new cell just before the given position in the row. If the given position is not given or is -1, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than -1, it raises a DOMException with the IndexSizeError value. Returns a reference to a HTMLTableCellElement."
        }
      ]
    }
  },
  {
    "title": "HTMLTableSectionElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTableSectionElement.align \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\"."
        },
        {
          "term": "HTMLTableSectionElement.rows Read only",
          "link": "",
          "desc": "Returns a live HTMLCollection containing the rows in the section. The HTMLCollection is live and is automatically updated when rows are added or removed."
        },
        {
          "term": "HTMLTableSectionElement.ch \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported."
        },
        {
          "term": "HTMLTableSectionElement.chOff \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported."
        },
        {
          "term": "HTMLTableSectionElement.vAlign \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\"."
        }
      ],
      "methods": [
        {
          "term": "HTMLTableSectionElement.deleteRow()",
          "link": "",
          "desc": "Removes the row at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than 0, it raises a DOMException with the IndexSizeError value."
        },
        {
          "term": "HTMLTableSectionElement.insertRow()",
          "link": "",
          "desc": "Inserts a new row just before the given position in the section. If the given position is not given or is -1, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than -1, it raises a DOMException with the IndexSizeError value."
        }
      ]
    }
  },
  {
    "title": "HTMLTemplateElement",
    "calls": {
      "properties": [
        {
          "term": "content Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content",
          "desc": "A read-only DocumentFragment which contains the DOM subtree representing the <template> element's template contents."
        }
      ]
    }
  },
  {
    "title": "HTMLTextAreaElement",
    "calls": {}
  },
  {
    "title": "HTMLTimeElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTimeElement.dateTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime",
          "desc": "Is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value."
        }
      ]
    }
  },
  {
    "title": "HTMLTitleElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTitleElement.text",
          "link": "",
          "desc": "Is a DOMString representing the text of the document's title."
        }
      ]
    }
  },
  {
    "title": "HTMLTrackElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLTrackElement.kind",
          "link": "",
          "desc": "Is a DOMString that reflects the kind HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, or metadata."
        },
        {
          "term": "HTMLTrackElement.src",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src",
          "desc": "Is a DOMString that reflects the src HTML attribute, indicating the address of the text track data."
        },
        {
          "term": "HTMLTrackElement.srclang",
          "link": "",
          "desc": "Is a DOMString that reflects the srclang HTML attribute, indicating the language of the text track data."
        },
        {
          "term": "HTMLTrackElement.label",
          "link": "",
          "desc": "Is a DOMString that reflects the label HTML attribute, indicating a user-readable title for the track."
        },
        {
          "term": "HTMLTrackElement.default",
          "link": "",
          "desc": "A Boolean reflecting the default attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate."
        },
        {
          "term": "HTMLTrackElement.readyState Read only",
          "link": "",
          "desc": "Returns an unsigned short that show the readiness state of the track: Constant Value Description NONE 0 Indicates that the text track's cues have not been obtained. LOADING 1 Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser. LOADED 2 Indicates that the text track has been loaded with no fatal errors. ERROR 3 Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained."
        },
        {
          "term": "HTMLTrackElement.track Read only",
          "link": "",
          "desc": "Returns TextTrack is the track element's text track data."
        }
      ]
    }
  },
  {
    "title": "HTMLUListElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLUListElement.type \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a DOMString value reflecting the type and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized."
        },
        {
          "term": "HTMLUListElement.compact \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Is a Boolean indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages."
        }
      ]
    }
  },
  {
    "title": "HTMLUnknownElement",
    "calls": {}
  },
  {
    "title": "HTMLVideoElement",
    "calls": {
      "properties": [
        {
          "term": "HTMLVideoElement.height",
          "link": "",
          "desc": "Is a DOMString that reflects the height HTML attribute, which specifies the height of the display area, in CSS pixels."
        },
        {
          "term": "HTMLVideoElement.poster",
          "link": "",
          "desc": "Is a DOMString that reflects the poster HTML attribute, which specifies an image to show while no video data is available."
        },
        {
          "term": "HTMLVideoElement.videoHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight",
          "desc": "Returns an unsigned integer value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet."
        },
        {
          "term": "HTMLVideoElement.videoWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth",
          "desc": "Returns an unsigned integer value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet."
        },
        {
          "term": "HTMLVideoElement.width",
          "link": "",
          "desc": "Is a DOMString that reflects the width HTML attribute, which specifies the width of the display area, in CSS pixels."
        },
        {
          "term": "HTMLVideoElement.autoPictureInPicture",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/autoPictureInPicture",
          "desc": "The autoPictureInPicture attribute will automatically enter and leave the picture-in-picture mode for a video element when the user switches tab and/or applications"
        },
        {
          "term": "HTMLVideoElement.disablePictureInPicture",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/disablePictureInPicture",
          "desc": "The disablePictureInPicture property will hint the user agent to not suggest the picture-in-picture to users or to request it automatically"
        }
      ],
      "methods": [
        {
          "term": "HTMLVideoElement.getVideoPlaybackQuality() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality",
          "desc": "Returns a VideoPlaybackQuality object that contains the current playback metrics. This information includes things like the number of dropped or corrupted frames, as well as the total number of frames."
        },
        {
          "term": "HTMLVideoElement.requestPictureInPicture()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/requestPictureInPicture",
          "desc": "Requests that the user agent make video enters picture-in-picture mode"
        }
      ]
    }
  },
  {
    "title": "IDBCursor",
    "calls": {
      "properties": [
        {
          "term": "IDBCursor.source Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/source",
          "desc": "Returns the IDBObjectStore or IDBIndex that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active."
        },
        {
          "term": "IDBCursor.direction Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/direction",
          "desc": "Returns the direction of traversal of the cursor. See Constants for possible values."
        },
        {
          "term": "IDBCursor.key Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/key",
          "desc": "Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type."
        },
        {
          "term": "IDBCursor.primaryKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/primaryKey",
          "desc": "Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type."
        },
        {
          "term": "IDBCursor.request Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/request",
          "desc": "Returns the IDBRequest that was used to obtain the cursor."
        }
      ],
      "methods": [
        {
          "term": "IDBCursor.advance()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/advance",
          "desc": "Sets the number of times a cursor should move its position forward."
        },
        {
          "term": "IDBCursor.continue()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continue",
          "desc": "Advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter."
        },
        {
          "term": "IDBCursor.continuePrimaryKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continuePrimaryKey",
          "desc": "Sets the cursor to the given index key and primary key given as arguments."
        },
        {
          "term": "IDBCursor.delete()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete",
          "desc": "Returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records."
        },
        {
          "term": "IDBCursor.update()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/update",
          "desc": "Returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records."
        }
      ]
    }
  },
  {
    "title": "IDBCursorWithValue",
    "calls": {
      "properties": [
        {
          "term": "IDBCursorWithValue.value Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue/value",
          "desc": "Returns the value of the current cursor."
        }
      ]
    }
  },
  {
    "title": "IDBDatabase",
    "calls": {
      "properties": [
        {
          "term": "IDBDatabase.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name",
          "desc": "A DOMString that contains the name of the connected database."
        },
        {
          "term": "IDBDatabase.version Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version",
          "desc": "A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string."
        },
        {
          "term": "IDBDatabase.objectStoreNames Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames",
          "desc": "A DOMStringList that contains a list of the names of the object stores currently in the connected database."
        }
      ],
      "methods": [
        {
          "term": "IDBDatabase.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close",
          "desc": "Returns immediately and closes the connection to a database in a separate thread."
        },
        {
          "term": "IDBDatabase.createMutableFile()",
          "link": "",
          "desc": "Creates a file handle, allowing files to be stored inside an IndexedDB database."
        },
        {
          "term": "IDBDatabase.createObjectStore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore",
          "desc": "Creates and returns a new object store or index."
        },
        {
          "term": "IDBDatabase.deleteObjectStore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore",
          "desc": "Destroys the object store with the given name in the connected database, along with any indexes that reference it."
        },
        {
          "term": "IDBDatabase.transaction()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction",
          "desc": "Immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store. Runs in a separate thread."
        }
      ]
    }
  },
  {
    "title": "IDBFactory",
    "calls": {
      "methods": [
        {
          "term": "IDBFactory.open",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open",
          "desc": "The current method to request opening a connection to a database."
        },
        {
          "term": "IDBFactory.deleteDatabase",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase",
          "desc": "A method to request the deletion of a database."
        },
        {
          "term": "IDBFactory.cmp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp",
          "desc": "A method that compares two keys and returns a result indicating which one is greater in value."
        },
        {
          "term": "IDBFactory.databases",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases",
          "desc": "A method that returns a list of all available databases, including their names and versions."
        }
      ]
    }
  },
  {
    "title": "IDBIndex",
    "calls": {
      "properties": [
        {
          "term": "IDBIndex.isAutoLocale Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale",
          "desc": "Returns a Boolean indicating whether the index had a locale value of auto specified upon its creation (see createIndex()'s optionalParameters.)"
        },
        {
          "term": "IDBIndex.locale Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale",
          "desc": "Returns the locale of the index (for example en-US, or pl) if it had a locale value specified upon its creation (see createIndex()'s optionalParameters.)"
        },
        {
          "term": "IDBIndex.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name",
          "desc": "The name of this index."
        },
        {
          "term": "IDBIndex.objectStore Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore",
          "desc": "The name of the object store referenced by this index."
        },
        {
          "term": "IDBIndex.keyPath Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath",
          "desc": "The key path of this index. If null, this index is not auto-populated."
        },
        {
          "term": "IDBIndex.multiEntry Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry",
          "desc": "Affects how the index behaves when the result of evaluating the index's key path yields an array. If true, there is one record in the index for each item in an array of keys. If false, then there is one record for each key that is an array."
        },
        {
          "term": "IDBIndex.unique Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique",
          "desc": "If true, this index does not allow duplicate values for a key."
        }
      ],
      "methods": [
        {
          "term": "IDBIndex.count()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count",
          "desc": "Returns an IDBRequest object, and in a separate thread, returns the number of records within a key range."
        },
        {
          "term": "IDBIndex.get()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get",
          "desc": "Returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is an IDBKeyRange."
        },
        {
          "term": "IDBIndex.getKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey",
          "desc": "Returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is an IDBKeyRange."
        },
        {
          "term": "IDBIndex.getAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll",
          "desc": "Returns an IDBRequest object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange."
        },
        {
          "term": "IDBIndex.getAllKeys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys",
          "desc": "Returns an IDBRequest object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange."
        },
        {
          "term": "IDBIndex.openCursor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor",
          "desc": "Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range."
        },
        {
          "term": "IDBIndex.openKeyCursor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor",
          "desc": "Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index."
        }
      ]
    }
  },
  {
    "title": "IDBKeyRange",
    "calls": {
      "properties": [
        {
          "term": "IDBKeyRange.lower Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lower",
          "desc": "Lower bound of the key range."
        },
        {
          "term": "IDBKeyRange.upper Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upper",
          "desc": "Upper bound of the key range."
        },
        {
          "term": "IDBKeyRange.lowerOpen Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerOpen",
          "desc": "Returns false if the lower-bound value is included in the key range."
        },
        {
          "term": "IDBKeyRange.upperOpen Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperOpen",
          "desc": "Returns false if the upper-bound value is included in the key range."
        }
      ]
    }
  },
  {
    "title": "IDBMutableFile",
    "calls": {
      "properties": [
        {
          "term": "MutableFile.name Read only",
          "link": "",
          "desc": "The name of the handled file."
        },
        {
          "term": "MutableFile.type Read only",
          "link": "",
          "desc": "The MIME type of the handled file."
        }
      ],
      "methods": [
        {
          "term": "MutableFile.open()",
          "link": "",
          "desc": "Returns a LockedFile object to read or write the associated file safely."
        },
        {
          "term": "MutableFile.getFile()",
          "link": "",
          "desc": "Returns a DOMRequest object. In case of success, the request's result is a File object representing a snapshot of the handled file."
        }
      ]
    }
  },
  {
    "title": "IDBObjectStore",
    "calls": {
      "properties": [
        {
          "term": "IDBObjectStore.indexNames Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames",
          "desc": "A list of the names of indexes on objects in this object store."
        },
        {
          "term": "IDBObjectStore.keyPath Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath",
          "desc": "The key path of this object store. If this attribute is null, the application must provide a key for each modification operation."
        },
        {
          "term": "IDBObjectStore.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name",
          "desc": "The name of this object store."
        },
        {
          "term": "IDBObjectStore.transaction Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction",
          "desc": "The IDBTransaction object to which this object store belongs."
        },
        {
          "term": "IDBObjectStore.autoIncrement Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement",
          "desc": "The value of the auto increment flag for this object store."
        }
      ],
      "methods": [
        {
          "term": "IDBObjectStore.add()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add",
          "desc": "Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store."
        },
        {
          "term": "IDBObjectStore.clear()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear",
          "desc": "Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store."
        },
        {
          "term": "IDBObjectStore.count()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count",
          "desc": "Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store."
        },
        {
          "term": "IDBObjectStore.createIndex()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex",
          "desc": "Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database."
        },
        {
          "term": "IDBObjectStore.delete()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete",
          "desc": "returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store."
        },
        {
          "term": "IDBObjectStore.deleteIndex()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex",
          "desc": "Destroys the specified index in the connected database, used during a version upgrade."
        },
        {
          "term": "IDBObjectStore.get()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get",
          "desc": "Returns an IDBRequest object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store."
        },
        {
          "term": "IDBObjectStore.getKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getKey",
          "desc": "Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter."
        },
        {
          "term": "IDBObjectStore.getAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll",
          "desc": "Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given."
        },
        {
          "term": "IDBObjectStore.getAllKeys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys",
          "desc": "Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given."
        },
        {
          "term": "IDBObjectStore.index()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index",
          "desc": "Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor."
        },
        {
          "term": "IDBObjectStore.openCursor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor",
          "desc": "Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor."
        },
        {
          "term": "IDBObjectStore.openKeyCursor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor",
          "desc": "Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key."
        },
        {
          "term": "IDBObjectStore.put()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put",
          "desc": "Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is readwrite."
        }
      ]
    }
  },
  {
    "title": "IDBOpenDBRequest",
    "calls": {}
  },
  {
    "title": "IDBRequest",
    "calls": {
      "properties": [
        {
          "term": "IDBRequest.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/error",
          "desc": "Returns a DOMException in the event of an unsuccessful request, indicating what went wrong."
        },
        {
          "term": "IDBRequest.result Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/result",
          "desc": "Returns the result of the request. If the request failed and the result is not available, an InvalidStateError exception is thrown."
        },
        {
          "term": "IDBRequest.source Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/source",
          "desc": "The source of the request, such as an IDBIndex or an IDBObjectStore. If no source exists (such as when calling IDBFactory.open), it returns null."
        },
        {
          "term": "IDBRequest.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/readyState",
          "desc": "The state of the request. Every request starts in the pending state. The state changes to done when the request completes successfully or when an error occurs."
        },
        {
          "term": "IDBRequest.transaction Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/transaction",
          "desc": "The transaction for the request. This property can be null for certain requests, for example those returned from IDBFactory.open unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return)."
        }
      ]
    }
  },
  {
    "title": "IDBTransaction",
    "calls": {
      "properties": [
        {
          "term": "IDBTransaction.db Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db",
          "desc": "The database connection with which this transaction is associated."
        },
        {
          "term": "IDBTransaction.durability Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/durability",
          "desc": "Returns the durability hint the transaction was created with."
        },
        {
          "term": "IDBTransaction.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error",
          "desc": "Returns a DOMException indicating the type of error that occurred when there is an unsuccessful transaction. This property is null if the transaction is not finished, is finished and successfully committed, or was aborted with theIDBTransaction.abort() function."
        },
        {
          "term": "IDBTransaction.mode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode",
          "desc": "The mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is readonly."
        },
        {
          "term": "IDBTransaction.objectStoreNames Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames",
          "desc": "Returns a DOMStringList of the names of IDBObjectStore objects associated with the transaction."
        }
      ],
      "methods": [
        {
          "term": "IDBTransaction.abort()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort",
          "desc": "Rolls back all the changes to objects in the database associated with this transaction. If this transaction has been aborted or completed, this method fires an error event."
        },
        {
          "term": "IDBTransaction.objectStore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore",
          "desc": "Returns an IDBObjectStore object representing an object store that is part of the scope of this transaction."
        },
        {
          "term": "IDBTransaction.commit()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/commit",
          "desc": "For an active transaction, commits the transaction. Note that this doesn't normally have to be called — a transaction will automatically commit when all outstanding requests have been satisfied and no new requests have been made. commit() can be used to start the commit process without waiting for events from outstanding requests to be dispatched."
        }
      ]
    }
  },
  {
    "title": "IDBVersionChangeEvent",
    "calls": {
      "constructors": [
        {
          "term": "IDBVersionChangeEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/IDBVersionChangeEvent",
          "desc": "Creates and returns a new IDBVersionChangeEvent object which is used to represent when a version of the database has changed."
        }
      ],
      "properties": [
        {
          "term": "IDBVersionChangeEvent.oldVersion Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/oldVersion",
          "desc": "Returns the old version of the database."
        },
        {
          "term": "IDBVersionChangeEvent.newVersion Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/newVersion",
          "desc": "Returns the new version of the database."
        }
      ]
    }
  },
  {
    "title": "IdleDeadline",
    "calls": {
      "properties": [
        {
          "term": "IdleDeadline.didTimeout Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/didTimeout",
          "desc": "A Boolean whose value is true if the callback is being executed because the timeout specified when the idle callback was installed has expired."
        }
      ],
      "methods": [
        {
          "term": "IdleDeadline.timeRemaining()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/timeRemaining",
          "desc": "Returns a DOMHighResTimeStamp, which is a floating-point value providing an estimate of the number of milliseconds remaining in the current idle period. If the idle period is over, the value is 0. Your callback can call this repeatedly to see if there's enough time left to do more work before returning."
        }
      ]
    }
  },
  {
    "title": "IIRFilterNode",
    "calls": {
      "constructors": [
        {
          "term": "IIRFilterNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/IIRFilterNode",
          "desc": "Creates a new instance of an IIRFilterNode object."
        }
      ],
      "methods": [
        {
          "term": "getFrequencyResponse()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/getFrequencyResponse",
          "desc": "Uses the filter's current parameter settings to calculate the response for frequencies specified in the provided array of frequencies."
        }
      ]
    }
  },
  {
    "title": "ImageBitmap",
    "calls": {
      "properties": [
        {
          "term": "ImageBitmap.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height",
          "desc": "Is an unsigned long representing the height, in CSS pixels, of the ImageData."
        },
        {
          "term": "ImageBitmap.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width",
          "desc": "Is an unsigned long representing the width, in CSS pixels, of the ImageData."
        }
      ],
      "methods": [
        {
          "term": "ImageBitmap.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/close",
          "desc": "Disposes of all graphical resources associated with an ImageBitmap."
        }
      ]
    }
  },
  {
    "title": "ImageData",
    "calls": {
      "properties": [
        {
          "term": "ImageData.data Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data",
          "desc": "Is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (inclusive)."
        },
        {
          "term": "ImageData.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height",
          "desc": "Is an unsigned long representing the actual height, in pixels, of the ImageData."
        },
        {
          "term": "ImageData.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width",
          "desc": "Is an unsigned long representing the actual width, in pixels, of the ImageData."
        }
      ]
    }
  },
  {
    "title": "Index",
    "calls": {}
  },
  {
    "title": "InputEvent",
    "calls": {
      "constructors": [
        {
          "term": "InputEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/InputEvent",
          "desc": "Creates an InputEvent object."
        }
      ],
      "properties": [
        {
          "term": "InputEvent.dataRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/data",
          "desc": "Returns a DOMString with the inserted characters. This may be an empty string if the change doesn't insert text (such as when deleting characters, for example)."
        },
        {
          "term": "InputEvent.dataTransferRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/dataTransfer",
          "desc": "Returns a DataTransfer object containing information about richtext or plaintext data being added to or removed from editable content."
        },
        {
          "term": "InputEvent.inputTypeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType",
          "desc": "Returns the type of change for editable content such as, for example, inserting, deleting, or formatting text. See the property page for a complete list of input types."
        },
        {
          "term": "InputEvent.isComposingRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing",
          "desc": "Returns a Boolean value indicating if the event is fired after compositionstart and before compositionend."
        }
      ],
      "methods": [
        {
          "term": "InputEvent.getTargetRanges()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/getTargetRanges",
          "desc": "Returns an array of static ranges that will be affected by a change to the DOM if the input event is not canceled."
        }
      ]
    }
  },
  {
    "title": "InstallEvent",
    "calls": {
      "constructors": [
        {
          "term": "InstallEvent.InstallEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/InstallEvent",
          "desc": "Creates a new InstallEvent object."
        }
      ],
      "properties": [
        {
          "term": "InstallEvent.activeWorker Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker",
          "desc": "Returns the ServiceWorker that is currently controlling the page."
        }
      ]
    }
  },
  {
    "title": "InstallTrigger",
    "calls": {}
  },
  {
    "title": "IntersectionObserver",
    "calls": {
      "constructors": [
        {
          "term": "IntersectionObserver.IntersectionObserver()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver",
          "desc": "Creates a new IntersectionObserver object which will execute a specified callback function when it detects that a target element's visibility has crossed one or more thresholds."
        }
      ],
      "properties": [
        {
          "term": "IntersectionObserver.root Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root",
          "desc": "The Element or Document whose bounds are used as the bounding box when testing for intersection. If no root value was passed to the constructor or its value is null, the top-level document's viewport is used."
        },
        {
          "term": "IntersectionObserver.rootMargin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin",
          "desc": "An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels (px) or as a percentage (%). The default is \"0px 0px 0px 0px\"."
        },
        {
          "term": "IntersectionObserver.thresholds Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/thresholds",
          "desc": "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used."
        }
      ],
      "methods": [
        {
          "term": "IntersectionObserver.disconnect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/disconnect",
          "desc": "Stops the IntersectionObserver object from observing any target."
        },
        {
          "term": "IntersectionObserver.observe()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/observe",
          "desc": "Tells the IntersectionObserver a target element to observe."
        },
        {
          "term": "IntersectionObserver.takeRecords()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/takeRecords",
          "desc": "Returns an array of IntersectionObserverEntry objects for all observed targets."
        },
        {
          "term": "IntersectionObserver.unobserve()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/unobserve",
          "desc": "Tells the IntersectionObserver to stop observing a particular target element."
        }
      ]
    }
  },
  {
    "title": "IntersectionObserverEntry",
    "calls": {
      "properties": [
        {
          "term": "IntersectionObserverEntry.boundingClientRect Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect",
          "desc": "Returns the bounds rectangle of the target element as a DOMRectReadOnly. The bounds are computed as described in the documentation for Element.getBoundingClientRect()."
        },
        {
          "term": "IntersectionObserverEntry.intersectionRatio Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio",
          "desc": "Returns the ratio of the intersectionRect to the boundingClientRect."
        },
        {
          "term": "IntersectionObserverEntry.intersectionRect Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect",
          "desc": "Returns a DOMRectReadOnly representing the target's visible area."
        },
        {
          "term": "IntersectionObserverEntry.isIntersecting Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting",
          "desc": "A Boolean value which is true if the target element intersects with the intersection observer's root. If this is true, then, the IntersectionObserverEntry describes a transition into a state of intersection; if it's false, then you know the transition is from intersecting to not-intersecting."
        },
        {
          "term": "IntersectionObserverEntry.rootBounds Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds",
          "desc": "Returns a DOMRectReadOnly for the intersection observer's root."
        },
        {
          "term": "IntersectionObserverEntry.target Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target",
          "desc": "The Element whose intersection with the root changed."
        },
        {
          "term": "IntersectionObserverEntry.time Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time",
          "desc": "A DOMHighResTimeStamp indicating the time at which the intersection was recorded, relative to the IntersectionObserver's time origin."
        }
      ]
    }
  },
  {
    "title": "KeyboardEvent",
    "calls": {
      "constructors": [
        {
          "term": "KeyboardEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent",
          "desc": "Creates a new KeyboardEvent object."
        }
      ],
      "properties": [
        {
          "term": "KeyboardEvent.altKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey",
          "desc": "Returns a Boolean that is true if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated."
        },
        {
          "term": "KeyboardEvent.code Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code",
          "desc": "Returns a DOMString with the code value of the physical key represented by the event. Warning: This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\")."
        },
        {
          "term": "KeyboardEvent.ctrlKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey",
          "desc": "Returns a Boolean that is true if the Ctrl key was active when the key event was generated."
        },
        {
          "term": "KeyboardEvent.isComposing Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing",
          "desc": "Returns a Boolean that is true if the event is fired between after compositionstart and before compositionend."
        },
        {
          "term": "KeyboardEvent.key Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key",
          "desc": "Returns a DOMString representing the key value of the key represented by the event."
        },
        {
          "term": "KeyboardEvent.locale Read only",
          "link": "",
          "desc": "Returns a DOMString representing a locale string indicating the locale the keyboard is configured for. This may be the empty string if the browser or device doesn't know the keyboard's locale. Note: This does not describe the locale of the data being entered. A user may be using one keyboard layout while typing text in a different language."
        },
        {
          "term": "KeyboardEvent.location Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location",
          "desc": "Returns a Number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations."
        },
        {
          "term": "KeyboardEvent.metaKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey",
          "desc": "Returns a Boolean that is true if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated."
        },
        {
          "term": "KeyboardEvent.repeat Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat",
          "desc": "Returns a Boolean that is true if the key is being held down such that it is automatically repeating."
        },
        {
          "term": "KeyboardEvent.shiftKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey",
          "desc": "Returns a Boolean that is true if the Shift key was active when the key event was generated."
        }
      ],
      "methods": [
        {
          "term": "KeyboardEvent.getModifierState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState",
          "desc": "Returns a Boolean indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created."
        }
      ]
    }
  },
  {
    "title": "KHR_parallel_shader_compile",
    "calls": {}
  },
  {
    "title": "LargestContentfulPaint",
    "calls": {
      "properties": [
        {
          "term": "LargestContentfulPaint.element",
          "link": "",
          "desc": "The element that is the current largest contentful paint."
        },
        {
          "term": "LargestContentfulPaint.renderTime",
          "link": "",
          "desc": "The time the element was rendered to the screen. May not be available if the element is a cross-origin image loaded without the Timing-Allow-Origin header."
        },
        {
          "term": "LargestContentfulPaint.loadTime",
          "link": "",
          "desc": "The time the element was loaded."
        },
        {
          "term": "LargestContentfulPaint.size",
          "link": "",
          "desc": "The intrinsic size of the element returned as the area (width * height)."
        },
        {
          "term": "LargestContentfulPaint.id",
          "link": "",
          "desc": "The id of the element. This property returns an empty string when there is no id."
        },
        {
          "term": "LargestContentfulPaint.url",
          "link": "",
          "desc": "If the element is an image, the request url of the image."
        }
      ],
      "methods": [
        {
          "term": "LargestContentfulPaint.toJSON()",
          "link": "",
          "desc": "Returns the above properties as JSON."
        }
      ]
    }
  },
  {
    "title": "LayoutShift",
    "calls": {
      "properties": [
        {
          "term": "LayoutShift.value",
          "link": "",
          "desc": "Returns the impact fraction (fraction of the viewport that was shifted) times the distance fraction (distance moved as a fraction of viewport)."
        },
        {
          "term": "LayoutShift.hadRecentInput",
          "link": "",
          "desc": "Returns true if there was a user input in the past 500 milliseconds."
        },
        {
          "term": "LayoutShift.lastInputTime",
          "link": "",
          "desc": "Returns the time of the most recent user input."
        },
        {
          "term": "LayoutShift.sources",
          "link": "",
          "desc": "Returns an array of LayoutShiftAttribution objects with information on the elements that were shifted."
        }
      ],
      "methods": [
        {
          "term": "LayoutShift.toJSON()",
          "link": "",
          "desc": "Converts the properties to JSON."
        }
      ]
    }
  },
  {
    "title": "LayoutShiftAttribution",
    "calls": {
      "properties": [
        {
          "term": "LayoutShiftAttribution.Node",
          "link": "",
          "desc": "Returns the element that has shifted (null if it has been removed)."
        },
        {
          "term": "LayoutShiftAttribution.previousRect",
          "link": "",
          "desc": "Returns a DOMRect representing the position of the element before the shift."
        },
        {
          "term": "LayoutShiftAttribution.currentRect",
          "link": "",
          "desc": "Returns a DOMRect representing the position of the element after the shift."
        }
      ]
    }
  },
  {
    "title": "LinearAccelerationSensor",
    "calls": {
      "constructors": [
        {
          "term": "LinearAccelerationSensor.LinearAccelerationSensor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LinearAccelerationSensor/LinearAccelerationSensor",
          "desc": "Creates a new LinearAccelerationSensor object."
        }
      ]
    }
  },
  {
    "title": "LinkStyle",
    "calls": {
      "properties": [
        {
          "term": "LinkStyle.sheet Read only",
          "link": "",
          "desc": "Returns the CSSStyleSheet object associated with the given element, or null if there is none."
        }
      ]
    }
  },
  {
    "title": "LocalFileSystem",
    "calls": {}
  },
  {
    "title": "LocalFileSystemSync",
    "calls": {}
  },
  {
    "title": "Location",
    "calls": {
      "properties": [
        {
          "term": "Location.ancestorOrigins",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOrigins",
          "desc": "Is a static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object."
        },
        {
          "term": "Location.href",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/href",
          "desc": "Is a stringifier that returns a USVString containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document."
        },
        {
          "term": "Location.protocol",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol",
          "desc": "Is a USVString containing the protocol scheme of the URL, including the final ':'."
        },
        {
          "term": "Location.host",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/host",
          "desc": "Is a USVString containing the host, that is the hostname, a ':', and the port of the URL."
        },
        {
          "term": "Location.hostname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname",
          "desc": "Is a USVString containing the domain of the URL."
        },
        {
          "term": "Location.port",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/port",
          "desc": "Is a USVString containing the port number of the URL."
        },
        {
          "term": "Location.pathname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname",
          "desc": "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
        },
        {
          "term": "Location.search",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/search",
          "desc": "Is a USVString containing a '?' followed by the parameters or \"querystring\" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring."
        },
        {
          "term": "Location.hash",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/hash",
          "desc": "Is a USVString containing a '#' followed by the fragment identifier of the URL."
        },
        {
          "term": "Location.origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/origin",
          "desc": "Returns a USVString containing the canonical form of the origin of the specific location."
        }
      ],
      "methods": [
        {
          "term": "Location.assign()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/assign",
          "desc": "Loads the resource at the URL provided in parameter."
        },
        {
          "term": "Location.reload()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/reload",
          "desc": "Reloads the current URL, like the Refresh button."
        },
        {
          "term": "Location.replace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/replace",
          "desc": "Replaces the current resource with the one at the provided URL (redirects to the provided URL). The difference from the assign() method and setting the href property is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it."
        },
        {
          "term": "Location.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Location/toString",
          "desc": "Returns a USVString containing the whole URL. It is a synonym for HTMLHyperlinkElementUtils.href, though it can't be used to modify the value."
        }
      ]
    }
  },
  {
    "title": "LockedFile",
    "calls": {
      "properties": [
        {
          "term": "LockedFile.fileHandle Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/fileHandle",
          "desc": "The FileHandle object from which the lock was opened."
        },
        {
          "term": "LockedFile.mode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/mode",
          "desc": "The mode for accessing the file; can be readonly or readwrite."
        },
        {
          "term": "LockedFile.active Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/active",
          "desc": "A flag indicating if the file can be accessed (true) or not (false)."
        },
        {
          "term": "LockedFile.location",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/location",
          "desc": "The position of the reading/writing pointer within the file."
        }
      ],
      "methods": [
        {
          "term": "LockedFile.getMetadata()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/getMetaData",
          "desc": "Allows to retrieve the file metadata (size and date of the last modification). Returns a FileRequest."
        },
        {
          "term": "LockedFile.readAsArrayBuffer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/readAsArrayBuffer",
          "desc": "Allows to retrieve a part of the content of the file as an ArrayBuffer. Returns a FileRequest object."
        },
        {
          "term": "LockedFile.readAsText()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/readAsText",
          "desc": "Allows to retrieve a part of the content of the file as a string. Returns a FileRequest object."
        },
        {
          "term": "LockedFile.write()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/write",
          "desc": "Allows to write some data in the file starting at the location offset. Returns a FileRequest object."
        },
        {
          "term": "LockedFile.append()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/append",
          "desc": "Allows to write some data at the end of the file. Returns a FileRequest object."
        },
        {
          "term": "LockedFile.truncate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/truncate",
          "desc": "Allows to truncate the file's content. Returns a FileRequest object."
        },
        {
          "term": "LockedFile.flush()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/flush",
          "desc": "Allows to guarantee that any buffered data has been transferred to disk."
        },
        {
          "term": "LockedFile.abort()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/abort",
          "desc": "Makes the LockedFile inactive and cancels all ongoing operations."
        }
      ]
    }
  },
  {
    "title": "Magnetometer",
    "calls": {
      "constructors": [
        {
          "term": "Magnetometer.Magnetometer()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer/Magnetometer",
          "desc": "Creates a new Magnetometer object."
        }
      ],
      "properties": [
        {
          "term": "Magnetometer.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer/x",
          "desc": "Returns a double containing the magnetic field around the device's x axis."
        },
        {
          "term": "Magnetometer.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer/y",
          "desc": "Returns a double containing the magnetic field around the device's y axis."
        },
        {
          "term": "Magnetometer.z Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer/z",
          "desc": "Returns a double containing the magnetic field around the device's z axis."
        }
      ]
    }
  },
  {
    "title": "MathMLElement",
    "calls": {}
  },
  {
    "title": "MediaDeviceInfo",
    "calls": {
      "properties": [
        {
          "term": "MediaDeviceInfo.deviceIdRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/deviceId",
          "desc": "Returns a DOMString that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions)."
        },
        {
          "term": "MediaDeviceInfo.groupIdRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/groupId",
          "desc": "Returns a DOMString that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone."
        },
        {
          "term": "MediaDeviceInfo.kindRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/kind",
          "desc": "Returns an enumerated value that is either \"videoinput\", \"audioinput\" or \"audiooutput\"."
        },
        {
          "term": "MediaDeviceInfo.labelRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/label",
          "desc": "Returns a DOMString that is a label describing this device (for example \"External USB Webcam\")."
        }
      ]
    }
  },
  {
    "title": "MediaDevices",
    "calls": {
      "methods": [
        {
          "term": "enumerateDevices()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices",
          "desc": "Obtains an array of information about the media input and output devices available on the system."
        },
        {
          "term": "getSupportedConstraints()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getSupportedConstraints",
          "desc": "Returns an object conforming to MediaTrackSupportedConstraints indicating which constrainable properties are supported on the MediaStreamTrack interface. See Capabilities and constraints in Media Capture and Streams API (Media Stream) to learn more about constraints and how to use them."
        },
        {
          "term": "getDisplayMedia()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia",
          "desc": "Prompts the user to select a display or portion of a display (such as a window) to capture as a MediaStream for sharing or recording purposes. Returns a promise that resolves to a MediaStream."
        },
        {
          "term": "getUserMedia()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
          "desc": "With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input."
        }
      ]
    }
  },
  {
    "title": "MediaElementAudioSourceNode",
    "calls": {
      "constructors": [
        {
          "term": "MediaElementAudioSourceNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/MediaElementAudioSourceNode",
          "desc": "Creates a new MediaElementAudioSourceNode object instance."
        }
      ],
      "properties": [
        {
          "term": "mediaElement Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/mediaElement",
          "desc": "The HTMLMediaElement used when constructing this MediaStreamAudioSourceNode."
        }
      ]
    }
  },
  {
    "title": "MediaError",
    "calls": {
      "properties": [
        {
          "term": "MediaError.code",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code",
          "desc": "A number which represents the general type of error that occurred, as follows: Name Value Description MEDIA_ERR_ABORTED 1 The fetching of the associated resource was aborted by the user's request. MEDIA_ERR_NETWORK 2 Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available. MEDIA_ERR_DECODE 3 Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error. MEDIA_ERR_SRC_NOT_SUPPORTED 4 The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable."
        },
        {
          "term": "MediaError.message",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message",
          "desc": "A DOMString object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one user agent to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (\"\")."
        }
      ]
    }
  },
  {
    "title": "MediaImage",
    "calls": {
      "properties": [
        {
          "term": "src",
          "link": "",
          "desc": "The URL from which the user agent fetches the image's data."
        },
        {
          "term": "sizes",
          "link": "",
          "desc": "Specifies the resource in multiple sizes so the user agent doesn't have to scale a single image."
        },
        {
          "term": "type",
          "link": "",
          "desc": "The MIME type hint for the user agent that allows it to ignore images of types that it doesn't support. However, the user agent may still use MIME type sniffing after downloading the image to determine its type."
        }
      ]
    }
  },
  {
    "title": "MediaKeyMessageEvent",
    "calls": {
      "constructors": [
        {
          "term": "MediaKeyMessageEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/MediaKeyMessageEvent",
          "desc": "Creates a new instance of MediaKeyMessageEvent."
        }
      ],
      "properties": [
        {
          "term": "MediaKeyMessageEvent.message Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message",
          "desc": "Returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system."
        },
        {
          "term": "MediaKeyMessageEvent.messageType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType",
          "desc": "Indicates the type of message. May be one of license-request, license-renewal, license-release, or individualization-request."
        }
      ]
    }
  },
  {
    "title": "MediaKeys",
    "calls": {
      "methods": [
        {
          "term": "MediaKeys.createSession()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession",
          "desc": "Returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM)."
        },
        {
          "term": "MediaKeys.setServerCertificate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate",
          "desc": "Returns a Promise to a server certificate to be used to encrypt messages to the license server."
        }
      ]
    }
  },
  {
    "title": "MediaKeySession",
    "calls": {
      "properties": [
        {
          "term": "MediaKeySession.closed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed",
          "desc": "Returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data."
        },
        {
          "term": "MediaKeySession.expiration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration",
          "desc": "The time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window."
        },
        {
          "term": "MediaKeySession.keyStatuses Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses",
          "desc": "Contains a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses."
        },
        {
          "term": "MediaKeySession.sessionId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId",
          "desc": "Contains a unique string generated by the CDM for the current media object and its associated keys or licenses."
        }
      ],
      "handlers": [
        {
          "term": "MediaKeySession.onkeystatuseschange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onkeystatuseschange",
          "desc": "Sets the EventHandler called when there has been a change in the keys in a session or their statuses."
        },
        {
          "term": "MediaKeySession.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onmessage",
          "desc": "Sets the EventHandler called when the content decryption module has generated a message for the session."
        }
      ],
      "methods": [
        {
          "term": "MediaKeySession.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close",
          "desc": "Returns a Promise after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it."
        },
        {
          "term": "MediaKeySession.generateRequest()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest",
          "desc": "Returns a Promise after generating a media request based on initialization data."
        },
        {
          "term": "MediaKeySession.load()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load",
          "desc": "Returns a Promise that resolves to a boolean value after loading data for a specified session object."
        },
        {
          "term": "MediaKeySession.remove()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove",
          "desc": "Returns a Promise after removing any session data associated with the current object."
        },
        {
          "term": "MediaKeySession.update()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update",
          "desc": "Returns a Promise after loading messages and licenses to the CDM."
        }
      ]
    }
  },
  {
    "title": "MediaKeyStatusMap",
    "calls": {
      "properties": [
        {
          "term": "MediaKeyStatusMap.size Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/size",
          "desc": "Returns the number of key/value pars in the status map."
        }
      ],
      "methods": [
        {
          "term": "MediaKeyStatusMap.entries() Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/entries",
          "desc": "Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order."
        },
        {
          "term": "MediaKeyStatusMap.forEach(callback[, argument]) Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/forEach",
          "desc": "Calls callback once for each key-value pair in the status map, in insertion order. If argument is present it will be passed to the callback."
        },
        {
          "term": "MediaKeyStatusMap.get() Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/get",
          "desc": "Returns the value associated with the given key, or undefined if there is none."
        },
        {
          "term": "MediaKeyStatusMap.has() Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/has",
          "desc": "Returns a boolean asserting whether a value has been associated with the given key."
        },
        {
          "term": "MediaKeyStatusMap.keys() Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/keys",
          "desc": "Returns a new Iterator object containing keys for each element in the status map, in insertion order."
        },
        {
          "term": "MediaKeyStatusMap.values() Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/values",
          "desc": "Returns a new Iterator object containing values for each element in the status map, in insertion order."
        },
        {
          "term": "MediaKeyStatusMap.[@@iterator]() Read only",
          "link": "",
          "desc": "Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order."
        }
      ]
    }
  },
  {
    "title": "MediaKeySystemAccess",
    "calls": {
      "properties": [
        {
          "term": "MediaKeySystemAccess.keySystem Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/keySystem",
          "desc": "Returns a DOMString identifying the key system being used."
        }
      ],
      "methods": [
        {
          "term": "MediaKeySystemAccess.createMediaKeys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/createMediaKeys",
          "desc": "Returns a Promise that resolves to a new MediaKeys object."
        },
        {
          "term": "MediaKeySystemAccess.getConfiguration()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/getConfiguration",
          "desc": "Returns a MediaKeySystemConfiguration object with the supported combination of configuration options."
        }
      ]
    }
  },
  {
    "title": "MediaKeySystemConfiguration",
    "calls": {
      "properties": [
        {
          "term": "MediaKeySystemConfiguration.initDataTypes Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/initDataTypes",
          "desc": "Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data."
        },
        {
          "term": "MediaKeySystemConfiguration.audioCapabilities Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/audioCapabilities",
          "desc": "Returns a list of supported audio type and capability pairs."
        },
        {
          "term": "MediaKeySystemConfiguration.videoCapabilities Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/videoCapabilities",
          "desc": "Returns a list of supported video type and capability pairs."
        },
        {
          "term": "MediaKeySystemConfiguration.distinctiveIdentifier Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/distinctiveIdentifier",
          "desc": "Indicates whether a persistent distinctive identifier is required."
        },
        {
          "term": "MediaKeySystemConfiguration.persistentState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/persistentState",
          "desc": "Indicates whether the ability to persist state is required."
        }
      ]
    }
  },
  {
    "title": "MediaList",
    "calls": {
      "properties": [
        {
          "term": "MediaList.mediaText",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaList/mediaText",
          "desc": "A stringifier that returns a DOMString representing the MediaList as text, and also allows you to set a new MediaList."
        },
        {
          "term": "MediaList.length Read only",
          "link": "",
          "desc": "Returns the number of media queries in the MediaList."
        }
      ],
      "methods": [
        {
          "term": "MediaList.appendMedium()",
          "link": "",
          "desc": "Adds a media query to the MediaList."
        },
        {
          "term": "MediaList.deleteMedium()",
          "link": "",
          "desc": "Removes a media query from the MediaList."
        },
        {
          "term": "MediaList.item()",
          "link": "",
          "desc": "A getter that returns a CSSOMString representing a media query as text, given the media query's index value inside the MediaList."
        }
      ]
    }
  },
  {
    "title": "MediaMetadata",
    "calls": {
      "constructors": [
        {
          "term": "MediaMetadata.MediaMetadata()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata",
          "desc": "Creates a new MediaMetaData object."
        }
      ],
      "properties": [
        {
          "term": "MediaMetadata.title",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title",
          "desc": "Returns or sets the title of the media to be played."
        },
        {
          "term": "MediaMetadata.artist",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist",
          "desc": "Returns or sets the name of the artist, group, creator, etc. of the media to be played."
        },
        {
          "term": "MediaMetadata.album",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album",
          "desc": "Returns or sets the name of the album or collection containing the media to be played."
        },
        {
          "term": "MediaMetadata.artwork",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artwork",
          "desc": "Returns or sets an array of images associated with playing media."
        }
      ]
    }
  },
  {
    "title": "MediaPositionState",
    "calls": {
      "properties": [
        {
          "term": "duration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaPositionState/duration",
          "desc": "A floating-point value giving the total duration of the current media in seconds. This should always be a positive number, with positive infinity (Infinity) indicating media without a defined end, such as a live stream."
        },
        {
          "term": "playbackRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaPositionState/playbackRate",
          "desc": "A floating-point value indicating the rate at which the media is being played, as a ratio relative to its normal playback speed. Thus, a value of 1 is playing at normal speed, 2 is playing at double speed, and so forth. Negative values indicate that the media is playing in reverse; -1 indicates playback at the normal speed but backward, -2 is double speed in reverse, and so on."
        },
        {
          "term": "position",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaPositionState/position",
          "desc": "A floating-point value indicating the last reported playback position of the media in seconds. This must always be a positive value."
        }
      ]
    }
  },
  {
    "title": "MediaQueryList",
    "calls": {
      "properties": [
        {
          "term": "matchesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches",
          "desc": "A Boolean that returns true if the document currently matches the media query list, or false if not."
        },
        {
          "term": "mediaRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media",
          "desc": "A DOMString representing a serialized media query."
        }
      ],
      "methods": [
        {
          "term": "addListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener",
          "desc": "Adds to the MediaQueryList a callback which is invoked whenever the media query status—whether or not the document matches the media queries in the list—changes. This method exists primarily for backward compatibility; if possible, you should instead use addEventListener() to watch for the change event."
        },
        {
          "term": "removeListener()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener",
          "desc": "Removes the specified listener callback from the callbacks to be invoked when the MediaQueryList changes media query status, which happens any time the document switches between matching and not matching the media queries listed in the MediaQueryList. This method has been kept for backward compatibility; if possible, you should generally use removeEventListener() to remove change notification callbacks (which should have previously been added using addEventListener())."
        }
      ]
    }
  },
  {
    "title": "MediaQueryListEvent",
    "calls": {
      "constructors": [
        {
          "term": "MediaQueryListEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/MediaQueryListEvent",
          "desc": "Creates a new MediaQueryListEvent instance."
        }
      ],
      "properties": [
        {
          "term": "MediaQueryListEvent.matchesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches",
          "desc": "A Boolean that returns true if the document currently matches the media query list, or false if not."
        },
        {
          "term": "MediaQueryListEvent.mediaRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media",
          "desc": "A DOMString representing a serialized media query."
        }
      ]
    }
  },
  {
    "title": "MediaRecorder",
    "calls": {
      "constructors": [
        {
          "term": "MediaRecorder()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder",
          "desc": "Creates a new MediaRecorder object, given a MediaStream to record. Options are available to do things like set the container's MIME type (such as \"video/webm\" or \"video/mp4\") and the bit rates of the audio and video tracks or a single overall bit rate."
        }
      ],
      "properties": [
        {
          "term": "MediaRecorder.mimeType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType",
          "desc": "Returns the MIME type that was selected as the recording container for the MediaRecorder object when it was created."
        },
        {
          "term": "MediaRecorder.state Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state",
          "desc": "Returns the current state of the MediaRecorder object (inactive, recording, or paused.)"
        },
        {
          "term": "MediaRecorder.stream Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream",
          "desc": "Returns the stream that was passed into the constructor when the MediaRecorder was created."
        },
        {
          "term": "MediaRecorder.ignoreMutedMedia",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ignoreMutedMedia",
          "desc": "Indicates whether the MediaRecorder instance will record input when the input MediaStreamTrack is muted. If this attribute is false, MediaRecorder will record silence for audio and black frames for video. The default is false."
        },
        {
          "term": "MediaRecorder.videoBitsPerSecond Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond",
          "desc": "Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided)."
        },
        {
          "term": "MediaRecorder.audioBitsPerSecond Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond",
          "desc": "Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided)."
        }
      ],
      "handlers": [
        {
          "term": "MediaRecorder.ondataavailable",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable",
          "desc": "Called to handle the dataavailable event, which is periodically triggered each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified). The event, of type BlobEvent, contains the recorded media in its data property. You can then collect and act upon that recorded media data using this event handler."
        },
        {
          "term": "MediaRecorder.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror",
          "desc": "An EventHandler called to handle the error event, including reporting errors that arise with media recording. These are fatal errors that stop recording. The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred."
        },
        {
          "term": "MediaRecorder.onpause",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause",
          "desc": "An EventHandler called to handle the pause event, which occurs when media recording is paused."
        },
        {
          "term": "MediaRecorder.onresume",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume",
          "desc": "An EventHandler called to handle the resume event, which occurs when media recording resumes after being paused."
        },
        {
          "term": "MediaRecorder.onstart",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart",
          "desc": "An EventHandler called to handle the start event, which occurs when media recording starts."
        },
        {
          "term": "MediaRecorder.onstop",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop",
          "desc": "An EventHandler called to handle the stop event, which occurs when media recording ends, either when the MediaStream ends — or after the MediaRecorder.stop() method is called."
        }
      ],
      "methods": [
        {
          "term": "MediaRecorder.pause()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause",
          "desc": "Pauses the recording of media."
        },
        {
          "term": "MediaRecorder.requestData()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData",
          "desc": "Requests a Blob containing the saved data received thus far (or since the last time requestData() was called. After calling this method, recording continues, but in a new Blob."
        },
        {
          "term": "MediaRecorder.resume()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume",
          "desc": "Resumes recording of media after having been paused."
        },
        {
          "term": "MediaRecorder.start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start",
          "desc": "Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk."
        },
        {
          "term": "MediaRecorder.stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop",
          "desc": "Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs."
        }
      ]
    }
  },
  {
    "title": "MediaRecorderErrorEvent",
    "calls": {
      "constructors": [
        {
          "term": "MediaStreamRecorderEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent/MediaRecorderErrorEvent",
          "desc": "Creates and returns a new MediaRecorderErrorEvent event object with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent/error",
          "desc": "A DOMException containing information about the error that occurred. Read only."
        }
      ]
    }
  },
  {
    "title": "MediaSession",
    "calls": {
      "properties": [
        {
          "term": "metadata",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata",
          "desc": "Returns an instance of MediaMetadata, which contains rich media metadata for display in a platform UI."
        },
        {
          "term": "playbackState",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState",
          "desc": "Indicates whether the current media session is playing. Valid values are none, paused, or playing."
        }
      ],
      "methods": [
        {
          "term": "setActionHandler()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setActionHandler",
          "desc": "Sets an action handler for a media session action, such as play or pause."
        },
        {
          "term": "setPositionState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setPositionState",
          "desc": "Sets the current playback position and speed of the media currently being presented."
        }
      ]
    }
  },
  {
    "title": "MediaSessionActionDetails",
    "calls": {
      "properties": [
        {
          "term": "action",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSessionActionDetails/action",
          "desc": "A Media Session action type string taken from the MediaSessionAction enumerated type, indicating which type of action needs to be performed. See Media action types below for possible values."
        },
        {
          "term": "fastSeek Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSessionActionDetails/fastSeek",
          "desc": "An seekto action may optionally include this property, which is a Boolean value indicating whether or not to perform a \"fast\" seek. A \"fast\" seek is a seek being performed in a rapid sequence, such as when fast-forwarding or reversing through the media, rapidly skipping through it. This property can be used to indicate that you should use the shortest possible method to seek the media. fastSeek is not included on the final action in the seek sequence in this situation."
        },
        {
          "term": "seekOffset Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSessionActionDetails/seekOffset",
          "desc": "If the action is either seekforward or seekbackward and this property is present, it is a floating point value which indicates the number of seconds to move the play position forward or backward. If this property isn't present, those actions should choose a reasonable default distance to skip forward or backward (such as 7 or 10 seconds)."
        },
        {
          "term": "seekTime Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSessionActionDetails/seekTime",
          "desc": "If the action is seekto, this property must be present and must be a floating-point value indicating the absolute time within the media to move the playback position to, where 0 indicates the beginning of the media. This property is not present for other action types."
        }
      ]
    }
  },
  {
    "title": "MediaSettingsRange",
    "calls": {
      "properties": [
        {
          "term": "MediaSettingsRange.max",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSettingsRange/max",
          "desc": "Returns the maximum value of this settings."
        },
        {
          "term": "MediaSettingsRange.min",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSettingsRange/min",
          "desc": "Returns the minimum value of this setting."
        },
        {
          "term": "MediaSettingsRange.step",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSettingsRange/step",
          "desc": "Returns the minimum difference between consecutive values of this setting."
        }
      ]
    }
  },
  {
    "title": "MediaStream",
    "calls": {
      "constructors": [
        {
          "term": "MediaStream()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream",
          "desc": "Creates and returns a new MediaStream object. You can create an empty stream, a stream which is based upon an existing stream, or a stream that contains a specified list of tracks (specified as an array of MediaStreamTrack objects)."
        }
      ],
      "properties": [
        {
          "term": "MediaStream.active Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active",
          "desc": "A Boolean value that returns true if the MediaStream is active, or false otherwise."
        },
        {
          "term": "MediaStream.ended Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/ended",
          "desc": "A Boolean value set to true if the end of the stream has been reached. This has been removed from the specification; you should instead check the value of MediaStreamTrack.readyState to see if its value is ended for the track or tracks you want to ensure have finished playing."
        }
      ],
      "handlers": [
        {
          "term": "MediaStream.onaddtrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack",
          "desc": "An EventHandler containing the action to perform when an addtrack event is fired when a new MediaStreamTrack object is added."
        },
        {
          "term": "MediaStream.onremovetrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack",
          "desc": "An EventHandler containing the action to perform when a removetrack event is fired when a MediaStreamTrack object is removed from it."
        }
      ],
      "methods": [
        {
          "term": "MediaStream.addTrack()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack",
          "desc": "Stores a copy of the MediaStreamTrack given as argument. If the track has already been added to the MediaStream object, nothing happens."
        }
      ]
    }
  },
  {
    "title": "MediaStreamAudioDestinationNode",
    "calls": {
      "constructors": [
        {
          "term": "MediaStreamAudioDestinationNode.MediaStreamAudioDestinationNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode",
          "desc": "Creates a new MediaStreamAudioDestinationNode object instance."
        }
      ],
      "properties": [
        {
          "term": "MediaStreamAudioDestinationNode.stream",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream",
          "desc": "A MediaStream containing a single MediaStreamTrack whose kind is audio and with the same number of channels as the node. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder."
        }
      ]
    }
  },
  {
    "title": "MediaStreamAudioSourceNode",
    "calls": {
      "constructors": [
        {
          "term": "new MediaStreamAudioSourceNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/MediaStreamAudioSourceNode",
          "desc": "Creates a new MediaStreamAudioSourceNode object instance with the specified options."
        }
      ],
      "properties": [
        {
          "term": "mediaStream Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/mediaStream",
          "desc": "The MediaStream used when constructing this MediaStreamAudioSourceNode."
        }
      ]
    }
  },
  {
    "title": "MediaStreamAudioSourceOptions",
    "calls": {
      "properties": [
        {
          "term": "mediaStream",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceOptions/mediaStream",
          "desc": "A required property which specifies the MediaStream from which to obtain audio for the node."
        }
      ]
    }
  },
  {
    "title": "MediaStreamConstraints",
    "calls": {}
  },
  {
    "title": "MediaStreamTrack",
    "calls": {
      "properties": [
        {
          "term": "MediaStreamTrack.contentHint",
          "link": "",
          "desc": "A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers."
        },
        {
          "term": "MediaStreamTrack.enabled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled",
          "desc": "A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect. Note: You can implement standard \"mute\" functionality by setting enabled to false. The muted property refers to a condition in which there's no media because of a technical issue."
        },
        {
          "term": "MediaStreamTrack.id Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id",
          "desc": "Returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser."
        },
        {
          "term": "MediaStreamTrack.isolated Read only",
          "link": "",
          "desc": "Returns a Boolean value which is true if the track is isolated; that is, the track cannot be accessed by the document that owns the MediaStreamTrack. This happens when the peerIdentity property is set, or if the track comes from a cross-origin source."
        },
        {
          "term": "MediaStreamTrack.kind Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind",
          "desc": "Returns a DOMString set to \"audio\" if the track is an audio track and to \"video\", if it is a video track. It doesn't change if the track is deassociated from its source."
        },
        {
          "term": "MediaStreamTrack.label Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label",
          "desc": "Returns a DOMString containing a user agent-assigned label that identifies the track source, as in \"internal microphone\". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed."
        },
        {
          "term": "MediaStreamTrack.muted Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted",
          "desc": "Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue. Note: You can implement standard \"mute\" functionality by setting enabled to false, and unmute the media by setting it back to true again."
        },
        {
          "term": "MediaStreamTrack.readonly Read only",
          "link": "",
          "desc": "Returns a Boolean value with a value of true if the track is readonly (such a video file source or a camera that settings can't be modified), false otherwise."
        },
        {
          "term": "MediaStreamTrack.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState",
          "desc": "Returns an enumerated value giving the status of the track. This will be one of the following values: \"live\" which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the enabled attribute. \"ended\" which indicates that the input is not giving any more data and will never provide new data."
        },
        {
          "term": "MediaStreamTrack.remote Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/remote",
          "desc": "Returns a Boolean with a value of true if the track is sourced by a RTCPeerConnection, false otherwise."
        }
      ],
      "methods": [
        {
          "term": "MediaStreamTrack.applyConstraints()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints",
          "desc": "Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the MediaStreamTrack."
        },
        {
          "term": "MediaStreamTrack.clone()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone",
          "desc": "Returns a duplicate of the MediaStreamTrack."
        },
        {
          "term": "MediaStreamTrack.getCapabilities()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities",
          "desc": "Returns the a list of constrainable properties available for the MediaStreamTrack."
        },
        {
          "term": "MediaStreamTrack.getConstraints()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints",
          "desc": "Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints()."
        },
        {
          "term": "MediaStreamTrack.getSettings()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings",
          "desc": "Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties."
        },
        {
          "term": "MediaStreamTrack.stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop",
          "desc": "Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to ended."
        }
      ]
    }
  },
  {
    "title": "MediaStreamTrackAudioSourceNode",
    "calls": {
      "constructors": [
        {
          "term": "new MediaStreamTrackAudioSourceNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode/MediaStreamTrackAudioSourceNode",
          "desc": "Creates a new MediaStreamTrackAudioSourceNode object instance with the specified options."
        }
      ]
    }
  },
  {
    "title": "MediaStreamTrackAudioSourceOptions",
    "calls": {
      "properties": [
        {
          "term": "mediaStreamTrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceOptions/mediaStreamTrack",
          "desc": "The MediaStreamTrack from which to take audio data for this node's output."
        }
      ]
    }
  },
  {
    "title": "MediaStreamTrackEvent",
    "calls": {
      "constructors": [
        {
          "term": "MediaStreamTrackEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent/MediaStreamTrackEvent",
          "desc": "Constructs a new MediaStreamTrackEvent with the specified configuration."
        }
      ],
      "properties": [
        {
          "term": "track Read only",
          "link": null,
          "desc": "A MediaStreamTrack object representing the track which was added to the stream."
        }
      ]
    }
  },
  {
    "title": "MediaTrackConstraints",
    "calls": {}
  },
  {
    "title": "MediaTrackSettings",
    "calls": {}
  },
  {
    "title": "MediaTrackSupportedConstraints",
    "calls": {
      "properties": [
        {
          "term": "autoGainControl",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl",
          "desc": "A Boolean whose value is true if the autoGainControl constraint is supported in the current environment."
        },
        {
          "term": "width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width",
          "desc": "A Boolean value whose value is true if the width constraint is supported in the current environment."
        },
        {
          "term": "height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height",
          "desc": "A Boolean value whose value is true if the height constraint is supported in the current environment."
        },
        {
          "term": "aspectRatio",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio",
          "desc": "A Boolean value whose value is true if the aspectRatio constraint is supported in the current environment."
        },
        {
          "term": "frameRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate",
          "desc": "A Boolean value whose value is true if the frameRate constraint is supported in the current environment."
        },
        {
          "term": "facingMode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode",
          "desc": "A Boolean value whose value is true if the facingMode constraint is supported in the current environment."
        },
        {
          "term": "resizeMode",
          "link": "",
          "desc": "A Boolean value whose value is true if the resizeMode constraint is supported in the current environment."
        },
        {
          "term": "volume",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/volume",
          "desc": "A Boolean value whose value is true if the volume constraint is supported in the current environment."
        },
        {
          "term": "sampleRate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate",
          "desc": "A Boolean value whose value is true if the sampleRate constraint is supported in the current environment."
        },
        {
          "term": "sampleSize",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize",
          "desc": "A Boolean value whose value is true if the sampleSize constraint is supported in the current environment."
        },
        {
          "term": "echoCancellation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation",
          "desc": "A Boolean value whose value is true if the echoCancellation constraint is supported in the current environment."
        },
        {
          "term": "latency",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency",
          "desc": "A Boolean value whose value is true if the latency constraint is supported in the current environment."
        },
        {
          "term": "noiseSuppression",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression",
          "desc": "A Boolean whose value is true if the noiseSuppression constraint is supported in the current environment."
        },
        {
          "term": "channelCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount",
          "desc": "A Boolean value whose value is true if the channelCount constraint is supported in the current environment."
        },
        {
          "term": "deviceId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId",
          "desc": "A Boolean value whose value is true if the deviceId constraint is supported in the current environment."
        },
        {
          "term": "groupId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId",
          "desc": "A Boolean value whose value is true if the groupId constraint is supported in the current environment."
        }
      ]
    }
  },
  {
    "title": "MessageChannel",
    "calls": {
      "constructors": [
        {
          "term": "MessageChannel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/MessageChannel",
          "desc": "Returns a new MessageChannel object with two new MessagePort objects."
        }
      ],
      "properties": [
        {
          "term": "MessageChannel.port1 Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1",
          "desc": "Returns port1 of the channel."
        },
        {
          "term": "MessageChannel.port2 Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2",
          "desc": "Returns port2 of the channel."
        }
      ]
    }
  },
  {
    "title": "MessageEvent",
    "calls": {
      "constructors": [
        {
          "term": "MessageEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent",
          "desc": "Creates a new MessageEvent."
        }
      ],
      "properties": [
        {
          "term": "MessageEvent.data Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data",
          "desc": "The data sent by the message emitter."
        },
        {
          "term": "MessageEvent.origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin",
          "desc": "A USVString representing the origin of the message emitter."
        },
        {
          "term": "MessageEvent.lastEventId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId",
          "desc": "A DOMString representing a unique ID for the event."
        },
        {
          "term": "MessageEvent.source Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source",
          "desc": "A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter."
        },
        {
          "term": "MessageEvent.ports Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports",
          "desc": "An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker)."
        }
      ],
      "methods": [
        {
          "term": "initMessageEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Initializes a message event. Do not use this anymore — use the MessageEvent() constructor instead."
        }
      ]
    }
  },
  {
    "title": "MessagePort",
    "calls": {
      "handlers": [
        {
          "term": "onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage",
          "desc": "An EventListener called when MessageEvent of type message is fired on the port—that is, when the port receives a message."
        },
        {
          "term": "onmessageerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror",
          "desc": "An EventListener called when a MessageEvent of type MessageError is fired—that is, when it receives a message that cannot be deserialized."
        }
      ],
      "methods": [
        {
          "term": "postMessage()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage",
          "desc": "Sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts."
        },
        {
          "term": "start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start",
          "desc": "Starts the sending of messages queued on the port (only needed when using EventTarget.addEventListener; it is implied when using MessagePort.onmessage.)"
        },
        {
          "term": "close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close",
          "desc": "Disconnects the port, so it is no longer active."
        }
      ]
    }
  },
  {
    "title": "Metadata",
    "calls": {
      "properties": [
        {
          "term": "modificationTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Metadata/modificationTime",
          "desc": "A Date object indicating the date and time the entry was modified."
        },
        {
          "term": "size Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Metadata/size",
          "desc": "A 64-bit unsigned integer indicating the size of the entry in bytes."
        }
      ]
    }
  },
  {
    "title": "MIDIAccess",
    "calls": {
      "properties": [
        {
          "term": "MIDIAccess.inputs Read only",
          "link": "",
          "desc": "Returns an instance of MIDIInputMap which provides access to any available MIDI input ports."
        },
        {
          "term": "MIDIAccess.outputs Read only",
          "link": "",
          "desc": "Returns an instance of MIDIOutputMap which provides access to any available MIDI output ports."
        },
        {
          "term": "MIDIAccess.sysexEnabled Read only",
          "link": "",
          "desc": "A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance."
        }
      ],
      "handlers": [
        {
          "term": "MIDIAccess.onstatechange",
          "link": "",
          "desc": "Called whenever a new MIDI port is added or an existing port changes state."
        }
      ]
    }
  },
  {
    "title": "MIDIConnectionEvent",
    "calls": {
      "constructors": [
        {
          "term": "MIDIConnectionEvent.MIDIConnectionEvent",
          "link": "",
          "desc": "Creates a new MIDIConnectionEvent object."
        }
      ],
      "properties": [
        {
          "term": "MIDIConnectionEvent.port",
          "link": "",
          "desc": "Returns a reference to a MIDIPort instance for a port that has been connected or disconnected.\""
        }
      ]
    }
  },
  {
    "title": "MIDIInput",
    "calls": {
      "handlers": [
        {
          "term": "MIDIInput.onmidimessage",
          "link": "",
          "desc": "When the current port receives a MIDIMessage it triggers a call to this event handler."
        }
      ]
    }
  },
  {
    "title": "MIDIInputMap",
    "calls": {}
  },
  {
    "title": "MIDIMessageEvent",
    "calls": {
      "constructors": [
        {
          "term": "MIDIMessageEvent.MIDIMessageEvent",
          "link": "",
          "desc": "Creates a new MIDIMessageEvent object instance."
        }
      ],
      "properties": [
        {
          "term": "MIDIConnectionEvent.data",
          "link": "",
          "desc": "A Uint8Array containing the data bytes of a single MIDI message. See the MIDI specification for more information on its form."
        }
      ]
    }
  },
  {
    "title": "MIDIOutputMap",
    "calls": {}
  },
  {
    "title": "MimeType",
    "calls": {
      "properties": [
        {
          "term": "MimeType.type",
          "link": "",
          "desc": "Returns the MIME type of the associated plugin."
        },
        {
          "term": "MimeType.description",
          "link": "",
          "desc": "Returns a description of the associated plugin or an empty string if there is none."
        },
        {
          "term": "MimeType.suffixes",
          "link": "",
          "desc": "A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list but support more file extensions than can be anticipated. It might therefore return an empty string."
        },
        {
          "term": "MimeType.enabledPlugin",
          "link": "",
          "desc": "Returns an instance of Plugin containing information about the plugin itself."
        }
      ]
    }
  },
  {
    "title": "MimeTypeArray",
    "calls": {
      "properties": [
        {
          "term": "MimeTypeArray.length",
          "link": "",
          "desc": "The number of items in the array."
        }
      ],
      "methods": [
        {
          "term": "MimeTypeArray.item()",
          "link": "",
          "desc": "Returns the MimeType object with the specified index."
        },
        {
          "term": "MimeTypeArray.namedItem()",
          "link": "",
          "desc": "Returns the MimeType object with the specified name."
        }
      ]
    }
  },
  {
    "title": "MouseEvent",
    "calls": {
      "constructors": [
        {
          "term": "MouseEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent",
          "desc": "Creates a MouseEvent object."
        }
      ],
      "properties": [
        {
          "term": "MouseEvent.altKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey",
          "desc": "Returns true if the alt key was down when the mouse event was fired."
        },
        {
          "term": "MouseEvent.button Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button",
          "desc": "The button number that was pressed (if applicable) when the mouse event was fired."
        },
        {
          "term": "MouseEvent.buttons Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons",
          "desc": "The buttons being depressed (if any) when the mouse event was fired."
        },
        {
          "term": "MouseEvent.clientX Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX",
          "desc": "The X coordinate of the mouse pointer in local (DOM content) coordinates."
        },
        {
          "term": "MouseEvent.clientY Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY",
          "desc": "The Y coordinate of the mouse pointer in local (DOM content) coordinates."
        },
        {
          "term": "MouseEvent.ctrlKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey",
          "desc": "Returns true if the control key was down when the mouse event was fired."
        },
        {
          "term": "MouseEvent.metaKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey",
          "desc": "Returns true if the meta key was down when the mouse event was fired."
        },
        {
          "term": "MouseEvent.movementX Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX",
          "desc": "The X coordinate of the mouse pointer relative to the position of the last mousemove event."
        },
        {
          "term": "MouseEvent.movementY Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY",
          "desc": "The Y coordinate of the mouse pointer relative to the position of the last mousemove event."
        },
        {
          "term": "MouseEvent.offsetX Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX",
          "desc": "The X coordinate of the mouse pointer relative to the position of the padding edge of the target node."
        },
        {
          "term": "MouseEvent.offsetY Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY",
          "desc": "The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node."
        },
        {
          "term": "MouseEvent.pageX Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX",
          "desc": "The X coordinate of the mouse pointer relative to the whole document."
        },
        {
          "term": "MouseEvent.pageY Read only \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY",
          "desc": "The Y coordinate of the mouse pointer relative to the whole document."
        },
        {
          "term": "MouseEvent.region Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/region",
          "desc": "Returns the id of the hit region affected by the event. If no hit region is affected, null is returned."
        },
        {
          "term": "MouseEvent.relatedTarget Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget",
          "desc": "The secondary target for the event, if there is one."
        },
        {
          "term": "MouseEvent.screenX Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX",
          "desc": "The X coordinate of the mouse pointer in global (screen) coordinates."
        },
        {
          "term": "MouseEvent.screenY Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY",
          "desc": "The Y coordinate of the mouse pointer in global (screen) coordinates."
        },
        {
          "term": "MouseEvent.shiftKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey",
          "desc": "Returns true if the shift key was down when the mouse event was fired."
        },
        {
          "term": "MouseEvent.which \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which",
          "desc": "The button being pressed when the mouse event was fired."
        },
        {
          "term": "MouseEvent.mozPressure \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.\n    \n Read only",
          "link": "",
          "desc": "The amount of pressure applied to a touch or tablet device when generating the event; this value ranges between 0.0 (minimum pressure) and 1.0 (maximum pressure). Instead of using this deprecated (and non-standard) property, you should instead use PointerEvent and look at its pressure property."
        },
        {
          "term": "MouseEvent.mozInputSource \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/mozInputSource",
          "desc": "The type of device that generated the event (one of the MOZ_SOURCE_* constants listed below). This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event)."
        },
        {
          "term": "MouseEvent.webkitForce \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/webkitForce",
          "desc": "The amount of pressure applied when clicking"
        },
        {
          "term": "MouseEvent.x \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x",
          "desc": "Alias for MouseEvent.clientX."
        },
        {
          "term": "MouseEvent.y \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y",
          "desc": "Alias for MouseEvent.clientY"
        }
      ],
      "methods": [
        {
          "term": "MouseEvent.getModifierState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState",
          "desc": "Returns the current state of the specified modifier key. See KeyboardEvent.getModifierState() for details."
        },
        {
          "term": "MouseEvent.initMouseEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent",
          "desc": "Initializes the value of a MouseEvent created. If the event has already being dispatched, this method does nothing."
        }
      ]
    }
  },
  {
    "title": "msCaching",
    "calls": {}
  },
  {
    "title": "msCachingEnabled",
    "calls": {}
  },
  {
    "title": "MSCandidateWindowHide",
    "calls": {}
  },
  {
    "title": "MSCandidateWindowShow",
    "calls": {}
  },
  {
    "title": "MSCandidateWindowUpdate",
    "calls": {}
  },
  {
    "title": "msCapsLockWarningOff",
    "calls": {}
  },
  {
    "title": "msFirstPaint",
    "calls": {}
  },
  {
    "title": "MSGestureEvent",
    "calls": {
      "constructors": [
        {
          "term": "MSGestureEvent()",
          "link": "",
          "desc": "Creates an MSGestureEvent object."
        }
      ],
      "properties": [
        {
          "term": "MSGestureEvent.expansion Read only",
          "link": "",
          "desc": "The diameter of the gesture area. For example, the distance between fingers."
        },
        {
          "term": "MSGestureEvent.gestureObject Read only",
          "link": "",
          "desc": "Returns the MSGesture object for this gesture event."
        },
        {
          "term": "MSGestureEvent.rotation Read only",
          "link": "",
          "desc": "Amount of rotation (in radians) since the previous MSGestureEvent of the current gesture. Positive values indicate clockwise rotation; negative values indicate anticlockwise rotation."
        },
        {
          "term": "MSGestureEvent.scale Read only",
          "link": "",
          "desc": "The difference in scale (for zoom gestures) from the previous MSGestureEvent of the current gesture."
        },
        {
          "term": "MSGestureEvent.translationX Read only",
          "link": "",
          "desc": "Distance traversed along the X-axis since the previous MSGestureEvent of the current gesture"
        },
        {
          "term": "MSGestureEvent.translationY Read only",
          "link": "",
          "desc": "Distance traversed along the Y-axis since the previous MSGestureEvent of the current gesture"
        },
        {
          "term": "MSGestureEvent.velocityAngular Read only",
          "link": "",
          "desc": "Angular velocity. Expressed in radians."
        },
        {
          "term": "MSGestureEvent.velocityExpansion Read only",
          "link": "",
          "desc": "The velocity of the expansion of the gesture area."
        },
        {
          "term": "MSGestureEvent.velocityX Read only",
          "link": "",
          "desc": "Velocity along the direction of the X-axis."
        },
        {
          "term": "MSGestureEvent.velocityY Read only",
          "link": "",
          "desc": "Velocity along the direction of the Y-axis."
        }
      ],
      "methods": [
        {
          "term": "MSGestureEvent.initGestureEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Initializes the value of an MSGestureEvent. If the event has already being dispatched, this method does nothing. This method is deprecated as of Microsoft Edge."
        }
      ]
    }
  },
  {
    "title": "msGetPropertyEnabled",
    "calls": {}
  },
  {
    "title": "msGetRegionContent",
    "calls": {}
  },
  {
    "title": "MSGraphicsTrust",
    "calls": {}
  },
  {
    "title": "msGraphicsTrustStatus",
    "calls": {}
  },
  {
    "title": "msIsBoxed",
    "calls": {}
  },
  {
    "title": "MSManipulationEvent",
    "calls": {}
  },
  {
    "title": "msPlayToDisabled",
    "calls": {}
  },
  {
    "title": "msPlayToPreferredSourceUri",
    "calls": {}
  },
  {
    "title": "msPlayToPrimary",
    "calls": {}
  },
  {
    "title": "msPlayToSource",
    "calls": {}
  },
  {
    "title": "msPutPropertyEnabled",
    "calls": {}
  },
  {
    "title": "MSRangeCollection",
    "calls": {}
  },
  {
    "title": "msRealTime",
    "calls": {}
  },
  {
    "title": "msRegionOverflow",
    "calls": {}
  },
  {
    "title": "msSetMediaProtectionManager",
    "calls": {}
  },
  {
    "title": "MSSiteModeEvent",
    "calls": {}
  },
  {
    "title": "mssitemodejumplistitemremoved",
    "calls": {}
  },
  {
    "title": "msthumbnailclick",
    "calls": {}
  },
  {
    "title": "msWriteProfilerMark",
    "calls": {}
  },
  {
    "title": "MutationObserver",
    "calls": {
      "constructors": [
        {
          "term": "MutationObserver()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver",
          "desc": "Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur."
        }
      ],
      "methods": [
        {
          "term": "disconnect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect",
          "desc": "Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again."
        },
        {
          "term": "observe()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe",
          "desc": "Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur."
        },
        {
          "term": "takeRecords()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords",
          "desc": "Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects."
        }
      ]
    }
  },
  {
    "title": "MutationObserverInit",
    "calls": {
      "properties": [
        {
          "term": "subtree Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/subtree",
          "desc": "Set to true to extend monitoring to the entire subtree of nodes rooted at target. All of the other MutationObserverInit properties are then extended to all of the nodes in the subtree instead of applying solely to the target node. The default value is false."
        },
        {
          "term": "childList Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/childList",
          "desc": "Set to true to monitor the target node (and, if subtree is true, its descendants) for the addition of new child nodes or removal of existing child nodes. The default value is false."
        },
        {
          "term": "attributes Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributes",
          "desc": "Set to true to watch for changes to the value of attributes on the node or nodes being monitored. The default value is true if either of attributeFilter or attributeOldValue is specified, otherwise the default value is false."
        },
        {
          "term": "attributeFilter Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributeFilter",
          "desc": "An array of specific attribute names to be monitored. If this property isn't included, changes to all attributes cause mutation notifications."
        },
        {
          "term": "attributeOldValue Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributeOldValue",
          "desc": "Set to true to record the previous value of any attribute that changes when monitoring the node or nodes for attribute changes; see Monitoring attribute values in MutationObserver for details on watching for attribute changes and value recording. The default value is false."
        },
        {
          "term": "characterData Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/characterData",
          "desc": "Set to true to monitor the specified target node (and, if subtree is true, its descendants) for changes to the character data contained within the node or nodes. The default value is true if characterDataOldValue is specified, otherwise the default value is false."
        },
        {
          "term": "characterDataOldValue Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/characterDataOldValue",
          "desc": "Set to true to record the previous value of a node's text whenever the text changes on nodes being monitored. For details and an example, see Monitoring text content changes in MutationObserver. The default value is false."
        }
      ]
    }
  },
  {
    "title": "MutationRecord",
    "calls": {}
  },
  {
    "title": "NamedNodeMap",
    "calls": {
      "properties": [
        {
          "term": "NamedNodeMap.length Read only",
          "link": "",
          "desc": "Returns the amount of objects in the map."
        }
      ],
      "methods": [
        {
          "term": "NamedNodeMap.getNamedItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem",
          "desc": "Returns a Attr, corresponding to the given name."
        },
        {
          "term": "NamedNodeMap.setNamedItem()",
          "link": "",
          "desc": "Replaces, or adds, the Attr identified in the map by the given name."
        },
        {
          "term": "NamedNodeMap.removeNamedItem()",
          "link": "",
          "desc": "Removes the Attr identified by the given map."
        },
        {
          "term": "NamedNodeMap.item()",
          "link": "",
          "desc": "Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes."
        },
        {
          "term": "NamedNodeMap.getNamedItemNS()",
          "link": "",
          "desc": "Returns a Attr identified by a namespace and related local name."
        },
        {
          "term": "NamedNodeMap.setNamedItemNS()",
          "link": "",
          "desc": "Replaces, or adds, the Attr identified in the map by the given namespace and related local name."
        },
        {
          "term": "NamedNodeMap.removeNamedItemNS()",
          "link": "",
          "desc": "Removes the Attr identified by the given namespace and related local name."
        }
      ]
    }
  },
  {
    "title": "NavigationPreloadManager",
    "calls": {
      "methods": [
        {
          "term": "NavigationPreloadManager.enable()",
          "link": "",
          "desc": "Enables navigation preloading and returns a Promise that resolves."
        },
        {
          "term": "NavigationPreloadManager.disable()",
          "link": "",
          "desc": "Disables navigation preloading and returns a Promise that resolves."
        },
        {
          "term": "NavigationPreloadManager.setHeaderValue()",
          "link": "",
          "desc": "Sets the value of the Service-Worker-Navigation-Preload header and returns an empty Promise."
        },
        {
          "term": "NavigationPreloadManager.getState()",
          "link": "",
          "desc": "Returns a Promise that resolves to an object with properties indicating whether preload is enabled and the contents of the Service-Worker-Navigation-Preload."
        }
      ]
    }
  },
  {
    "title": "Navigator",
    "calls": {
      "methods": [
        {
          "term": "Navigator.canShare()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare",
          "desc": "Returns true if a call to Navigator.share() would succeed."
        },
        {
          "term": "Navigator.registerProtocolHandler()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler",
          "desc": "Allows web sites to register themselves as a possible handler for a given protocol."
        },
        {
          "term": "Navigator.requestMediaKeySystemAccess()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess",
          "desc": "Returns a Promise for a MediaKeySystemAccess object."
        },
        {
          "term": "Navigator.sendBeacon()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon",
          "desc": "Used to asynchronously transfer a small amount of data using HTTP from the User Agent to a web server."
        },
        {
          "term": "Navigator.share()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share",
          "desc": "Invokes the native sharing mechanism of the current platform."
        },
        {
          "term": "Navigator.vibrate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate",
          "desc": "Causes vibration on devices with support for it. Does nothing if vibration support isn't available."
        }
      ]
    }
  },
  {
    "title": "NavigatorConcurrentHardware",
    "calls": {
      "properties": [
        {
          "term": "NavigatorConcurrentHardware.hardwareConcurrency Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency",
          "desc": "Returns the number of logical processors which may be available to the user agent. This value is always at least 1, and will be 1 if the actual number of logical processors can't be determined."
        }
      ]
    }
  },
  {
    "title": "NavigatorID",
    "calls": {
      "properties": [
        {
          "term": "NavigatorID.appCodeName Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName",
          "desc": "Always returns \"Mozilla\", in any browser. This property is kept only for compatibility purposes."
        },
        {
          "term": "NavigatorID.appName Read only   \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName",
          "desc": "Always returns \"Netscape\", in any browser. This property is kept only for compatibility purposes."
        },
        {
          "term": "NavigatorID.appVersion Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion",
          "desc": "Returns either \"4.0\" or a string representing version information about the browser. Do not rely on this property to return a useful value."
        },
        {
          "term": "NavigatorID.platform Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform",
          "desc": "Returns either the empty string or a string representing the platform the browser is running on. Do not rely on this property to return a useful value."
        },
        {
          "term": "NavigatorID.product Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product",
          "desc": "Always returns \"Gecko\", in any browser. This property is kept only for compatibility purposes."
        },
        {
          "term": "NavigatorID.userAgent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent",
          "desc": "Returns the user-agent string for the current browser."
        }
      ],
      "methods": [
        {
          "term": "NavigatorID.taintEnabled() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled",
          "desc": "Always returns false. JavaScript taint/untaint functions were removed in JavaScript 1.2. This method is only kept for compatibility purposes. Not available in workers."
        }
      ]
    }
  },
  {
    "title": "NavigatorLanguage",
    "calls": {
      "properties": [
        {
          "term": "NavigatorLanguage.language Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language",
          "desc": "Returns a DOMString representing the preferred language of the user, usually the language of the browser UI. The null value is returned when this is unknown."
        },
        {
          "term": "NavigatorLanguage.languages Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages",
          "desc": "Returns an array of DOMString representing the languages known to the user, by order of preference."
        }
      ]
    }
  },
  {
    "title": "NavigatorOnLine",
    "calls": {
      "properties": [
        {
          "term": "NavigatorOnLine.onLine Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine",
          "desc": "Returns a Boolean indicating whether the browser is working online."
        }
      ]
    }
  },
  {
    "title": "NavigatorStorage",
    "calls": {
      "properties": [
        {
          "term": "storage Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage",
          "desc": "Returns the StorageManager singleton object which is used to access the Storage Manager. Through the returned object, you can control persistence of data stores as well as get estimates of how much space is left for your site or appliation to store data."
        }
      ]
    }
  },
  {
    "title": "NDEFMessage",
    "calls": {
      "constructors": [
        {
          "term": "NDEFMessage.NDEFMessage() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a new NDEFMessage containing specified data."
        }
      ]
    }
  },
  {
    "title": "NDEFReader",
    "calls": {
      "constructors": [
        {
          "term": "NDEFReader.NDEFReader() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader/NDEFReader",
          "desc": "Returns an NDEFReader with configuration specified in the parameters or default ones if no parameters are specified."
        }
      ],
      "properties": [
        {
          "term": "NDEFReader.onreading \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader/onreading",
          "desc": "An event handler for reading event, that notifies about availability of a new reading."
        },
        {
          "term": "NDEFReader.onreadingerror \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader/onreadingerror",
          "desc": "An event handler for the readingerror event, which is fired when an error occurs during reading."
        }
      ],
      "methods": [
        {
          "term": "NDEFReader.scan() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader/scan",
          "desc": "Called to activate the reader (after ensuring hardware and UA compatibility and obtaining permission from the user) or get an error explaining why feature is not available."
        },
        {
          "term": "NDEFReader.write() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader/write",
          "desc": "Called to write NDEF message to a tag (after ensuring hardware and UA compatibility and obtaining permission from the user) or get an error explaining why feature is not available."
        }
      ]
    }
  },
  {
    "title": "NDEFReadingEvent",
    "calls": {
      "constructors": [
        {
          "term": "NDEFReadingEvent.NDEFReadingEvent()",
          "link": "",
          "desc": "Creates an NDEFReadingEvent event with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "NDEFReadingEvent.serialNumber Read only",
          "link": "",
          "desc": "Represents the serial number of the device used for anti-collision and identification, or empty string in case none is available."
        },
        {
          "term": "NDEFReadingEvent.message Read only",
          "link": "",
          "desc": "Represents the received message as an NDEFMessage object."
        }
      ]
    }
  },
  {
    "title": "NDEFRecord",
    "calls": {
      "constructors": [
        {
          "term": "NDEFRecord() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFRecord/NDEFRecord",
          "desc": "Returns a new NDEFRecord with configuration specified in the parameters or default ones if no parameters are specified."
        }
      ],
      "methods": [
        {
          "term": "NDEFRecord.toRecords() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFRecord/toRecords",
          "desc": "Coverts NDEFRecord.data to sequence of records."
        }
      ]
    }
  },
  {
    "title": "Node",
    "calls": {
      "properties": [
        {
          "term": "Node.baseURIRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI",
          "desc": "Returns a DOMString representing the base URL of the document containing the Node."
        },
        {
          "term": "Node.childNodesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes",
          "desc": "Returns a live NodeList containing all the children of this node (including elements, text and comments). NodeList being live means that if the children of the Node change, the NodeList object is automatically updated."
        },
        {
          "term": "Node.firstChildRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild",
          "desc": "Returns a Node representing the first direct child node of the node, or null if the node has no child."
        },
        {
          "term": "Node.isConnectedRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected",
          "desc": "A boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM."
        },
        {
          "term": "Node.lastChildRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild",
          "desc": "Returns a Node representing the last direct child node of the node, or null if the node has no child."
        },
        {
          "term": "Node.nextSiblingRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling",
          "desc": "Returns a Node representing the next node in the tree, or null if there isn't such node."
        },
        {
          "term": "Node.nodeNameRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName",
          "desc": "Returns a DOMString containing the name of the Node. The structure of the name will differ with the node type. E.g. An HTMLElement will contain the name of the corresponding tag, like 'audio' for an HTMLAudioElement, a Text node will have the '#text' string, or a Document node will have the '#document' string."
        },
        {
          "term": "Node.nodeTypeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType",
          "desc": "Returns an unsigned short representing the type of the node. Possible values are: Name Value ELEMENT_NODE 1 ATTRIBUTE_NODE This deprecated API should no longer be used, but will probably still work. 2 TEXT_NODE 3 CDATA_SECTION_NODE 4 ENTITY_REFERENCE_NODE This deprecated API should no longer be used, but will probably still work. 5 ENTITY_NODE This deprecated API should no longer be used, but will probably still work. 6 PROCESSING_INSTRUCTION_NODE 7 COMMENT_NODE 8 DOCUMENT_NODE 9 DOCUMENT_TYPE_NODE 10 DOCUMENT_FRAGMENT_NODE 11 NOTATION_NODE This deprecated API should no longer be used, but will probably still work. 12"
        },
        {
          "term": "Node.nodeValue",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue",
          "desc": "Returns / Sets the value of the current node."
        },
        {
          "term": "Node.ownerDocumentRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument",
          "desc": "Returns the Document that this node belongs to. If the node is itself a document, returns null."
        },
        {
          "term": "Node.parentNodeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode",
          "desc": "Returns a Node that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns null."
        },
        {
          "term": "Node.parentElementRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement",
          "desc": "Returns an Element that is the parent of this node. If the node has no parent, or if that parent is not an Element, this property returns null."
        },
        {
          "term": "Node.previousSiblingRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling",
          "desc": "Returns a Node representing the previous node in the tree, or null if there isn't such node."
        },
        {
          "term": "Node.textContent",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent",
          "desc": "Returns / Sets the textual content of an element and all its descendants."
        }
      ],
      "methods": [
        {
          "term": "Node.appendChild(childNode)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild",
          "desc": "Adds the specified childNode argument as the last child to the current node. If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position."
        },
        {
          "term": "Node.cloneNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",
          "desc": "Clone a Node, and optionally, all of its contents. By default, it clones the content of the node."
        },
        {
          "term": "Node.compareDocumentPosition()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition",
          "desc": "Compares the position of the current node against another node in any other document."
        },
        {
          "term": "Node.contains()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/contains",
          "desc": "Returns a Boolean value indicating whether or not a node is a descendant of the calling node."
        },
        {
          "term": "Node.getBoxQuads() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a list of the node's CSS boxes relative to another node."
        },
        {
          "term": "Node.getRootNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode",
          "desc": "Returns the context object's root which optionally includes the shadow root if it is available."
        },
        {
          "term": "Node.hasChildNodes()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes",
          "desc": "Returns a Boolean indicating whether or not the element has any child nodes."
        },
        {
          "term": "Node.insertBefore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore",
          "desc": "Inserts a Node before the reference node as a child of a specified parent node."
        },
        {
          "term": "Node.isDefaultNamespace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace",
          "desc": "Accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not."
        },
        {
          "term": "Node.isEqualNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode",
          "desc": "Returns a Boolean which indicates whether or not two nodes are of the same type and all their defining data points match."
        },
        {
          "term": "Node.isSameNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode",
          "desc": "Returns a Boolean value indicating whether or not the two nodes are the same (that is, they reference the same object)."
        },
        {
          "term": "Node.lookupPrefix()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix",
          "desc": "Returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent."
        },
        {
          "term": "Node.lookupNamespaceURI()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI",
          "desc": "Accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace."
        },
        {
          "term": "Node.normalize()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize",
          "desc": "Clean up all the text nodes under this element (merge adjacent, remove empty)."
        },
        {
          "term": "Node.removeChild()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild",
          "desc": "Removes a child node from the current element, which must be a child of the current node."
        },
        {
          "term": "Node.replaceChild()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild",
          "desc": "Replaces one child Node of the current one with the second one given in parameter."
        }
      ]
    }
  },
  {
    "title": "NodeFilter",
    "calls": {
      "methods": [
        {
          "term": "NodeFilter.acceptNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode",
          "desc": "Returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are: Constant Description FILTER_ACCEPT Value returned by the NodeFilter.acceptNode() method when a node should be accepted. FILTER_REJECT Value to be returned by the NodeFilter.acceptNode() method when a node should be rejected. For TreeWalker, child nodes are also rejected. For NodeIterator, this flag is synonymous with FILTER_SKIP. FILTER_SKIP Value to be returned by NodeFilter.acceptNode() for nodes to be skipped by the NodeIterator or TreeWalker object. The children of skipped nodes are still considered. This is treated as \"skip this node but not its children\"."
        }
      ]
    }
  },
  {
    "title": "NodeIterator",
    "calls": {
      "properties": [
        {
          "term": "NodeIterator.root Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root",
          "desc": "Returns a Node representing the root node as specified when the NodeIterator was created."
        },
        {
          "term": "NodeIterator.whatToShow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow",
          "desc": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are: Constant Numerical value Description NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE This is an obsolete API and is no longer guaranteed to work. 2 Shows attribute Attr nodes. This is meaningful only when creating a NodeIterator with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION This is an obsolete API and is no longer guaranteed to work. 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY This is an obsolete API and is no longer guaranteed to work. 32 Shows Entity nodes. This is meaningful only when creating a NodeIterator with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree. NodeFilter.SHOW_ENTITY_REFERENCE This is an obsolete API and is no longer guaranteed to work. 16 Shows EntityReference nodes. NodeFilter.SHOW_NOTATION This is an obsolete API and is no longer guaranteed to work. 2048 Shows Notation nodes. This is meaningful only when creating a NodeIterator with a Notation node as its root; in this case, it means that the Notation node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes."
        },
        {
          "term": "NodeIterator.filter Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter",
          "desc": "Returns a NodeFilter used to select the relevant nodes."
        },
        {
          "term": "NodeIterator.expandEntityReferences Read only \n\t\t\n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences",
          "desc": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time."
        },
        {
          "term": "NodeIterator.referenceNode Read only \n\t\t\n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode",
          "desc": "Returns the Node to which the iterator is anchored."
        },
        {
          "term": "NodeIterator.pointerBeforeReferenceNode Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode",
          "desc": "Returns a Boolean flag that indicates whether the NodeIterator is anchored before, the flag being true, or after, the flag being false, the anchor node."
        }
      ],
      "methods": [
        {
          "term": "NodeIterator.detach() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach",
          "desc": "This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the NodeIterator was no more used, but this is now useless."
        },
        {
          "term": "NodeIterator.previousNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode",
          "desc": "Returns the previous Node in the document, or null if there are none."
        },
        {
          "term": "NodeIterator.nextNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode",
          "desc": "Returns the next Node in the document, or null if there are none."
        }
      ]
    }
  },
  {
    "title": "NodeList",
    "calls": {
      "properties": [
        {
          "term": "NodeList.length",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/length",
          "desc": "The number of nodes in the NodeList."
        }
      ],
      "methods": [
        {
          "term": "NodeList.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item",
          "desc": "Returns an item in the list by its index, or null if the index is out-of-bounds."
        },
        {
          "term": "NodeList.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item",
          "desc": "An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations."
        },
        {
          "term": "NodeList.entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/entries",
          "desc": "Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)"
        },
        {
          "term": "NodeList.forEach()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach",
          "desc": "Executes a provided function once per NodeList element, passing the element as an argument to the function."
        },
        {
          "term": "NodeList.keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/keys",
          "desc": "Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)"
        },
        {
          "term": "NodeList.values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/values",
          "desc": "Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection."
        }
      ]
    }
  },
  {
    "title": "NonDocumentTypeChildNode",
    "calls": {
      "properties": [
        {
          "term": "NonDocumentTypeChildNode.previousElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling",
          "desc": "Returns the Element immediately prior to this node in its parent's children list, or null if there is no Element in the list prior to this node."
        },
        {
          "term": "NonDocumentTypeChildNode.nextElementSibling Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling",
          "desc": "Returns the Element immediately following this node in its parent's children list, or null if there is no Element in the list following this node."
        }
      ]
    }
  },
  {
    "title": "Notification",
    "calls": {
      "constructors": [
        {
          "term": "Notification()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification",
          "desc": "Creates a new instance of the Notification object."
        }
      ]
    }
  },
  {
    "title": "NotificationAction",
    "calls": {}
  },
  {
    "title": "OES_element_index_uint",
    "calls": {}
  },
  {
    "title": "OES_fbo_render_mipmap",
    "calls": {}
  },
  {
    "title": "OES_standard_derivatives",
    "calls": {}
  },
  {
    "title": "OES_texture_float_linear",
    "calls": {}
  },
  {
    "title": "OES_texture_float",
    "calls": {}
  },
  {
    "title": "OES_texture_half_float_linear",
    "calls": {}
  },
  {
    "title": "OES_texture_half_float",
    "calls": {}
  },
  {
    "title": "OES_vertex_array_object",
    "calls": {
      "methods": [
        {
          "term": "ext.createVertexArrayOES()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/createVertexArrayOES",
          "desc": "Creates a new WebGLVertexArrayObject."
        },
        {
          "term": "ext.deleteVertexArrayOES()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES",
          "desc": "Deletes a given WebGLVertexArrayObject."
        },
        {
          "term": "ext.isVertexArrayOES()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/isVertexArrayOES",
          "desc": "Returns true if a given object is a WebGLVertexArrayObject."
        },
        {
          "term": "ext.bindVertexArrayOES()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES",
          "desc": "Binds a given WebGLVertexArrayObject to the buffer."
        }
      ]
    }
  },
  {
    "title": "OfflineAudioCompletionEvent",
    "calls": {
      "constructors": [
        {
          "term": "OfflineAudioCompletionEvent.OfflineAudioCompletionEvent",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/OfflineAudioCompletionEvent",
          "desc": "Creates a new OfflineAudioCompletionEvent object instance."
        }
      ],
      "properties": [
        {
          "term": "OfflineAudioCompletionEvent.renderedBuffer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer",
          "desc": "An AudioBuffer containing the result of processing an OfflineAudioContext."
        }
      ]
    }
  },
  {
    "title": "OfflineAudioContext",
    "calls": {
      "constructors": [
        {
          "term": "OfflineAudioContext.OfflineAudioContext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/OfflineAudioContext",
          "desc": "Creates a new OfflineAudioContext instance."
        }
      ],
      "properties": [
        {
          "term": "OfflineAudioContext.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length",
          "desc": "An integer representing the size of the buffer in sample-frames."
        }
      ],
      "handlers": [
        {
          "term": "OfflineAudioContext.oncomplete",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete",
          "desc": "Is an EventHandler called when processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised, after the event-based version of OfflineAudioContext.startRendering() is used."
        }
      ],
      "methods": [
        {
          "term": "OfflineAudioContext.suspend()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend",
          "desc": "Schedules a suspension of the time progression in the audio context at the specified time and returns a promise."
        },
        {
          "term": "OfflineAudioContext.startRendering()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering",
          "desc": "Starts rendering the audio, taking into account the current connections and the current scheduled changes. This page covers both the event-based version and the promise-based version."
        }
      ]
    }
  },
  {
    "title": "OrientationSensor",
    "calls": {
      "properties": [
        {
          "term": "OrientationSensor.quaternion",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OrientationSensor/quaternion",
          "desc": "Returns a four element Array whose elements contain the components of the unit quaternion representing the device's orientation."
        }
      ],
      "methods": [
        {
          "term": "OrientationSensor.populateMatrix()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OrientationSensor/populateMatrix",
          "desc": "Populates the given object with the rotation matrix based on the latest sensor reading. The rotation maxtrix is shown below."
        }
      ]
    }
  },
  {
    "title": "OscillatorNode",
    "calls": {
      "constructors": [
        {
          "term": "OscillatorNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/OscillatorNode",
          "desc": "Creates a new instance of an OscillatorNode object, optionally providing an object specifying default values for the node's properties. If the default values are acceptable, you can call the BaseAudioContext.createOscillator() factory method."
        }
      ],
      "properties": [
        {
          "term": "OscillatorNode.frequency",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency",
          "desc": "An a-rate AudioParam representing the frequency of oscillation in hertz (though the AudioParam returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note)."
        },
        {
          "term": "OscillatorNode.detune",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune",
          "desc": "An a-rate AudioParam representing detuning of oscillation in cents (though the AudioParam returned is read-only, the value it represents is not). The default value is 0."
        },
        {
          "term": "OscillatorNode.type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type",
          "desc": "A string which specifies the shape of waveform to play; this can be one of a number of standard values, or custom to use a PeriodicWave to describe a custom waveform. Different waves will produce different tones. Standard values are \"sine\", \"square\", \"sawtooth\", \"triangle\" and \"custom\". The default is \"sine\"."
        }
      ],
      "handlers": [
        {
          "term": "OscillatorNode.onended",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended",
          "desc": "Sets the event handler for the ended event, which fires when the tone has stopped playing."
        }
      ],
      "methods": [
        {
          "term": "OscillatorNode.setPeriodicWave()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave",
          "desc": "Sets a PeriodicWave which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the type to custom. This replaces the now-obsolete OscillatorNode.setWaveTable() method."
        },
        {
          "term": "OscillatorNode.start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/start",
          "desc": "Specifies the exact time to start playing the tone."
        },
        {
          "term": "OscillatorNode.stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/stop",
          "desc": "Specifies the time to stop playing the tone."
        }
      ]
    }
  },
  {
    "title": "OverconstrainedError",
    "calls": {
      "constructors": [
        {
          "term": "OverconstrainedError.OverconstrainedError()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OverconstrainedError/OverconstrainedError",
          "desc": "Creates a new OverconstrainedError object."
        }
      ],
      "properties": [
        {
          "term": "OverconstrainedError.constraint Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OverconstrainedError/constraint",
          "desc": "Returns the constraint that was supplied in the constructor, meaning the constraint that was not satisfied."
        },
        {
          "term": "OverconstrainedError.message Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/message",
          "desc": "Returns the text supplied in the constructor."
        },
        {
          "term": "OverconstrainedError.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException/name",
          "desc": "Will always return OverconstrainedError."
        }
      ]
    }
  },
  {
    "title": "OVR_multiview2",
    "calls": {
      "methods": [
        {
          "term": "framebufferTextureMultiviewOVR()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR",
          "desc": "Simultaneously renders to multiple elements of a 2D texture array."
        }
      ]
    }
  },
  {
    "title": "PageTransitionEvent",
    "calls": {
      "properties": [
        {
          "term": "PageTransitionEvent.persisted Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent/persisted",
          "desc": "Indicates if the document is loading from a cache."
        }
      ]
    }
  },
  {
    "title": "PaintWorklet",
    "calls": {
      "properties": [
        {
          "term": "PaintWorklet.devicePixelRatio",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/devicePixelRatio",
          "desc": "Returns the current device's ratio of physical pixels to logical pixels."
        }
      ],
      "methods": [
        {
          "term": "PaintWorklet.registerPaint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/registerPaint",
          "desc": "Registers a class programmatically generate an image where a CSS property expects a file."
        },
        {
          "term": "CSS.PaintWorklet.addModule()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule",
          "desc": "The addModule() method, inhertied from the Worklet interface loads the module in the given JavaScript file and adds it to the current PaintWorklet."
        }
      ]
    }
  },
  {
    "title": "PannerNode",
    "calls": {
      "constructors": [
        {
          "term": "PannerNode.PannerNode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/PannerNode",
          "desc": "Creates a new PannerNode object instance."
        }
      ],
      "properties": [
        {
          "term": "PannerNode.coneInnerAngle",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle",
          "desc": "Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction."
        },
        {
          "term": "PannerNode.coneOuterAngle",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle",
          "desc": "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain attribute."
        },
        {
          "term": "PannerNode.coneOuterGain",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain",
          "desc": "A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute. Its default value is 0, meaning that no sound can be heard."
        },
        {
          "term": "PannerNode.distanceModel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel",
          "desc": "An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are \"linear\", \"inverse\" and \"exponential\". The default value is \"inverse\"."
        },
        {
          "term": "PannerNode.maxDistance",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance",
          "desc": "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further."
        },
        {
          "term": "PannerNode.orientationX",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX",
          "desc": "Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate system. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 1."
        },
        {
          "term": "PannerNode.orientationY",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY",
          "desc": "Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
        },
        {
          "term": "PannerNode.orientationZ",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ",
          "desc": "Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
        },
        {
          "term": "PannerNode.panningModel",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel",
          "desc": "An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space."
        },
        {
          "term": "PannerNode.positionX",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX",
          "desc": "Represents the horizontal position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
        },
        {
          "term": "PannerNode.positionY",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY",
          "desc": "Represents the vertical position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
        },
        {
          "term": "PannerNode.positionZ",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ",
          "desc": "Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
        },
        {
          "term": "PannerNode.refDistance",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance",
          "desc": "A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on rolloffFactor and distanceModel."
        },
        {
          "term": "PannerNode.rolloffFactor",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor",
          "desc": "A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models."
        }
      ],
      "methods": [
        {
          "term": "PannerNode.setPosition()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition",
          "desc": "Defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the AudioContext.listener attribute.)"
        },
        {
          "term": "PannerNode.setOrientation()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation",
          "desc": "Defines the direction the audio source is playing in."
        },
        {
          "term": "PannerNode.setVelocity() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setVelocity",
          "desc": "Defines the velocity vector of the audio source — how fast it is moving and in what direction. In a previous version of the specification, the PannerNode had a velocity that could pitch up or down AudioBufferSourceNodes connected downstream. This feature was not clearly specified and had a number of issues, so it was removed from the specification."
        }
      ]
    }
  },
  {
    "title": "ParentNode",
    "calls": {
      "properties": [
        {
          "term": "ParentNode.childElementCount Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount",
          "desc": "Returns the number of children of this ParentNode which are elements."
        },
        {
          "term": "ParentNode.children Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children",
          "desc": "Returns a live HTMLCollection containing all of the Element objects that are children of this ParentNode, omitting all of its non-element nodes."
        },
        {
          "term": "ParentNode.firstElementChild Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild",
          "desc": "Returns the first node which is both a child of this ParentNode and is also an Element, or null if there is none."
        },
        {
          "term": "ParentNode.lastElementChild Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild",
          "desc": "Returns the last node which is both a child of this ParentNode and is an Element, or null if there is none."
        }
      ],
      "methods": [
        {
          "term": "ParentNode.append()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append",
          "desc": "Inserts a set of Node objects or DOMString objects after the last child of the ParentNode. DOMString objects are inserted as equivalent Text nodes."
        },
        {
          "term": "ParentNode.prepend()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend",
          "desc": "Inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes."
        },
        {
          "term": "ParentNode.querySelector()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelector",
          "desc": "Returns the first Element with the current element as root that matches the specified group of selectors."
        },
        {
          "term": "ParentNode.querySelectorAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll",
          "desc": "Returns a NodeList representing a list of elements with the current element as root that matches the specified group of selectors."
        },
        {
          "term": "ParentNode.replaceChildren()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/replaceChildren",
          "desc": "Replaces the existing children of a node with a specified new set of children."
        }
      ]
    }
  },
  {
    "title": "PasswordCredential",
    "calls": {
      "constructors": [
        {
          "term": "PasswordCredential()Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/PasswordCredential",
          "desc": "Creates a new PasswordCredential object."
        }
      ],
      "properties": [
        {
          "term": "PasswordCredential.additionalData \n    This deprecated API should no longer be used, but will probably still work.\n    \nSecure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/additionalData",
          "desc": "One of a FormData instance, a URLSearchParams instance, or null. The data in the objects will be added to the request body and sent to the remote endpoint with the credentials."
        },
        {
          "term": "PasswordCredential.iconURL Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/iconURL",
          "desc": "A USVString containing a URL pointing to an image for an icon. This image is intended for display in a credential chooser. The URL must be accessible without authentication."
        },
        {
          "term": "PasswordCredential.idName \n    This deprecated API should no longer be used, but will probably still work.\n    \nSecure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/idName",
          "desc": "A USVString containing the name that will be used for the ID field when submitting the current object to a remote endpoint via fetch. This property defaults to 'username', but may be overridden to match whatever the backend service expects."
        },
        {
          "term": "PasswordCredential.name Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/name",
          "desc": "A USVString containing a human-readable public name for display in a credential chooser."
        },
        {
          "term": "PasswordCredential.password Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/password",
          "desc": "A USVString containing the password of the credential."
        },
        {
          "term": "PasswordCredential.passwordName \n    This deprecated API should no longer be used, but will probably still work.\n    \nSecure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/passwordName",
          "desc": "A USVString representing the name that will be used for the password field when submitting the current object to a remote endpoint via fetch. This property defaults to 'password', but may be overridden to match whatever the backend service expects."
        }
      ]
    }
  },
  {
    "title": "Path2D",
    "calls": {
      "methods": [
        {
          "term": "Path2D.addPath()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath",
          "desc": "Adds a path to the current path."
        },
        {
          "term": "Path2D.closePath()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath",
          "desc": "Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing."
        },
        {
          "term": "Path2D.moveTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo",
          "desc": "Moves the starting point of a new sub-path to the (x, y) coordinates."
        },
        {
          "term": "Path2D.lineTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo",
          "desc": "Connects the last point in the subpath to the (x, y) coordinates with a straight line."
        },
        {
          "term": "Path2D.bezierCurveTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo",
          "desc": "Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve."
        },
        {
          "term": "Path2D.quadraticCurveTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo",
          "desc": "Adds a quadratic Bézier curve to the current path."
        },
        {
          "term": "Path2D.arc()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc",
          "desc": "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise)."
        },
        {
          "term": "Path2D.arcTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo",
          "desc": "Adds a circular arc to the path with the given control points and radius, connected to the previous point by a straight line."
        },
        {
          "term": "Path2D.ellipse()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse",
          "desc": "Adds an elliptical arc to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise)."
        },
        {
          "term": "Path2D.rect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect",
          "desc": "Creates a path for a rectangle at position (x, y) with a size that is determined by width and height."
        }
      ]
    }
  },
  {
    "title": "PayerErrors",
    "calls": {
      "properties": [
        {
          "term": "email Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PayerErrors/email",
          "desc": "If present, this DOMString is a string describing the validation error from which the payer's email address—as given by PaymentResponse.payerEmail—currently suffers. If this property is absent from the PayerErrors object, the email address passed validation."
        },
        {
          "term": "name Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PayerErrors/name",
          "desc": "If this DOMString is present in the object, the PaymentResponse.payerName property failed validation, and this string explains what needs to be corrected. If this property is absent, the paer name is fine"
        },
        {
          "term": "phone Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PayerErrors/phone",
          "desc": "If present, this string is an error message explaining why the payer's phone number (PaymentResponse.payerPhone) failed validation. This property is absent if the phone number passed validation."
        }
      ]
    }
  },
  {
    "title": "PaymentAddress",
    "calls": {
      "properties": [
        {
          "term": "PaymentAddress.addressLine Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/addressLine",
          "desc": "An array of DOMString objects providing each line of the address not included among the other properties. The exact size and content varies by country or location and can include, for example, a street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box number."
        },
        {
          "term": "PaymentAddress.country Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/country",
          "desc": "A DOMString specifying the country in which the address is located, using the ISO-3166-1 alpha-2 standard. The string is always given in its canonical upper-case form. Some examples of valid country values: \"US\", \"GB\", \"CN\", or \"JP\"."
        },
        {
          "term": "PaymentAddress.city Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/city",
          "desc": "A DOMString which contains the city or town portion of the address."
        },
        {
          "term": "PaymentAddress.dependentLocality Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/dependentLocality",
          "desc": "A DOMString giving the dependent locality or sublocality within a city, for example, a neighborhood, borough, district, or UK dependent locality."
        },
        {
          "term": "PaymentAddress.organization Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/organization",
          "desc": "A DOMString specifying the name of the organization, firm, company, or institution at the payment address."
        },
        {
          "term": "PaymentAddress.phone Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/phone",
          "desc": "A DOMString specifying the telephone number of the recipient or contact person."
        },
        {
          "term": "PaymentAddress.postalCode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/postalCode",
          "desc": "A DOMString specifying a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India."
        },
        {
          "term": "PaymentAddress.recipient Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/recipient",
          "desc": "A DOMString giving the name of the recipient, purchaser, or contact person at the payment address."
        },
        {
          "term": "PaymentAddress.region Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/region",
          "desc": "A DOMString containing the top level administrative subdivision of the country, for example a state, province, oblast, or prefecture."
        },
        {
          "term": "PaymentAddress.regionCode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/regionCode",
          "desc": "A DOMString specifying the region of the address, represented as a \"code element\" of an ISO3166-2 country subdivision name (e.g. \"QLD\" for Queensland, Australia, \"CA\" for California, and so on)."
        },
        {
          "term": "PaymentAddress.sortingCode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/sortingCode",
          "desc": "A DOMString providing a postal sorting code such as is used in France."
        }
      ],
      "methods": [
        {
          "term": "PaymentAddress.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/toJSON",
          "desc": "A standard serializer that returns a JSON representation of the PaymentAddress object's properties."
        }
      ]
    }
  },
  {
    "title": "PaymentCurrencyAmount",
    "calls": {
      "properties": [
        {
          "term": "currency",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentCurrencyAmount/currency",
          "desc": "A string containing a valid 3-letter ISO 4217 currency identifier (ISO 4217) indicating the currency used for the payment value."
        },
        {
          "term": "value",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentCurrencyAmount/value",
          "desc": "A string containing a valid decimal value representing the mount of currency constituting the payment amount. This string must only contain an optional leading \"-\" to indicate a negative value, then one or more digits from 0 to 9, and an optional decimal point (\".\", regardless of locale) followed by at least one more digit. No whitespace is permitted."
        }
      ]
    }
  },
  {
    "title": "PaymentDetailsUpdate",
    "calls": {
      "properties": [
        {
          "term": "displayItems Optional",
          "link": "",
          "desc": "An array of PaymentItem objects, each describing one line item for the payment request. These represent the line items on a receipt or invoice."
        },
        {
          "term": "error Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentDetailsUpdate/error",
          "desc": "A DOMString specifying an error message to present to the user. When calling updateWith(), including error in the updated data causes the user agent to display the text as a general error message. For address field specific errors, use shippingAddressErrors."
        },
        {
          "term": "modifiers Optional",
          "link": "",
          "desc": "An array of PaymentDetailsModifier objects, each describing a modifier for particular payment method identifiers. For example, you can use one to adjust the total payment amount based on the selected payment method (\"5% cash discount!\")."
        },
        {
          "term": "shippingAddressErrors Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentDetailsUpdate/shippingAddressErrors",
          "desc": "An AddressErrors object which includes an error message for each property of the shipping address that could not be validated."
        },
        {
          "term": "shippingOptions Optional",
          "link": "",
          "desc": "An array of PaymentShippingOption objects, each describing one available shipping option from which the user may choose."
        },
        {
          "term": "total Optional",
          "link": "",
          "desc": "A PaymentItem providing an updated total for the payment. Make sure this equals the sum of all of the items in displayItems. This is not calculated automatically. You must update this value yourself anytime the total amount due changes. This lets you have flexibility for how to handle things like tax, discounts, and other adjustments to the total price charged."
        }
      ]
    }
  },
  {
    "title": "PaymentItem",
    "calls": {
      "properties": [
        {
          "term": "amount Secure context",
          "link": "",
          "desc": "A PaymentCurrencyAmount object describing the monetary value of the item."
        },
        {
          "term": "label Secure context",
          "link": "",
          "desc": "A string specifying a human-readable name or description of the item or service being charged for. This may be displayed to the user by the user agent, depending on the design of the interface."
        },
        {
          "term": "pending Secure context",
          "link": "",
          "desc": "A Boolean value which is true if the specified amount has not yet been finalized. This can be used to show items such as shipping or tax amounts that depend upon the selection of shipping address, shipping option, or so forth. The user agent may show this information but is not required to do so."
        }
      ]
    }
  },
  {
    "title": "PaymentMethodChangeEvent",
    "calls": {
      "constructors": [
        {
          "term": "PaymentMethodChangeEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentMethodChangeEvent/PaymentMethodChangeEvent",
          "desc": "Creates and returns a new PaymentMethodChangeEvent object, optionally initialized with values taken from a given PaymentMethodChangeEventInit dictionary."
        }
      ],
      "properties": [
        {
          "term": "methodDetails Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentMethodChangeEvent/methodDetails",
          "desc": "An object containing payment method-specific data useful when handling a payment method change. If no such information is available, this value is null."
        },
        {
          "term": "methodName Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentMethodChangeEvent/methodName",
          "desc": "A DOMString containing the payment method identifier, a string which uniquely identifies a particular payment method. This identifier is usually a URL used during the payment process, but may be a standardized non-URL string as well, such as basic-card. The default value is the empty string, \"\"."
        }
      ]
    }
  },
  {
    "title": "PaymentRequest",
    "calls": {
      "constructors": [
        {
          "term": "PaymentRequest() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/PaymentRequest",
          "desc": "Creates a new PaymentRequest object."
        }
      ],
      "properties": [
        {
          "term": "PaymentRequest.id Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/id",
          "desc": "An unique identifier for a particular PaymentRequest, which can be set via details.id. When none is set, it defaults to a UUID."
        },
        {
          "term": "PaymentRequest.shippingAddress Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/shippingAddress",
          "desc": "If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the requestShipping flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit \"Pay\")."
        },
        {
          "term": "PaymentRequest.shippingOption Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/shippingOption",
          "desc": "Returns the identifier of the selected shipping option. This property is only populated if the constructor is called with the requestShipping flag set to true."
        },
        {
          "term": "PaymentRequest.shippingType Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/shippingType",
          "desc": "Returns the type of shipping used to fulfill the transaction. This will be one of shipping, delivery, pickup, or null if a value was not provided in the constructor."
        }
      ],
      "methods": [
        {
          "term": "PaymentRequest.canMakePayment() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/canMakePayment",
          "desc": "Indicates whether the PaymentRequest object can make a payment before calling show()."
        },
        {
          "term": "PaymentRequest.show() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/show",
          "desc": "Causes the user agent to begin the user interaction for the payment request."
        },
        {
          "term": "PaymentRequest.abort() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/abort",
          "desc": "Causes the user agent to end the payment request and to remove any user interface that might be shown."
        }
      ]
    }
  },
  {
    "title": "PaymentValidationErrors",
    "calls": {
      "properties": [
        {
          "term": "error Optional",
          "link": "",
          "desc": "A general description of a payment error from which the user may attempt to recover by retrying the payment, possibly after correcting mistakes in the payment information. error can be provided all by itself to provide only a generic error message, or in concert with the other properties to serve as an overview while other properties' values gude the user to errors in specific fields in the payment form."
        },
        {
          "term": "payer Optional",
          "link": "",
          "desc": "A PayerErrors compliant object which provides appropriate error messages for any of the fields describing the payer which failed validation."
        },
        {
          "term": "paymentMethod Optional",
          "link": "",
          "desc": "Any payment method specific errors which may have occurred. This object's contents will vary depending on the payment used. For example, if the user chose to pay by credit card using the basic-card payment method, this is a BasicCardErrors object."
        },
        {
          "term": "shippingAddress Optional",
          "link": "",
          "desc": "An AddressErrors object which contains error messages for any of the fields in the shipping address that failed validation."
        }
      ]
    }
  },
  {
    "title": "Pbkdf2Params",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to PBKDF2."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the digest algorithm to use. This may be one of: SHA-1 SHA-256 SHA-384 SHA-512 Warning: SHA-1 is considered vulnerable in most cryptographic applications, but is still considered safe in PBKDF2. However, it's advisable to transition away from it everywhere, so unless you need to use SHA-1, don't. Use a different digest algorithm instead."
        },
        {
          "term": "salt",
          "link": null,
          "desc": "A BufferSource. This should be a random or pseudo-random value of at least 16 bytes. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret."
        },
        {
          "term": "iterations",
          "link": null,
          "desc": "A Number representing the number of times the hash function will be executed in deriveKey(). This determines how computationally expensive (that is, slow) the deriveKey() operation will be. In this context, slow is good, since it makes it more expensive for an attacker to run a dictionary attack against the keys. The general guidance here is to use as many iterations as possible, subject to keeping an acceptable level of performance for your application."
        }
      ]
    }
  },
  {
    "title": "Performance",
    "calls": {
      "properties": [
        {
          "term": "Performance.navigation Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation",
          "desc": "A legacy PerformanceNavigation object that provides useful context about the operations included in the times listed in timing, including whether the page was a load or a refresh, how many redirections occurred, and so forth. Not available in workers."
        },
        {
          "term": "Performance.timing Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing",
          "desc": "A legacy PerformanceTiming object containing latency-related performance information. Not available in workers."
        },
        {
          "term": "Performance.memory Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory",
          "desc": "A non-standard extension added in Chrome, this property provides an object with basic memory usage information. You should not use this non-standard API."
        },
        {
          "term": "Performance.timeOrigin Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin",
          "desc": "Returns the high resolution timestamp of the start time of the performance measurement."
        }
      ],
      "methods": [
        {
          "term": "Performance.clearMarks()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks",
          "desc": "Removes the given mark from the browser's performance entry buffer."
        },
        {
          "term": "Performance.clearMeasures()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures",
          "desc": "Removes the given measure from the browser's performance entry buffer."
        },
        {
          "term": "Performance.clearResourceTimings()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings",
          "desc": "Removes all performance entries with a entryType of \"resource\" from the browser's performance data buffer."
        },
        {
          "term": "Performance.getEntries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries",
          "desc": "Returns a list of PerformanceEntry objects based on the given filter."
        },
        {
          "term": "Performance.getEntriesByName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName",
          "desc": "Returns a list of PerformanceEntry objects based on the given name and entry type."
        },
        {
          "term": "Performance.getEntriesByType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType",
          "desc": "Returns a list of PerformanceEntry objects of the given entry type."
        },
        {
          "term": "Performance.mark()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark",
          "desc": "Creates a timestamp in the browser's performance entry buffer with the given name."
        },
        {
          "term": "Performance.measure()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure",
          "desc": "Creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively)."
        },
        {
          "term": "Performance.now()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now",
          "desc": "Returns a DOMHighResTimeStamp representing the number of milliseconds elapsed since a reference instant."
        },
        {
          "term": "Performance.setResourceTimingBufferSize()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize",
          "desc": "Sets the browser's resource timing buffer size to the specified number of \"resource\" type performance entry objects."
        },
        {
          "term": "Performance.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON",
          "desc": "Is a jsonizer returning a json object representing the Performance object."
        }
      ]
    }
  },
  {
    "title": "PerformanceEntry",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "A value that further specifies the value returned by the PerformanceEntry.entryType property. The value of both depends on the subtype. See property page for valid values."
        },
        {
          "term": "PerformanceEntry.entryType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "A DOMString representing the type of performance metric such as, for example, \"mark\". See property page for valid values."
        },
        {
          "term": "PerformanceEntry.startTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "A DOMHighResTimeStamp representing the starting time for the performance metric."
        },
        {
          "term": "PerformanceEntry.duration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "A DOMHighResTimeStamp representing the time value of the duration of the performance event."
        }
      ],
      "methods": [
        {
          "term": "PerformanceEntry.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/toJSON",
          "desc": "Returns a JSON representation of the PerformanceEntry object."
        }
      ]
    }
  },
  {
    "title": "PerformanceEventTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEventTiming.processingStart",
          "link": "",
          "desc": "Returns the time at which event dispatch started."
        },
        {
          "term": "PerformanceEventTiming.processingEnd",
          "link": "",
          "desc": "Returns the time at which the event dispatch ended."
        },
        {
          "term": "PerformanceEventTiming.cancelable",
          "link": "",
          "desc": "Returns the associated event's cancelable attribute."
        },
        {
          "term": "PerformanceEventTiming.target",
          "link": "",
          "desc": "Returns the associated event's last target, if it is not removed."
        }
      ],
      "methods": [
        {
          "term": "PerformanceEventTiming.toJSON()",
          "link": "",
          "desc": "Converts the PerformanceEventTiming object to JSON."
        }
      ]
    }
  },
  {
    "title": "PerformanceFrameTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"frame\"."
        },
        {
          "term": "PerformanceEntry.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns the document's address."
        },
        {
          "term": "PerformanceEntry.startTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns the timestamp when the frame was started."
        },
        {
          "term": "PerformanceEntry.duration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns a timestamp indicating the difference between the startTimes of two successive frames."
        }
      ]
    }
  },
  {
    "title": "PerformanceLongTaskTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceLongTaskTiming.attribution Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceLongTaskTiming/attribution",
          "desc": "Returns a sequence of TaskAttributionTiming instances."
        }
      ]
    }
  },
  {
    "title": "PerformanceMark",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"mark\"."
        },
        {
          "term": "PerformanceEntry.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns the name given to the mark when it was created via a call to performance.mark()."
        },
        {
          "term": "PerformanceEntry.startTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns the DOMHighResTimeStamp when performance.mark() was called."
        },
        {
          "term": "PerformanceEntry.duration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns \"0\". (A mark has no duration.)"
        }
      ]
    }
  },
  {
    "title": "PerformanceMeasure",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"measure\"."
        },
        {
          "term": "PerformanceEntry.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns the name given to the measure when it was created via a call to performance.measure()."
        },
        {
          "term": "PerformanceEntry.startTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns a timestamp given to the measure when performance.measure() was called."
        },
        {
          "term": "PerformanceEntry.duration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns a DOMHighResTimeStamp that is the duration of the measure (typically, the measure's end mark timestamp minus its start mark timestamp)."
        }
      ]
    }
  },
  {
    "title": "PerformanceNavigationTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"navigation\"."
        },
        {
          "term": "PerformanceEntry.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns the document's address."
        },
        {
          "term": "PerformanceEntry.startTime Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns a DOMHighResTimeStamp with a value of \"0\"."
        },
        {
          "term": "PerformanceEntry.duration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns a timestamp that is the difference between the PerformanceNavigationTiming.loadEventEnd and PerformanceEntry.startTime properties."
        }
      ],
      "methods": [
        {
          "term": "PerformanceNavigationTiming.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/toJSON",
          "desc": "Returns a DOMString that is the JSON representation of the PerformanceNavigationTiming object."
        }
      ]
    }
  },
  {
    "title": "PerformanceObserver",
    "calls": {
      "constructors": [
        {
          "term": "PerformanceObserver()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/PerformanceObserver",
          "desc": "Creates and returns a new PerformanceObserver object."
        }
      ],
      "methods": [
        {
          "term": "PerformanceObserver.observe()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe",
          "desc": "Specifies the set of entry types to observe. The performance observer's callback function will be invoked when a performance entry is recorded for one of the specified entryTypes"
        },
        {
          "term": "PerformanceObserver.disconnect()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect",
          "desc": "Stops the performance observer callback from receiving performance entries."
        },
        {
          "term": "PerformanceObserver.takeRecords()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/takeRecords",
          "desc": "Returns the current list of performance entries stored in the performance observer, emptying it out."
        }
      ]
    }
  },
  {
    "title": "PerformanceObserverEntryList",
    "calls": {
      "methods": [
        {
          "term": "PerformanceObserverEntryList.getEntries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries",
          "desc": "Returns a list of explicitly observed PerformanceEntry objects based on the given filter."
        },
        {
          "term": "PerformanceObserverEntryList.getEntriesByType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType",
          "desc": "Returns a list of explicitly observed PerformanceEntry objects of the given entry type."
        },
        {
          "term": "PerformanceObserverEntryList.getEntriesByName()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName",
          "desc": "Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type."
        }
      ]
    }
  },
  {
    "title": "PerformancePaintTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"paint\"."
        },
        {
          "term": "PerformanceEntry.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns either \"first-paint\" or \"first-contentful-paint\"."
        },
        {
          "term": "PerformanceEntry.startTime",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns the timestamp when the paint occurred."
        },
        {
          "term": "PerformanceEntry.duration",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns 0."
        }
      ]
    }
  },
  {
    "title": "PerformanceResourceTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceEntry.entryTypeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType",
          "desc": "Returns \"resource\"."
        },
        {
          "term": "PerformanceEntry.nameRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name",
          "desc": "Returns the resources URL."
        },
        {
          "term": "PerformanceEntry.startTimeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime",
          "desc": "Returns the timestamp for the time a resource fetch started. This value is equivalent to PerformanceEntry.fetchStart."
        },
        {
          "term": "PerformanceEntry.durationRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration",
          "desc": "Returns a timestamp that is the difference between the responseEnd and the startTime properties."
        }
      ],
      "methods": [
        {
          "term": "PerformanceResourceTiming.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON",
          "desc": "Returns a DOMString that is the JSON representation of the PerformanceResourceTiming object."
        }
      ]
    }
  },
  {
    "title": "PerformanceServerTiming",
    "calls": {
      "properties": [
        {
          "term": "PerformanceServerTiming.descriptionRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming/description",
          "desc": "A DOMString value of the server-specified metric description, or an empty string."
        },
        {
          "term": "PerformanceServerTiming.durationRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming/duration",
          "desc": "A double that contains the server-specified metric duration, or value 0.0."
        },
        {
          "term": "PerformanceServerTiming.nameRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming/name",
          "desc": "A DOMString value of the server-specified metric name."
        }
      ],
      "methods": [
        {
          "term": "PerformanceServerTiming.toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming/toJSON",
          "desc": "Returns a DOMString that is the JSON representation of the PerformanceServerTiming object."
        }
      ]
    }
  },
  {
    "title": "PeriodicSyncEvent",
    "calls": {
      "constructors": [
        {
          "term": "PeriodicSyncEvent.PeriodicSyncEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncEvent/PeriodicSyncEvent",
          "desc": "Creates a new PeriodicSyncEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to ServiceWorkerGlobalScope.onperiodicsync callback."
        }
      ],
      "properties": [
        {
          "term": "PeriodicSyncEvent.tag Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncEvent/tag",
          "desc": "Returns the developer-defined identifier for this PeriodicSyncEvent. Multiple tags can be used by the web app to run different periodic tasks at different frequencies."
        }
      ]
    }
  },
  {
    "title": "PeriodicSyncManager",
    "calls": {
      "methods": [
        {
          "term": "PeriodicSyncManager.register",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager/register",
          "desc": "Registers a periodic sync request with the browser with the specified tag and options. Returns a Promise that resolves when the registration completes."
        },
        {
          "term": "PeriodicSyncManager.getTags",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager/getTags",
          "desc": "Returns a Promise that resolves with a list of strings representing the tags that are currently registered for periodic syncing."
        },
        {
          "term": "PeriodicSyncManager.unregister",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager/unregister",
          "desc": "Unregisters the periodic sync request corresponding to the specified tag and returns a Promise that resolves when unregistration completes."
        }
      ]
    }
  },
  {
    "title": "PeriodicWave",
    "calls": {
      "constructors": [
        {
          "term": "PeriodicWave.PeriodicWave()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave/PeriodicWave",
          "desc": "Creates a new PeriodicWave object instance using the default values for all properties. If you wish to establish custom property values at the outset, use the AudioContext.createPeriodicWave() factory method instead."
        }
      ]
    }
  },
  {
    "title": "PictureInPictureEvent",
    "calls": {
      "constructors": [
        {
          "term": "PictureInPictureEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureEvent/PictureInPictureEvent",
          "desc": "Creates a PictureInPictureEvent event with the given parameters."
        }
      ]
    }
  },
  {
    "title": "PictureInPictureWindow",
    "calls": {
      "properties": [
        {
          "term": "PictureInPictureWindow.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureWindow/width",
          "desc": "Determines the width of the floating video window."
        },
        {
          "term": "PictureInPictureWindow.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureWindow/height",
          "desc": "Determines the height of the floating video window."
        }
      ]
    }
  },
  {
    "title": "Plugin",
    "calls": {
      "properties": [
        {
          "term": "Plugin.description Read only",
          "link": "",
          "desc": "A human readable description of the plugin."
        },
        {
          "term": "Plugin.filename Read only",
          "link": "",
          "desc": "The filename of the plugin file."
        },
        {
          "term": "Plugin.name Read only",
          "link": "",
          "desc": "The name of the plugin."
        },
        {
          "term": "Plugin.version Read only",
          "link": "",
          "desc": "The plugin's version number string."
        }
      ],
      "methods": [
        {
          "term": "Plugin.item",
          "link": "",
          "desc": "Returns the MIME type of a supported content type, given the index number into a list of supported types."
        },
        {
          "term": "Plugin.namedItem",
          "link": "",
          "desc": "Returns the MIME type of a supported item."
        }
      ]
    }
  },
  {
    "title": "Point",
    "calls": {
      "properties": [
        {
          "term": "x",
          "link": null,
          "desc": "A floating-point value specifying the point's position with respect to the X (horizontal) axis."
        },
        {
          "term": "y",
          "link": null,
          "desc": "A floating-point value specifying the point's position with respect to the Y (vertical) axis."
        }
      ]
    }
  },
  {
    "title": "PointerEvent",
    "calls": {
      "properties": [
        {
          "term": "PointerEvent.pointerId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId",
          "desc": "A unique identifier for the pointer causing the event."
        },
        {
          "term": "PointerEvent.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width",
          "desc": "The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer."
        },
        {
          "term": "PointerEvent.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height",
          "desc": "The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer."
        },
        {
          "term": "PointerEvent.pressure Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure",
          "desc": "The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively."
        },
        {
          "term": "PointerEvent.tangentialPressure Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure",
          "desc": "The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control."
        },
        {
          "term": "PointerEvent.tiltX Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX",
          "desc": "The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis."
        },
        {
          "term": "PointerEvent.tiltY Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY",
          "desc": "The plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis."
        },
        {
          "term": "PointerEvent.twist Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist",
          "desc": "The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359."
        },
        {
          "term": "PointerEvent.pointerType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType",
          "desc": "Indicates the device type that caused the event (mouse, pen, touch, etc.)"
        },
        {
          "term": "PointerEvent.isPrimary Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary",
          "desc": "Indicates if the pointer represents the primary pointer of this pointer type."
        }
      ],
      "methods": [
        {
          "term": "PointerEvent.getCoalescedEvents() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/getCoalescedEvents",
          "desc": "Returns a sequence of all PointerEvent instances that were coalesced into the dispatched pointermove event."
        },
        {
          "term": "PointerEvent.getPredictedEvents() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a sequence of PointerEvent instances that the browser predicts will follow the dispatched pointermove event's coalesced events."
        }
      ]
    }
  },
  {
    "title": "PopStateEvent",
    "calls": {}
  },
  {
    "title": "PositionOptions",
    "calls": {
      "properties": [
        {
          "term": "PositionOptions.enableHighAccuracy Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/enableHighAccuracy",
          "desc": "Is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: false."
        },
        {
          "term": "PositionOptions.timeout Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/timeout",
          "desc": "Is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available."
        },
        {
          "term": "PositionOptions.maximumAge Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/maximumAge",
          "desc": "Is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age. Default: 0."
        }
      ]
    }
  },
  {
    "title": "ProcessingInstruction",
    "calls": {
      "properties": [
        {
          "term": "target (DOMString) Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMString",
          "desc": "A name identifying the application to which the instruction is targeted,"
        }
      ]
    }
  },
  {
    "title": "ProgressEvent",
    "calls": {
      "constructors": [
        {
          "term": "ProgressEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent",
          "desc": "Creates a ProgressEvent event with the given parameters."
        }
      ],
      "properties": [
        {
          "term": "ProgressEvent.lengthComputable Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable",
          "desc": "A Boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not."
        },
        {
          "term": "ProgressEvent.loaded Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded",
          "desc": "A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing total by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead."
        },
        {
          "term": "ProgressEvent.total Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total",
          "desc": "A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the Content-Length (the size of the body of the message), and doesn't include the headers and other overhead."
        }
      ],
      "methods": [
        {
          "term": "ProgressEvent.initProgressEvent() \n    This deprecated API should no longer be used, but will probably still work.\n    \n\n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/initProgressEvent",
          "desc": "Initializes a ProgressEvent created using the deprecated Document.createEvent(\"ProgressEvent\") method."
        }
      ]
    }
  },
  {
    "title": "PromiseRejectionEvent",
    "calls": {
      "constructors": [
        {
          "term": "PromiseRejectionEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/PromiseRejectionEvent",
          "desc": "Creates a PromiseRejectionEvent event, given the type of event (unhandledrejection or rejectionhandled) and other details."
        }
      ],
      "properties": [
        {
          "term": "PromiseRejectionEvent.promise Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise",
          "desc": "The JavaScript Promise that was rejected."
        },
        {
          "term": "PromiseRejectionEvent.reason Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason",
          "desc": "A value or Object indicating why the promise was rejected, as passed to Promise.reject()."
        }
      ]
    }
  },
  {
    "title": "PublicKeyCredential",
    "calls": {
      "properties": [
        {
          "term": "PublicKeyCredential.type Read only Secure context",
          "link": null,
          "desc": "Inherited from Credential. Always set to public-key for PublicKeyCredential instances."
        },
        {
          "term": "PublicKeyCredential.id Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/id",
          "desc": "Inherited from Credential and overridden to be the base64url encoding of PublicKeyCredential.rawId."
        },
        {
          "term": "PublicKeyCredential.rawId Read only Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/rawId",
          "desc": "An ArrayBuffer that holds the globally unique identifier for this PublicKeyCredential. This identifier can be used to look up credentials for future calls to CredentialsContainer.get."
        },
        {
          "term": "PublicKeyCredential.response Read only  Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/response",
          "desc": "An instance of an AuthenticatorResponse object. It is either of type AuthenticatorAttestationResponse if the PublicKeyCredential was the results of a navigator.credentials.create() call, or of type AuthenticatorAssertionResponse if the PublicKeyCredential was the result of a navigator.credentials.get() call."
        }
      ],
      "methods": [
        {
          "term": "PublicKeyCredential.getClientExtensionResults()Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientExtensionResults",
          "desc": "If any extensions were requested, this method will return the results of processing those extensions."
        },
        {
          "term": "PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable",
          "desc": "A static method returning a Promise which resolves to true if an authenticator bound to the platform is capable of verifying the user."
        }
      ]
    }
  },
  {
    "title": "PublicKeyCredentialCreationOptions",
    "calls": {
      "properties": [
        {
          "term": "PublicKeyCredentialCreationOptions.rp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/rp",
          "desc": "An object describing the relying party which requested the credential creation."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.user",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/user",
          "desc": "An object describing the user account for which the credential is generated."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.challenge",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/challenge",
          "desc": "A BufferSource, emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAttestationResponse.attestationObject."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.pubKeyCredParams",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/pubKeyCredParams",
          "desc": "An Array of element which specify the desired features of the credential, including its type and the algorithm used for the cryptographic signature operations. This array is sorted by descending order of preference."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.timeout Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/timeout",
          "desc": "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the creation operation to complete. This hint may be overridden by the browser."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.excludeCredentials Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/excludeCredentials",
          "desc": "An Array of descriptors for existing credentials. This is provided by the relying party to avoid creating new public key credentials for an existing user who already have some."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.authenticatorSelection Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/authenticatorSelection",
          "desc": "An object whose properties are criteria used to filter out the potential authenticators for the creation operation."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.attestation Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/attestation",
          "desc": "A String which indicates how the attestation (for the authenticator's origin) should be transported."
        },
        {
          "term": "PublicKeyCredentialCreationOptions.extensions Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/extensions",
          "desc": "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.)."
        }
      ]
    }
  },
  {
    "title": "PublicKeyCredentialRequestOptions",
    "calls": {
      "properties": [
        {
          "term": "PublicKeyCredentialRequestOptions.challenge",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/challenge",
          "desc": "A BufferSource, emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAssertionResponse.signature."
        },
        {
          "term": "PublicKeyCredentialRequestOptions.timeout Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/timeout",
          "desc": "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the retrieval operation to complete. This hint may be overridden by the browser."
        },
        {
          "term": "PublicKeyCredentialRequestOptions.rpId Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/rpId",
          "desc": "A USVString which indicates the relying party's identifier (ex. \"login.example.org\"). If this option is not provided, the client will use the current origin's domain."
        },
        {
          "term": "PublicKeyCredentialRequestOptions.allowCredentials Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/allowCredentials",
          "desc": "An Array of credentials descriptor which restricts the acceptable existing credentials for retrieval."
        },
        {
          "term": "PublicKeyCredentialRequestOptions.userVerification Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/userVerification",
          "desc": "A string qualifying how the user verification should be part of the authentication process."
        },
        {
          "term": "PublicKeyCredentialRequestOptions.extensions Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/extensions",
          "desc": "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.)."
        }
      ]
    }
  },
  {
    "title": "PushEvent",
    "calls": {
      "constructors": [
        {
          "term": "PushEvent.PushEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PushEvent/PushEvent",
          "desc": "Creates a new PushEvent object."
        }
      ],
      "properties": [
        {
          "term": "PushEvent.data Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/PushEvent/data",
          "desc": "Returns a reference to a PushMessageData object containing data sent to the PushSubscription."
        }
      ]
    }
  },
  {
    "title": "RadioNodeList",
    "calls": {
      "properties": [
        {
          "term": "RadioNodeList.value",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value",
          "desc": "If the underlying element collection contains radio buttons, the value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked."
        }
      ]
    }
  },
  {
    "title": "Range",
    "calls": {
      "constructors": [
        {
          "term": "Range() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/Range",
          "desc": "Returns a Range object with the global Document as its start and end."
        }
      ],
      "properties": [
        {
          "term": "Range.collapsed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed",
          "desc": "Returns a Boolean indicating whether the range's start and end points are at the same position."
        },
        {
          "term": "Range.commonAncestorContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer",
          "desc": "Returns the deepest Node that contains the startContainer and endContainer nodes."
        },
        {
          "term": "Range.endContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer",
          "desc": "Returns the Node within which the Range ends."
        },
        {
          "term": "Range.endOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset",
          "desc": "Returns a number representing where in the endContainer the Range ends."
        },
        {
          "term": "Range.startContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer",
          "desc": "Returns the Node within which the Range starts."
        },
        {
          "term": "Range.startOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset",
          "desc": "Returns a number representing where in the startContainer the Range starts."
        }
      ],
      "methods": [
        {
          "term": "Range.setStart()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart",
          "desc": "Sets the start position of a Range."
        },
        {
          "term": "Range.setEnd()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd",
          "desc": "Sets the end position of a Range."
        },
        {
          "term": "Range.setStartBefore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore",
          "desc": "Sets the start position of a Range relative to another Node."
        },
        {
          "term": "Range.setStartAfter()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter",
          "desc": "Sets the start position of a Range relative to another Node."
        },
        {
          "term": "Range.setEndBefore()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore",
          "desc": "Sets the end position of a Range relative to another Node."
        },
        {
          "term": "Range.setEndAfter()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter",
          "desc": "Sets the end position of a Range relative to another Node."
        },
        {
          "term": "Range.selectNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode",
          "desc": "Sets the Range to contain the Node and its contents."
        },
        {
          "term": "Range.selectNodeContents()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents",
          "desc": "Sets the Range to contain the contents of a Node."
        },
        {
          "term": "Range.collapse()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse",
          "desc": "Collapses the Range to one of its boundary points."
        },
        {
          "term": "Range.cloneContents()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents",
          "desc": "Returns a DocumentFragment copying the nodes of a Range."
        },
        {
          "term": "Range.deleteContents()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents",
          "desc": "Removes the contents of a Range from the Document."
        },
        {
          "term": "Range.extractContents()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents",
          "desc": "Moves contents of a Range from the document tree into a DocumentFragment."
        },
        {
          "term": "Range.insertNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode",
          "desc": "Insert a Node at the start of a Range."
        },
        {
          "term": "Range.surroundContents()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents",
          "desc": "Moves content of a Range into a new Node."
        },
        {
          "term": "Range.compareBoundaryPoints()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints",
          "desc": "Compares the boundary points of the Range with another Range."
        },
        {
          "term": "Range.cloneRange()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange",
          "desc": "Returns a Range object with boundary points identical to the cloned Range."
        },
        {
          "term": "Range.detach()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/detach",
          "desc": "Releases the Range from use to improve performance."
        },
        {
          "term": "Range.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/toString",
          "desc": "Returns the text of the Range."
        },
        {
          "term": "Range.compareNode() \n    This is an obsolete API and is no longer guaranteed to work.\n    \n\n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/compareNode",
          "desc": "Returns a constant representing whether the Node is before, after, inside, or surrounding the range."
        },
        {
          "term": "Range.comparePoint() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint",
          "desc": "Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range."
        },
        {
          "term": "Range.createContextualFragment()\n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment",
          "desc": "Returns a DocumentFragment created from a given string of code."
        },
        {
          "term": "Range.getBoundingClientRect() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect",
          "desc": "Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects()."
        },
        {
          "term": "Range.getClientRects() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects",
          "desc": "Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range."
        },
        {
          "term": "Range.intersectsNode() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode",
          "desc": "Returns a boolean indicating whether the given node intersects the Range."
        },
        {
          "term": "Range.isPointInRange() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange",
          "desc": "Returns a boolean indicating whether the given point is in the Range."
        }
      ]
    }
  },
  {
    "title": "ReadableStream",
    "calls": {
      "constructors": [
        {
          "term": "ReadableStream()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream",
          "desc": "Creates and returns a readable stream object from the given handlers."
        }
      ],
      "properties": [
        {
          "term": "ReadableStream.locked Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/locked",
          "desc": "The locked getter returns whether or not the readable stream is locked to a reader."
        }
      ],
      "methods": [
        {
          "term": "ReadableStream.cancel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel",
          "desc": "Cancels the stream, signaling a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it."
        },
        {
          "term": "ReadableStream.getReader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/getReader",
          "desc": "Creates a reader and locks the stream to it. While the stream is locked, no other reader can be acquired until this one is released."
        },
        {
          "term": "ReadableStream.pipeThrough()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeThrough",
          "desc": "Provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair."
        },
        {
          "term": "ReadableStream.pipeTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeTo",
          "desc": "Pipes the current ReadableStream to a given WritableStream and returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered."
        },
        {
          "term": "ReadableStream.tee()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/tee",
          "desc": "The tee method tees this readable stream, returning a two-element array containing the two resulting branches as new ReadableStream instances. Each of those streams receives the same incoming data."
        }
      ]
    }
  },
  {
    "title": "ReadableStreamDefaultController",
    "calls": {
      "properties": [
        {
          "term": "ReadableStreamDefaultController.desiredSize Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/desiredSize",
          "desc": "Returns the desired size required to fill the stream's internal queue."
        }
      ],
      "methods": [
        {
          "term": "ReadableStreamDefaultController.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/close",
          "desc": "Closes the associated stream."
        },
        {
          "term": "ReadableStreamDefaultController.enqueue()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/enqueue",
          "desc": "Enqueues a given chunk in the associated stream."
        },
        {
          "term": "ReadableStreamDefaultController.error()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/error",
          "desc": "Causes any future interactions with the associated stream to error."
        }
      ]
    }
  },
  {
    "title": "ReadableStreamDefaultReader",
    "calls": {
      "constructors": [
        {
          "term": "ReadableStreamDefaultReader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader",
          "desc": "Creates and returns a ReadableStreamDefaultReader object instance."
        }
      ],
      "properties": [
        {
          "term": "ReadableStreamDefaultReader.closed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/closed",
          "desc": "Allows you to write code that responds to an end to the streaming process. Returns a promise that fulfills if the stream becomes closed or the reader's lock is released, or rejects if the stream errors."
        }
      ],
      "methods": [
        {
          "term": "ReadableStreamDefaultReader.cancel()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/cancel",
          "desc": "Cancels the stream, signaling a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it."
        },
        {
          "term": "ReadableStreamDefaultReader.read()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/read",
          "desc": "Returns a promise providing access to the next chunk in the stream's internal queue."
        },
        {
          "term": "ReadableStreamDefaultReader.releaseLock()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/releaseLock",
          "desc": "Releases the reader's lock on the stream."
        }
      ]
    }
  },
  {
    "title": "RelativeOrientationSensor",
    "calls": {
      "constructors": [
        {
          "term": "RelativeOrientationSensor.RelativeOrientationSensor()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RelativeOrientationSensor/RelativeOrientationSensor",
          "desc": "Creates a new RelativeOrientationSensor object."
        }
      ]
    }
  },
  {
    "title": "RenderingContext",
    "calls": {}
  },
  {
    "title": "Request",
    "calls": {
      "constructors": [
        {
          "term": "Request()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/Request",
          "desc": "Creates a new Request object."
        }
      ],
      "properties": [
        {
          "term": "Request.cache Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/cache",
          "desc": "Contains the cache mode of the request (e.g., default, reload, no-cache)."
        },
        {
          "term": "Request.context Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/context",
          "desc": "Contains the context of the request (e.g., audio, image, iframe, etc.)"
        },
        {
          "term": "Request.credentials Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials",
          "desc": "Contains the credentials of the request (e.g., omit, same-origin, include). The default is same-origin."
        },
        {
          "term": "Request.destination Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/destination",
          "desc": "Returns a string from the RequestDestination enum describing the request's destination. This is a string indicating the type of content being requested."
        },
        {
          "term": "Request.headers Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/headers",
          "desc": "Contains the associated Headers object of the request."
        },
        {
          "term": "Request.integrity Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity",
          "desc": "Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=)."
        },
        {
          "term": "Request.method Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/method",
          "desc": "Contains the request's method (GET, POST, etc.)"
        },
        {
          "term": "Request.mode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/mode",
          "desc": "Contains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)"
        },
        {
          "term": "Request.redirect Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect",
          "desc": "Contains the mode for how redirects are handled. It may be one of follow, error, or manual."
        },
        {
          "term": "Request.referrer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer",
          "desc": "Contains the referrer of the request (e.g., client)."
        },
        {
          "term": "Request.referrerPolicy Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy",
          "desc": "Contains the referrer policy of the request (e.g., no-referrer)."
        },
        {
          "term": "Request.url Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/url",
          "desc": "Contains the URL of the request."
        }
      ],
      "methods": [
        {
          "term": "Request.clone()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Request/clone",
          "desc": "Creates a copy of the current Request object."
        }
      ]
    }
  },
  {
    "title": "RequestDestination",
    "calls": {}
  },
  {
    "title": "ResizeObserverEntry",
    "calls": {
      "properties": [
        {
          "term": "ResizeObserverEntry.borderBoxSize Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/borderBoxSize",
          "desc": "An object containing the new border box size of the observed element when the callback is run."
        },
        {
          "term": "ResizeObserverEntry.contentBoxSize Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentBoxSize",
          "desc": "An object containing the new content box size of the observed element when the callback is run."
        },
        {
          "term": "ResizeObserverEntry.devicePixelContentBoxSize Read only",
          "link": "",
          "desc": "An object containing the new content box size in device pixels of the observed element when the callback is run."
        },
        {
          "term": "ResizeObserverEntry.contentRect Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentRect",
          "desc": "A DOMRectReadOnly object containing the new size of the observed element when the callback is run. Note that this is better supported than the above two properties, but it is left over from an earlier implementation of the Resize Observer API, is still included in the spec for web compat reasons, and may be deprecated in future versions."
        },
        {
          "term": "ResizeObserverEntry.target Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/target",
          "desc": "A reference to the Element or SVGElement being observed."
        }
      ]
    }
  },
  {
    "title": "RsaHashedImportParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the name of the digest function to use. This can be one of SHA-256, SHA-384, or SHA-512. Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable."
        }
      ]
    }
  },
  {
    "title": "RsaHashedKeyGenParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use."
        },
        {
          "term": "modulusLength",
          "link": null,
          "desc": "A Number. The length in bits of the RSA modulus. This should be at least 2048: see for example see NIST SP 800-131A Rev. 1. Some organizations are now recommending that it should be 4096."
        },
        {
          "term": "publicExponent",
          "link": null,
          "desc": "A Uint8Array. The public exponent. Unless you have a good reason to use something else, specify 65537 here ([0x01, 0x00, 0x01])."
        },
        {
          "term": "hash",
          "link": null,
          "desc": "A DOMString representing the name of the digest function to use. You can pass any of SHA-256, SHA-384, or SHA-512 here. Warning: Although you can technically pass SHA-1 as a value here, this is strongly discouraged as SHA-1 is considered vulnerable."
        }
      ]
    }
  },
  {
    "title": "RsaOaepParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to RSA-OAEP."
        },
        {
          "term": "label Optional",
          "link": null,
          "desc": "A BufferSource — an array of bytes that does not itself need to be encrypted but which should be bound to the ciphertext. A digest of the label is part of the input to the encryption operation. Unless your application calls for a label, you can just omit this argument and it will not affect the security of the encryption operation."
        }
      ]
    }
  },
  {
    "title": "RsaPssParams",
    "calls": {
      "properties": [
        {
          "term": "name",
          "link": null,
          "desc": "A DOMString. This should be set to RSA-PSS."
        },
        {
          "term": "saltLength",
          "link": null,
          "desc": "A long integer representing the length of the random salt to use, in bytes. RFC 3447 says that \"Typical salt lengths\" are either 0 or the length of the output of the digest algorithm that was selected when this key was generated. For example, if you use SHA-256 as the digest algorithm, this could be 32. The maximum size of saltLength is given by: Math.ceil((keySizeInBits - 1)/8) - digestSizeInBytes - 2 So for a key length of 2048 bits and a digest output size of 32 bytes, the maximum size would be 222."
        }
      ]
    }
  },
  {
    "title": "RTCAnswerOptions",
    "calls": {}
  },
  {
    "title": "RTCCertificate",
    "calls": {
      "properties": [
        {
          "term": "RTCCertificate.expires Read only",
          "link": "",
          "desc": "Returns the expiration date of the certificate."
        }
      ]
    }
  },
  {
    "title": "RTCConfiguration",
    "calls": {
      "properties": [
        {
          "term": "bundlePolicy Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration/bundlePolicy",
          "desc": "Specifies how to handle negotiation of candidates when the remote peer is not compatible with the SDP BUNDLE standard. This must be one of the values from the enum RTCBundlePolicy. If this value isn't included in the dictionary, \"balanced\" is assumed."
        },
        {
          "term": "certificates Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration/certificates",
          "desc": "An Array of objects of type RTCCertificate which are used by the connection for authentication. If this property isn't specified, a set of certificates is generated automatically for each RTCPeerConnection instance. Although only one certificate is used by a given connection, providing certificates for multiple algorithms may improve the odds of successfully connecting in some circumstances. See Using certificates for further information. This configuration option cannot be changed after it is first specified; once the certificates have been set, this property is ignored in future calls to RTCPeerConnection.setConfiguration()."
        },
        {
          "term": "iceCandidatePoolSize Optional",
          "link": "",
          "desc": "An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur). You may find in some cases that connections can be established more quickly by allowing the ICE agent to start fetching ICE candidates before you start trying to connect, so that they're already available for inspection when RTCPeerConnection.setLocalDescription() is called. Changing the size of the ICE candidate pool may trigger the beginning of ICE gathering."
        },
        {
          "term": "iceServers Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration/iceServers",
          "desc": "An array of RTCIceServer objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers. If this isn't specified, the connection attempt will be made with no STUN or TURN server available, which limits the connection to local peers."
        },
        {
          "term": "iceTransportPolicy Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration/iceTransportPolicy",
          "desc": "The current ICE transport policy; this must be one of the values from the RTCIceTransportPolicy enumeration. If the policy isn't specified, all is assumed by default, allowing all candidates to be considered. A value of relay limits the candidates to those relayed through another server, such as a STUN or TURN server."
        },
        {
          "term": "peerIdentity Optional",
          "link": "",
          "desc": "A DOMString which specifies the target peer identity for the RTCPeerConnection. If this value is set (it defaults to null), the RTCPeerConnection will not connect to a remote peer unless it can successfully authenticate with the given name."
        },
        {
          "term": "rtcpMuxPolicy Optional",
          "link": "",
          "desc": "The RTCP mux policy to use when gathering ICE candidates, in order to support non-multiplexed RTCP. The value must be one of those from the RTCRtcpMuxPolicy enum. The default is \"require\"."
        }
      ]
    }
  },
  {
    "title": "RTCDTMFSender",
    "calls": {
      "properties": [
        {
          "term": "RTCDTMFSender.toneBuffer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender/toneBuffer",
          "desc": "A DOMString which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See toneBuffer for details on the format of the tone buffer."
        }
      ],
      "methods": [
        {
          "term": "RTCDTMFSender.insertDTMF()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender/insertDTMF",
          "desc": "Given a string describing a set of DTMF codes and, optionally, the duration of and inter-tone gap between the tones, insertDTMF() starts sending the specified tones. Calling insertDTMF() replaces any already-pending tones from the toneBuffer. You can abort sending queued tones by specifying an empty string (\"\") as the set of tones to play."
        }
      ]
    }
  },
  {
    "title": "RTCDTMFToneChangeEvent",
    "calls": {
      "properties": [
        {
          "term": "RTCDTMFToneChangeEvent.tone Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent/tone",
          "desc": "A DOMString specifying the tone which has begun playing, or an empty string (\"\") if the previous tone has finished playing."
        }
      ]
    }
  },
  {
    "title": "RTCError",
    "calls": {
      "constructors": [
        {
          "term": "RTCError()",
          "link": "",
          "desc": "Creates and returns a new RTCError object initialized with the properties of the provided RTCErrorInit dictionary and, optionally, a string to use as the value of the error's message property."
        }
      ],
      "properties": [
        {
          "term": "errorDetail Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError/errorDetail",
          "desc": "A DOMString specifying the WebRTC-specific error code identifying the type of error that occurred."
        },
        {
          "term": "receivedAlert Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError/receivedAlert",
          "desc": "An unsigned long integer value indicating the fatal DTLS error which was received from the network. Only valid if the errorDetail string is dtls-failure. If null, no DTLS error was received."
        },
        {
          "term": "sctpCauseCode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sctpCauseCode",
          "desc": "If errorDetail is sctp-failure, this property is a long integer specifying the SCTP cause code indicating the cause of the failed SCTP negotiation. null if the error isn't an SCTP error."
        },
        {
          "term": "sdpLineNumber Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sdpLineNumber",
          "desc": "If errorDetail is sdp-syntax-error, this property is a long integer identifying the line number of the SDP on which the syntax error occurred. null if the error isn't an SDP syntax error."
        },
        {
          "term": "sentAlert Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError/sentAlert",
          "desc": "If errorDetail is dtls-failure, this property is an unsigned long integer indicating the fatal DTLS error that was sent out by this device. If null, no DTLS error was transmitted."
        }
      ]
    }
  },
  {
    "title": "RTCErrorEvent",
    "calls": {
      "constructors": [
        {
          "term": "RTCErrorEvent()",
          "link": "",
          "desc": "Creates and returns a new RTCErrorEvent object."
        }
      ],
      "properties": [
        {
          "term": "error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent/error",
          "desc": "An RTCError object specifying the error which occurred; this object includes the type of error that occurred, information about where the error occurred (such as which line number in the SDP or what SCTP cause code was at issue)."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidate",
    "calls": {
      "constructors": [
        {
          "term": "RTCIceCandidate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/RTCIceCandidate",
          "desc": "Creates an RTCIceCandidate object to represent a single ICE candidate, optionally configured based on an object based on the RTCIceCandidateInit dictionary. Note: For backward compatibility, the constructor also accepts as input a string containing the value of the candidate property instead of a RTCIceCandidateInit object, since the candidate includes all of the information that RTCIceCandidateInit does and more."
        }
      ],
      "properties": [
        {
          "term": "candidate Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/candidate",
          "desc": "A DOMString representing the transport address for the candidate that can be used for connectivity checks. The format of this address is a candidate-attribute as defined in RFC 5245. This string is empty (\"\") if the RTCIceCandidate is an \"end of candidates\" indicator."
        },
        {
          "term": "component Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/component",
          "desc": "A DOMString which indicates whether the candidate is an RTP or an RTCP candidate; its value is either \"rtp\" or \"rtcp\", and is derived from the \"component-id\" field in the candidate a-line string. The permitted values are listed in the RTCIceComponent enumerated type."
        },
        {
          "term": "foundation Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/foundation",
          "desc": "Returns a DOMString containing a unique identifier that is the same for any candidates of the same type, share the same base (the address from which the ICE agent sent the candidate), and come from the same STUN server. This is used to help optimize ICE performance while prioritizing and correlating candidates that appear on multiple RTCIceTransport objects."
        },
        {
          "term": "ip Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/address",
          "desc": "A DOMString containing the IP address of the candidate."
        },
        {
          "term": "port Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/port",
          "desc": "An integer value indicating the candidate's port number."
        },
        {
          "term": "priority Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/priority",
          "desc": "A long integer value indicating the candidate's priority."
        },
        {
          "term": "address Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/address",
          "desc": "The address of the candidate."
        },
        {
          "term": "protocol Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/protocol",
          "desc": "A string indicating whether the candidate's protocol is \"tcp\" or \"udp\". The string is one of those in the enumerated type RTCIceProtocol."
        },
        {
          "term": "relatedAddress Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedAddress",
          "desc": "If the candidate is derived from another candidate, relatedAddress is a DOMString containing that host candidate's IP address. For host candidates, this value is null."
        },
        {
          "term": "relatedPort Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort",
          "desc": "For a candidate that is derived from another, such as a relay or reflexive candidate, the relatedPort is a number indicating the port number of the candidate from which this candidate is derived. For host candidates, the relatedPort property is null."
        },
        {
          "term": "sdpMid Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMid",
          "desc": "A DOMString specifying the candidate's media stream identification tag which uniquely identifies the media stream within the component with which the candidate is associated, or null if no such association exists."
        },
        {
          "term": "sdpMLineIndex Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMLineIndex",
          "desc": "If not null, sdpMLineIndex indicates the zero-based index number of the media description (as defined in RFC 4566) in the SDP with which the candidate is associated."
        },
        {
          "term": "tcpType Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/tcpType",
          "desc": "If protocol is \"tcp\", tcpType represents the type of TCP candidate. Otherwise, tcpType is null."
        },
        {
          "term": "type Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/type",
          "desc": "A DOMString indicating the type of candidate as one of the strings from the RTCIceCandidateType enumerated type."
        },
        {
          "term": "usernameFragment Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/usernameFragment",
          "desc": "A DOMString containing a randomly-generated username fragment (\"ice-ufrag\") which ICE uses for message integrity along with a randomly-generated password (\"ice-pwd\"). You can use this string to verify generations of ICE generation; each generation of the same ICE process will use the same usernameFragment, even across ICE restarts."
        }
      ],
      "methods": [
        {
          "term": "toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/toJSON",
          "desc": "Given the RTCIceCandidate's current configuration, toJSON() returns a DOMString containing a JSON representation of that configuration in the form of a RTCIceCandidateInit object."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidateInit",
    "calls": {
      "properties": [
        {
          "term": "candidate Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/candidate",
          "desc": "The ICE candidate-attribute. If the candidate is an indicator that there are no further candidates (rather than representing a new candidate), this is the empty string (\"\"). The default is the empty string."
        },
        {
          "term": "sdpMid Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/sdpMid",
          "desc": "The identification tag of the media stream with which the candidate is associated, or null if there is no associated media stream. The default is null."
        },
        {
          "term": "sdpMLineIndex Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/sdpMLineIndex",
          "desc": "The zero-based index of the m-line within the SDP of the media description with which the candidate is associated, or null if no such associated exists. The default is null."
        },
        {
          "term": "usernameFragment Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/usernameFragment",
          "desc": "A DOMString containing a string which uniquely identifies the remote peer. This string is generated by WebRTC at the beginning of the session, and at least 24 bits worth of the string contain random data. The string may be up to 256 characters long. This property has no default value and is not present unless set explicitly."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidatePair",
    "calls": {
      "properties": [
        {
          "term": "local",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair/local",
          "desc": "An RTCIceCandidate describing the configuration of the local end of the connection."
        },
        {
          "term": "remote",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair/remote",
          "desc": "The RTCIceCandidate describing the configuration of the remote end of the connection."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidatePairStats",
    "calls": {
      "properties": [
        {
          "term": "availableIncomingBitrate Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/availableIncomingBitrate",
          "desc": "Provides an informative value representing the available inbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's incoming RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP."
        },
        {
          "term": "availableOutgoingBitrate Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/availableOutgoingBitrate",
          "desc": "Provides an informative value representing the available outbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's outoing RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP."
        },
        {
          "term": "bytesReceieved Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/bytesReceived",
          "desc": "The total number of payload bytes received (that is, the total number of bytes received minus any headers, padding, or other administrative overhead) on this candidate pair so far."
        },
        {
          "term": "bytesSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/bytesSent",
          "desc": "The total number of payload bytes sent (that is, the total number of bytes sent minus any headers, padding, or other administrative overhead) so far on this candidate pair."
        },
        {
          "term": "circuitBreakerTriggerCount Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/circuitBreakerTriggerCount",
          "desc": "An integer value indicating the number of times the circuit-breaker has been triggered for this particular 5-tuple (the set of five values comprising a TCP connection: source IP address, source port number, destination IP address, destination port number, and protocol). The circuit breaker is triggered whenever a connection times out or otherwise needs to be automatically aborted."
        },
        {
          "term": "consentExpiredTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/consentExpiredTimestamp",
          "desc": "A DOMHighResTimeStamp value indicating the time at which the most recent STUN binding response expired. This value is undefined if no valid STUN binding responses have been sent on the candidate pair; this can only happen if responsesReceived is 0."
        },
        {
          "term": "consentRequestsSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/consentRequestsSent",
          "desc": "The total number of consent requests that have been sent on this candidate pair."
        },
        {
          "term": "currentRoundTripTime Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/currentRoundTripTime",
          "desc": "A floating-point value indicating the total time, in seconds, that elapsed between the most recently-sent STUN request and the response being received. This may be based upon requests that were involved in confirming permission to open the connection."
        },
        {
          "term": "firstRequestTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/firstRequestTimestamp",
          "desc": "A DOMHighResTimeStamp value which specifies the time at which the first STUN request was sent from the local peer to the remote peer for this candidate pair."
        },
        {
          "term": "lastPacketReceivedTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastPacketReceivedTimestamp",
          "desc": "A DOMHighResTimeStamp value indicating the time at which the last packet was received by the local peer from the remote peer for this candidate pair. Timestamps are not recorded for STUN packets."
        },
        {
          "term": "lastPacketSentTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastPacketSentTimestamp",
          "desc": "A DOMHighResTimeStamp value indicating the time at which the last packet was sent from the local peer to the remote peer for this candidate pair. Timestamps are not recorded for STUN packets."
        },
        {
          "term": "lastRequestTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastRequestTimestamp",
          "desc": "A DOMHighResTimeStamp value which specifies the time at which the last (most recent) STUN request was sent from the local peer to the remote peer for this candidate pair."
        },
        {
          "term": "lastResponseTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastResponseTimestamp",
          "desc": "A DOMHighResTimeStamp value that specifies the time at which the last (most recent) STUN response was received by the local candidate from the remote candidate in this pair."
        },
        {
          "term": "localCandidateId Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/localCandidateId",
          "desc": "The unique ID string corresponding to the RTCIceCandidate from the data included in the RTCIceCandidateStats object providing statistics for the candidate pair's local candidate."
        },
        {
          "term": "nominated Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/nominated",
          "desc": "A Boolean value which, if true, indicates that the candidate pair described by this object is one which has been proposed for use, and will be (or was) used if its priority is the highest among the nominated candidate pairs. See RFC 5245, section 7.1.3.2.4 for details."
        },
        {
          "term": "packetsReceived Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/packetsReceived",
          "desc": "The total number of packets received on this candidate pair."
        },
        {
          "term": "packetsSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/packetsSent",
          "desc": "The total number of packets sent on this candidate pair."
        },
        {
          "term": "remoteCandidateId Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/remoteCandidateId",
          "desc": "The unique ID string corresponding to the remote candidate from which data was taken to construct the RTCIceCandidateStats object describing the remote end of the connection."
        },
        {
          "term": "requestsReceived Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/requestsReceived",
          "desc": "The total number of connectivity check requests that have been received, including retransmissions. This value includes both connectivity checks and STUN consent checks."
        },
        {
          "term": "requestsSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/requestsSent",
          "desc": "The total number of connectivity check requests that have been sent, not including retransmissions."
        },
        {
          "term": "responsesReceived Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/responsesReceived",
          "desc": "The total number of connectivity check responses that have been received."
        },
        {
          "term": "responsesSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/responsesSent",
          "desc": "The total number of connectivity check responses that have been sent. This includes both connectivity check requests and STUN consent requests."
        },
        {
          "term": "retransmissionsReceived Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/retransmissionsReceived",
          "desc": "The total number of times connectivity check request retransmissions were received. A retransmission is a connectivity check request whose TRANSACTION_TRANSMIT_COUNTER attribute's req field is greater than 1."
        },
        {
          "term": "retransmissionsSent Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/retransmissionsSent",
          "desc": "The total number of times connectivity check request retransmissions were sent."
        },
        {
          "term": "state Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/state",
          "desc": "A RTCStatsIceCandidatePairState object which indicates the state of the connection between the two candidates."
        },
        {
          "term": "totalRoundTripTime Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/totalRoundTripTime",
          "desc": "A floating-point value indicating the total time, in seconds, that has elapsed between sending STUN requests and receiving responses to them, for all such requests made to date on this candidate pair. This includes botyh connectivity check and consent check requests. You can compute the average round trip time (RTT) by dividing this value by responsesReceived."
        },
        {
          "term": "transportId Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/transportId",
          "desc": "A DOMString that uniquely identifies the RTCIceTransport that was inspected to obtain the transport-related statistics (as found in RTCTransportStats) used in generating this object."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidateStats",
    "calls": {
      "properties": [
        {
          "term": "address Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/address",
          "desc": "A string containing the address of the candidate. This value may be an IPv4 address, an IPv6 address, or a fully-qualified domain name. This property was previously named ip and only accepted IP addresses."
        },
        {
          "term": "candidateType Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/candidateType",
          "desc": "A string matching one of the values in the RTCIceCandidateType enumerated type, indicating what kind of candidate the object provides statistics for."
        },
        {
          "term": "deleted Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/deleted",
          "desc": "A Boolean value indicating whether or not the candidate has been released or deleted; the default value is false. For local candidates, it's value is true if the candidate has been deleted or released. For host candidates, true means that any network resources (usually a network socket) associated with the candidate have already been released. For TURN candidates, the TURN allocation is no longer active for deleted candidates. This property is not present for remote candidates."
        },
        {
          "term": "networkType Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/networkType",
          "desc": "A string from the RTCNetworkType enumerated type which indicates the type of interface used for a local candidate. This property is only present for local candidates."
        },
        {
          "term": "port Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/port",
          "desc": "The network port number used by the candidate."
        },
        {
          "term": "priority Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/priority",
          "desc": "The candidate's priority, corresponding to RTCIceCandidate.priority."
        },
        {
          "term": "protocol Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/protocol",
          "desc": "A string specifying the protocol (tcp or udp) used to transmit data on the port."
        },
        {
          "term": "relayProtocol Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/relayProtocol",
          "desc": "A string identifying the protocol used by the endpoint for communicating with the TURN server; valid values are tcp, udp, and tls. Only present for local candidates."
        },
        {
          "term": "transportId Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/transportId",
          "desc": "A string uniquely identifiying the transport object that was inspected in order to obtain the RTCTransportStats associated with the candidate correspondin to these statistics."
        },
        {
          "term": "url Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/url",
          "desc": "For local candidates, the url property is the URL of the ICE server from which the candidate was received. This URL matches the one included in the RTCPeerConnectionIceEvent object representing the icecandidate event that delivered the candidate to the local peer."
        }
      ]
    }
  },
  {
    "title": "RTCIceCandidateType",
    "calls": {}
  },
  {
    "title": "RTCIceComponent",
    "calls": {}
  },
  {
    "title": "RTCIceCredentialType",
    "calls": {}
  },
  {
    "title": "RTCIceGathererState",
    "calls": {}
  },
  {
    "title": "RTCIceParameters",
    "calls": {
      "properties": [
        {
          "term": "usernameFragment",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters/usernameFragment",
          "desc": "A DOMString specifying the value of the ICE session's username fragment field, ufrag."
        },
        {
          "term": "password",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters/password",
          "desc": "A DOMString specifying the session's password string."
        }
      ]
    }
  },
  {
    "title": "RTCIceProtocol",
    "calls": {}
  },
  {
    "title": "RTCIceRole",
    "calls": {}
  },
  {
    "title": "RTCIceTcpCandidateType",
    "calls": {}
  },
  {
    "title": "RTCIceTransport",
    "calls": {
      "properties": [
        {
          "term": "component Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/component",
          "desc": "The ICE component being used by the transport. The value is one of the strings from the RTCIceTransport enumerated type: \"RTP\" or \"RTSP\"."
        },
        {
          "term": "gatheringState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/gatheringState",
          "desc": "A DOMString indicating which gathering state the ICE agent is currently in. The value is one of those included in the RTCIceGathererState enumerated type: \"new\", \"gathering\", or \"complete\"."
        },
        {
          "term": "role Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/role",
          "desc": "Returns a DOMString whose value is one of the members of the RTCIceRole enumerated type: \"controlling\" or \"controlled\"; this indicates whether the ICE agent is the one that makes the final decision as to the candidate pair to use or not."
        },
        {
          "term": "state Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/state",
          "desc": "A DOMString indicating what the current state of the ICE agent is. The value of state can be used to determine whether the ICE agent has made an initial connection using a viable candidate pair (\"connected\"), made its final selection of candidate pairs (\"completed\"), or in an error state (\"failed\"), among other states. See the RTCIceTransportState enumerated type for a complete list of states."
        }
      ],
      "methods": [
        {
          "term": "getLocalCandidates()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalCandidates",
          "desc": "Returns an array of RTCIceCandidate objects, each describing one of the ICE candidates that have been gathered so far for the local device. These are the same candidates which have already been sent to the remote peer by sending an icecandidate event to the RTCPeerConnection for transmission."
        },
        {
          "term": "getLocalParameters()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalParameters",
          "desc": "Returns a RTCIceParameters object describing the ICE parameters established by a call to the RTCPeerConnection.setLocalDescription() method. Returns null if parameters have not yet been received."
        },
        {
          "term": "getRemoteCandidates()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteCandidates",
          "desc": "Returns an array of RTCIceCandidate objects, one for each of the remote device's ICE candidates that have been received by the local end of the RTCPeerConnection and delivered to ICE by calling addIceCandidate()."
        },
        {
          "term": "getRemoteParameters()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteParameters",
          "desc": "Returns a RTCIceParameters object containing the ICE parameters for the remote device, as set by a call to RTCPeerConnection.setRemoteDescription(). If setRemoteDescription() hasn't been called yet, the return value is null."
        },
        {
          "term": "getSelectedCandidatePair()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getSelectedCandidatePair",
          "desc": "Returns a RTCIceCandidatePair object that identifies the two candidates—one for each end of the connection—that have been selected so far. It's possible that a better pair will be found and selected later; if you need to keep up with this, watch for the selectedcandidatepairchange event. If no candidate pair has been selected yet, the return value is null."
        }
      ]
    }
  },
  {
    "title": "RTCIceTransportState",
    "calls": {}
  },
  {
    "title": "RTCInboundRtpStreamStats",
    "calls": {
      "properties": [
        {
          "term": "averageRtcpInterval",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/averageRtcpInterval",
          "desc": "A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets."
        },
        {
          "term": "bytesReceived",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/bytesReceived",
          "desc": "A 64-bit integer which indicates the total number of bytes that have been received so far for this media source."
        },
        {
          "term": "fecPacketsDiscarded",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/fecPacketsDiscarded",
          "desc": "An integer value indicating the number of RTP Forward Error Correction (FEC) packets which have been received for this source, for which the error correction payload was discarded."
        },
        {
          "term": "fecPacketsReceived",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/fecPacketsReceived",
          "desc": "An integer value indicating the total number of RTP FEC packets received for this source. This counter may also be incremented when FEC packets arrive in-band along with media content; this can happen with Opus, for example."
        },
        {
          "term": "firCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/firCount",
          "desc": "An integer value which indicates the total number of Full Intra Request (FIR) packets which this receiver has sent to the sender. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. This value is only available for video streams."
        },
        {
          "term": "framesDecoded",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/framesDecoded",
          "desc": "A long integer value indicating the total number of frames of video which have been correctly decoded so far for this media source. This is the number of frames that would have been rendered if none were dropped. Only valid for video streams."
        },
        {
          "term": "lastPacketReceivedTimestamp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/lastPacketReceivedTimestamp",
          "desc": "A DOMHighResTimeStamp indicating the time at which the last packet was received for this source. The timestamp property, on the other hand, indicates the time at which the statistics object was generated."
        },
        {
          "term": "nackCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/nackCount",
          "desc": "An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this receiver has sent."
        },
        {
          "term": "packetsDuplicated",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/packetsDuplicated",
          "desc": "An integer value indicating the total number of packets that have been discarded because they were duplicates. These packets are not counted by packetsDiscarded."
        },
        {
          "term": "packetsFailedDecryption",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/packetsFailedDecryption",
          "desc": "An integer totaling the number of RTP packets that could not be decrypted. These packets are not counted by packetsDiscarded."
        },
        {
          "term": "perDscpPacketsReceived",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/perDscpPacketsReceived",
          "desc": "A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this receiver has received on this RTP stream from this source for each Differentiated Services Code Point (DSCP)."
        },
        {
          "term": "pliCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/pliCount",
          "desc": "An integer specifying the number of times the receiver has notified the sender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. This is only available for video streams."
        },
        {
          "term": "qpSum",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/qpSum",
          "desc": "A 64-bit value containing the sum of the QP values for every frame decoded by this RTP receiver. You can determine the average QP per frame by dividing this value by framesDecoded. Valid only for video streams."
        },
        {
          "term": "receiverId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/receiverId",
          "desc": "A string indicating which identifies the RTCAudioReceiverStats or RTCVideoReceiverStats object associated with the stream's receiver. This ID is stable across multiple calls to getStats()."
        },
        {
          "term": "remoteId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/remoteId",
          "desc": "A string which identifies the RTCRemoteOutboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats()."
        },
        {
          "term": "sliCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/sliCount",
          "desc": "An integer indicating the number of times the receiver sent a Slice Loss Indication (SLI) frame to the sender to tell it that one or more consecutive (in terms of scan order) video macroblocks have been lost or corrupted. Available only for video streams."
        },
        {
          "term": "trackId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/trackId",
          "desc": "A string which identifies the statistics object representing the receiving track; this object is one of two types: RTCReceiverAudioTrackAttachmentStats or RTCReceiverVideoTrackAttachmentStats. This ID is stable across multiple calls to getStats()."
        }
      ]
    }
  },
  {
    "title": "RTCOfferAnswerOptions",
    "calls": {
      "properties": [
        {
          "term": "voiceActivityDetection Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOfferAnswerOptions/voiceActivityDetection",
          "desc": "For configurations of systems and codecs that are able to detect when the user is speaking and toggle muting on and off automatically, this option enables and disables that behavior. The default value is true, enabling this functionality"
        }
      ]
    }
  },
  {
    "title": "RTCOfferOptions",
    "calls": {
      "properties": [
        {
          "term": "iceRestart Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOfferOptions/iceRestart",
          "desc": "A Boolean which, when set to true, tells createOffer() to generate and use new values for the identifying properties of the SDP it creates, resulting in a request that triggers renegotiation of the ICE connection. This is useful if network conditions have changed in a way that make the current configuration untenable or impractical, for instance."
        }
      ]
    }
  },
  {
    "title": "RTCOutboundRtpStreamStats",
    "calls": {
      "properties": [
        {
          "term": "averageRtcpInterval",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/averageRtcpInterval",
          "desc": "A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets."
        },
        {
          "term": "firCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/firCount",
          "desc": "An integer value which indicates the total number of Full Intra Request (FIR) packets which this RTCRtpSender has sent to the remote RTCRtpReceiver. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. Valid only for video streams."
        },
        {
          "term": "framesEncoded",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/framesEncoded",
          "desc": "The number of frames that have been successfully encoded so far for sending on this RTP stream. Only valid for video streams."
        },
        {
          "term": "lastPacketSentTimestamp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/lastPacketSentTimestamp",
          "desc": "A DOMHighResTimeStamp indicating the time at which the last packet was sent for this SSRC. The timestamp property, on the other hand, indicates the time at which the RTCOutboundRtpStreamStats object was generated."
        },
        {
          "term": "nackCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/nackCount",
          "desc": "An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this RTCRtpSender has received from the remote RTCRtpReceiver."
        },
        {
          "term": "perDscpPacketsSent",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/perDscpPacketsSent",
          "desc": "A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this RTCRtpSender has transmitted for this source for each Differentiated Services Code Point (DSCP)."
        },
        {
          "term": "pliCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/pliCount",
          "desc": "An integer specifying the number of times the remote receiver has notified this RTCRtpSender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. Only available for video streams."
        },
        {
          "term": "qpSum",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/qpSum",
          "desc": "A 64-bit value containing the sum of the QP values for every frame encoded by this RTCRtpSender. Valid only for video streams."
        },
        {
          "term": "qualityLimitationDurations",
          "link": "",
          "desc": "A record mapping each of the quality limitation reasons in the RTCRemoteInboundRtpStreamStats enumeration to a floating-point value indicating the number of seconds the stream has spent with its quality limited for that reason."
        },
        {
          "term": "qualityLimitationReason",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/qualityLimitationReason",
          "desc": "A value from the RTCQualityLimitationReason enumerated type explaining why the resolution and/or frame rate is being limited for this RTP stream. Valid only for video streams."
        },
        {
          "term": "remoteId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/remoteId",
          "desc": "A string which identifies the RTCRemoteInboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats()."
        },
        {
          "term": "retransmittedBytesSent",
          "link": "",
          "desc": "The total number of bytes that have been retransmitted for this source as of the time the statistics were sampled. These retransmitted bytes comprise the packets included in the value returned by retransmittedPacketsSent."
        },
        {
          "term": "retransmittedPacketsSent",
          "link": "",
          "desc": "The total number of packets that have needed to be retransmitted for this source as of the time the statistics were sampled. These retransmitted packets are included in the value returned by packetsSent."
        },
        {
          "term": "senderId",
          "link": "",
          "desc": "The id of the RTCAudioSenderStats or RTCVideoSenderStats object containing statistics about this stream's RTCRtpSender."
        },
        {
          "term": "sliCount",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/sliCount",
          "desc": "An integer indicating the number of times this sender received a Slice Loss Indication (SLI) frame from the remote peer, indicating that one or more consecutive video macroblocks have been lost or corrupted. Available only for video streams."
        },
        {
          "term": "targetBitrate",
          "link": "",
          "desc": "A value indicating the bit rate the RTCRtpSender's codec is configured to attempt to achieve in its output media."
        },
        {
          "term": "totalEncodedBytesTarget",
          "link": "",
          "desc": "A cumulative sum of the target frame sizes (the targeted maximum size of the frame in bytes when the codec is asked to compress it) for all of the frames encoded so far. This will likely differ from the total of the actual frame sizes."
        },
        {
          "term": "totalEncodeTime",
          "link": "",
          "desc": "A floating-point value indicating the total number of seconds that have been spent encoding the frames encoded so far by this RTCRtpSender."
        },
        {
          "term": "trackId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/trackId",
          "desc": "The id of the RTCSenderAudioTrackAttachmentStats or RTCSenderVideoTrackAttachmentStats object containing the current track attachment to the RTCRtpSender responsible for this stream."
        }
      ]
    }
  },
  {
    "title": "RTCPeerConnection",
    "calls": {
      "constructors": [
        {
          "term": "RTCPeerConnection() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection",
          "desc": "The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer."
        }
      ]
    }
  },
  {
    "title": "RTCPeerConnectionIceErrorEvent",
    "calls": {
      "constructors": [
        {
          "term": "RTCPeerConnectionIceErrorEvent()",
          "link": "",
          "desc": "Creates and returns a new RTCPeerConnectionIceErrorEvent object, with its type and other properties initialized as specified in the parameters. You will not normally create an object of this type yourself."
        }
      ],
      "properties": [
        {
          "term": "address Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent/address",
          "desc": "A DOMString providing the local IP address used to communicate with the STUN or TURN server being used to negotiate the connection, or null if the local IP address has not yet been exposed as part of a local ICE candidate."
        },
        {
          "term": "errorCode Read only",
          "link": "",
          "desc": "An unsigned integer value stating the numeric STUN error code returned by the STUN or TURN server. If no host candidate can reach the server, this property is set to the number 701, which is outside the range of valid STUN error codes. The 701 error is fired only once per server URL, and only while the is icegatheringstate is gathering."
        },
        {
          "term": "errorText Read only",
          "link": "",
          "desc": "A DOMString containing the STUN reason text returned by the STUN or TURN server. If communication with the STUN or TURN server couldn't be established at all, this string will be a browser-specific string explaining the error."
        },
        {
          "term": "port Read only",
          "link": "",
          "desc": "An unsigned integer value giving the port number over which communication with the STUN or TURN server is taking place, using the IP address given in address. null if the connection hasn't been established (that is, if address is null)."
        },
        {
          "term": "url Read only",
          "link": "",
          "desc": "A DOMString indicating the URL of the STUN or TURN server with which the error occurred."
        }
      ]
    }
  },
  {
    "title": "RTCRemoteOutboundRtpStreamStats",
    "calls": {
      "properties": [
        {
          "term": "localId",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/localId",
          "desc": "A DOMString which is used to find the local RTCInboundRtpStreamStats object which shares the same Synchronization Source (SSRC)."
        },
        {
          "term": "remoteTimestamp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/remoteTimestamp",
          "desc": "A DOMHighResTimeStamp specifying the timestamp (on the remote device) at which the statistics in the RTCRemoteOutboundRtpStreamStats object were sent by the remote endpoint. This is different from the timestamp found in the base RTCStats dictionary; it represents the time at which the object's statistics were received or generated by the local endpoint."
        },
        {
          "term": "reportsSent",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/reportsSent",
          "desc": "An integer value indicating the total number of RTCP Sender Report (SR) blocks that this SSRC has sent."
        }
      ]
    }
  },
  {
    "title": "RTCRtcpParameters",
    "calls": {
      "properties": [
        {
          "term": "cname",
          "link": "",
          "desc": "The Canonical Name (CNAME) being used by RTCP. This is used, for example, in SDES (SDP security descriptions) messages, described in RFC 4568. This property cannot be changed once initialized."
        },
        {
          "term": "reducedSize",
          "link": "",
          "desc": "A Boolean value indicating whether or not reduced size RTCP is configured. If this value is true, reduced size RTCP (described in RFC 5506) is in effect. If false, compund RTCP is in use, as found in RFC 3550. This property cannot be changed once initialized."
        }
      ]
    }
  },
  {
    "title": "RTCRtpCapabilities",
    "calls": {
      "properties": [
        {
          "term": "codecs",
          "link": null,
          "desc": "An array of RTCRtpCodecCapability objects, each describing one of the codecs supported by the RTCRtpSender or RTCRtpReceiver. There are some special entries in this array, described below in the section The codecs array."
        },
        {
          "term": "headerExtensions",
          "link": null,
          "desc": "An array of objects conforming to the RTCRtpHeaderExtensionCapability dictionary. Each object contains a single DOMString, uri, specifying the URI of the header extension, as described in RFC 5285."
        }
      ]
    }
  },
  {
    "title": "RTCRtpCodecCapability",
    "calls": {
      "properties": [
        {
          "term": "channels Optional",
          "link": "",
          "desc": "An unsigned integer value indicating the maximum number of channels supported by the codec; for example, a codec that supports only mono sound would have a value of 1; stereo codecs would have a 2, etc."
        },
        {
          "term": "clockRate",
          "link": "",
          "desc": "An unsigned long integer specifying the codec's clock rate in Hertz (Hz). The IANA maintains a list of codecs and their parameters, including their clock rates."
        },
        {
          "term": "mimeType",
          "link": "",
          "desc": "A DOMString indicating the codec's MIME media type and subtype. See Codecs used by WebRTC for details about potential codecs that might be referenced here."
        },
        {
          "term": "sdpFmtpLine Optional",
          "link": "",
          "desc": "A DOMString giving the format specific parameters field from the a=fmtp line in the SDP which corresponds to the codec, if such a line exists. If there is no parameters field, this property is left out."
        }
      ]
    }
  },
  {
    "title": "RTCRtpCodecParameters",
    "calls": {
      "properties": [
        {
          "term": "payloadType Optional",
          "link": "",
          "desc": "The RTP payload type used to identify this codec."
        },
        {
          "term": "mimeType Optional",
          "link": "",
          "desc": "The codec's MIME media type and subtype specified as a DOMString of the form \"type/subtype\". IANA maintains a registry of valid MIME types."
        },
        {
          "term": "clockRate Optional",
          "link": "",
          "desc": "An unsigned long integer value specifying the codec's clock rate in hertz (Hz). The clock rate is the rate at which the codec's RTP timestamp advances. Most codecs have specific values or ranges of values they permit; see the IANA payload format media type registry for details."
        },
        {
          "term": "channels Optional",
          "link": "",
          "desc": "An unsigned short integer indicating the number of channels the codec should support. For example, for audio codecs, a value of 1 specifies monaural sound while 2 indicates stereo."
        },
        {
          "term": "sdpFmtpLine Optional",
          "link": "",
          "desc": "A DOMString containing the format-specific parameters field from the \"a=fmtp\" line in the codec's SDP, if one is present; see section 5.8 of the IETF specification for JSEP. Note: On an RTCRtpReceiver, the format-specific parameters come from the SDP sent by the remote peer, while for RTCRtpSender, they're provided by the local description."
        }
      ]
    }
  },
  {
    "title": "RTCRtpContributingSource",
    "calls": {
      "properties": [
        {
          "term": "audioLevel Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/audioLevel",
          "desc": "A double-precision floating-point value between 0 and 1 specifying the audio level contained in the last RTP packet played from this source."
        },
        {
          "term": "rtpTimestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/rtpTimestamp",
          "desc": "The RTP timestamp of the media played out at the time indicated by timestamp. This value is a source-generated time value which can be used to help with sequencing and synchronization."
        },
        {
          "term": "source Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/source",
          "desc": "A 32-bit unsigned integer value specifying the CSRC identifier of the contributing source."
        },
        {
          "term": "timestamp Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/timestamp",
          "desc": "A DOMHighResTimeStamp indicating the most recent time at which a frame originating from this source was delivered to the receiver's MediaStreamTrack"
        }
      ]
    }
  },
  {
    "title": "RTCRtpEncodingParameters",
    "calls": {
      "properties": [
        {
          "term": "active",
          "link": "",
          "desc": "If true, the described encoding is currently actively being used. That is, for RTP senders, the encoding is currently being used to send data, while for receivers, the encoding is being used to decode received data. The default value is true."
        },
        {
          "term": "codecPayloadType",
          "link": "",
          "desc": "When describing a codec for an RTCRtpSender, codecPayloadType is a single 8-bit byte (or octet) specifying the codec to use for sending the stream; the value matches one from the owning RTCRtpParameters object's codecs parameter. This value can only be set when creating the transceiver; after that, this value is read only."
        },
        {
          "term": "dtx",
          "link": "",
          "desc": "Only used for an RTCRtpSender whose kind is audio, this property indicates whether or not to use discontinuous transmission (a feature by which a phone is turned off or the microphone muted automatically in the absence of voice activity). The value is taken from the enumerated string type RTCDtxStatus."
        },
        {
          "term": "maxBitrate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters/maxBitrate",
          "desc": "An unsigned long integer indicating the maximum number of bits per second to allow for this encoding. Other parameters may further constrain the bit rate, such as the value of maxFramerate or transport or physical network limitations."
        },
        {
          "term": "maxFramerate",
          "link": "",
          "desc": "A double-precision floating-point value specifying the maximum number of frames per second to allow for this encoding."
        },
        {
          "term": "ptime",
          "link": "",
          "desc": "An unsigned long integer value indicating the preferred duration of a media packet in milliseconds. This is typically only relevant for audio encodings. The user agent will try to match this as well as it can, but there is no guarantee."
        },
        {
          "term": "rid",
          "link": "",
          "desc": "A DOMString which, if set, specifies an RTP stream ID (RID) to be sent using the RID header extension. This parameter cannot be modified using setParameters(). Its value can only be set when the transceiver is first created."
        },
        {
          "term": "scaleResolutionDownBy",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters/scaleResolutionDownBy",
          "desc": "Only used for senders whose track's kind is video, this is a double-precision floating-point value specifying a factor by which to scale down the video during encoding. The default value, 1.0, means that the sent video's size will be the same as the original. A value of 2.0 scales the video frames down by a factor of 2 in each dimension, resulting in a video 1/4 the size of the original. The value must not be less than 1.0 (you can't use this to scale the video up)."
        }
      ]
    }
  },
  {
    "title": "RTCRtpParameters",
    "calls": {
      "properties": [
        {
          "term": "codecs",
          "link": "",
          "desc": "An array of RTCRtpCodecParameters objects describing the set of codecs from which the sender or receiver will choose. This parameter cannot be changed once initially set."
        },
        {
          "term": "headerExtensions",
          "link": "",
          "desc": "An array of zero or more RTP header extensions, each identifying an extension supported by the sender or receiver. Header extensions are described in RFC 3550: 5.3.1. This parameter cannot be changed once initially set."
        },
        {
          "term": "rtcp",
          "link": "",
          "desc": "An RTCRtcpParameters object providing the configuration parameters used for RTCP on the sender or receiver. This parameter cannot be changed once initially set."
        }
      ]
    }
  },
  {
    "title": "RTCRtpReceiveParameters",
    "calls": {}
  },
  {
    "title": "RTCRtpReceiver",
    "calls": {
      "properties": [
        {
          "term": "RTCRtpReceiver.track Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/track",
          "desc": "Returns the MediaStreamTrack associated with the current RTCRtpReceiver instance."
        },
        {
          "term": "RTCRtpReceiver.transport Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/transport",
          "desc": "Returns the RTCDtlsTransport instance over which the media for the receiver's track is received."
        }
      ],
      "methods": [
        {
          "term": "RTCRtpReceiver.getContributingSources()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getContributingSources",
          "desc": "Returns an array of RTCRtpContributingSource instances for each unique CSRC (contributing source) identifier received by the current RTCRtpReceiver in the last ten seconds."
        },
        {
          "term": "RTCRtpReceiver.getParameters()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getParameters",
          "desc": "Returns an RTCRtpParameters object which contains information about how the RTC data is to be decoded."
        },
        {
          "term": "RTCRtpReceiver.getStats()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getStats",
          "desc": "Returns a Promise whose fulfillment handler receives a RTCStatsReport which contains statistics about the incoming streams and their dependencies."
        },
        {
          "term": "RTCRtpReceiver.getSynchronizationSources()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getSynchronizationSources",
          "desc": "Returns an array including one RTCRtpSynchronizationSource instance for each unique SSRC (synchronization source) identifier received by the current RTCRtpReceiver in the last ten seconds."
        }
      ]
    }
  },
  {
    "title": "RTCRtpSender",
    "calls": {
      "properties": [
        {
          "term": "RTCRtpSender.dtmf Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/dtmf",
          "desc": "An RTCDTMFSender which can be used to send DTMF tones using telephone-event payloads on the RTP session represented by the RTCRtpSender object. If null, the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF."
        },
        {
          "term": "RTCRtpSender.track Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track",
          "desc": "The MediaStreamTrack which is being handled by the RTCRtpSender. If track is null, the RTCRtpSender doesn't transmit anything."
        },
        {
          "term": "RTCRtpSender.transport Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/transport",
          "desc": "The RTCDtlsTransport over which the sender is exchanging the RTP and RTCP packets used to manage transmission of media and control data. This value is null until the transport is established. When bundling is in use, more than transceiver may be sharing the same transport object."
        }
      ],
      "methods": [
        {
          "term": "RTCRtpSender.getParameters()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getParameters",
          "desc": "Returns a RTCRtpParameters object describing the current configuration for the encoding and transmission of media on the track."
        },
        {
          "term": "RTCRtpSender.getStats()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getStats",
          "desc": "Returns a Promise which is fulfilled with a RTCStatsReport which provides statistics data for all outbound streams being sent using this RTCRtpSender."
        },
        {
          "term": "RTCRtpSender.setParameters()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters",
          "desc": "Applies changes to parameters which configure how the track is encoded and transmitted to the remote peer."
        },
        {
          "term": "RTCRtpSender.setStreams()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setStreams",
          "desc": "Sets the MediaStream(s) associated with the track being transmitted by this sender."
        },
        {
          "term": "RTCRtpSender.replaceTrack()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack",
          "desc": "Attempts to replace the track currently being sent by the RTCRtpSender with another track, without performing renegotiation. This method can be used, for example, to toggle between the front- and rear-facing cameras on a device."
        }
      ]
    }
  },
  {
    "title": "RTCRtpSendParameters",
    "calls": {
      "properties": [
        {
          "term": "encodings",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSendParameters/encodings",
          "desc": "An array of RTCRtpEncodingParameters objects, each specifying the parameters for a single codec that could be used to encode the track's media."
        },
        {
          "term": "transactionId",
          "link": "",
          "desc": "A string containing a unique ID for the last set of parameters applied; this value is used to ensure that setParameters() can only be called to alter changes made by a specific previous call to getParameters(). Once this parameter is initially set, it cannot be changed."
        }
      ]
    }
  },
  {
    "title": "RTCRtpStreamStats",
    "calls": {}
  },
  {
    "title": "RTCRtpSynchronizationSource",
    "calls": {
      "properties": [
        {
          "term": "voiceActivityFlag Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSynchronizationSource/voiceActivityFlag",
          "desc": "A Boolean value indicating whether or not voice activity is included in the last RTP packet played from the source. If the peer has indicated that it's not supporting voice activity detection, this field is not provided."
        }
      ]
    }
  },
  {
    "title": "RTCRtpTransceiver",
    "calls": {
      "properties": [
        {
          "term": "currentDirection Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/currentDirection",
          "desc": "A read-only string from the enum RTCRtpTransceiverDirection which indicates the transceiver's current directionality, or null if the transceiver is stopped or has never participated in an exchange of offers and answers. To change the transceiver's directionality, set the value of the direction property."
        },
        {
          "term": "direction",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/direction",
          "desc": "A string from the enum RTCRtpTransceiverDirection which is used to set the transceiver's desired direction."
        },
        {
          "term": "mid Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/mid",
          "desc": "The media ID of the m-line associated with this transceiver. This association is established, when possible, whenever either a local or remote description is applied. This field is null if neither a local or remote description has been applied, or if its associated m-line is rejected by either a remote offer or any answer."
        },
        {
          "term": "receiver Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/receiver",
          "desc": "The RTCRtpReceiver object that handles receiving and decoding incoming media."
        },
        {
          "term": "sender Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/sender",
          "desc": "The RTCRtpSender object responsible for encoding and sending data to the remote peer."
        },
        {
          "term": "stopped",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/stopped",
          "desc": "Indicates whether or not sending and receiving using the paired RTCRtpSender and RTCRtpReceiver has been permanently disabled, either due to SDP offer/answer, or due to a call to stop()."
        }
      ],
      "methods": [
        {
          "term": "setCodecPreferences()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/setCodecPreferences",
          "desc": "A list of RTCRtpCodecParameters objects which override the default preferences used by the user agent for the transceiver's codecs."
        },
        {
          "term": "stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/stop",
          "desc": "Permanently stops the RTCRtpTransceiver. The associated sender stops sending data, and the associated receiver likewise stops receiving and decoding incoming data."
        }
      ]
    }
  },
  {
    "title": "RTCRtpTransceiverDirection",
    "calls": {}
  },
  {
    "title": "RTCRtpTransceiverInit",
    "calls": {
      "properties": [
        {
          "term": "direction Optional",
          "link": null,
          "desc": "The new transceiver's preferred directionality. This value is used to initialize the new RTCRtpTransceiver object's RTCRtpTransceiver.direction property."
        },
        {
          "term": "sendEncodings Optional",
          "link": null,
          "desc": "A list of encodings to allow when sending RTP media from the RTCRtpSender. Each entry is of type RTCRtpEncodingParameters."
        },
        {
          "term": "streams Optional",
          "link": null,
          "desc": "A list of MediaStream objects to add to the transceiver'sRTCRtpReceiver; when the remote peer's RTCPeerConnection's track event occurs, these are the streams that will be specified by that event."
        }
      ]
    }
  },
  {
    "title": "RTCStats",
    "calls": {
      "properties": [
        {
          "term": "id",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/id",
          "desc": "A DOMString which uniquely identifies the object which was inspected to produce this object based on RTCStats."
        },
        {
          "term": "timestamp",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/timestamp",
          "desc": "A DOMHighResTimeStamp object indicating the time at which the sample was taken for this statistics object."
        },
        {
          "term": "type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/type",
          "desc": "A DOMString indicating the type of statistics the object contains, taken from the enum type RTCStatsType."
        }
      ]
    }
  },
  {
    "title": "RTCStatsIceCandidatePairState",
    "calls": {}
  },
  {
    "title": "RTCStatsReport",
    "calls": {}
  },
  {
    "title": "RTCStatsType",
    "calls": {}
  },
  {
    "title": "RTCTrackEvent",
    "calls": {
      "constructors": [
        {
          "term": "RTCTrackEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/RTCTrackEvent",
          "desc": "Creates and returns a new RTCTrackEvent object, initialized with properties taken from the specified RTCTrackEventInit dictionary. You will probably not need to create new track events yourself, since they're typically created by the WebRTC infrastructure and sent to the connection's ontrack event handler."
        }
      ],
      "properties": [
        {
          "term": "receiver Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/receiver",
          "desc": "The RTCRtpReceiver used by the track that's been added to the RTCPeerConnection."
        },
        {
          "term": "streams Read only  Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/streams",
          "desc": "An array of MediaStream objects, each representing one of the media streams to which the added track belongs. By default, the array is empty, indicating a streamless track."
        },
        {
          "term": "track Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/track",
          "desc": "The MediaStreamTrack which has been added to the connection."
        },
        {
          "term": "transceiver Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/transceiver",
          "desc": "The RTCRtpTransceiver being used by the new track."
        }
      ]
    }
  },
  {
    "title": "RTCTrackEventInit",
    "calls": {
      "properties": [
        {
          "term": "receiver",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEventInit/receiver",
          "desc": "The RTCRtpReceiver which is being used to receive the track's media."
        },
        {
          "term": "streams Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEventInit/streams",
          "desc": "An array of MediaStream objects representing each of the streams that comprise the event's corresponding track."
        },
        {
          "term": "track",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEventInit/track",
          "desc": "The MediaStreamTrack the event is associated with."
        },
        {
          "term": "transceiver",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/transceiver",
          "desc": "The RTCRtpTransceiver associated with the event."
        }
      ]
    }
  },
  {
    "title": "Sanitizer",
    "calls": {
      "methods": [
        {
          "term": "Sanitizer.sanitizeToString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer/sanitizeToString",
          "desc": "Returns a sanitized String from an input, removing any offending elements or attributes."
        },
        {
          "term": "Sanitizer.sanitize()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer/sanitize",
          "desc": "Returns a sanitized DocumentFragment from an input, removing any offending elements or attributes."
        }
      ]
    }
  },
  {
    "title": "Screen",
    "calls": {
      "properties": [
        {
          "term": "Screen.availTop \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop",
          "desc": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features."
        },
        {
          "term": "Screen.availLeft \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft",
          "desc": "Returns the first available pixel available from the left side of the screen."
        },
        {
          "term": "Screen.availHeight",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight",
          "desc": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows."
        },
        {
          "term": "Screen.availWidth",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth",
          "desc": "Returns the amount of horizontal space in pixels available to the window."
        },
        {
          "term": "Screen.colorDepth",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth",
          "desc": "Returns the color depth of the screen."
        },
        {
          "term": "Screen.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/height",
          "desc": "Returns the height of the screen in pixels."
        },
        {
          "term": "Screen.left \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/left",
          "desc": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen."
        },
        {
          "term": "Screen.orientation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation",
          "desc": "Returns the ScreenOrientation instance associated with this screen."
        },
        {
          "term": "Screen.pixelDepth",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth",
          "desc": "Gets the bit depth of the screen."
        },
        {
          "term": "Screen.top \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/top",
          "desc": "Returns the distance in pixels from the top side of the current screen."
        },
        {
          "term": "Screen.width",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/width",
          "desc": "Returns the width of the screen."
        },
        {
          "term": "Screen.mozEnabled \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled",
          "desc": "Boolean. Setting to false will turn off the device's screen."
        },
        {
          "term": "Screen.mozBrightness \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness",
          "desc": "Controls the brightness of a device's screen. A double between 0 and 1.0 is expected."
        }
      ],
      "methods": [
        {
          "term": "Screen.lockOrientation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation",
          "desc": "Lock the screen orientation (only works in fullscreen or for installed apps)"
        },
        {
          "term": "Screen.unlockOrientation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Screen/unlockOrientation",
          "desc": "Unlock the screen orientation (only works in fullscreen or for installed apps)"
        }
      ]
    }
  },
  {
    "title": "ScreenOrientation",
    "calls": {
      "properties": [
        {
          "term": "ScreenOrientation.typeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type",
          "desc": "Returns the document's current orientation type, one of \"portrait-primary\", \"portrait-secondary\", \"landscape-primary\", or \"landscape-secondary\"."
        },
        {
          "term": "ScreenOrientation.angleRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle",
          "desc": "Returns the document's current orientation angle."
        }
      ],
      "handlers": [
        {
          "term": "ScreenOrientation.onchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/onchange",
          "desc": "The EventHandler called whenever the screen changes orientation."
        }
      ],
      "methods": [
        {
          "term": "ScreenOrientation.lock()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/lock",
          "desc": "Locks the orientation of the containing document to its default orientation and returns a Promise."
        },
        {
          "term": "ScreenOrientation.unlock()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/unlock",
          "desc": "Unlocks the orientation of the containing document from its default orientation."
        }
      ]
    }
  },
  {
    "title": "ScrollToOptions",
    "calls": {
      "properties": [
        {
          "term": "ScrollToOptions.top",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/top",
          "desc": "Specifies the number of pixels along the Y axis to scroll the window or element."
        },
        {
          "term": "ScrollToOptions.left",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/left",
          "desc": "Specifies the number of pixels along the X axis to scroll the window or element."
        },
        {
          "term": "ScrollToOptions.behavior",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior",
          "desc": "Specifies whether the scrolling should animate smoothly, or happen instantly in a single jump. This is actually defined on the ScrollOptions dictionary, which is implemented by ScrollToOptions."
        }
      ]
    }
  },
  {
    "title": "Sensor",
    "calls": {
      "properties": [
        {
          "term": "Sensor.activated Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/activated",
          "desc": "Returns a Boolean indicating whether the sensor is active."
        },
        {
          "term": "Sensor.hasReading Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/hasReading",
          "desc": "Returns a Boolean indicating whether the sensor has a reading."
        },
        {
          "term": "Sensor.timestamp Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/timestamp",
          "desc": "Returns the time stamp of the latest sensor reading."
        }
      ],
      "handlers": [
        {
          "term": "Sensor.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onerror",
          "desc": "Called when an error occurs on one of the child interfaces of the Sensor interface."
        },
        {
          "term": "Sensor.onreading",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onreading",
          "desc": "Called when a reading is taken on one of the child interfaces of the Sensor interface."
        },
        {
          "term": "Sensor.onactivate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onactivate",
          "desc": "Called when one of the Sensor interface's becomes active."
        }
      ],
      "methods": [
        {
          "term": "Sensor.start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/start",
          "desc": "Activates one of the sensors based on Sensor."
        },
        {
          "term": "Sensor.stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor/stop",
          "desc": "Deactivates one of the sensors based on Sensor."
        }
      ]
    }
  },
  {
    "title": "SensorErrorEvent",
    "calls": {
      "constructors": [
        {
          "term": "SensorErrorEvent.SensorErrorEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SensorErrorEvent/SensorErrorEvent",
          "desc": "Creates a new SensorErrorEvent object."
        }
      ],
      "properties": [
        {
          "term": "SensorErrorEvent.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SensorErrorEvent/error",
          "desc": "Returns the DOMException object passed in the event's contructor."
        }
      ]
    }
  },
  {
    "title": "ServiceWorker",
    "calls": {
      "properties": [
        {
          "term": "ServiceWorker.scriptURL Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL",
          "desc": "Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker."
        },
        {
          "term": "ServiceWorker.state Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state",
          "desc": "Returns the state of the service worker. It returns one of the following values: installing, installed, activating, activated, or redundant."
        }
      ],
      "handlers": [
        {
          "term": "ServiceWorker.onstatechange Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange",
          "desc": "An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes."
        }
      ]
    }
  },
  {
    "title": "ServiceWorkerContainer",
    "calls": {
      "properties": [
        {
          "term": "ServiceWorkerContainer.controller Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller",
          "desc": "Returns a ServiceWorker object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active). This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker."
        },
        {
          "term": "ServiceWorkerContainer.ready Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready",
          "desc": "Provides a way of delaying code execution until a service worker is active. It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker. Once that condition is met, it resolves with the ServiceWorkerRegistration."
        }
      ],
      "methods": [
        {
          "term": "ServiceWorkerContainer.register()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register",
          "desc": "Creates or updates a ServiceWorkerRegistration for the given scriptURL."
        },
        {
          "term": "ServiceWorkerContainer.getRegistration()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration",
          "desc": "Gets a ServiceWorkerRegistration object whose scope matches the provided document URL. The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined."
        },
        {
          "term": "ServiceWorkerContainer.getRegistrations()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations",
          "desc": "Returns all ServiceWorkerRegistration objects associated with a ServiceWorkerContainer in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration."
        },
        {
          "term": "ServiceWorkerContainer.startMessages()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/startMessages",
          "desc": "explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading."
        }
      ]
    }
  },
  {
    "title": "ServiceWorkerGlobalScope",
    "calls": {
      "properties": [
        {
          "term": "ServiceWorkerGlobalScope.caches Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/caches",
          "desc": "Contains the CacheStorage object associated with the service worker."
        },
        {
          "term": "ServiceWorkerGlobalScope.clients Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/clients",
          "desc": "Contains the Clients object associated with the service worker."
        },
        {
          "term": "ServiceWorkerGlobalScope.registration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/registration",
          "desc": "Contains the ServiceWorkerRegistration object that represents the service worker's registration."
        }
      ],
      "methods": [
        {
          "term": "ServiceWorkerGlobalScope.skipWaiting()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting",
          "desc": "Allows the current service worker registration to progress from waiting to active state while service worker clients are using it."
        }
      ]
    }
  },
  {
    "title": "ServiceWorkerRegistration",
    "calls": {
      "properties": [
        {
          "term": "ServiceWorkerRegistration.scope Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope",
          "desc": "Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the ServiceWorker."
        },
        {
          "term": "ServiceWorkerRegistration.installing Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/installing",
          "desc": "Returns a service worker whose state is installing. This is initially set to null."
        },
        {
          "term": "ServiceWorkerRegistration.waiting Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/waiting",
          "desc": "Returns a service worker whose state is installed. This is initially set to null."
        },
        {
          "term": "ServiceWorkerRegistration.active Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/active",
          "desc": "Returns a service worker whose state is activating or activated. This is initially set to null. An active worker will control a ServiceWorkerClient if the client's URL falls within the scope of the registration (the scope option set when ServiceWorkerContainer.register is first called.)"
        },
        {
          "term": "ServiceWorkerRegistration.navigationPreload Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/navigationPreload",
          "desc": "Returns the instance of NavigationPreloadManager associated with the current service worker registration."
        },
        {
          "term": "ServiceWorkerRegistration.pushManager Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/pushManager",
          "desc": "Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status."
        },
        {
          "term": "ServiceWorkerRegistration.sync \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/sync",
          "desc": "Returns a reference to the SyncManager interface, which manages background synchronization processes."
        },
        {
          "term": "ServiceWorkerRegistration.index Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/index",
          "desc": "Returns a reference to the ContentIndex interface, for managing indexed content for offline viewing."
        }
      ],
      "handlers": [
        {
          "term": "ServiceWorkerRegistration.onupdatefound Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/onupdatefound",
          "desc": "An EventListener property called whenever an event of type updatefound is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker."
        }
      ],
      "methods": [
        {
          "term": "ServiceWorkerRegistration.getNotifications()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/getNotifications",
          "desc": "Returns a Promise that resolves to an array of Notification objects."
        },
        {
          "term": "ServiceWorkerRegistration.showNotification()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification",
          "desc": "Displays the notification with the requested title."
        },
        {
          "term": "ServiceWorkerRegistration.update()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/update",
          "desc": "Checks the server for an updated version of the service worker without consulting caches."
        },
        {
          "term": "ServiceWorkerRegistration.unregister()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/unregister",
          "desc": "Unregisters the service worker registration and returns a Promise. The service worker will finish any ongoing operations before it is unregistered."
        }
      ]
    }
  },
  {
    "title": "ServiceWorkerState",
    "calls": {}
  },
  {
    "title": "ShadowRoot",
    "calls": {
      "properties": [
        {
          "term": "ShadowRoot.delegatesFocus Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus",
          "desc": "Returns a boolean that indicates whether delegatesFocus was set when the shadow was attached (see Element.attachShadow())."
        },
        {
          "term": "ShadowRoot.host Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host",
          "desc": "Returns a reference to the DOM element the ShadowRoot is attached to."
        },
        {
          "term": "ShadowRoot.innerHTML \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/innerHTML",
          "desc": "Sets or returns a reference to the DOM tree inside the ShadowRoot."
        },
        {
          "term": "ShadowRoot.mode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode",
          "desc": "The mode of the ShadowRoot — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript."
        }
      ],
      "methods": [
        {
          "term": "DocumentOrShadowRoot.getSelection()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection",
          "desc": "Returns a Selection object representing the range of text selected by the user, or the current position of the caret."
        },
        {
          "term": "DocumentOrShadowRoot.elementFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementFromPoint",
          "desc": "Returns the topmost element at the specified coordinates."
        },
        {
          "term": "DocumentOrShadowRoot.elementsFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementsFromPoint",
          "desc": "Returns an array of all elements at the specified coordinates."
        },
        {
          "term": "DocumentOrShadowRoot.caretPositionFromPoint()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/caretPositionFromPoint",
          "desc": "Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node."
        }
      ]
    }
  },
  {
    "title": "SharedWorker",
    "calls": {
      "properties": [
        {
          "term": "AbstractWorker.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
          "desc": "Is an EventListener that is called whenever an ErrorEvent of type error bubbles through the worker."
        },
        {
          "term": "SharedWorker.port Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port",
          "desc": "Returns a MessagePort object used to communicate with and control the shared worker."
        }
      ]
    }
  },
  {
    "title": "SharedWorkerGlobalScope",
    "calls": {
      "properties": [
        {
          "term": "SharedWorkerGlobalScope.name Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/name",
          "desc": "The name that the SharedWorker was (optionally) given when it was created using the SharedWorker() constructor. This is mainly useful for debugging purposes."
        },
        {
          "term": "SharedWorkerGlobalScope.applicationCache Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/applicationCache",
          "desc": "This property returns the ApplicationCache object for the worker (see Using the application cache)."
        }
      ],
      "handlers": [
        {
          "term": "SharedWorkerGlobalScope.onconnect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/onconnect",
          "desc": "Is an EventHandler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread."
        }
      ],
      "methods": [
        {
          "term": "SharedWorkerGlobalScope.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/close",
          "desc": "Discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope."
        }
      ]
    }
  },
  {
    "title": "Slottable",
    "calls": {
      "properties": [
        {
          "term": "Slottable.assignedSlot Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Slottable/assignedSlot",
          "desc": "Returns the <slot> the node is inserted in."
        }
      ]
    }
  },
  {
    "title": "SpeechRecognitionErrorEvent",
    "calls": {
      "properties": [
        {
          "term": "SpeechRecognitionErrorEvent.error Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent/error",
          "desc": "Returns the type of error raised."
        },
        {
          "term": "SpeechRecognitionErrorEvent.message Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent/message",
          "desc": "Returns a message describing the error in more detail."
        }
      ]
    }
  },
  {
    "title": "StaticRange",
    "calls": {
      "constructors": [
        {
          "term": "StaticRange()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/StaticRange",
          "desc": "Creates a new StaticRange object given the StaticRangeInit dictionary specifying the default values for its properties."
        }
      ],
      "properties": [
        {
          "term": "StaticRange.collapsed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/collapsed",
          "desc": "Returns a Boolean value which is true if the range's start and end positions are the same, resulting in a range of length 0."
        },
        {
          "term": "StaticRange.endContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/endContainer",
          "desc": "Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset."
        },
        {
          "term": "StaticRange.endOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/endOffset",
          "desc": "Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found."
        },
        {
          "term": "StaticRange.startContainer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/startContainer",
          "desc": "Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset."
        },
        {
          "term": "StaticRange.startOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/startOffset",
          "desc": "Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located."
        }
      ],
      "methods": [
        {
          "term": "StaticRange.toRange()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/toRange",
          "desc": "Returns a new Range object which describes the same range as the source StaticRange, but is \"live\" with values that change to reflect changes in the contents of the DOM tree."
        }
      ]
    }
  },
  {
    "title": "StereoPannerNode",
    "calls": {
      "constructors": [
        {
          "term": "StereoPannerNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/StereoPannerNode",
          "desc": "Creates a new instance of a StereoPannerNode object."
        }
      ],
      "properties": [
        {
          "term": "StereoPannerNode.pan Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan",
          "desc": "Is an a-rate AudioParam representing the amount of panning to apply."
        }
      ]
    }
  },
  {
    "title": "Storage",
    "calls": {
      "properties": [
        {
          "term": "Storage.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/length",
          "desc": "Returns an integer representing the number of data items stored in the Storage object."
        }
      ],
      "methods": [
        {
          "term": "Storage.key()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/key",
          "desc": "When passed a number n, this method will return the name of the nth key in the storage."
        },
        {
          "term": "Storage.getItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem",
          "desc": "When passed a key name, will return that key's value."
        },
        {
          "term": "Storage.setItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem",
          "desc": "When passed a key name and value, will add that key to the storage, or update that key's value if it already exists."
        },
        {
          "term": "Storage.removeItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem",
          "desc": "When passed a key name, will remove that key from the storage."
        },
        {
          "term": "Storage.clear()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear",
          "desc": "When invoked, will empty all keys out of the storage."
        }
      ]
    }
  },
  {
    "title": "StorageEstimate",
    "calls": {
      "properties": [
        {
          "term": "quota Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota",
          "desc": "A numeric value in bytes which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case."
        },
        {
          "term": "usage Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage",
          "desc": "A numeric value in bytes approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by quota. Unit is byte."
        },
        {
          "term": "usageDetails Secure context",
          "link": "",
          "desc": "A dictionary containing a breakdown of usage by storage system. All included members will have a usage greater than 0 and any storage system with 0 usage will be excluded from the dictionary."
        }
      ]
    }
  },
  {
    "title": "StorageEvent",
    "calls": {}
  },
  {
    "title": "StorageManager",
    "calls": {
      "methods": [
        {
          "term": "StorageManager.estimate() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate",
          "desc": "Returns a Promise that resolves to a StorageEstimate object containing usage and quota numbers for your origin."
        },
        {
          "term": "StorageManager.persist() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persist",
          "desc": "Returns a Promise that resolves to true if the user agent is able to persist your site's storage."
        },
        {
          "term": "StorageManager.persisted() Secure context",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persisted",
          "desc": "Returns a Promise that resolves to true if persistence has already been granted for your site's storage."
        }
      ]
    }
  },
  {
    "title": "StyleSheet",
    "calls": {
      "properties": [
        {
          "term": "StyleSheet.disabled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled",
          "desc": "Is a Boolean representing whether the current stylesheet has been applied or not."
        },
        {
          "term": "StyleSheet.href Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/href",
          "desc": "Returns a DOMString representing the location of the stylesheet."
        },
        {
          "term": "StyleSheet.media Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/media",
          "desc": "Returns a MediaList representing the intended destination medium for style information."
        },
        {
          "term": "StyleSheet.ownerNode Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/ownerNode",
          "desc": "Returns a Node associating this style sheet with the current document."
        },
        {
          "term": "StyleSheet.parentStyleSheet Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/parentStyleSheet",
          "desc": "Returns a StyleSheet including this one, if any; returns null if there aren't any."
        },
        {
          "term": "StyleSheet.title Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/title",
          "desc": "Returns a DOMString representing the advisory title of the current style sheet."
        },
        {
          "term": "StyleSheet.typeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/type",
          "desc": "Returns a DOMString representing the style sheet language for this style sheet."
        }
      ]
    }
  },
  {
    "title": "StyleSheetList",
    "calls": {}
  },
  {
    "title": "SubmitEvent",
    "calls": {
      "constructors": [
        {
          "term": "SubmitEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/SubmitEvent",
          "desc": "Creates and returns a new SubmitEvent object whose type and other options are configured as specified. Note that currently the only valid type for a SubmitEvent is submit."
        }
      ],
      "properties": [
        {
          "term": "submitter Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter",
          "desc": "An HTMLElement object which identifies the button or other element which was invoked to trigger the form being submitted."
        }
      ]
    }
  },
  {
    "title": "SubtleCrypto",
    "calls": {
      "methods": [
        {
          "term": "SubtleCrypto.encrypt()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt",
          "desc": "Returns a Promise that fufills with the encrypted data corresponding to the clear text, algorithm, and key given as parameters."
        },
        {
          "term": "SubtleCrypto.decrypt()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt",
          "desc": "Returns a Promise that fulfills with the clear data corresponding to the encrypted text, algorithm, and key given as parameters."
        },
        {
          "term": "SubtleCrypto.sign()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign",
          "desc": "Returns a Promise that fulfills with the signature corresponding to the text, algorithm, and key given as parameters."
        },
        {
          "term": "SubtleCrypto.verify()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify",
          "desc": "Returns a Promise that fulfills with a Boolean value indicating if the signature given as a parameter matches the text, algorithm, and key that are also given as parameters."
        },
        {
          "term": "SubtleCrypto.digest()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest",
          "desc": "Returns a Promise that fulfills with a digest generated from the algorithm and text given as parameters."
        },
        {
          "term": "SubtleCrypto.generateKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey",
          "desc": "Returns a Promise that fulfills with a newly-generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithms. These will match the algorithm, usages, and extractability given as parameters."
        },
        {
          "term": "SubtleCrypto.deriveKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey",
          "desc": "Returns a Promise that fulfills with a newly generated CryptoKey derived from the master key and specific algorithm given as parameters."
        },
        {
          "term": "SubtleCrypto.deriveBits()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits",
          "desc": "Returns a Promise that fulfills with a newly generated buffer of pseudo-random bits derived from the master key and specific algorithm given as parameters."
        },
        {
          "term": "SubtleCrypto.importKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey",
          "desc": "Returns a Promise that fulfills with a CryptoKey corresponding to the format, the algorithm, raw key data, usages, and extractability given as parameters."
        },
        {
          "term": "SubtleCrypto.exportKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey",
          "desc": "Returns a Promise that fulfills with a buffer containing the key in the requested format."
        },
        {
          "term": "SubtleCrypto.wrapKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey",
          "desc": "Returns a Promise that fulfills with a wrapped symmetric key for usage (transfer and storage) in insecure environments. The wrapped key matches the format specified in the given parameters, and wrapping is done by the given wrapping key, using the specified algorithm."
        },
        {
          "term": "SubtleCrypto.unwrapKey()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey",
          "desc": "Returns a Promise that fulfills with a CryptoKey corresponding to the wrapped key given in the parameter."
        }
      ]
    }
  },
  {
    "title": "SVGAElement",
    "calls": {
      "properties": [
        {
          "term": "SVGAElement.download",
          "link": "",
          "desc": "See HTMLAnchorElement.download."
        },
        {
          "term": "SVGAElement.href",
          "link": "",
          "desc": "See HTMLAnchorElement.href."
        },
        {
          "term": "SVGAElement.hreflang",
          "link": "",
          "desc": "Is a DOMString that reflects the hreflang attribute, indicating the language of the linked resource."
        },
        {
          "term": "SVGAElement.ping",
          "link": "",
          "desc": "Is a DOMString that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking."
        },
        {
          "term": "SVGAElement.referrerPolicy",
          "link": "",
          "desc": "See HTMLAnchorElement.referrerPolicy."
        },
        {
          "term": "SVGAElement.rel",
          "link": "",
          "desc": "See HTMLAnchorElement.rel."
        },
        {
          "term": "SVGAElement.relList",
          "link": "",
          "desc": "See HTMLAnchorElement.relList."
        },
        {
          "term": "SVGAElement.target Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement/target",
          "desc": "It corresponds to the target attribute of the given element."
        },
        {
          "term": "SVGAElement.text",
          "link": "",
          "desc": "Is a DOMString being a synonym for the Node.textContent property."
        },
        {
          "term": "SVGAElement.type",
          "link": "",
          "desc": "Is a DOMString that reflects the type attribute, indicating the MIME type of the linked resource."
        }
      ]
    }
  },
  {
    "title": "SVGAngle",
    "calls": {}
  },
  {
    "title": "SVGAnimatedAngle",
    "calls": {}
  },
  {
    "title": "SVGAnimatedBoolean",
    "calls": {}
  },
  {
    "title": "SVGAnimatedEnumeration",
    "calls": {}
  },
  {
    "title": "SVGAnimatedInteger",
    "calls": {}
  },
  {
    "title": "SVGAnimatedLength",
    "calls": {}
  },
  {
    "title": "SVGAnimatedLengthList",
    "calls": {}
  },
  {
    "title": "SVGAnimatedNumber",
    "calls": {}
  },
  {
    "title": "SVGAnimatedNumberList",
    "calls": {
      "properties": [
        {
          "term": "SVGAnimatedNumberList.baseVal Read only",
          "link": "",
          "desc": "Is a SVGNumberList that represents the base value of the given attribute before applying any animations."
        },
        {
          "term": "SVGAnimatedNumberList.animVal Read only",
          "link": "",
          "desc": "Is a read only SVGNumberList that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGNumberList will have the same contents as baseVal. The object referenced by animVal will always be distinct from the one referenced by baseVal, even when the attribute is not animated."
        }
      ]
    }
  },
  {
    "title": "SVGAnimatedPoints",
    "calls": {}
  },
  {
    "title": "SVGAnimatedPreserveAspectRatio",
    "calls": {
      "properties": [
        {
          "term": "SVGAnimatedPreserveAspectRatio.baseVal Read only",
          "link": "",
          "desc": "Is a SVGPreserveAspectRatio that represents the base value of the given attribute before applying any animations."
        },
        {
          "term": "SVGAnimatedPreserveAspectRatio.animVal Read only",
          "link": "",
          "desc": "Is a SVGPreserveAspectRatio that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGPreserveAspectRatio will have the same contents as baseVal. The object referenced by animVal is always distinct from the one referenced by baseVal, even when the attribute is not animated."
        }
      ]
    }
  },
  {
    "title": "SVGAnimatedRect",
    "calls": {}
  },
  {
    "title": "SVGAnimatedString",
    "calls": {
      "properties": [
        {
          "term": "SVGAnimatedString.animVal Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/animVal",
          "desc": "This is a DOMString representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal."
        },
        {
          "term": "SVGAnimatedString.baseVal",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/baseVal",
          "desc": "This is a DOMString representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException."
        }
      ]
    }
  },
  {
    "title": "SVGAnimatedTransformList",
    "calls": {}
  },
  {
    "title": "SVGAnimateElement",
    "calls": {}
  },
  {
    "title": "SVGAnimateMotionElement",
    "calls": {}
  },
  {
    "title": "SVGAnimateTransformElement",
    "calls": {}
  },
  {
    "title": "SVGAnimationElement",
    "calls": {
      "properties": [
        {
          "term": "SVGAnimationElement.targetElement Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement/targetElement",
          "desc": "An SVGElement representing the element which is being animated. If no target element is being animated (for example, because the href specifies an unknown element) the value returned is null."
        }
      ],
      "methods": [
        {
          "term": "SVGAnimationElement.getStartTime()",
          "link": "",
          "desc": "Returns a float representing the begin time, in seconds, for this animation element's current interval, if it exists, regardless of whether the interval has begun yet. If there is no current interval, then a DOMException with code INVALID_STATE_ERR is thrown."
        },
        {
          "term": "SVGAnimationElement.getCurrentTime()",
          "link": "",
          "desc": "Returns a float representing the current time in seconds relative to time zero for the given time container."
        },
        {
          "term": "SVGAnimationElement.getSimpleDuration()",
          "link": "",
          "desc": "Returns a float representing the number of seconds for the simple duration for this animation. If the simple duration is undefined (e.g., the end time is indefinite), then a DOMException with code NOT_SUPPORTED_ERR is raised."
        },
        {
          "term": "SVGAnimationElement.beginElement() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Creates a begin instance time for the current time. The new instance time is added to the begin instance times list. The behavior of this method is equivalent to beginElementAt(0)."
        },
        {
          "term": "SVGAnimationElement.beginElementAt() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Creates a begin instance time for the current time plus the specified offset. The new instance time is added to the begin instance times list."
        },
        {
          "term": "SVGAnimationElement.endElement() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Creates an end instance time for the current time. The new instance time is added to the end instance times list. The behavior of this method is equivalent to endElementAt(0)."
        },
        {
          "term": "SVGAnimationElement.endElementAt() \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Creates a end instance time for the current time plus the specified offset. The new instance time is added to the end instance times list."
        }
      ]
    }
  },
  {
    "title": "SVGCircleElement",
    "calls": {
      "properties": [
        {
          "term": "SVGCircleElement.cx Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/cx",
          "desc": "This property defines the x-coordinate of the center of the <circle> element. It is denoted by the cx attribute of the element."
        },
        {
          "term": "SVGCircleElement.cy Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/cy",
          "desc": "This property defines the y-coordinate of the center of the <circle> element. It is denoted by the cy attribute of the element."
        },
        {
          "term": "SVGCircleElement.r Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/r",
          "desc": "This property defines the radius of the <circle> element. It is denoted by the r of the element."
        }
      ]
    }
  },
  {
    "title": "SVGClipPathElement",
    "calls": {
      "properties": [
        {
          "term": "SVGClipPathElement.clipPathUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the clipPathUnits attribute of the given <clipPath> element. Takes one of the constants defined in SVGUnitTypes."
        }
      ]
    }
  },
  {
    "title": "SVGComponentTransferFunctionElement",
    "calls": {
      "properties": [
        {
          "term": "SVGComponentTransferFunctionElement.type Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPONENTTRANSFER_TYPE_* constants defined on this interface."
        },
        {
          "term": "SVGComponentTransferFunctionElement.tableValues Read only",
          "link": "",
          "desc": "An SVGAnimatedNumberList corresponding to the tableValues attribute of the given element."
        },
        {
          "term": "SVGComponentTransferFunctionElement.slope Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the slope attribute of the given element."
        },
        {
          "term": "SVGComponentTransferFunctionElement.intercept Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the intercept attribute of the given element."
        },
        {
          "term": "SVGComponentTransferFunctionElement.amplitude Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the amplitude attribute of the given element."
        },
        {
          "term": "SVGComponentTransferFunctionElement.exponent Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the exponent attribute of the given element."
        },
        {
          "term": "SVGComponentTransferFunctionElement.offset Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the offset attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGCursorElement",
    "calls": {
      "properties": [
        {
          "term": "SVGCursorElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <cursor> element."
        },
        {
          "term": "SVGCursorElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given <cursor> element."
        }
      ]
    }
  },
  {
    "title": "SVGDefsElement",
    "calls": {}
  },
  {
    "title": "SVGDescElement",
    "calls": {}
  },
  {
    "title": "SVGElement",
    "calls": {
      "properties": [
        {
          "term": "SVGElement.datasetRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/dataset",
          "desc": "A DOMStringMap object which provides a list of key/value pairs of named data attributes which correspond to custom data attributes attached to the element. These can also be defined in SVG using attributes of the form data-*, where * is the key name for the pair. This works just like HTML's HTMLElement.dataset property and HTML's data-* global attribute."
        },
        {
          "term": "SVGElement.className \n    This deprecated API should no longer be used, but will probably still work.\n    \nRead only",
          "link": "",
          "desc": "An SVGAnimatedString that reflects the value of the class attribute on the given element, or the empty string if class is not present. This attribute is deprecated and may be removed in a future version of this specification. Authors are advised to use Element.classList instead."
        },
        {
          "term": "SVGElement.ownerSVGElementRead only",
          "link": "",
          "desc": "An SVGSVGElement referring to the nearest ancestor <svg> element. null if the given element is the outermost <svg> element."
        },
        {
          "term": "SVGElement.viewportElementRead only",
          "link": "",
          "desc": "The SVGElement, which established the current viewport. Often, the nearest ancestor <svg> element. null if the given element is the outermost <svg> element."
        }
      ]
    }
  },
  {
    "title": "SVGEllipseElement",
    "calls": {
      "properties": [
        {
          "term": "SVGEllipseElement.cx Read only",
          "link": "",
          "desc": "This property returns a SVGAnimatedLength reflecting the cx attribute of the given <ellipse> element."
        },
        {
          "term": "SVGEllipseElement.cy Read only",
          "link": "",
          "desc": "This property returns a SVGAnimatedLength reflecting the cy attribute of the given <ellipse> element."
        },
        {
          "term": "SVGEllipseElement.rx Read only",
          "link": "",
          "desc": "This property returns a SVGAnimatedLength reflecting the rx attribute of the given <ellipse> element."
        },
        {
          "term": "SVGEllipseElement.ry Read only",
          "link": "",
          "desc": "This property returns a SVGAnimatedLength reflecting the ry attribute of the given <ellipse> element."
        }
      ]
    }
  },
  {
    "title": "SVGEvent",
    "calls": {}
  },
  {
    "title": "SVGFEBlendElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEBlendElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEBlendElement.in2 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in2 attribute of the given element."
        },
        {
          "term": "SVGFEBlendElement.mode Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the mode attribute of the given element. It takes one of the SVG_FEBLEND_MODE_* constants defined on this interface."
        }
      ]
    }
  },
  {
    "title": "SVGFEColorMatrixElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEColorMatrixElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEColorMatrixElement.type Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOLORMATRIX_TYPE_* constants defined on this interface."
        },
        {
          "term": "SVGFEColorMatrixElement.values Read only",
          "link": "",
          "desc": "An SVGAnimatedNumberList corresponding to the values attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEComponentTransferElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEComponentTransferElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFECompositeElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFECompositeElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFECompositeElement.type Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPOSITE_OPERATOR_* constants defined on this interface."
        },
        {
          "term": "SVGFECompositeElement.values Read only",
          "link": "",
          "desc": "An SVGAnimatedNumberList corresponding to the values attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEConvolveMatrixElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEConvolveMatrixElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.orderX Read only",
          "link": "",
          "desc": "An SVGAnimatedInteger corresponding to the order attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.orderY Read only",
          "link": "",
          "desc": "An SVGAnimatedInteger corresponding to the order attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.kernelMatrix Read only",
          "link": "",
          "desc": "An SVGAnimatedNumberList corresponding to the kernelMatrix attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.divisor Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the divisor attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.bias Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the bias attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.targetX Read only",
          "link": "",
          "desc": "An SVGAnimatedInteger corresponding to the targetX attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.targetY Read only",
          "link": "",
          "desc": "An SVGAnimatedInteger corresponding to the targetY attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.edgeMode Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface."
        },
        {
          "term": "SVGFEConvolveMatrixElement.kernelUnitLengthX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.kernelUnitLengthY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element."
        },
        {
          "term": "SVGFEConvolveMatrixElement.preserveAlpha Read only",
          "link": "",
          "desc": "An SVGAnimatedBoolean corresponding to the preserveAlpha attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEDiffuseLightingElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEDiffuseLightingElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEDiffuseLightingElement.surfaceScale Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element."
        },
        {
          "term": "SVGFEDiffuseLightingElement.diffuseConstant Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the diffuseConstant attribute of the given element."
        },
        {
          "term": "SVGFEDiffuseLightingElement.kernelUnitLengthX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element."
        },
        {
          "term": "SVGFEDiffuseLightingElement.kernelUnitLengthY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEDisplacementMapElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEDisplacementMapElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEDisplacementMapElement.in2 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in2 attribute of the given element."
        },
        {
          "term": "SVGFEDisplacementMapElement.scale Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the scale attribute of the given element."
        },
        {
          "term": "SVGFEDisplacementMapElement.xChannelSelector Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the xChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface."
        },
        {
          "term": "SVGFEDisplacementMapElement.yChannelSelector Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the yChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface."
        }
      ]
    }
  },
  {
    "title": "SVGFEDistantLightElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEDistantLightElement.azimuth Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the azimuth attribute of the given element."
        },
        {
          "term": "SVGFEDistantLightElement.elevation Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the elevation attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEDropShadowElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEDropShadowElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEDropShadowElement.dx Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the dx attribute of the given element."
        },
        {
          "term": "SVGFEDropShadowElement.dy Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the dy attribute of the given element."
        },
        {
          "term": "SVGFEDropShadowElement.stdDeviationX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviationX attribute of the given element."
        },
        {
          "term": "SVGFEDropShadowElement.stdDeviationY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviationY attribute of the given element."
        }
      ],
      "methods": [
        {
          "term": "SVGFEDropShadowElement.setStdDeviation()",
          "link": "",
          "desc": "Sets the values for the stdDeviation attribute."
        }
      ]
    }
  },
  {
    "title": "SVGFEFloodElement",
    "calls": {}
  },
  {
    "title": "SVGFEFuncAElement",
    "calls": {}
  },
  {
    "title": "SVGFEFuncBElement",
    "calls": {}
  },
  {
    "title": "SVGFEFuncGElement",
    "calls": {}
  },
  {
    "title": "SVGFEFuncRElement",
    "calls": {}
  },
  {
    "title": "SVGFEGaussianBlurElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEGaussianBlurElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEGaussianBlurElement.stdDeviationX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviation attribute of the given element."
        },
        {
          "term": "SVGFEGaussianBlurElement.stdDeviationY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviation attribute of the given element."
        },
        {
          "term": "SVGFEGaussianBlurElement.edgeMode Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface."
        }
      ],
      "methods": [
        {
          "term": "SVGFEGaussianBlurElement.setStdDeviation()",
          "link": "",
          "desc": "Sets the values for the stdDeviation attribute."
        }
      ]
    }
  },
  {
    "title": "SVGFEImageElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEImageElement.preserveAspectRatio Read only",
          "link": "",
          "desc": "An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given element."
        },
        {
          "term": "SVGFEImageElement.crossOrigin Read only",
          "link": "",
          "desc": "An SVGAnimatedString reflects the crossorigin attribute of the given element, limited to only known values."
        }
      ]
    }
  },
  {
    "title": "SVGFEMergeElement",
    "calls": {}
  },
  {
    "title": "SVGFEMergeNodeElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEMergeNodeElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEMorphologyElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEMorphologyElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEMorphologyElement.operator Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the operator attribute of the given element. It takes one of the SVG_MORPHOLOGY_OPERATOR_* constants defined on this interface."
        },
        {
          "term": "SVGFEMorphologyElement.radiusX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the X component of the radius attribute of the given element."
        },
        {
          "term": "SVGFEMorphologyElement.radiusY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the Y component of the radius attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEOffsetElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEOffsetElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFEOffsetElement.dx Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the dx attribute of the given element."
        },
        {
          "term": "SVGFEOffsetElement.dy Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the dy attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFEPointLightElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFEPointLightElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the x attribute of the given element."
        },
        {
          "term": "SVGFEPointLightElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the y attribute of the given element."
        },
        {
          "term": "SVGFEPointLightElement.z Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the z attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFESpecularLightingElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFESpecularLightingElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        },
        {
          "term": "SVGFESpecularLightingElement.surfaceScale Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element."
        },
        {
          "term": "SVGFESpecularLightingElement.specularConstant Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the specularConstant attribute of the given element."
        },
        {
          "term": "SVGFESpecularLightingElement.specularExponent Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element."
        },
        {
          "term": "SVGFESpecularLightingElement.kernelUnitLengthX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element."
        },
        {
          "term": "SVGFESpecularLightingElement.kernelUnitLengthY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFESpotLightElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFESpotLightElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the x attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the y attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.z Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the z attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.pointAtX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the pointAtX attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.pointAtY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the pointAtY attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.pointAtZ Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the pointAtZ attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.specularExponent Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element."
        },
        {
          "term": "SVGFESpotLightElement.limitingConeAngle Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the limitingConeAngle attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFETileElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFETileElement.in1 Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the in attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGFETurbulenceElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFETurbulenceElement.baseFrequencyX Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the X component of the baseFrequency attribute of the given element."
        },
        {
          "term": "SVGFETurbulenceElement.baseFrequencyY Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the Y component of the baseFrequency attribute of the given element."
        },
        {
          "term": "SVGFETurbulenceElement.numOctaves Read only",
          "link": "",
          "desc": "An SVGAnimatedInteger corresponding to the numOctaves attribute of the given element."
        },
        {
          "term": "SVGFETurbulenceElement.seed Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the seed attribute of the given element."
        },
        {
          "term": "SVGFETurbulenceElement.stitchTiles Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the stitchTiles attribute of the given element. It takes one of the SVG_STITCHTYPE_* constants defined on this interface."
        },
        {
          "term": "SVGFETurbulenceElement.type Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_TURBULENCE_TYPE_* constants defined on this interface."
        }
      ]
    }
  },
  {
    "title": "SVGFilterElement",
    "calls": {
      "properties": [
        {
          "term": "SVGFilterElement.filterUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration that corresponds to the filterUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGFilterElement.primitiveUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration that corresponds to the primitiveUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGFilterElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength that corresponds to the x attribute on the given <filter> element."
        },
        {
          "term": "SVGFilterElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength that corresponds to the y attribute of the given <filter> element."
        },
        {
          "term": "SVGFilterElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength that corresponds to the width attribute of the given <filter> element."
        },
        {
          "term": "SVGFilterElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength that corresponds to the height attribute of the given <filter> element."
        },
        {
          "term": "SVGFilterElement.filterResX Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "An SVGAnimatedInteger that contains the X component of the filterRes attribute of the given <filter> element."
        },
        {
          "term": "SVGFilterElement.filterResY Read only  \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "An SVGAnimatedInteger that contains the Y component of the filterRes attribute of the given <filter> element."
        }
      ],
      "methods": [
        {
          "term": "SVGFilterElement.setFilterRes() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Sets the values of the filterRes attribute."
        }
      ]
    }
  },
  {
    "title": "SVGFilterPrimitiveStandardAttributes",
    "calls": {
      "properties": [
        {
          "term": "SVGFilterPrimitiveStandardAttributes.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given element."
        },
        {
          "term": "SVGFilterPrimitiveStandardAttributes.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given element."
        },
        {
          "term": "SVGFilterPrimitiveStandardAttributes.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given element."
        },
        {
          "term": "SVGFilterPrimitiveStandardAttributes.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given element."
        },
        {
          "term": "SVGFilterPrimitiveStandardAttributes.result Read only",
          "link": "",
          "desc": "An SVGAnimatedString corresponding to the result attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGForeignObjectElement",
    "calls": {
      "properties": [
        {
          "term": "SVGForeignObjectElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element."
        },
        {
          "term": "SVGForeignObjectElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element."
        },
        {
          "term": "SVGForeignObjectElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given <foreignObject> element."
        },
        {
          "term": "SVGForeignObjectElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given <foreignObject> element."
        }
      ]
    }
  },
  {
    "title": "SVGGElement",
    "calls": {}
  },
  {
    "title": "SVGGeometryElement",
    "calls": {
      "properties": [
        {
          "term": "SVGGeometryElement.pathLength Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/pathLength",
          "desc": "This property reflects the pathLength attribute."
        }
      ],
      "methods": [
        {
          "term": "SVGGeometryElement.isPointInFill()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/isPointInFill",
          "desc": "Determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the fill."
        },
        {
          "term": "SVGGeometryElement.isPointInStroke()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/isPointInStroke",
          "desc": "Determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the stroke."
        },
        {
          "term": "SVGGeometryElement.getTotalLength()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getTotalLength",
          "desc": "Returns the user agent's computed value for the total length of the path in user units."
        },
        {
          "term": "SVGGeometryElement.getPointAtLength()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getPointAtLength",
          "desc": "Returns the point at a given distance along the path."
        }
      ]
    }
  },
  {
    "title": "SVGGradientElement",
    "calls": {
      "properties": [
        {
          "term": "SVGGradientElement.gradientUnits Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedEnumeration corresponding to the gradientUnits attribute on the given element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGGradientElement.gradientTransform Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedTransformList corresponding to attribute gradientTransform on the given element."
        },
        {
          "term": "SVGGradientElement.spreadMethod Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedEnumeration corresponding to attribute spreadMethod on the given element. One of the spread method types defined on this interface."
        }
      ]
    }
  },
  {
    "title": "SVGGraphicsElement",
    "calls": {
      "properties": [
        {
          "term": "SVGGraphicsElement.transform Read only",
          "link": "",
          "desc": "An SVGAnimatedTransformList reflecting the computed value of the transform property and its corresponding transform attribute of the given element."
        }
      ],
      "methods": [
        {
          "term": "SVGGraphicsElement.getBBox()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox",
          "desc": "Returns a DOMRect representing the computed bounding box of the current element."
        },
        {
          "term": "SVGGraphicsElement.getCTM()",
          "link": "",
          "desc": "Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system."
        },
        {
          "term": "SVGGraphicsElement.getScreenCTM()",
          "link": "",
          "desc": "Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment."
        }
      ]
    }
  },
  {
    "title": "SVGImageElement",
    "calls": {
      "properties": [
        {
          "term": "SVGImageElement.crossOrigin",
          "link": "",
          "desc": "A DOMString corresponding to the crossorigin attribute of the given <image> element."
        },
        {
          "term": "SVGImageElement.decoding",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/decoding",
          "desc": "Returns a DOMString representing a hint given to the browser on how it should decode the image."
        },
        {
          "term": "SVGImageElement.height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/height",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given <image> element."
        },
        {
          "term": "SVGImageElement.preserveAspectRatio Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/preserveAspectRatio",
          "desc": "An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given <image> element."
        },
        {
          "term": "SVGImageElement.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/width",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given <image> element."
        },
        {
          "term": "SVGImageElement.x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/x",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <image> element."
        },
        {
          "term": "SVGImageElement.y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/y",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given <image> element."
        }
      ],
      "methods": [
        {
          "term": "SVGImageElement.decode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/decode",
          "desc": "Initiates asynchronous decoding of the image data. Returns a Promise which resolves once the image data is ready to be used."
        }
      ]
    }
  },
  {
    "title": "SVGLength",
    "calls": {}
  },
  {
    "title": "SVGLengthList",
    "calls": {}
  },
  {
    "title": "SVGLinearGradientElement",
    "calls": {
      "properties": [
        {
          "term": "SVGLinearGradientElement.x1 Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x1 attribute of the given <linearGradient> element."
        },
        {
          "term": "SVGLinearGradientElement.y1 Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y1 attribute of the given <linearGradient> element."
        },
        {
          "term": "SVGLinearGradientElement.x2 Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x2 attribute of the given <linearGradient> element."
        },
        {
          "term": "SVGLinearGradientElement.y2 Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y2 attribute of the given <linearGradient> element."
        }
      ]
    }
  },
  {
    "title": "SVGLineElement",
    "calls": {
      "properties": [
        {
          "term": "SVGLineElement.x1 Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength that corresponds to attribute x1 on the given <line> element."
        },
        {
          "term": "SVGLineElement.y1 Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength that corresponds to attribute y1 on the given <line> element."
        },
        {
          "term": "SVGLineElement.x2 Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength that corresponds to attribute x2 on the given <line> element."
        },
        {
          "term": "SVGLineElement.y2 Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength that corresponds to attribute y2 on the given <line> element."
        }
      ]
    }
  },
  {
    "title": "SVGMaskElement",
    "calls": {
      "properties": [
        {
          "term": "SVGMaskElement.maskUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the maskUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGMaskElement.maskContentUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the maskContentUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGMaskElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <mask> element."
        },
        {
          "term": "SVGMaskElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given <mask> element."
        },
        {
          "term": "SVGMaskElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given <mask> element."
        },
        {
          "term": "SVGMaskElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given <mask> element."
        }
      ]
    }
  },
  {
    "title": "SVGMetadataElement",
    "calls": {}
  },
  {
    "title": "SVGMPathElement",
    "calls": {}
  },
  {
    "title": "SVGNumber",
    "calls": {
      "properties": [
        {
          "term": "SVGNumber.value",
          "link": "",
          "desc": "A float representing the number. Note: If the SVGNumber is read-only, a DOMException with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value."
        }
      ]
    }
  },
  {
    "title": "SVGNumberList",
    "calls": {}
  },
  {
    "title": "SVGPathElement",
    "calls": {
      "properties": [
        {
          "term": "SVGPathElement.pathLength \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement/pathLength",
          "desc": "An SVGAnimatedNumber corresponding to the pathLength attribute of the given <path> element. Note: In SVG 2 this property was moved to the SVGGeometryElement interface, from which this interface inherits it."
        }
      ],
      "methods": [
        {
          "term": "SVGPathElement.getTotalLength() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement/getTotalLength",
          "desc": "Returns a float representing the computed value for the total length of the path using the browser's distance-along-a-path algorithm, as a distance in the current user coordinate system. Note: In SVG 2 this method was moved to the SVGGeometryElement interface, from which this interface inherits it."
        },
        {
          "term": "SVGPathElement.getPointAtLength() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement/getPointAtLength",
          "desc": "Returns an SVGPoint representing the x and y coordinates in user space utilizing the browser's distance-along-a-path algorithm. Note: In SVG 2 this method was moved to the SVGGeometryElement interface, from which this interface inherits it."
        },
        {
          "term": "SVGPathElement.getPathSegAtLength() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns an unsigned long representing the index within the pathSegList utilizing the user agent's distance-along-a-path algorithm."
        },
        {
          "term": "SVGPathElement.createSVGPathSegClosePath() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegClosePath object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegMovetoAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegMovetoAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegMovetoRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegMovetoRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoCubicAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoCubicAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoCubicRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoCubicRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoQuadraticAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoQuadraticRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegArcAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegArcAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegArcRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegArcRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoHorizontalAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoHorizontalAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoHorizontalRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoHorizontalRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoVerticalAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoVerticalAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegLinetoVerticalRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegLinetoVerticalRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoCubicSmoothAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoCubicSmoothRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothRel object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothAbs() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothAbs object."
        },
        {
          "term": "SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothRel() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothRel object."
        }
      ]
    }
  },
  {
    "title": "SVGPatternElement",
    "calls": {
      "properties": [
        {
          "term": "SVGPatternElement.patternUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the patternUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGPatternElement.patternContentUnits Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the patternContentUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes."
        },
        {
          "term": "SVGPatternElement.patternTransform Read only",
          "link": "",
          "desc": "An SVGAnimatedTransformList corresponding to the patternTransform attribute of the given <pattern> element."
        },
        {
          "term": "SVGPatternElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the x attribute of the given <pattern> element."
        },
        {
          "term": "SVGPatternElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the y attribute of the given <pattern> element."
        },
        {
          "term": "SVGPatternElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the width attribute of the given <pattern> element."
        },
        {
          "term": "SVGPatternElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the height attribute of the given <pattern> element."
        }
      ]
    }
  },
  {
    "title": "SVGPoint",
    "calls": {}
  },
  {
    "title": "SVGPolygonElement",
    "calls": {}
  },
  {
    "title": "SVGPolylineElement",
    "calls": {}
  },
  {
    "title": "SVGPreserveAspectRatio",
    "calls": {}
  },
  {
    "title": "SVGRadialGradientElement",
    "calls": {
      "properties": [
        {
          "term": "SVGRadialGradientElement.cx Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the cx attribute of the given <RadialGradient> element."
        },
        {
          "term": "SVGRadialGradientElement.cx Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the cy attribute of the given <RadialGradient> element."
        },
        {
          "term": "SVGRadialGradientElement.r Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the r attribute of the given <RadialGradient> element."
        },
        {
          "term": "SVGRadialGradientElement.fx Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the fx attribute of the given <RadialGradient> element."
        },
        {
          "term": "SVGRadialGradientElement.fy Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the fy attribute of the given <RadialGradient> element."
        }
      ]
    }
  },
  {
    "title": "SVGRect",
    "calls": {
      "properties": [
        {
          "term": "SVGRect.x",
          "link": "",
          "desc": "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified."
        },
        {
          "term": "SVGRect.y",
          "link": "",
          "desc": "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified."
        },
        {
          "term": "SVGRect.width",
          "link": "",
          "desc": "This represents the width of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the element"
        },
        {
          "term": "SVGRect.height",
          "link": "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/SVGRect.height",
          "desc": "This represents the height of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the element."
        }
      ]
    }
  },
  {
    "title": "SVGRectElement",
    "calls": {
      "properties": [
        {
          "term": "SVGRectElement.x Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the x attribute of the given <rect> element."
        },
        {
          "term": "SVGRectElement.y Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the y attribute of the given <rect> element."
        },
        {
          "term": "SVGRectElement.width Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the width attribute of the given <rect> element."
        },
        {
          "term": "SVGRectElement.height Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the height attribute of the given <rect> element."
        },
        {
          "term": "SVGRectElement.rx Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the rx attribute of the given <rect> element."
        },
        {
          "term": "SVGRectElement.ry Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLength corresponding to the ry attribute of the given <rect> element."
        }
      ]
    }
  },
  {
    "title": "SVGScriptElement",
    "calls": {
      "properties": [
        {
          "term": "SVGScriptElement.type Read only",
          "link": "",
          "desc": "A DOMString corresponding to the type attribute of the given <script> element. A DOMException is raised with the code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read only attribut."
        },
        {
          "term": "SVGScriptElement.crossOrigin Read only",
          "link": "",
          "desc": "A DOMString corresponding to the crossorigin attribute of the given <script> element."
        }
      ]
    }
  },
  {
    "title": "SVGSetElement",
    "calls": {}
  },
  {
    "title": "SVGStopElement",
    "calls": {
      "properties": [
        {
          "term": "SVGStopElement.offset Read only",
          "link": "",
          "desc": "An SVGAnimatedNumber corresponding to the offset of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGStringList",
    "calls": {}
  },
  {
    "title": "SVGStylable",
    "calls": {}
  },
  {
    "title": "SVGStyleElement",
    "calls": {
      "properties": [
        {
          "term": "SVGStyleElement.type",
          "link": "",
          "desc": "A DOMString corresponding to the type attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
        },
        {
          "term": "SVGStyleElement.media",
          "link": "",
          "desc": "A DOMString corresponding to the media attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
        },
        {
          "term": "SVGStyleElement.title",
          "link": "",
          "desc": "A DOMString corresponding to the title attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
        }
      ]
    }
  },
  {
    "title": "SVGSVGElement",
    "calls": {
      "properties": [
        {
          "term": "SVGSVGElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.contentScriptType",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the contentScriptType attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.contentStyleType",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the contentStyleType attribute of the given <svg> element."
        },
        {
          "term": "SVGSVGElement.viewport",
          "link": "",
          "desc": "An SVGRect containing the position and size of the viewport (implicit or explicit) that corresponds to the given <svg> element. When the browser is actually rendering the content, then the position and size values represent the actual values when rendering. The position and size values are unitless values in the coordinate system of the parent element. If no parent element exists (i.e., <svg> element represents the root of the document tree), if this SVG document is embedded as part of another document (e.g., via the HTML <object> element), then the position and size are unitless values in the coordinate system of the parent document. (If the parent uses CSS or XSL layout, then unitless values represent pixel units for the current CSS or XSL viewport.)"
        },
        {
          "term": "SVGSVGElement.pixelUnitToMillimeterX \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided."
        },
        {
          "term": "SVGSVGElement.pixelUnitToMillimeterY \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "A float representing the size of a pixel unit along the y-axis of the viewport."
        },
        {
          "term": "SVGSVGElement.screenPixelToMillimeterX \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a \"screen unit\", this float attribute will express that information; otherwise, user agents will provide a suitable default value (such as .28mm)."
        },
        {
          "term": "SVGSVGElement.screenPixelToMillimeterY \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Corresponding size of a screen pixel along the y-axis of the viewport."
        },
        {
          "term": "SVGSVGElement.useCurrentView",
          "link": "",
          "desc": "The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the \"standard\" view, i.e., based on attributes on the <svg> element such as viewBox) or on a \"custom\" view (i.e., a hyperlink into a particular <view> or other element). If the initial view is the \"standard\" view, then this attribute is false. If the initial view is a \"custom\" view, then this attribute is true."
        },
        {
          "term": "SVGSVGElement.currentView",
          "link": "",
          "desc": "An SVGViewSpec defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation: If the initial view was a \"standard\" view, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly the values for transform and viewTarget within currentView will be null If the initial view was a link into a <view> element, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given <view> element the values for transform and viewTarget within currentView will be null If the initial view was a link into another element (i.e., other than a <view>), then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor <svg> element the values for transform within currentView will be null the viewTarget within currentView will represent the target of the link If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(…)), then: the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier"
        },
        {
          "term": "SVGSVGElement.currentScale",
          "link": "",
          "desc": "On an outermost <svg> element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes currentScale and currentTranslate are equivalent to the 2×3 matrix [a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If \"magnification\" is enabled (i.e., zoomAndPan=\"magnify\"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost <svg> element)."
        },
        {
          "term": "SVGSVGElement.currentTranslate Read only",
          "link": "",
          "desc": "An SVGPoint representing the translation factor that takes into account user \"magnification\" corresponding to an outermost <svg> element. The behavior is undefined for <svg> elements that are not at the outermost level."
        }
      ],
      "methods": [
        {
          "term": "SVGSVGElement.suspendRedraw() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Takes a time-out value which indicates that redraw shall not occur until: the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out. In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to suspendRedraw() and unsuspendRedraw() should, but need not be, made in balanced pairs. To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to: const suspendHandleID = suspendRedraw(maxWaitMilliseconds) and follow the changes with a method call similar to: unsuspendRedraw(suspendHandleID) Note that multiple suspendRedraw() calls can be used at once, and that each such method call is treated independently of the other suspendRedraw() method calls."
        },
        {
          "term": "SVGSVGElement.unsuspendRedraw() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Cancels a specified suspendRedraw() by providing a unique suspend handle ID that was returned by a previous suspendRedraw() call."
        },
        {
          "term": "SVGSVGElement.unsuspendRedrawAll() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Cancels all currently active suspendRedraw() method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() method calls have been cancelled."
        },
        {
          "term": "SVGSVGElement.forceRedraw() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating."
        },
        {
          "term": "SVGSVGElement.pauseAnimations()",
          "link": "",
          "desc": "Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this <svg> element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused."
        },
        {
          "term": "SVGSVGElement.unpauseAnimations()",
          "link": "",
          "desc": "Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended."
        },
        {
          "term": "SVGSVGElement.animationsPaused()",
          "link": "",
          "desc": "Returns true if this SVG document fragment is in a paused state."
        },
        {
          "term": "SVGSVGElement.getCurrentTime()",
          "link": "",
          "desc": "Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then 0 is returned."
        },
        {
          "term": "SVGSVGElement.setCurrentTime()",
          "link": "",
          "desc": "Adjusts the clock for this SVG document fragment, establishing a new current time. If setCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun."
        },
        {
          "term": "SVGSVGElement.getIntersectionList()",
          "link": "",
          "desc": "Returns a NodeList of graphics elements whose rendered content intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
        },
        {
          "term": "SVGSVGElement.getEnclosureList()",
          "link": "",
          "desc": "Returns a NodeList of graphics elements whose rendered content is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
        },
        {
          "term": "SVGSVGElement.checkIntersection()",
          "link": "",
          "desc": "Returns true if the rendered content of the given element intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
        },
        {
          "term": "SVGSVGElement.checkEnclosure()",
          "link": "",
          "desc": "Returns true if the rendered content of the given element is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
        },
        {
          "term": "SVGSVGElement.deselectAll()",
          "link": "",
          "desc": "Unselects any selected objects, including any selections of text strings and type-in bars."
        },
        {
          "term": "SVGSVGElement.createSVGNumber()",
          "link": "",
          "desc": "Creates an SVGNumber object outside of any document trees. The object is initialized to 0."
        },
        {
          "term": "SVGSVGElement.createSVGLength()",
          "link": "",
          "desc": "Creates an SVGLength object outside of any document trees. The object is initialized to 0 user units."
        },
        {
          "term": "SVGSVGElement.createSVGAngle()",
          "link": "",
          "desc": "Creates an SVGAngle object outside of any document trees. The object is initialized to a value of 0 degrees (unitless)."
        },
        {
          "term": "SVGSVGElement.createSVGPoint()",
          "link": "",
          "desc": "Creates an SVGPoint object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system."
        },
        {
          "term": "SVGSVGElement.createSVGMatrix()",
          "link": "",
          "desc": "Creates an SVGMatrix object outside of any document trees. The object is initialized to the identity matrix."
        },
        {
          "term": "SVGSVGElement.createSVGRect()",
          "link": "",
          "desc": "Creates an SVGRect object outside of any document trees. The object is initialized such that all values are set to 0 user units."
        },
        {
          "term": "SVGSVGElement.createSVGTransform()",
          "link": "",
          "desc": "Creates an SVGTransform object outside of any document trees. The object is initialized to an identity matrix transform (SVG_TRANSFORM_MATRIX)."
        },
        {
          "term": "SVGSVGElement.createSVGTransformFromMatrix()",
          "link": "",
          "desc": "Creates an SVGTransform object outside of any document trees. The object is initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX). The values from the parameter matrix are copied, the matrix parameter is not adopted as SVGTransform::matrix."
        },
        {
          "term": "SVGSVGElement.getElementById()",
          "link": "",
          "desc": "Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id."
        }
      ]
    }
  },
  {
    "title": "SVGSwitchElement",
    "calls": {}
  },
  {
    "title": "SVGSymbolElement",
    "calls": {}
  },
  {
    "title": "SVGTests",
    "calls": {
      "properties": [
        {
          "term": "SVGTests.requiredFeatures Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "An SVGStringList corresponding to the requiredFeatures attribute of the given element."
        },
        {
          "term": "SVGTests.requiredExtensions Read only",
          "link": "",
          "desc": "An SVGStringList corresponding to the requiredExtensions attribute of the given element."
        },
        {
          "term": "SVGTests.systemLanguage Read only",
          "link": "",
          "desc": "An SVGStringList corresponding to the systemLanguage attribute of the given element."
        }
      ],
      "methods": [
        {
          "term": "SVGTests.hasExtension() Read only  \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "",
          "desc": "Returns true if the browser supports the given extension, specified by a URI."
        }
      ]
    }
  },
  {
    "title": "SVGTextContentElement",
    "calls": {
      "properties": [
        {
          "term": "SVGTextContentElement.textLength Read only",
          "link": "",
          "desc": "An SVGAnimatedLength reflecting the textLength attribute of the given element."
        },
        {
          "term": "SVGTextContentElement.lengthAdjust Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration reflecting the lengthAdjust attribute of the given element. The numeric type values represent one of the constant values above."
        }
      ],
      "methods": [
        {
          "term": "SVGTextContentElement.getNumberOfChars()",
          "link": "",
          "desc": "Returns a long representing the total number of addressable characters available for rendering within the current element, regardless of whether they will be rendered."
        },
        {
          "term": "SVGTextContentElement.getComputedTextLength()",
          "link": "",
          "desc": "Returns a float representing the computed length for the text within the element."
        },
        {
          "term": "SVGTextContentElement.getSubStringLength()",
          "link": "",
          "desc": "Returns a float representing the computed length of the formatted text advance distance for a substring of text within the element. Note that this method only accounts for the widths of the glyphs in the substring and any extra spacing inserted by the CSS 'letter-spacing' and 'word-spacing' properties. Visual spacing adjustments made by the 'x' attribute is ignored."
        },
        {
          "term": "SVGTextContentElement.getStartPositionOfChar()",
          "link": "",
          "desc": "Returns a DOMPoint representing the position of a typographic character after text layout has been performed. Note: In SVG 1.1 this method returned an SVGPoint."
        },
        {
          "term": "SVGTextContentElement.getEndPositionOfChar()",
          "link": "",
          "desc": "Returns a DOMPoint representing the trailing position of a typographic character after text layout has been performed. Note: In SVG 1.1 this method returned an SVGPoint."
        },
        {
          "term": "SVGTextContentElement.getExtentOfChar()",
          "link": "",
          "desc": "Returns a DOMRect representing the computed tight bounding box of the glyph cell that corresponds to a given typographic character."
        },
        {
          "term": "SVGTextContentElement.getRotationOfChar()",
          "link": "",
          "desc": "Returns a float representing the rotation of typographic character."
        },
        {
          "term": "SVGTextContentElement.getCharNumAtPosition()",
          "link": "",
          "desc": "Returns a long representing the character which caused a text glyph to be rendered at a given position in the coordinate system. Because the relationship between characters and glyphs is not one-to-one, only the first character of the relevant typographic character is returned"
        },
        {
          "term": "SVGTextContentElement.selectSubString() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "Selects text within the element."
        }
      ]
    }
  },
  {
    "title": "SVGTextElement",
    "calls": {}
  },
  {
    "title": "SVGTextPathElement",
    "calls": {
      "properties": [
        {
          "term": "SVGTextPathElement.startOffset Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the X component of the startOffset attribute of the given element."
        },
        {
          "term": "SVGTextPathElement.method Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the method attribute of the given element. It takes one of the TEXTPATH_METHODTYPE_* constants defined on this interface."
        },
        {
          "term": "SVGTextPathElement.spacing Read only",
          "link": "",
          "desc": "An SVGAnimatedEnumeration corresponding to the spacing attribute of the given element. It takes one of the TEXTPATH_SPACINGTYPE_* constants defined on this interface."
        }
      ]
    }
  },
  {
    "title": "SVGTextPositioningElement",
    "calls": {
      "properties": [
        {
          "term": "SVGTextPositioningElement.x Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLengthList reflecting the x attribute of the given element."
        },
        {
          "term": "SVGTextPositioningElement.y Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLengthList reflecting the y attribute of the given element."
        },
        {
          "term": "SVGTextPositioningElement.dx Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLengthList reflecting the dx attribute of the given element."
        },
        {
          "term": "SVGTextPositioningElement.dy Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedLengthList reflecting the dy attribute of the given element."
        },
        {
          "term": "SVGTextPositioningElement.rotate Read only",
          "link": "",
          "desc": "Returns an SVGAnimatedNumberList reflecting the rotate attribute of the given element."
        }
      ]
    }
  },
  {
    "title": "SVGTitleElement",
    "calls": {}
  },
  {
    "title": "SVGTransform",
    "calls": {}
  },
  {
    "title": "SVGTransformable",
    "calls": {}
  },
  {
    "title": "SVGTransformList",
    "calls": {}
  },
  {
    "title": "SVGTSpanElement",
    "calls": {}
  },
  {
    "title": "SVGUnitTypes",
    "calls": {}
  },
  {
    "title": "SVGURIReference",
    "calls": {
      "properties": [
        {
          "term": "SVGURIReference.href Read only",
          "link": "",
          "desc": "An SVGAnimatedString that represents the value of the href attribute, and, on elements that are defined to support it, the deprecated xlink:href attribute. On getting href, an SVGAnimatedString object is returned that reflects the href attribute, and if the element is defined to support the deprecated xlink:href attribute, additionally reflects that deprecated attribute."
        }
      ]
    }
  },
  {
    "title": "SVGUseElement",
    "calls": {
      "properties": [
        {
          "term": "SVGUseElement.x Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the x attribute of the given element."
        },
        {
          "term": "SVGUseElement.y Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the y attribute of the given element."
        },
        {
          "term": "SVGUseElement.width Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the width attribute of the given element."
        },
        {
          "term": "SVGUseElement.height Read only",
          "link": "",
          "desc": "An SVGAnimatedLength corresponding to the height attribute of the given element."
        },
        {
          "term": "SVGUseElement.instanceRoot Read only",
          "link": "",
          "desc": "An SVGElement corresponding to the instance root of the given element, which is a direct child of the elements shadow root. If the element does not have a shadow tree (for example, because its URI is invalid or because it has been disabled by conditional processing), then getting this attribute returns null."
        },
        {
          "term": "SVGUseElement.animatedInstanceRoot Read only",
          "link": "",
          "desc": "An SVGElement corresponding to the instance root of the given element, which is a direct child of the elements shadow root. If the element does not have a shadow tree (for example, because its URI is invalid or because it has been disabled by conditional processing), then getting this attribute returns null."
        }
      ]
    }
  },
  {
    "title": "SVGViewElement",
    "calls": {
      "properties": [
        {
          "term": "SVGViewElement.viewTarget",
          "link": "",
          "desc": "An SVGStringList corresponding to the viewTarget attribute of the given <view> element. A list of DOMString values which contain the names listed in the viewTarget attribute. Each of the DOMString values can be associated with the corresponding element using the getElementById() method call."
        }
      ]
    }
  },
  {
    "title": "SVGZoomAndPan",
    "calls": {
      "properties": [
        {
          "term": "SVGZoomAndPan.zoomAndPan",
          "link": "",
          "desc": "An unsigned short representing the value of the zoomAndPan attribute."
        }
      ]
    }
  },
  {
    "title": "SyncEvent",
    "calls": {
      "constructors": [
        {
          "term": "SyncEvent.SyncEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/SyncEvent",
          "desc": "Creates a new SyncEvent object."
        }
      ],
      "properties": [
        {
          "term": "SyncEvent.tag Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/tag",
          "desc": "Returns the developer-defined identifier for this SyncEvent."
        },
        {
          "term": "SyncEvent.lastChance Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/lastChance",
          "desc": "Returns true if the user agent will not make further synchronization attempts after the current attempt."
        }
      ]
    }
  },
  {
    "title": "SyncManager",
    "calls": {
      "methods": [
        {
          "term": "SyncManager.register",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/register",
          "desc": "Create a new sync registration and return a Promise."
        },
        {
          "term": "SyncManager.getTags",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/getTags",
          "desc": "Return a list of developer-defined identifiers for SyncManager registration."
        }
      ]
    }
  },
  {
    "title": "Text",
    "calls": {
      "properties": [
        {
          "term": "Text.isElementContentWhitespace Read only \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace",
          "desc": "Returns a Boolean flag indicating whether or not the text node contains only whitespace."
        },
        {
          "term": "Text.wholeText Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText",
          "desc": "Returns a DOMString containing the text of all Text nodes logically adjacent to this Node, concatenated in document order."
        },
        {
          "term": "Text.assignedSlot Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot",
          "desc": "Returns the HTMLSlotElement object associated with the element."
        }
      ],
      "methods": [
        {
          "term": "Text() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Text/Text",
          "desc": "Returns a Text node with the parameter as its textual content."
        }
      ]
    }
  },
  {
    "title": "TextMetrics",
    "calls": {
      "properties": [
        {
          "term": "TextMetrics.width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width",
          "desc": "Is a double giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context."
        },
        {
          "term": "TextMetrics.actualBoundingBoxLeft Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxLeft",
          "desc": "Is a double giving the distance from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline."
        },
        {
          "term": "TextMetrics.actualBoundingBoxRight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxRight",
          "desc": "Is a double giving the distance from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline."
        },
        {
          "term": "TextMetrics.fontBoundingBoxAscent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxAscent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels."
        },
        {
          "term": "TextMetrics.fontBoundingBoxDescent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxDescent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels."
        },
        {
          "term": "TextMetrics.actualBoundingBoxAscent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxAscent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels."
        },
        {
          "term": "TextMetrics.actualBoundingBoxDescent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxDescent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels."
        },
        {
          "term": "TextMetrics.emHeightAscent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightAscent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels."
        },
        {
          "term": "TextMetrics.emHeightDescent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightDescent",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels."
        },
        {
          "term": "TextMetrics.hangingBaseline Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/hangingBaseline",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels."
        },
        {
          "term": "TextMetrics.alphabeticBaseline Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/alphabeticBaseline",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels."
        },
        {
          "term": "TextMetrics.ideographicBaseline Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/ideographicBaseline",
          "desc": "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels."
        }
      ]
    }
  },
  {
    "title": "TextRange",
    "calls": {
      "properties": [
        {
          "term": "TextRange.boundingHeightRead only",
          "link": "",
          "desc": "Returns the height of the rectangle bound to the TextRange object."
        },
        {
          "term": "TextRange.boundingLeftRead only",
          "link": "",
          "desc": "Returns the distance between the left edge of the rectangle that binds the TextRange object and the left edge that completely contains the TextRange object."
        },
        {
          "term": "TextRange.boundingTopRead only",
          "link": "",
          "desc": "Returns the distance between the top edge of the rectangle that binds the TextRange object and the top edge that completely contains the TextRange object."
        },
        {
          "term": "TextRange.boundingWidthRead only",
          "link": "",
          "desc": "Returns the width of the rectangle bound to the TextRange object."
        },
        {
          "term": "TextRange.htmlText",
          "link": "",
          "desc": "Gets or sets the HTML content within the TextRange."
        },
        {
          "term": "TextRange.text",
          "link": "",
          "desc": "Gets or sets the plaintext content within the TextRange."
        }
      ],
      "methods": [
        {
          "term": "TextRange.collapse()",
          "link": "",
          "desc": "Move the caret to the beginning or end of the current range."
        },
        {
          "term": "TextRange.duplicate()",
          "link": "",
          "desc": "Returns a copy of TextRange."
        },
        {
          "term": "TextRange.execCommand()",
          "link": "",
          "desc": "Executes a command on the current document, the current selection, or the given scope."
        },
        {
          "term": "TextRange.expand()",
          "link": "",
          "desc": "Expand the range to include the full range of specified units. For example, expanding a \"word\" means that the words at both ends of the range will completely included in the range. xpand to wor may become expand to words, etc."
        },
        {
          "term": "TextRange.findText()",
          "link": "",
          "desc": "Searches the specified text in the original range and adjusts the range to include the first match."
        },
        {
          "term": "TextRange.inRange()",
          "link": "",
          "desc": "Returns whether the current range contains the specified range."
        },
        {
          "term": "TextRange.isEqual()",
          "link": "",
          "desc": "Returns whether the current range is equal to the specified range."
        },
        {
          "term": "TextRange.move()",
          "link": "",
          "desc": "Collapses the range and moves the blank range by a specified number of units. Such as, move(\"character\",-1) means to move one character to the left."
        },
        {
          "term": "TextRange.moveEnd()",
          "link": "",
          "desc": "Moves the end of the range by a specified number of units."
        },
        {
          "term": "TextRange.moveStart()",
          "link": "",
          "desc": "Moves the start of the range by a specified number of units."
        },
        {
          "term": "TextRange.moveToElementText()",
          "link": "",
          "desc": "Causes the range to contain the text of the specified element. Can only be used on Element objects."
        },
        {
          "term": "TextRange.parentElement()",
          "link": "",
          "desc": "Returns the parent element of the range, which is the smallest element that contains the range completely. If the selection contains more than one element, when you modify the contents of the selection, the contents will be placed in the corresponding position of the parent element instead of the child element."
        },
        {
          "term": "TextRange.pasteHTML()",
          "link": "",
          "desc": "Paste the HTML content into the given range and replace any previous text and HTML elements in the range."
        },
        {
          "term": "TextRange.queryCommandEnabled()",
          "link": "",
          "desc": "Returns a Boolean indicating whether the specified command can be executed successfully with the execCommand method in the current state of the given document. You can also see Document.queryCommandEnabled()."
        },
        {
          "term": "TextRange.queryCommandState()",
          "link": "",
          "desc": "Returns the Boolean indicating the current state of the specified command. You can also see Document.queryCommandState()."
        },
        {
          "term": "TextRange.queryCommandValue()",
          "link": "",
          "desc": "Returns the DOMString indicating the current value of the specified command. You can also see Document.queryCommandValue()."
        },
        {
          "term": "TextRange.scrollIntoView()",
          "link": "",
          "desc": "Scroll the range to the visible range (top or bottom). It can be used as an alternative to Element.scrollIntoView in the lower version of IE."
        },
        {
          "term": "TextRange.select()",
          "link": "",
          "desc": "Select the current range (i.e. the blue selection seen by the user)."
        },
        {
          "term": "TextRange.setEndPoint()",
          "link": "",
          "desc": "Sets the end point of the current range based on the bounds of other TextRange."
        }
      ]
    }
  },
  {
    "title": "TextTrack",
    "calls": {
      "properties": [
        {
          "term": "TextTrack.activeCues Read only",
          "link": "",
          "desc": "A TextTrackCueList object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times. Thus, for displayed cues such as captions or subtitles, the active cues are currently being displayed."
        },
        {
          "term": "TextTrack.cues Read only",
          "link": "",
          "desc": "A TextTrackCueList which contains all of the track's cues."
        },
        {
          "term": "TextTrack.id Read only",
          "link": "",
          "desc": "A DOMString which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (\"\"). If the TextTrack is associated with a <track> element, then the track's ID matches the element's ID."
        },
        {
          "term": "TextTrack.inBandMetadataTrackDispatchType Read only",
          "link": "",
          "desc": "Returns a DOMString which indicates the track's in-band metadata track dispatch type. needs details"
        },
        {
          "term": "TextTrack.kind Read only",
          "link": "",
          "desc": "Returns a DOMString indicating what kind of text track the TextTrack describes. The value must be one of those in the TextTrackKind enum."
        },
        {
          "term": "TextTrack.label Read only",
          "link": "",
          "desc": "A human-readable DOMString which contains the text track's label, if one is present; otherwise, this is an empty string (\"\"), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user."
        },
        {
          "term": "TextTrack.language Read only",
          "link": "",
          "desc": "A DOMString which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML lang attribute. For example, this can be \"en-US\" for United States English or \"pt-BR\" for Brazilian Portuguese."
        },
        {
          "term": "TextTrack.mode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/mode",
          "desc": "A DOMString specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants. The default is disabled, unless the <track> element's default Boolean attribute is specified, in which case the default mode is started."
        }
      ],
      "methods": [
        {
          "term": "TextTrack.addCue()",
          "link": "",
          "desc": "Adds a cue (specified as a TextTrackCue object to the track's list of cues."
        },
        {
          "term": "TextTrack.removeCue()",
          "link": "",
          "desc": "Removes a cue (specified as a TextTrackCue object from the track's list of cues."
        }
      ]
    }
  },
  {
    "title": "TextTrackCue",
    "calls": {
      "properties": [
        {
          "term": "TextTrackCue.track Read only",
          "link": "",
          "desc": "The TextTrack that this cue belongs to, or null if it doesn't belong to any."
        },
        {
          "term": "TextTrackCue.id",
          "link": "",
          "desc": "A DOMString that identifies the cue."
        },
        {
          "term": "TextTrackCue.startTime",
          "link": "",
          "desc": "A double that represents the video time that the cue will start being displayed, in seconds."
        },
        {
          "term": "TextTrackCue.endTime",
          "link": "",
          "desc": "A double that represents the video time that the cue will stop being displayed, in seconds."
        },
        {
          "term": "TextTrackCue.pauseOnExit",
          "link": "",
          "desc": "A boolean for whether the video will pause when this cue stops being displayed."
        }
      ],
      "handlers": [
        {
          "term": "TextTrackCue.onenter",
          "link": "",
          "desc": "The event handler for the enter event."
        },
        {
          "term": "TextTrackCue.onexit",
          "link": "",
          "desc": "The event handler for the exit event."
        }
      ]
    }
  },
  {
    "title": "TextTrackList",
    "calls": {
      "properties": [
        {
          "term": "length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/length",
          "desc": "The number of tracks in the list."
        }
      ],
      "handlers": [
        {
          "term": "onaddtrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onaddtrack",
          "desc": "An event handler to be called when the addtrack event is fired, indicating that a new text track has been added to the media element."
        },
        {
          "term": "onchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onchange",
          "desc": "An event handler to be called when the change event occurs."
        },
        {
          "term": "onremovetrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onremovetrack",
          "desc": "An event handler to call when the removetrack event is sent, indicating that a text track has been removed from the media element."
        }
      ],
      "methods": [
        {
          "term": "getTrackById()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/getTrackById",
          "desc": "Returns the TextTrack found within the TextTrackList whose id matches the specified string. If no match is found, null is returned."
        }
      ]
    }
  },
  {
    "title": "TimeEvent",
    "calls": {
      "properties": [
        {
          "term": "TimeEvent.detail Read only",
          "link": "",
          "desc": "Is a long that specifies some detail information about the Event, depending on the type of the event. For this event type, indicates the repeat number for the animation."
        },
        {
          "term": "TimeEvent.view Read only",
          "link": "",
          "desc": "Is a WindowProxy that identifies the Window from which the event was generated."
        }
      ],
      "methods": [
        {
          "term": "initTimeEvent(DOMString typeArg, AbstractView viewArg, long detailArg)",
          "link": "",
          "desc": "The initTimeEvent method is used to initialize the value of a TimeEvent created through the DocumentEvent interface. This method may only be called before the TimeEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary."
        }
      ]
    }
  },
  {
    "title": "TimeRanges",
    "calls": {
      "properties": [
        {
          "term": "TimeRanges.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length",
          "desc": "Returns an unsigned long representing the number of time ranges represented by the time range object."
        }
      ],
      "methods": [
        {
          "term": "TimeRanges.start()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start",
          "desc": "Returns the time for the start of the range with the specified index."
        },
        {
          "term": "TimeRanges.end()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end",
          "desc": "Returns the time for the end of the specified range."
        }
      ]
    }
  },
  {
    "title": "Touch",
    "calls": {
      "constructors": [
        {
          "term": "Touch() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Touch/Touch",
          "desc": "Creates a Touch object."
        }
      ]
    }
  },
  {
    "title": "TouchEvent",
    "calls": {
      "constructors": [
        {
          "term": "TouchEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent",
          "desc": "Creates a TouchEvent object."
        }
      ],
      "properties": [
        {
          "term": "TouchEvent.altKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey",
          "desc": "A Boolean value indicating whether or not the alt key was down when the touch event was fired."
        },
        {
          "term": "TouchEvent.changedTouches Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches",
          "desc": "A TouchList of all the Touch objects representing individual points of contact whose states changed between the previous touch event and this one."
        },
        {
          "term": "TouchEvent.ctrlKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey",
          "desc": "A Boolean value indicating whether or not the control key was down when the touch event was fired."
        },
        {
          "term": "TouchEvent.metaKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey",
          "desc": "A Boolean value indicating whether or not the meta key was down when the touch event was fired."
        },
        {
          "term": "TouchEvent.shiftKey Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey",
          "desc": "A Boolean value indicating whether or not the shift key was down when the touch event was fired."
        },
        {
          "term": "TouchEvent.targetTouchesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches",
          "desc": "A TouchList of all the Touch objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event."
        },
        {
          "term": "TouchEvent.touches Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches",
          "desc": "A TouchList of all the Touch objects representing all current points of contact with the surface, regardless of target or changed status."
        },
        {
          "term": "TouchEvent.rotation \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "",
          "desc": "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate anticlockwise rotation. Initial value: 0.0"
        },
        {
          "term": "TouchEvent.scale \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "",
          "desc": "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the event. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0"
        }
      ]
    }
  },
  {
    "title": "TouchList",
    "calls": {
      "properties": [
        {
          "term": "TouchList.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchList/length",
          "desc": "The number of Touch objects in the TouchList."
        }
      ],
      "methods": [
        {
          "term": "TouchList.identifiedTouch() \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchList/identifiedTouch",
          "desc": "Returns the first Touch item in the list whose identifier matches a specified value."
        },
        {
          "term": "TouchList.item()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TouchList/item",
          "desc": "Returns the Touch object at the specified index in the list."
        }
      ]
    }
  },
  {
    "title": "TrackEvent",
    "calls": {
      "constructors": [
        {
          "term": "TrackEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/TrackEvent",
          "desc": "Creates and initializes a new TrackEvent object with the event type specified, as well as optional additional properties."
        }
      ],
      "properties": [
        {
          "term": "track Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/track",
          "desc": "The DOM track object the event is in reference to. If not null, this is always an object of one of the media track types: AudioTrack, VideoTrack, or TextTrack)."
        }
      ]
    }
  },
  {
    "title": "Transferable",
    "calls": {}
  },
  {
    "title": "TransformStream",
    "calls": {
      "constructors": [
        {
          "term": "TransformStream()",
          "link": "",
          "desc": "Creates and returns a transform stream object from the given handlers."
        }
      ],
      "properties": [
        {
          "term": "TransformStream.readable Read only",
          "link": "",
          "desc": "The readable end of a TransformStream."
        },
        {
          "term": "TransformStream.writable Read only",
          "link": "",
          "desc": "The writable end of a TransformStream."
        }
      ]
    }
  },
  {
    "title": "TreeWalker",
    "calls": {
      "properties": [
        {
          "term": "TreeWalker.root Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root",
          "desc": "Returns a Node representing the root node as specified when the TreeWalker was created."
        },
        {
          "term": "TreeWalker.whatToShow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow",
          "desc": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are: Constant Numerical value Description NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE This deprecated API should no longer be used, but will probably still work. 2 Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION This deprecated API should no longer be used, but will probably still work. 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY This deprecated API should no longer be used, but will probably still work. 32 Shows Entity nodes. This is meaningful only when creating a TreeWalker with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree. NodeFilter.SHOW_ENTITY_REFERENCE This deprecated API should no longer be used, but will probably still work. 16 Shows EntityReference nodes. NodeFilter.SHOW_NOTATION This deprecated API should no longer be used, but will probably still work. 2048 Shows Notation nodes. This is meaningful only when creating a TreeWalker with a Notation node as its root; in this case, it means that the Notation node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes."
        },
        {
          "term": "TreeWalker.filter Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter",
          "desc": "Returns a NodeFilter used to select the relevant nodes."
        },
        {
          "term": "TreeWalker.expandEntityReferences Read only \n    This is an obsolete API and is no longer guaranteed to work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/expandEntityReferences",
          "desc": "Is a Boolean indicating, when discarding an EntityReference its whole sub-tree must be discarded at the same time."
        },
        {
          "term": "TreeWalker.currentNode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode",
          "desc": "Is the Node on which the TreeWalker is currently pointing at."
        }
      ],
      "methods": [
        {
          "term": "TreeWalker.parentNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode",
          "desc": "Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed."
        },
        {
          "term": "TreeWalker.firstChild()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild",
          "desc": "Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed."
        },
        {
          "term": "TreeWalker.lastChild()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild",
          "desc": "Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed."
        },
        {
          "term": "TreeWalker.previousSibling()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling",
          "desc": "Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed."
        },
        {
          "term": "TreeWalker.nextSibling()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling",
          "desc": "Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed."
        },
        {
          "term": "TreeWalker.previousNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode",
          "desc": "Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed."
        },
        {
          "term": "TreeWalker.nextNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode",
          "desc": "Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed."
        }
      ]
    }
  },
  {
    "title": "UIEvent",
    "calls": {
      "properties": [
        {
          "term": "UIEvent.cancelBubble \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/cancelBubble",
          "desc": "Is a Boolean indicating whether the bubbling of the event has been canceled or not."
        },
        {
          "term": "UIEvent.detailRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail",
          "desc": "Returns a long with details about the event, depending on the event type."
        },
        {
          "term": "UIEvent.isChar \n    This is an obsolete API and is no longer guaranteed to work.\n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/isChar",
          "desc": "Returns a Boolean indicating whether the event produced a key character or not."
        },
        {
          "term": "UIEvent.layerX \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerX",
          "desc": "Returns the horizontal coordinate of the event relative to the current layer."
        },
        {
          "term": "UIEvent.layerY \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerY",
          "desc": "Returns the vertical coordinate of the event relative to the current layer."
        },
        {
          "term": "UIEvent.pageX \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageX",
          "desc": "Returns the horizontal coordinate of the event relative to the whole document."
        },
        {
          "term": "UIEvent.pageY \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageY",
          "desc": "Returns the vertical coordinate of the event relative to the whole document."
        },
        {
          "term": "UIEvent.sourceCapabilities \n    This is an experimental API that should not be used in production code.\n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/sourceCapabilities",
          "desc": "Returns an instance of the InputDeviceCapabilities interface, which provides information about the physical device responsible for generating a touch event."
        },
        {
          "term": "UIEvent.viewRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view",
          "desc": "Returns a WindowProxy that contains the view that generated the event."
        },
        {
          "term": "UIEvent.which \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "",
          "desc": "Returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed."
        }
      ],
      "methods": [
        {
          "term": "UIEvent.initUIEvent() \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent",
          "desc": "Initializes a UIEvent object. If the event has already being dispatched, this method does nothing."
        }
      ]
    }
  },
  {
    "title": "ULongRange",
    "calls": {
      "properties": [
        {
          "term": "max",
          "link": null,
          "desc": "A numeric value in the range of signed 32-bit integers, specifying the largest permissible value of the property it describes."
        },
        {
          "term": "min",
          "link": null,
          "desc": "A numeric value in the range of signed 32-bit integers, specifying the smallest permissible value of the property it describes."
        }
      ]
    }
  },
  {
    "title": "URL",
    "calls": {
      "constructors": [
        {
          "term": "new URL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/URL",
          "desc": "Creates and returns a URL object referencing the URL specified using an absolute URL string, or a relative URL string and a base URL string."
        }
      ],
      "properties": [
        {
          "term": "hash",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/hash",
          "desc": "A USVString containing a '#' followed by the fragment identifier of the URL."
        },
        {
          "term": "host",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/host",
          "desc": "A USVString containing the domain (that is the hostname) followed by (if a port was specified) a ':' and the port of the URL."
        },
        {
          "term": "hostname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/hostname",
          "desc": "A USVString containing the domain of the URL."
        },
        {
          "term": "href",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/href",
          "desc": "A stringifier that returns a USVString containing the whole URL."
        },
        {
          "term": "origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/origin",
          "desc": "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
        },
        {
          "term": "password",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/password",
          "desc": "A USVString containing the password specified before the domain name."
        },
        {
          "term": "pathname",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname",
          "desc": "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
        },
        {
          "term": "port",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/port",
          "desc": "A USVString containing the port number of the URL."
        },
        {
          "term": "protocol",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol",
          "desc": "A USVString containing the protocol scheme of the URL, including the final ':'."
        },
        {
          "term": "search",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/search",
          "desc": "A USVString indicating the URL's parameter string; if any parameters are provided, this string includes all of them, beginning with the leading ? character."
        },
        {
          "term": "searchParams Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams",
          "desc": "A URLSearchParams object which can be used to access the individual query parameters found in search."
        },
        {
          "term": "username",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/username",
          "desc": "A USVString containing the username specified before the domain name."
        }
      ],
      "methods": [
        {
          "term": "toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/toString",
          "desc": "Returns a USVString containing the whole URL. It is a synonym for URL.href, though it can't be used to modify the value."
        },
        {
          "term": "toJSON()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URL/toJSON",
          "desc": "Returns a USVString containing the whole URL. It returns the same string as the href property."
        }
      ]
    }
  },
  {
    "title": "URLSearchParams",
    "calls": {
      "constructors": [
        {
          "term": "URLSearchParams()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams",
          "desc": "Returns a URLSearchParams object instance."
        }
      ],
      "methods": [
        {
          "term": "URLSearchParams.append()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append",
          "desc": "Appends a specified key/value pair as a new search parameter."
        },
        {
          "term": "URLSearchParams.delete()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/delete",
          "desc": "Deletes the given search parameter, and its associated value, from the list of all search parameters."
        },
        {
          "term": "URLSearchParams.entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/entries",
          "desc": "Returns an iterator allowing iteration through all key/value pairs contained in this object."
        },
        {
          "term": "URLSearchParams.forEach()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/forEach",
          "desc": "Allows iteration through all values contained in this object via a callback function."
        },
        {
          "term": "URLSearchParams.get()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/get",
          "desc": "Returns the first value associated with the given search parameter."
        },
        {
          "term": "URLSearchParams.getAll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/getAll",
          "desc": "Returns all the values associated with a given search parameter."
        },
        {
          "term": "URLSearchParams.has()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/has",
          "desc": "Returns a Boolean indicating if such a given parameter exists."
        },
        {
          "term": "URLSearchParams.keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/keys",
          "desc": "Returns an iterator allowing iteration through all keys of the key/value pairs contained in this object."
        },
        {
          "term": "URLSearchParams.set()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/set",
          "desc": "Sets the value associated with a given search parameter to the given value. If there are several values, the others are deleted."
        },
        {
          "term": "URLSearchParams.sort()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/sort",
          "desc": "Sorts all key/value pairs, if any, by their keys."
        },
        {
          "term": "URLSearchParams.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/toString",
          "desc": "Returns a string containing a query string suitable for use in a URL."
        },
        {
          "term": "URLSearchParams.values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/values",
          "desc": "Returns an iterator allowing iteration through all values of the key/value pairs contained in this object."
        }
      ]
    }
  },
  {
    "title": "USB",
    "calls": {
      "handlers": [
        {
          "term": "USB.onconnect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USB/onconnect",
          "desc": "An event handler called whenever a previously paired device is connected."
        },
        {
          "term": "USB.ondisconnect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USB/ondisconnect",
          "desc": "An event handler called whenever a paired device is disconnected."
        }
      ],
      "methods": [
        {
          "term": "USB.getDevices()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USB/getDevices",
          "desc": "Returns a Promise that resolves with an array of USBDevice objects for paired attached devices."
        },
        {
          "term": "USB.requestDevice()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USB/requestDevice",
          "desc": "Returns a Promise that resolves with an instance of USBDevice if the specified device is found. Calling this function triggers the user agent's pairing flow."
        }
      ]
    }
  },
  {
    "title": "USBConfiguration",
    "calls": {
      "constructors": [
        {
          "term": "USBConfiguration.USBConfiguration()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration/USBConfiguration",
          "desc": "Creates a new USBConfiguration object which contains information about the configuration on the provided USBDevice with the given configuration value."
        }
      ],
      "properties": [
        {
          "term": "USBConfiguration.configurationValueRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration/configurationValue",
          "desc": "Returns the configuration value of this configuration. This is equal to the bConfigurationValue field of the configuration descriptor provided by the device defining this configuration."
        },
        {
          "term": "USBConfiguration.configurationNameRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration/configurationName",
          "desc": "Returns the name provided by the device to describe this configuration. This is equal to the value of the string descriptor with the index provided in the iConfiguration field of the configuration descriptor defining this configuration."
        },
        {
          "term": "USBConfiguration.interfacesRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration/interfaces",
          "desc": "Returns an array containing instances of the USBInterface describing each interface supported by this configuration."
        }
      ]
    }
  },
  {
    "title": "USBDevice",
    "calls": {
      "properties": [
        {
          "term": "USBDevice.configuration Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/configuration",
          "desc": "A USBConfiguration object for the currently selected interface for a paired USB device."
        },
        {
          "term": "USBDevice.configurations Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/configurations",
          "desc": "An array of device-specific interfaces for controlling a paired USB device."
        },
        {
          "term": "USBDevice.deviceClass Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceClass",
          "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceSubclass and USBDevice.deviceProtocol."
        },
        {
          "term": "USBDevice.deviceProtocol Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceProtocol",
          "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceSubclass."
        },
        {
          "term": "USBDevice.deviceSubclass Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceSubclass",
          "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceProtocol."
        },
        {
          "term": "USBDevice.deviceVersionMajor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceVersionMajor",
          "desc": "The major version number of the device in a semantic versioning scheme."
        },
        {
          "term": "USBDevice.deviceVersionMinor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceVersionMinor",
          "desc": "The minor version number of the device in a semantic versioning scheme."
        },
        {
          "term": "USBDevice.deviceVersionSubminor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/deviceVersionSubminor",
          "desc": "The patch version number of the device in a semantic versioning scheme."
        },
        {
          "term": "USBDevice.manufacturerName Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/manufacturerName",
          "desc": "The of the organization that manufactured the USB device."
        },
        {
          "term": "USBDevice.opened Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/opened",
          "desc": "Indicates whether a session has been started with a paired USB device."
        },
        {
          "term": "USBDevice.productId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/productID",
          "desc": "The manufacturer-defined code that identifies a USB device."
        },
        {
          "term": "USBDevice.productName Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/productName",
          "desc": "The manufacturer-defined name that identifies a USB device."
        },
        {
          "term": "USBDevice.serialNumber Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/serialNumber",
          "desc": "The manufacturer-defined serial number for the specific USB device."
        },
        {
          "term": "USBDevice.usbVersionMajor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/usbVersionMajor",
          "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMinor and USBDevice.usbVersionSubminor."
        },
        {
          "term": "USBDevice.usbVersionMinor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/usbVersionMinor",
          "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionSubminor."
        },
        {
          "term": "USBDevice.usbVersionSubminor Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/usbVersionSubminor",
          "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionMinor."
        },
        {
          "term": "USBDevice.vendorId Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/vendorID",
          "desc": "The official usg.org-assigned vendor ID."
        }
      ],
      "methods": [
        {
          "term": "USBDevice.claimInterface()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/claimInterface",
          "desc": "Returns a Promise that resolves when the requested interface is claimed for exclusive access."
        },
        {
          "term": "USBDevice.clearHalt()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/clearHalt",
          "desc": "Returns a Promise that resolves when a halt condition is cleared."
        },
        {
          "term": "USBDevice.controlTransferIn()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/controlTransferIn",
          "desc": "Returns a Promise that resolves with a USBTransferInResult when a command or status operation has been transmitted to the USB device."
        },
        {
          "term": "USBDevice.controlTransferOut()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/controlTransferOut",
          "desc": "Returns a Promise that resolves with a USBTransferOutResult when a command or status operation has been transmitted from the USB device."
        },
        {
          "term": "USBDevice.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/close",
          "desc": "Returns a Promise that resolves when all open interfaces are released and the device session has ended."
        },
        {
          "term": "USBDevice.isochronousTransferIn()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/isochronousTransferIn",
          "desc": "Returns a Promise that resolves with a USBIsochronousInTransferResult when time sensitive information has been transmitted to the USB device."
        },
        {
          "term": "USBDevice.isochronousTransferOut()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/isochronousTransferOut",
          "desc": "Returns a Promise that resolves with a USBIsochronousOutTransferResult when time sensitive information has been transmitted from the USB device."
        },
        {
          "term": "USBDevice.open()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/open",
          "desc": "Returns a Promise that resolves when a device session has started."
        },
        {
          "term": "USBDevice.releaseInterface()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/releaseInterface",
          "desc": "Returns a Promise that resolves when a cliamed interface is released from exclusive access."
        },
        {
          "term": "USBDevice.reset()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/reset",
          "desc": "Returns a Promise that resolves when the device is reset and all app operations canceled and their promises rejected."
        },
        {
          "term": "USBDevice.selectAlternateInterface()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/selectAlternateInterface",
          "desc": "Returns a Promise that resolves when the specified alternative endpoint is selected."
        },
        {
          "term": "USBDevice.selectConfiguration()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/selectConfiguration",
          "desc": "Returns a Promise that resolves when the specified configuration is selected."
        },
        {
          "term": "USBDevice.transferIn()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/transferIn",
          "desc": "Returns a Promise that resolves with a USBTransferInResult when bulk or interrupt data is received from the USB device."
        },
        {
          "term": "USBDevice.transferOut()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice/transferOut",
          "desc": "Returns a Promise that resolves with a USBTransferOutResult when bulk or interrupt data is sent to the USB device."
        }
      ]
    }
  },
  {
    "title": "USBEndpoint",
    "calls": {
      "constructors": [
        {
          "term": "USBEndpoint.USBEndpoint",
          "link": "",
          "desc": "Creates a new USBEndpoint object which will be populated with information about the endpoint on the provided USBAltenateInterface with the given endpoint number and transfer direction."
        }
      ],
      "properties": [
        {
          "term": "USBEndpoint.endpointNumber",
          "link": "",
          "desc": "Returns this endpoint's \"endpoint number\" which is a value from 1 to 15 extracted from the bEndpointAddress field of the endpoint descriptor defining this endpoint. This value is used to identify the endpoint when calling methods on USBDevice."
        },
        {
          "term": "USBEndpoint.direction",
          "link": "",
          "desc": "Returns the direction in which this endpoint transfers data, one of: \"in\" - Data is transferred from device to host. \"out\" - Data is transferred from host to device."
        },
        {
          "term": "USBEndpoint.type",
          "link": "",
          "desc": "Returns the type of this endpoint, one of: \"bulk\" - Provides reliable data transfer for large payloads. Data sent through a bulk endpoint is guaranteed to be delivered or generate an error but may be preempted by other data traffic. \"interrupt\" - Provides reliable data transfer for small payloads. Data sent through an interrupt endpoint is guaranteed to be delivered or generate an error and is also given dedicated bus time for transmission. \"isochronous\" - Provides unreliable data transfer for payloads that must be delivered periodically. They are given dedicated bus time but if a deadline is missed the data is dropped."
        }
      ]
    }
  },
  {
    "title": "USVString",
    "calls": {}
  },
  {
    "title": "ValidityState",
    "calls": {
      "properties": [
        {
          "term": "badInput Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput",
          "desc": "A Boolean that is true if the user has provided input that the browser is unable to convert."
        },
        {
          "term": "customError Read only",
          "link": null,
          "desc": "A Boolean indicating whether the element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method."
        },
        {
          "term": "patternMismatch Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/patternMismatch",
          "desc": "A Boolean that is true if the value does not match the specified pattern, and false if it does match. If true, the element matches the :invalid CSS pseudo-class."
        },
        {
          "term": "rangeOverflow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeOverflow",
          "desc": "A Boolean that is true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. If true, the element matches the :invalid and :out-of-range and CSS pseudo-classes."
        },
        {
          "term": "rangeUnderflow Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeUnderflow",
          "desc": "A Boolean that is true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
        },
        {
          "term": "stepMismatch Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/stepMismatch",
          "desc": "A Boolean that is true if the value does not fit the rules determined by the step attribute (that is, it's not evenly divisible by the step value), or false if it does fit the step rule. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
        },
        {
          "term": "tooLong Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong",
          "desc": "A Boolean that is true if the value exceeds the specified maxlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is less than or equal to the maximum length. Note: This property is never true in Gecko, because elements' values are prevented from being longer than maxlength. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
        },
        {
          "term": "tooShort Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort",
          "desc": "A Boolean that is true if the value fails to meet the specified minlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is greater than or equal to the minimum length. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
        },
        {
          "term": "typeMismatch Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/typeMismatch",
          "desc": "A Boolean that is true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. If true, the element matches the :invalid CSS pseudo-class."
        },
        {
          "term": "valid Read only",
          "link": null,
          "desc": "A Boolean that is true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. If true, the element matches the :valid CSS pseudo-class; the :invalid CSS pseudo-class otherwise."
        },
        {
          "term": "valueMissing Read only",
          "link": "",
          "desc": "A Boolean that is true if the element has a required attribute, but no value, or false otherwise. If true, the element matches the :invalid CSS pseudo-class."
        }
      ]
    }
  },
  {
    "title": "VideoTrack",
    "calls": {
      "properties": [
        {
          "term": "selected",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/selected",
          "desc": "A Boolean value which controls whether or not the video track is active. Only a single video track can be active at any given time, so setting this property to true for one track while another track is active will make that other track inactive."
        },
        {
          "term": "id Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/id",
          "desc": "A DOMString which uniquely identifies the track within the media. This ID can be used to locate a specific track within a video track list by calling VideoTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification."
        },
        {
          "term": "kind Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/kind",
          "desc": "A DOMString specifying the category into which the track falls. For example, the main video track would have a kind of \"main\"."
        },
        {
          "term": "label Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/label",
          "desc": "A DOMString providing a human-readable label for the track. For example, a track whose kind is \"sign\" might have a label of \"A sign-language interpretation\". This string is empty if no label is provided."
        },
        {
          "term": "language Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/language",
          "desc": "A DOMString specifying the video track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as \"en-US\" or \"pt-BR\"."
        },
        {
          "term": "sourceBuffer Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/sourceBuffer",
          "desc": "The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source."
        }
      ]
    }
  },
  {
    "title": "VideoTrackList",
    "calls": {
      "properties": [
        {
          "term": "length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/length",
          "desc": "The number of tracks in the list."
        },
        {
          "term": "selectedIndex Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/selectedIndex",
          "desc": "The index of the currently selected track, if any, or −1 otherwise."
        }
      ],
      "handlers": [
        {
          "term": "onaddtrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onaddtrack",
          "desc": "An event handler to be called when the addtrack event is fired, indicating that a new video track has been added to the media element."
        },
        {
          "term": "onchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onchange",
          "desc": "An event handler to be called when the change event occurs — that is, when the value of the selected property for a track has changed, due to the track being made active or inactive."
        },
        {
          "term": "onremovetrack",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onremovetrack",
          "desc": "An event handler to call when the removetrack event is sent, indicating that a video track has been removed from the media element."
        }
      ],
      "methods": [
        {
          "term": "getTrackById()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/getTrackById",
          "desc": "Returns the VideoTrack found within the VideoTrackList whose id matches the specified string. If no match is found, null is returned."
        }
      ]
    }
  },
  {
    "title": "VTTCue",
    "calls": {
      "constructors": [
        {
          "term": "VTTCue(startTime, endTime, text)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/VTTCue",
          "desc": "Returns a newly created VTTCue object that covers the given time range and has the given text."
        }
      ],
      "properties": [
        {
          "term": "VTTCue.region",
          "link": "",
          "desc": "A VTTRegion object describing the video's sub-region that the cue will be drawn onto, or null if none is assigned."
        },
        {
          "term": "VTTCue.vertical",
          "link": "",
          "desc": "Returns an enum representing the cue writing direction."
        },
        {
          "term": "VTTCue.snapToLines",
          "link": "",
          "desc": "Returns true if the VTTCue.line attribute is an integer number of lines or a percentage of the video size."
        },
        {
          "term": "VTTCue.line",
          "link": "",
          "desc": "Returns the line positioning of the cue. This can be the string auto or a number whose interpretation depends on the value of VTTCue.snapToLines."
        },
        {
          "term": "VTTCue.lineAlign",
          "link": "",
          "desc": "Returns an enum representing the alignment of the VTTCue.line."
        },
        {
          "term": "VTTCue.position",
          "link": "",
          "desc": "Returns the indentation of the cue within the line. This can be the string auto or a number representing the percentage of the VTTCue.region, or the video size if VTTCue.region is null."
        },
        {
          "term": "VTTCue.positionAlign",
          "link": "",
          "desc": "Returns an enum representing the alignment of the cue. This is used to determine what the VTTCue.position is anchored to. The default is auto."
        },
        {
          "term": "VTTCue.size",
          "link": "",
          "desc": "Returns a double representing the size of the cue, as a percentage of the video size."
        },
        {
          "term": "VTTCue.textAlign",
          "link": "",
          "desc": "Returns an enum representing the alignment of all the lines of text within the cue box."
        },
        {
          "term": "VTTCue.text",
          "link": "",
          "desc": "Returns a DOMString with the contents of the cue."
        }
      ],
      "methods": [
        {
          "term": "getCueAsHTML()",
          "link": "",
          "desc": "Returns the cue text as a DocumentFragment."
        }
      ]
    }
  },
  {
    "title": "VTTRegion",
    "calls": {
      "constructors": [
        {
          "term": "VTTRegion()",
          "link": "",
          "desc": "Returns a newly created VTTRegion object."
        }
      ],
      "properties": [
        {
          "term": "VTTRegion.id",
          "link": "",
          "desc": "A DOMString that identifies the region."
        },
        {
          "term": "VTTRegion.width",
          "link": "",
          "desc": "A double representing the width of the region, as a percentage of the video."
        },
        {
          "term": "VTTRegion.lines",
          "link": "",
          "desc": "A double representing the height of the region, in number of lines."
        },
        {
          "term": "VTTRegion.regionAnchorX",
          "link": "",
          "desc": "A double representing the region anchor X offset, as a percentage of the region."
        },
        {
          "term": "VTTRegion.regionAnchorY",
          "link": "",
          "desc": "A double representing the region anchor Y offset, as a percentage of the region."
        },
        {
          "term": "VTTRegion.viewportAnchorX",
          "link": "",
          "desc": "A double representing the viewport anchor X offset, as a percentage of the video."
        },
        {
          "term": "VTTRegion.viewportAnchorY",
          "link": "",
          "desc": "A double representing the viewport anchor Y offset, as a percentage of the video."
        },
        {
          "term": "VTTRegion.scroll",
          "link": "",
          "desc": "An enum representing how adding new cues will move existing cues."
        }
      ]
    }
  },
  {
    "title": "WakeLock",
    "calls": {
      "methods": [
        {
          "term": "request",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLock/request",
          "desc": "Requests a WakeLockSentinel object, which returns a Promise that resolves with a WakeLockSentinel object."
        }
      ]
    }
  },
  {
    "title": "WakeLockSentinel",
    "calls": {
      "properties": [
        {
          "term": "released Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel/released",
          "desc": "Returns a boolean indicating whether the WakeLockSentinel has been released."
        },
        {
          "term": "type Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel/type",
          "desc": "Returns a String representation of the currently acquired WakeLockSentinel type. Return values are: 'screen': A screen wake lock. Prevents devices from dimming or locking the screen."
        }
      ],
      "handlers": [
        {
          "term": "onrelease",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel/onrelease",
          "desc": "Fired when the release() method is called or the wake lock is released by the user agent."
        }
      ],
      "methods": [
        {
          "term": "release()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel/release",
          "desc": "Releases the WakeLockSentinel, returning a Promise that is resolved once the sentinel has been successfully released."
        }
      ]
    }
  },
  {
    "title": "WaveShaperNode",
    "calls": {
      "constructors": [
        {
          "term": "WaveShaperNode()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/WaveShaperNode",
          "desc": "Creates a new instance of an WaveShaperNode object."
        }
      ],
      "properties": [
        {
          "term": "WaveShaperNode.curve",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve",
          "desc": "Is a Float32Array of numbers describing the distortion to apply."
        },
        {
          "term": "WaveShaperNode.oversample",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample",
          "desc": "Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal."
        }
      ]
    }
  },
  {
    "title": "WEBGL_color_buffer_float",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_astc",
    "calls": {
      "methods": [
        {
          "term": "ext.getSupportedProfiles()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles",
          "desc": "Returns an array of strings containing the names of the ASTC profiles supported by the implementation."
        }
      ]
    }
  },
  {
    "title": "WEBGL_compressed_texture_atc",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_etc",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_etc1",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_pvrtc",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_s3tc_srgb",
    "calls": {}
  },
  {
    "title": "WEBGL_compressed_texture_s3tc",
    "calls": {}
  },
  {
    "title": "WEBGL_debug_renderer_info",
    "calls": {}
  },
  {
    "title": "WEBGL_debug_shaders",
    "calls": {
      "methods": [
        {
          "term": "WEBGL_debug_shaders.getTranslatedShaderSource()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource",
          "desc": "Returns the translated shader source."
        }
      ]
    }
  },
  {
    "title": "WEBGL_depth_texture",
    "calls": {}
  },
  {
    "title": "WEBGL_draw_buffers",
    "calls": {
      "methods": [
        {
          "term": "ext.drawBuffersWEBGL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL",
          "desc": "Defines the draw buffers to which all fragment colors are written. (When using WebGL2, this method is available as gl.drawBuffers() by default)."
        }
      ]
    }
  },
  {
    "title": "WEBGL_lose_context",
    "calls": {
      "methods": [
        {
          "term": "WEBGL_lose_context.loseContext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext",
          "desc": "Simulates losing the context."
        },
        {
          "term": "WEBGL_lose_context.restoreContext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/restoreContext",
          "desc": "Simulates restoring the context."
        }
      ]
    }
  },
  {
    "title": "WEBGL_multi_draw",
    "calls": {
      "methods": [
        {
          "term": "ext.multiDrawArraysWEBGL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL",
          "desc": "Renders multiple primitives from array data (identical to multiple calls to drawArrays)."
        },
        {
          "term": "ext.multiDrawElementsWEBGL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL",
          "desc": "Renders multiple primitives from element array data (identical to multiple calls to drawElements)."
        },
        {
          "term": "ext.multiDrawArraysInstancedWEBGL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL",
          "desc": "Renders multiple primitives from array data (identical to multiple calls to drawArraysInstanced)."
        },
        {
          "term": "ext.multiDrawElementsInstancedWEBGL()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL",
          "desc": "Renders multiple primitives from element array data (identical to multiple calls to drawElementsInstanced)."
        }
      ]
    }
  },
  {
    "title": "WebGL2RenderingContext",
    "calls": {}
  },
  {
    "title": "WebGLActiveInfo",
    "calls": {
      "properties": [
        {
          "term": "WebGLActiveInfo.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/name",
          "desc": "The read-only name of the requested variable."
        },
        {
          "term": "WebGLActiveInfo.size",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/size",
          "desc": "The read-only size of the requested variable."
        },
        {
          "term": "WebGLActiveInfo.type",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/type",
          "desc": "The read-only type of the requested variable."
        }
      ]
    }
  },
  {
    "title": "WebGLBuffer",
    "calls": {}
  },
  {
    "title": "WebGLContextEvent",
    "calls": {
      "properties": [
        {
          "term": "WebGLContextEvent.statusMessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent/statusMessage",
          "desc": "A read-only property containing additional information about the event."
        }
      ]
    }
  },
  {
    "title": "WebGLFramebuffer",
    "calls": {}
  },
  {
    "title": "WebGLProgram",
    "calls": {}
  },
  {
    "title": "WebGLRenderbuffer",
    "calls": {}
  },
  {
    "title": "WebGLRenderingContext",
    "calls": {}
  },
  {
    "title": "WebGLShader",
    "calls": {}
  },
  {
    "title": "WebGLShaderPrecisionFormat",
    "calls": {
      "properties": [
        {
          "term": "WebGLShaderPrecisionFormat.rangeMin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin",
          "desc": "The base 2 log of the absolute value of the minimum value that can be represented."
        },
        {
          "term": "WebGLShaderPrecisionFormat.rangeMax Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax",
          "desc": "The base 2 log of the absolute value of the maximum value that can be represented."
        },
        {
          "term": "WebGLShaderPrecisionFormat.precision Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/precision",
          "desc": "The number of bits of precision that can be represented. For integer formats this value is always 0."
        }
      ]
    }
  },
  {
    "title": "WebGLTexture",
    "calls": {}
  },
  {
    "title": "WebGLTransformFeedback",
    "calls": {}
  },
  {
    "title": "WebGLUniformLocation",
    "calls": {}
  },
  {
    "title": "WebGLVertexArrayObject",
    "calls": {}
  },
  {
    "title": "WebSocket",
    "calls": {
      "constructors": [
        {
          "term": "WebSocket(url[, protocols])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/WebSocket",
          "desc": "Returns a newly created WebSocket object."
        }
      ],
      "properties": [
        {
          "term": "WebSocket.binaryType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType",
          "desc": "The binary data type used by the connection."
        },
        {
          "term": "WebSocket.bufferedAmount Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount",
          "desc": "The number of bytes of queued data."
        },
        {
          "term": "WebSocket.extensions Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions",
          "desc": "The extensions selected by the server."
        },
        {
          "term": "WebSocket.onclose",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose",
          "desc": "An event listener to be called when the connection is closed."
        },
        {
          "term": "WebSocket.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror",
          "desc": "An event listener to be called when an error occurs."
        },
        {
          "term": "WebSocket.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage",
          "desc": "An event listener to be called when a message is received from the server."
        },
        {
          "term": "WebSocket.onopen",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen",
          "desc": "An event listener to be called when the connection is opened."
        },
        {
          "term": "WebSocket.protocol Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol",
          "desc": "The sub-protocol selected by the server."
        },
        {
          "term": "WebSocket.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState",
          "desc": "The current state of the connection."
        },
        {
          "term": "WebSocket.url Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url",
          "desc": "The absolute URL of the WebSocket."
        }
      ],
      "methods": [
        {
          "term": "WebSocket.close([code[, reason]])",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close",
          "desc": "Closes the connection."
        },
        {
          "term": "WebSocket.send(data)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send",
          "desc": "Enqueues data to be transmitted."
        }
      ]
    }
  },
  {
    "title": "WheelEvent",
    "calls": {
      "constructors": [
        {
          "term": "WheelEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent",
          "desc": "Creates a WheelEvent object."
        }
      ],
      "properties": [
        {
          "term": "WheelEvent.deltaXRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX",
          "desc": "Returns a double representing the horizontal scroll amount."
        },
        {
          "term": "WheelEvent.deltaYRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY",
          "desc": "Returns a double representing the vertical scroll amount."
        },
        {
          "term": "WheelEvent.deltaZRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ",
          "desc": "Returns a double representing the scroll amount for the z-axis."
        },
        {
          "term": "WheelEvent.deltaModeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode",
          "desc": "Returns an unsigned long representing the unit of the delta* values' scroll amount. Permitted values are: Constant Value Description WheelEvent.DOM_DELTA_PIXEL 0x00 The delta* values are specified in pixels. WheelEvent.DOM_DELTA_LINE 0x01 The delta* values are specified in lines. WheelEvent.DOM_DELTA_PAGE 0x02 The delta* values are specified in pages."
        }
      ]
    }
  },
  {
    "title": "Window",
    "calls": {
      "properties": [
        {
          "term": "Window.closed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/closed",
          "desc": "This property indicates whether the current window is closed or not."
        },
        {
          "term": "Window.console Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/console",
          "desc": "Returns a reference to the console object which provides access to the browser's debugging console."
        },
        {
          "term": "Window.controllers Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers",
          "desc": "Returns the XUL controller objects for the current chrome window."
        },
        {
          "term": "Window.customElements Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements",
          "desc": "Returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements."
        },
        {
          "term": "Window.crypto Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto",
          "desc": "Returns the browser crypto object."
        },
        {
          "term": "Window.devicePixelRatio Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio",
          "desc": "Returns the ratio between physical pixels and device independent pixels in the current display."
        },
        {
          "term": "Window.document Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document",
          "desc": "Returns a reference to the document that the window contains."
        },
        {
          "term": "Window.DOMMatrix Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMMatrix object, which represents 4x4 matrices, suitable for 2D and 3D operations."
        },
        {
          "term": "Window.DOMMatrixReadOnly Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMMatrixReadOnly object, which represents 4x4 matrices, suitable for 2D and 3D operations."
        },
        {
          "term": "Window.DOMPoint Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMPoint object, which represents a 2D or 3D point in a coordinate system."
        },
        {
          "term": "Window.DOMPointReadOnly Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMPointReadOnly object, which represents a 2D or 3D point in a coordinate system."
        },
        {
          "term": "Window.DOMQuad Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMQuad object, which provides represents a quadrilaterial object, that is one having four corners and four sides."
        },
        {
          "term": "Window.DOMRect Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMRect object, which represents a rectangle."
        },
        {
          "term": "Window.DOMRectReadOnly Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "",
          "desc": "Returns a reference to a DOMRectReadOnly object, which represents a rectangle."
        },
        {
          "term": "Window.event Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/event",
          "desc": "Returns the current event, which is the event currently being handled by the JavaScript code's context, or undefined if no event is currently being handled. The Event object passed directly to event handlers should be used instead whenever possible."
        },
        {
          "term": "Window.frameElement Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement",
          "desc": "Returns the element in which the window is embedded, or null if the window is not embedded."
        },
        {
          "term": "Window.frames Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frames",
          "desc": "Returns an array of the subframes in the current window."
        },
        {
          "term": "Window.fullScreen",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen",
          "desc": "This property indicates whether the window is displayed in full screen or not."
        },
        {
          "term": "Window.history Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/history",
          "desc": "Returns a reference to the history object."
        },
        {
          "term": "Window.innerHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight",
          "desc": "Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar."
        },
        {
          "term": "Window.innerWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth",
          "desc": "Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar."
        },
        {
          "term": "Window.isSecureContext \n    This is an experimental API that should not be used in production code.\n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext",
          "desc": "Indicates whether a context is capable of using features that require secure contexts."
        },
        {
          "term": "Window.length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/length",
          "desc": "Returns the number of frames in the window. See also window.frames."
        },
        {
          "term": "Window.location",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/location",
          "desc": "Gets/sets the location, or current URL, of the window object."
        },
        {
          "term": "Window.locationbar Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar",
          "desc": "Returns the locationbar object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.localStorage Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
          "desc": "Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it."
        },
        {
          "term": "Window.menubar Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar",
          "desc": "Returns the menubar object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.messageManager \n    This API has not been standardized.",
          "link": "",
          "desc": "Returns the message manager object for this window."
        },
        {
          "term": "Window.mozInnerScreenX Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX",
          "desc": "Returns the horizontal (X) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See mozScreenPixelsPerCSSPixel in nsIDOMWindowUtils for a conversion factor to adapt to screen pixels if needed."
        },
        {
          "term": "Window.mozInnerScreenY Read only  \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY",
          "desc": "Returns the vertical (Y) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See mozScreenPixelsPerCSSPixel for a conversion factor to adapt to screen pixels if needed."
        },
        {
          "term": "Window.name",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/name",
          "desc": "Gets/sets the name of the window."
        },
        {
          "term": "Window.navigator Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator",
          "desc": "Returns a reference to the navigator object."
        },
        {
          "term": "Window.opener",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/opener",
          "desc": "Returns a reference to the window that opened this current window."
        },
        {
          "term": "Window.outerHeight Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight",
          "desc": "Gets the height of the outside of the browser window."
        },
        {
          "term": "Window.outerWidth Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth",
          "desc": "Gets the width of the outside of the browser window."
        },
        {
          "term": "Window.pageXOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX",
          "desc": "An alias for window.scrollX."
        },
        {
          "term": "Window.pageYOffset Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY",
          "desc": "An alias for window.scrollY"
        },
        {
          "term": "Window.parent Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/parent",
          "desc": "Returns a reference to the parent of the current window or subframe."
        },
        {
          "term": "Window.performance Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/performance",
          "desc": "Returns a Performance object, which includes the timing and navigation attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples."
        },
        {
          "term": "Window.personalbar Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar",
          "desc": "Returns the personalbar object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.screen Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screen",
          "desc": "Returns a reference to the screen object associated with the window."
        },
        {
          "term": "Window.screenX and Window.screenLeft Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX",
          "desc": "Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen."
        },
        {
          "term": "Window.screenY and Window.screenTop Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY",
          "desc": "Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen."
        },
        {
          "term": "Window.scrollbars Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars",
          "desc": "Returns the scrollbars object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.scrollMaxX \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX",
          "desc": "The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width."
        },
        {
          "term": "Window.scrollMaxY \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY",
          "desc": "The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height)."
        },
        {
          "term": "Window.scrollX Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX",
          "desc": "Returns the number of pixels that the document has already been scrolled horizontally."
        },
        {
          "term": "Window.scrollY Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY",
          "desc": "Returns the number of pixels that the document has already been scrolled vertically."
        },
        {
          "term": "Window.self Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/self",
          "desc": "Returns an object reference to the window object itself."
        },
        {
          "term": "Window.sessionStorage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage",
          "desc": "Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it."
        },
        {
          "term": "Window.sidebar \n    This API has not been standardized.\n    \n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sidebar",
          "desc": "Returns a reference to the window object of the sidebar."
        },
        {
          "term": "Window.speechSynthesis Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis",
          "desc": "Returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality."
        },
        {
          "term": "Window.status",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/status",
          "desc": "Gets/sets the text in the statusbar at the bottom of the browser."
        },
        {
          "term": "Window.statusbar Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar",
          "desc": "Returns the statusbar object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.toolbar Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar",
          "desc": "Returns the toolbar object, whose visibility can be toggled in the window."
        },
        {
          "term": "Window.top Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/top",
          "desc": "Returns a reference to the topmost window in the window hierarchy. This property is read only."
        },
        {
          "term": "Window.visualViewport Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/visualViewport",
          "desc": "Returns a VisualViewport object which represents the visual viewport for a given window."
        },
        {
          "term": "Window.window Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/window",
          "desc": "Returns a reference to the current window."
        },
        {
          "term": "window[0], window[1], etc.",
          "link": null,
          "desc": "Returns a reference to the window object in the frames. See Window.frames for more details."
        }
      ],
      "handlers": [
        {
          "term": "Window.onappinstalled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled",
          "desc": "Called when the page is installed as a webapp. See appinstalled event."
        },
        {
          "term": "Window.onbeforeinstallprompt",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeinstallprompt",
          "desc": "An event handler property dispatched before a user is prompted to save a web site to a home screen on mobile."
        },
        {
          "term": "Window.ondevicelight",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight",
          "desc": "An event handler property for any ambient light levels changes"
        },
        {
          "term": "Window.ondevicemotion",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion",
          "desc": "Called if accelerometer detects a change (For mobile devices)"
        },
        {
          "term": "Window.ondeviceorientation",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation",
          "desc": "Called when the orientation is changed (For mobile devices)"
        },
        {
          "term": "Window.ondeviceorientationabsolute \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientationabsolute",
          "desc": "An event handler property for any device orientation changes."
        },
        {
          "term": "Window.ondeviceproximity",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceproximity",
          "desc": "An event handler property for device proximity event"
        },
        {
          "term": "Window.ongamepadconnected",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ongamepadconnected",
          "desc": "Represents an event handler that will run when a gamepad is connected (when the gamepadconnected event fires)."
        },
        {
          "term": "Window.ongamepaddisconnected",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/ongamepaddisconnected",
          "desc": "Represents an event handler that will run when a gamepad is disconnected (when the gamepaddisconnected event fires)."
        },
        {
          "term": "Window.onmozbeforepaint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint",
          "desc": "An event handler property for the MozBeforePaint event, which is sent before repainting the window if the event has been requested by a call to the Window.mozRequestAnimationFrame() method."
        },
        {
          "term": "Window.onpaint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onpaint",
          "desc": "An event handler property for paint events on the window."
        },
        {
          "term": "Window.onrejectionhandled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled",
          "desc": "An event handler for handled Promise rejection events."
        },
        {
          "term": "Window.onuserproximity",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onuserproximity",
          "desc": "An event handler property for user proximity events."
        },
        {
          "term": "Window.onvrdisplayconnect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect",
          "desc": "Represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires)."
        },
        {
          "term": "Window.onvrdisplaydisconnect",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect",
          "desc": "Represents an event handler that will run when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires)."
        },
        {
          "term": "Window.onvrdisplayactivate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate",
          "desc": "Represents an event handler that will run when a display is able to be presented to (when the vrdisplayactivate event fires), for example if an HMD has been moved to bring it out of standby, or woken up by being put on."
        },
        {
          "term": "Window.onvrdisplaydeactivate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate",
          "desc": "Represents an event handler that will run when a display can no longer be presented to (when the vrdisplaydeactivate event fires), for example if an HMD has gone into standby or sleep mode due to a period of inactivity."
        },
        {
          "term": "Window.onvrdisplayblur",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayblur",
          "desc": "Represents an event handler that will run when presentation to a display has been paused for some reason by the browser, OS, or VR hardware (when the vrdisplayblur event fires) — for example, while the user is interacting with a system menu or browser, to prevent tracking or loss of experience."
        },
        {
          "term": "Window.onvrdisplayfocus",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayfocus",
          "desc": "Represents an event handler that will run when presentation to a display has resumed after being blurred (when the vrdisplayfocus event fires)."
        },
        {
          "term": "Window.onvrdisplaypresentchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange",
          "desc": "represents an event handler that will run when the presenting state of a VR device changes — i.e. goes from presenting to not presenting, or vice versa (when the vrdisplaypresentchange event fires)."
        }
      ],
      "methods": [
        {
          "term": "Window.alert()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/alert",
          "desc": "Displays an alert dialog."
        },
        {
          "term": "Window.blur()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur",
          "desc": "Sets focus away from the window."
        },
        {
          "term": "Window.cancelAnimationFrame() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame",
          "desc": "Enables you to cancel a callback previously scheduled with Window.requestAnimationFrame."
        },
        {
          "term": "Window.cancelIdleCallback() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback",
          "desc": "Enables you to cancel a callback previously scheduled with Window.requestIdleCallback."
        },
        {
          "term": "Window.clearImmediate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate",
          "desc": "Cancels the repeated execution set using setImmediate."
        },
        {
          "term": "Window.close()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/close",
          "desc": "Closes the current window."
        },
        {
          "term": "Window.confirm()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",
          "desc": "Displays a dialog with a message that the user needs to respond to."
        },
        {
          "term": "Window.dump() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/dump",
          "desc": "Writes a message to the console."
        },
        {
          "term": "Window.find()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/find",
          "desc": "Searches for a given string in a window."
        },
        {
          "term": "Window.focus()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus",
          "desc": "Sets focus on the current window."
        },
        {
          "term": "Window.getComputedStyle()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle",
          "desc": "Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element."
        },
        {
          "term": "Window.getDefaultComputedStyle() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/window/getDefaultComputedStyle",
          "desc": "Gets default computed style for the specified element, ignoring author stylesheets."
        },
        {
          "term": "Window.getSelection()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection",
          "desc": "Returns the selection object representing the selected item(s)."
        },
        {
          "term": "Window.matchMedia()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia",
          "desc": "Returns a MediaQueryList object representing the specified media query string."
        },
        {
          "term": "Window.maximize()",
          "link": "",
          "desc": "FIXME: NeedsContents"
        },
        {
          "term": "Window.minimize() (top-level XUL windows only)",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/minimize",
          "desc": "Minimizes the window."
        },
        {
          "term": "Window.moveBy()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy",
          "desc": "Moves the current window by a specified amount."
        },
        {
          "term": "Window.moveTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo",
          "desc": "Moves the window to the specified coordinates."
        },
        {
          "term": "Window.open()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/open",
          "desc": "Opens a new window."
        },
        {
          "term": "Window.postMessage()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",
          "desc": "Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first."
        },
        {
          "term": "Window.print()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/print",
          "desc": "Opens the Print Dialog to print the current document."
        },
        {
          "term": "Window.prompt()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",
          "desc": "Returns the text entered by the user in a prompt dialog."
        },
        {
          "term": "Window.requestAnimationFrame()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame",
          "desc": "Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame."
        },
        {
          "term": "Window.requestIdleCallback() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback",
          "desc": "Enables the scheduling of tasks during a browser's idle periods."
        },
        {
          "term": "Window.resizeBy()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy",
          "desc": "Resizes the current window by a certain amount."
        },
        {
          "term": "Window.resizeTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo",
          "desc": "Dynamically resizes window."
        },
        {
          "term": "Window.scroll()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll",
          "desc": "Scrolls the window to a particular place in the document."
        },
        {
          "term": "Window.scrollBy()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy",
          "desc": "Scrolls the document in the window by the given amount."
        },
        {
          "term": "Window.scrollByLines() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines",
          "desc": "Scrolls the document by the given number of lines."
        },
        {
          "term": "Window.scrollByPages() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages",
          "desc": "Scrolls the current document by the specified number of pages."
        },
        {
          "term": "Window.scrollTo()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo",
          "desc": "Scrolls to a particular set of coordinates in the document."
        },
        {
          "term": "Window.setImmediate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate",
          "desc": "Executes a function after the browser has finished other heavy tasks"
        },
        {
          "term": "Window.setResizable() \n    This API has not been standardized.",
          "link": "",
          "desc": "Toggles a user's ability to resize a window."
        },
        {
          "term": "Window.sizeToContent() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent",
          "desc": "Sizes the window according to its content."
        },
        {
          "term": "Window.showOpenFilePicker()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker",
          "desc": "Shows a file picker that allows a user to select a file or multiple files."
        },
        {
          "term": "Window.showSaveFilePicker()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/showSaveFilePicker",
          "desc": "Shows a file picker that allows a user to save a file."
        },
        {
          "term": "Window.showDirectoryPicker()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker",
          "desc": "Displays a directory picker which allows the user to select a directory."
        },
        {
          "term": "Window.stop()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/stop",
          "desc": "This method stops window loading."
        },
        {
          "term": "Window.updateCommands() \n    This API has not been standardized.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands",
          "desc": "Updates the state of commands of the current chrome window (UI)."
        }
      ]
    }
  },
  {
    "title": "WindowEventHandlers",
    "calls": {
      "properties": [
        {
          "term": "WindowEventHandlers.onafterprint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint",
          "desc": "Is an EventHandler representing the code to be called when the afterprint event is raised."
        },
        {
          "term": "WindowEventHandlers.onbeforeprint",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint",
          "desc": "Is an EventHandler representing the code to be called when the beforeprint event is raised."
        },
        {
          "term": "WindowEventHandlers.onbeforeunload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload",
          "desc": "Is an EventHandler representing the code to be called when the beforeunload event is raised."
        },
        {
          "term": "WindowEventHandlers.onhashchange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange",
          "desc": "Is an EventHandler representing the code to be called when the hashchange event is raised."
        },
        {
          "term": "WindowEventHandlers.onlanguagechange \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange",
          "desc": "Is an EventHandler representing the code to be called when the languagechange event is raised."
        },
        {
          "term": "WindowEventHandlers.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage",
          "desc": "Is an EventHandler representing the code to be called when the message event is raised."
        },
        {
          "term": "WindowEventHandlers.onmessageerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror",
          "desc": "Is an EventHandler representing the code to be called when the MessageError event is raised."
        },
        {
          "term": "WindowEventHandlers.onoffline",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the offline event is raised."
        },
        {
          "term": "WindowEventHandlers.ononline",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the online event is raised."
        },
        {
          "term": "WindowEventHandlers.onpagehide",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pagehide event is raised."
        },
        {
          "term": "WindowEventHandlers.onpageshow",
          "link": "",
          "desc": "Is an EventHandler representing the code to be called when the pageshow event is raised."
        },
        {
          "term": "WindowEventHandlers.onpopstate",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate",
          "desc": "Is an EventHandler representing the code to be called when the popstate event is raised."
        },
        {
          "term": "WindowEventHandlers.onrejectionhandled",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled",
          "desc": "Is an EventHandler representing the code to be called when the rejectionhandled event is raised, indicating that a Promise was rejected and the rejection has been handled."
        },
        {
          "term": "WindowEventHandlers.onstorage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage",
          "desc": "Is an EventHandler representing the code to be called when the storage event is raised."
        },
        {
          "term": "WindowEventHandlers.onunhandledrejection",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection",
          "desc": "Is an EventHandler representing the code to be called when the unhandledrejection event is raised, indicating that a Promise was rejected but the rejection was not handled."
        },
        {
          "term": "WindowEventHandlers.onunload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload",
          "desc": "Is an EventHandler representing the code to be called when the unload event is raised."
        }
      ]
    }
  },
  {
    "title": "WindowOrWorkerGlobalScope",
    "calls": {
      "methods": [
        {
          "term": "WindowOrWorkerGlobalScope.atob()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob",
          "desc": "Decodes a string of data which has been encoded using base-64 encoding."
        },
        {
          "term": "WindowOrWorkerGlobalScope.btoa()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa",
          "desc": "Creates a base-64 encoded ASCII string from a string of binary data."
        },
        {
          "term": "WindowOrWorkerGlobalScope.clearInterval()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval",
          "desc": "Cancels the repeated execution set using WindowOrWorkerGlobalScope.setInterval()."
        },
        {
          "term": "WindowOrWorkerGlobalScope.clearTimeout()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout",
          "desc": "Cancels the delayed execution set using WindowOrWorkerGlobalScope.setTimeout()."
        },
        {
          "term": "WindowOrWorkerGlobalScope.createImageBitmap()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap",
          "desc": "Accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh."
        },
        {
          "term": "WindowOrWorkerGlobalScope.fetch()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch",
          "desc": "Starts the process of fetching a resource from the network."
        },
        {
          "term": "WindowOrWorkerGlobalScope.queueMicrotask()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask",
          "desc": "Enqueues a microtask—a short function to be executed after execution of the JavaScript code completes and control isn't being returned to a JavaScript caller, but before handling callbacks and other tasks. This lets your code run without interfering with other, possibly higher priority, code, but before the browser runtime regains control, potentially depending upon the work you need to complete."
        },
        {
          "term": "WindowOrWorkerGlobalScope.setInterval()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval",
          "desc": "Schedules a function to execute every time a given number of milliseconds elapses."
        },
        {
          "term": "WindowOrWorkerGlobalScope.setTimeout()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout",
          "desc": "Schedules a function to execute in a given amount of time."
        }
      ]
    }
  },
  {
    "title": "Worker",
    "calls": {
      "handlers": [
        {
          "term": "AbstractWorker.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror",
          "desc": "An EventListener called whenever an ErrorEvent of type error bubbles through to the worker. This is inherited from AbstractWorker."
        },
        {
          "term": "Worker.onmessage",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage",
          "desc": "An EventListener called whenever a MessageEvent of type message bubbles through the worker — i.e. when a message is sent to the parent document from the worker via DedicatedWorkerGlobalScope.postMessage. The message is stored in the event's data property."
        },
        {
          "term": "Worker.onmessageerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror",
          "desc": "Is an EventHandler representing the code to be called when the messageerror event is raised."
        }
      ],
      "methods": [
        {
          "term": "Worker.postMessage()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage",
          "desc": "Sends a message — consisting of any JavaScript object — to the worker's inner scope."
        },
        {
          "term": "Worker.terminate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate",
          "desc": "Immediately terminates the worker. This does not let worker finish its operations; it is halted at once. ServiceWorker instances do not support this method."
        }
      ]
    }
  },
  {
    "title": "WorkerGlobalScope",
    "calls": {}
  },
  {
    "title": "WorkerLocation",
    "calls": {
      "properties": [
        {
          "term": "URLUtilsReadOnly.href Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/href",
          "desc": "Is a stringifier that returns a DOMString containing the whole URL of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.protocol Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/protocol",
          "desc": "Is a DOMString containing the protocol scheme of the URL of the script executed in the Worker, including the final ':'."
        },
        {
          "term": "URLUtilsReadOnly.host Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/host",
          "desc": "Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.hostname Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hostname",
          "desc": "Is a DOMString containing the domain of the URL of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.origin Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/origin",
          "desc": "Returns a DOMString containing the canonical form of the origin of the specific location."
        },
        {
          "term": "URLUtilsReadOnly.port Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/port",
          "desc": "Is a DOMString containing the port number of the URL of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.pathname Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/pathname",
          "desc": "Is a USVString containing an initial '/' followed by the path of the URL (not including the query string or fragment) of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.search Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/search",
          "desc": "Is a DOMString containing a '?' followed by the parameters of the URL of the script executed in the Worker."
        },
        {
          "term": "URLUtilsReadOnly.hash Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hash",
          "desc": "Is a DOMString containing a '#' followed by the fragment identifier of the URL of the script executed in the Worker."
        }
      ],
      "methods": [
        {
          "term": "URLUtilsReadOnly.toString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/toString",
          "desc": "Returns a DOMString containing the whole URL of the script executed in the Worker. It is a synonym for URLUtilsReadOnly.href."
        }
      ]
    }
  },
  {
    "title": "WorkerNavigator",
    "calls": {
      "properties": [
        {
          "term": "WorkerNavigator.connectionRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/connection",
          "desc": "Provides a NetworkInformation object containing information about the network connection of a device."
        },
        {
          "term": "WorkerNavigator.locks \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/locks",
          "desc": "Returns a LockManager object which provides methods for requesting a new Lock object and querying for an existing Lock object."
        },
        {
          "term": "WorkerNavigator.permissions \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions",
          "desc": "Returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API."
        },
        {
          "term": "Navigator.storageRead only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage",
          "desc": "Returns a StorageManager interface for managing persistance permissions and estimating available storage."
        }
      ]
    }
  },
  {
    "title": "Worklet",
    "calls": {
      "methods": [
        {
          "term": "Worklet.addModule() \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule",
          "desc": "Adds the script module at the given URL to the current worklet."
        }
      ]
    }
  },
  {
    "title": "XMLDocument",
    "calls": {
      "methods": [
        {
          "term": "XMLDocument.load() \n    This API has not been standardized.\n    \n    \n \n    This deprecated API should no longer be used, but will probably still work.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument/load",
          "desc": "Loads an XML document."
        }
      ]
    }
  },
  {
    "title": "XMLHttpRequest",
    "calls": {
      "constructors": [
        {
          "term": "XMLHttpRequest()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest",
          "desc": "The constructor initializes an XMLHttpRequest. It must be called before any other method calls."
        }
      ],
      "properties": [
        {
          "term": "XMLHttpRequest.onreadystatechange",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange",
          "desc": "An EventHandler that is called whenever the readyState attribute changes."
        },
        {
          "term": "XMLHttpRequest.readyState Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState",
          "desc": "Returns an unsigned short, the state of the request."
        },
        {
          "term": "XMLHttpRequest.response Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response",
          "desc": "Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType, that contains the response entity body."
        },
        {
          "term": "XMLHttpRequest.responseText Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText",
          "desc": "Returns a DOMString that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent."
        },
        {
          "term": "XMLHttpRequest.responseType",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType",
          "desc": "Is an enumerated value that defines the response type."
        },
        {
          "term": "XMLHttpRequest.responseURL Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL",
          "desc": "Returns the serialized URL of the response or the empty string if the URL is null."
        },
        {
          "term": "XMLHttpRequest.responseXML Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML",
          "desc": "Returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML. Not available in workers."
        },
        {
          "term": "XMLHttpRequest.status Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status",
          "desc": "Returns an unsigned short with the status of the response of the request."
        },
        {
          "term": "XMLHttpRequest.statusText Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText",
          "desc": "Returns a DOMString containing the response string returned by the HTTP server. Unlike XMLHttpRequest.status, this includes the entire text of the response message (\"200 OK\", for example). Note: According to the HTTP/2 specification (8.1.2.4 Response Pseudo-Header Fields), HTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line."
        },
        {
          "term": "XMLHttpRequest.timeout",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout",
          "desc": "Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated."
        },
        {
          "term": "XMLHttpRequestEventTarget.ontimeout",
          "link": "",
          "desc": "Is an EventHandler that is called whenever the request times out."
        },
        {
          "term": "XMLHttpRequest.upload Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload",
          "desc": "Is an XMLHttpRequestUpload, representing the upload process."
        },
        {
          "term": "XMLHttpRequest.withCredentials",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials",
          "desc": "Is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers."
        }
      ],
      "methods": [
        {
          "term": "XMLHttpRequest.abort()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort",
          "desc": "Aborts the request if it has already been sent."
        },
        {
          "term": "XMLHttpRequest.getAllResponseHeaders()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders",
          "desc": "Returns all the response headers, separated by CRLF, as a string, or null if no response has been received."
        },
        {
          "term": "XMLHttpRequest.getResponseHeader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader",
          "desc": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response."
        },
        {
          "term": "XMLHttpRequest.open()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open",
          "desc": "Initializes a request."
        },
        {
          "term": "XMLHttpRequest.overrideMimeType()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType",
          "desc": "Overrides the MIME type returned by the server."
        },
        {
          "term": "XMLHttpRequest.send()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send",
          "desc": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent."
        },
        {
          "term": "XMLHttpRequest.setRequestHeader()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader",
          "desc": "Sets the value of an HTTP request header. You must call setRequestHeader()after open(), but before send()."
        }
      ]
    }
  },
  {
    "title": "XMLHttpRequestEventTarget",
    "calls": {
      "properties": [
        {
          "term": "XMLHttpRequestEventTarget.onabort",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onabort",
          "desc": "Contains the function to call when a request is aborted and the abort event is received by this object."
        },
        {
          "term": "XMLHttpRequestEventTarget.onerror",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror",
          "desc": "Contains the function to call when a request encounters an error and the error event is received by this object."
        },
        {
          "term": "XMLHttpRequestEventTarget.onload",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload",
          "desc": "Contains the function to call when an HTTP request returns after successfully fetching content and the load event is received by this object."
        },
        {
          "term": "XMLHttpRequestEventTarget.onloadstart",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadstart",
          "desc": "Contains the function that gets called when the HTTP request first begins loading data and the loadstart event is received by this object."
        },
        {
          "term": "XMLHttpRequestEventTarget.onprogress",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress",
          "desc": "Contains the function that is called periodically with information about the progress of the request and the progress event is received by this object."
        },
        {
          "term": "XMLHttpRequestEventTarget.ontimeout",
          "link": "",
          "desc": "Contains the function that is called if the event times out and the timeout event is received by this object; this only happens if a timeout has been previously established by setting the value of the XMLHttpRequest object's timeout attribute."
        },
        {
          "term": "XMLHttpRequestEventTarget.onloadend",
          "link": "",
          "desc": "Contains the function that is called when the load is completed, even if the request failed, and the loadend event is received by this object."
        }
      ]
    }
  },
  {
    "title": "XMLHttpRequestResponseType",
    "calls": {}
  },
  {
    "title": "XMLSerializer",
    "calls": {
      "methods": [
        {
          "term": "serializeToString()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer/serializeToString",
          "desc": "Returns the serialized subtree of a string."
        },
        {
          "term": "serializeToStream() \n    This API has not been standardized.\n    \n    \n\n    This deprecated API should no longer be used, but will probably still work.",
          "link": "",
          "desc": "The subtree rooted by the specified element is serialized to a byte stream using the character set specified."
        }
      ]
    }
  },
  {
    "title": "XPathEvaluator",
    "calls": {
      "methods": [
        {
          "term": "XPathEvaluator.createExpression()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createExpression",
          "desc": "Creates a parsed XPath expression with resolved namespaces."
        },
        {
          "term": "XPathEvaluator.createNSResolver()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createNSResolver",
          "desc": "Adapts any DOM node to resolve namespaces allowing the XPath expression to be evaluated relative to the context of the node where it appeared within the document."
        },
        {
          "term": "XPathEvaluator.evaluate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/evaluate",
          "desc": "Evaluates an XPath expression string and returns a result of the specified type if possible."
        }
      ]
    }
  },
  {
    "title": "XPathException",
    "calls": {
      "properties": [
        {
          "term": "XPathException.code Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathException/code",
          "desc": "Returns a short that contains one of the error code constants."
        }
      ]
    }
  },
  {
    "title": "XPathExpression",
    "calls": {
      "methods": [
        {
          "term": "XPathExpression.evaluate()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression/evaluate",
          "desc": "Evaluates the XPath expression on the given node or document."
        }
      ]
    }
  },
  {
    "title": "XPathNSResolver",
    "calls": {
      "methods": [
        {
          "term": "XPathNSResolver.lookupNamespaceURI()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathNSResolver/lookupNamespaceURI",
          "desc": "Looks up the namespace URI associated to the given namespace prefix."
        }
      ]
    }
  },
  {
    "title": "XPathResult",
    "calls": {
      "properties": [
        {
          "term": "XPathResult.booleanValueRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/booleanValue",
          "desc": "A boolean representing the value of the result if resultType is BOOLEAN_TYPE."
        },
        {
          "term": "XPathResult.invalidIteratorStateRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/invalidIteratorState",
          "desc": "Signifies that the iterator has become invalid. It is true if resultType is UNORDERED_NODE_ITERATOR_TYPE or ORDERED_NODE_ITERATOR_TYPE and the document has been modified since this result was returned."
        },
        {
          "term": "XPathResult.numberValueRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/numberValue",
          "desc": "A number representing the value of the result if resultType is NUMBER_TYPE."
        },
        {
          "term": "XPathResult.resultTypeRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/resultType",
          "desc": "A number code representing the type of the result, as defined by the type constants."
        },
        {
          "term": "XPathResult.singleNodeValueRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/singleNodeValue",
          "desc": "A Node representing the value of the single node result, which may be null."
        },
        {
          "term": "XPathResult.snapshotLengthRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotLength",
          "desc": "The number of nodes in the result snapshot."
        },
        {
          "term": "XPathResult.stringValueRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/stringValue",
          "desc": "A string representing the value of the result if resultType is STRING_TYPE."
        }
      ],
      "methods": [
        {
          "term": "XPathResult.iterateNext()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/iterateNext",
          "desc": "If the result is a node set, this method iterates over it and returns the next node from it or null if there are no more nodes."
        },
        {
          "term": "XPathResult.snapshotItem()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotItem",
          "desc": "Returns an item of the snapshot collection or null in case the index is not within the range of nodes. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated."
        }
      ]
    }
  },
  {
    "title": "XRBoundedReferenceSpace",
    "calls": {
      "properties": [
        {
          "term": "boundsGeometry Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRBoundedReferenceSpace/boundsGeometry",
          "desc": "An array of DOMPointReadOnly objects, each of which defines a vertex in the polygon defining the boundaries within which the user will be required to remain. These vertices must be sorted such that they move clockwise around the viewer's position."
        }
      ]
    }
  },
  {
    "title": "XREnvironmentBlendMode",
    "calls": {}
  },
  {
    "title": "XREye",
    "calls": {}
  },
  {
    "title": "XRFrame",
    "calls": {
      "properties": [
        {
          "term": "session Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/session",
          "desc": "The XRSession that for which this XRFrame describes the tracking details for all objects. The information about a specific object can be obtained by calling one of the methods on the object."
        }
      ],
      "methods": [
        {
          "term": "getPose()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getPose",
          "desc": "Returns an XRPose object representing the spatial relationship between the two specified XRSpace objects."
        },
        {
          "term": "getViewerPose()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getViewerPose",
          "desc": "Returns an XRViewerPose describing the viewer's position and orientation in a given XRReferenceSpace."
        }
      ]
    }
  },
  {
    "title": "XRFrameRequestCallback",
    "calls": {}
  },
  {
    "title": "XRHandedness",
    "calls": {}
  },
  {
    "title": "XRInputSourceArray",
    "calls": {
      "properties": [
        {
          "term": "length Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/length",
          "desc": "The number of XRInputSource objects in the list."
        }
      ],
      "methods": [
        {
          "term": "entries()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/entries",
          "desc": "Returns an iterator you can use to walk the list of key/value pairs in the list. Each item returned is an array whose first value is the index and whose second value is the XRInputSource at that index."
        },
        {
          "term": "forEach()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/forEach",
          "desc": "Iterates over each item in the list, in order from first to last."
        },
        {
          "term": "keys()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/keys",
          "desc": "A list of the keys corresponding to the entries in the input source list."
        },
        {
          "term": "values()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/values",
          "desc": "Returns an iterator you can use to go through all the values in the list. Each item is a single XRInputSource object."
        }
      ]
    }
  },
  {
    "title": "XRInputSourceEvent",
    "calls": {
      "constructors": [
        {
          "term": "XRInputSourceEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/XRInputSourceEvent",
          "desc": "Creates and returns a new XRInputSourceEvent object whose properties match those provided in the eventInitDict dictionary provided."
        }
      ],
      "properties": [
        {
          "term": "frame Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/frame",
          "desc": "An XRFrame object providing the needed information about the event frame during which the event occurred. This frame may have been rendered in the past rather than being a current frame. Because this is an event frame, not an animation frame, you cannot call the XRFrame method getViewerPose() on it; instead, use getPose()."
        },
        {
          "term": "inputSource Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/inputSource",
          "desc": "An XRInputSource object indicating which input source generated the input event."
        }
      ]
    }
  },
  {
    "title": "XRInputSourceEventInit",
    "calls": {
      "properties": [
        {
          "term": "frame",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEventInit/frame",
          "desc": "An XRFrame object representing the event frame during which the event took place. This event is not associated with the animation process, and has no viewer information contained within it."
        },
        {
          "term": "inputSource",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEventInit/inputSource",
          "desc": "An XRInputSource object representing the input device from which the event is being sent."
        }
      ]
    }
  },
  {
    "title": "XRInputSourcesChangeEvent",
    "calls": {
      "constructors": [
        {
          "term": "XRInputSourcesChangeEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/XRInputSourcesChangeEvent",
          "desc": "Creates and returns a new XRInputSourcesChangeEvent object configured as indicated by the given XRInputSourcesChangeEventInit object. The specified type must be inputsourceschange, which is the only event that uses this interface."
        }
      ],
      "properties": [
        {
          "term": "added Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/added",
          "desc": "An array of zero or more XRInputSource objects, each representing an input device which has been newly connected or enabled for use."
        },
        {
          "term": "removed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/removed",
          "desc": "An array of zero or more XRInputSource objects representing the input devices newly connected or enabled for use."
        },
        {
          "term": "session Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/session",
          "desc": "The XRSession to which this input source change event is being directed."
        }
      ]
    }
  },
  {
    "title": "XRInputSourcesChangeEventInit",
    "calls": {
      "properties": [
        {
          "term": "added Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/added",
          "desc": "An array of zero or more XRInputSource objects, each representing one input device which is newly available to use."
        },
        {
          "term": "removed Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/removed",
          "desc": "An array of zero or more XRInputSource objects representing the input devices which are no longer available."
        },
        {
          "term": "session Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/session",
          "desc": "The XRSession to which the event applies."
        }
      ]
    }
  },
  {
    "title": "XRPermissionDescriptor",
    "calls": {
      "properties": [
        {
          "term": "mode",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPermissionDescriptor/mode",
          "desc": "An XRSessionMode value indicating the XR mode (inline, immersive-vr, or immersive-ar) for which the permissions are requested."
        },
        {
          "term": "optionalFeatures",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPermissionDescriptor/optionalFeatures",
          "desc": "An array of strings, each specifying the name of a WebXR feature which is requested but not required for the app to function. The available features are the same as those used by XRSessionInit; see Default features in XRSessionInit for further information."
        },
        {
          "term": "requiredFeatures",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPermissionDescriptor/requiredFeatures",
          "desc": "An array of strings giving the names of the WebXR features for which permission must be obtained in order to use your app or site."
        }
      ]
    }
  },
  {
    "title": "XRPermissionStatus",
    "calls": {
      "properties": [
        {
          "term": "granted",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPermissionStatus/granted",
          "desc": "An array of strings listing the names of the features for which permission has been granted as of the time at which navigator.permissions.query() was called. Any feature which was specified in either the optionalFeatures or requiredFeatures when calling navigator.permissions.query() are listed in granted if and only if permission to use them is granted."
        }
      ]
    }
  },
  {
    "title": "XRPose",
    "calls": {
      "properties": [
        {
          "term": "XRPose.transform Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPose/transform",
          "desc": "A XRRigidTransform which provides the position and orientation of the pose relative to the base XRSpace."
        },
        {
          "term": "XRPose.emulatedPosition Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRPose/emulatedPosition",
          "desc": "A Boolean value which is false if the position and orientation given by transform is obtained directly from a full six degree of freedom (6DoF) XR device (that is, a device which tracks not only the pitch, yaw, and roll of the head but also the forward, backward, and side-to-side motion of the viewer). If any component of the transform is computed or created artificially (such as by using mouse or keyboard controls to move through space), this value is instead true, indicating that the transform is in part emulated in software."
        }
      ]
    }
  },
  {
    "title": "XRReferenceSpace",
    "calls": {
      "methods": [
        {
          "term": "getOffsetReferenceSpace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/getOffsetReferenceSpace",
          "desc": "Creates and returns a new reference space object as the same type as the one on which you call the method (so, either XRReferenceSpace or XRBoundedReferenceSpace). The new reference space can be used to transform a coordinate from the reference space of the object on which the method is called into a different coordinate space. This is useful for positioning objects while rendering, and to perform the needed transforms when changing the viewer's position and/or orientation in 3D space."
        }
      ]
    }
  },
  {
    "title": "XRReferenceSpaceEvent",
    "calls": {
      "constructors": [
        {
          "term": "XRReferenceSpaceEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/XRReferenceSpaceEvent",
          "desc": "Returns a new XRReferenceSpaceEvent with the specified type and configured using the values in the given XRReferenceSpaceEventInit dictionary."
        }
      ],
      "properties": [
        {
          "term": "referenceSpace Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/referenceSpace",
          "desc": "An XRReferenceSpace indicating the reference space that generated the event."
        },
        {
          "term": "transform Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/transform",
          "desc": "An XRRigidTransform object indicating the position and orientation of the specified referenceSpace's native origin after the event, defined relative to the coordinate system before the event."
        }
      ]
    }
  },
  {
    "title": "XRReferenceSpaceEventInit",
    "calls": {
      "properties": [
        {
          "term": "referenceSpace",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEventInit/referenceSpace",
          "desc": "The XRReferenceSpace from which the event originated."
        },
        {
          "term": "transform",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEventInit/transform",
          "desc": "An XRRigidTransform which maps the old coordinate system (from before the changes indicated by this event) to the new coordiante system."
        }
      ]
    }
  },
  {
    "title": "XRReferenceSpaceType",
    "calls": {}
  },
  {
    "title": "XRRenderStateInit",
    "calls": {
      "properties": [
        {
          "term": "baseLayer Optional",
          "link": null,
          "desc": "An XRWebGLLayer object from which the WebXR compositor will obtain imagery. This is null by default."
        },
        {
          "term": "depthFar Optional",
          "link": null,
          "desc": "A floating-point value specifying the distance in meters from the viewer to the far clip plane, which is a plane parallel to the display surface beyond which no further rendering will occur. All rendering will take place between the distances specified by depthNear and depthFar. This is 1000 meters (1 kilometer) by default."
        },
        {
          "term": "depthNear Optional",
          "link": null,
          "desc": "A floating-point value indicating the distance in meters from the viewer to a plane parallel to the display surface to be the near clip plane. No part of the scene on the viewer's side of this plane will be rendered. This is 0.1 meters (10 centimeters) by default."
        },
        {
          "term": "inlineVerticalFieldOfView Optional",
          "link": null,
          "desc": "A floating-point value indicating the default field of view, in radians, to be used when computing the projection matrix for an inline XRSession. The projection matrix calculation also takes into account the output canvas's aspect ratio. This property must not be specified for immersive sessions, so the value is null by default for immersive sessions. The default value is otherwise π * 0.5 (half of the value of pi)."
        }
      ]
    }
  },
  {
    "title": "XRRigidTransform",
    "calls": {
      "constructors": [
        {
          "term": "new XRRigidTransform()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/XRRigidTransform",
          "desc": "Creates a new XRRigidTransform object which represents a transform that applies a specified position and/or orientation."
        }
      ],
      "properties": [
        {
          "term": "XRRigidTransform.position Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/position",
          "desc": "A DOMPointReadOnly specifying a 3-dimensional point, expressed in meters, describing the translation component of the transform. The w property is always 1.0."
        },
        {
          "term": "XRRigidTransform.orientation Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/orientation",
          "desc": "A DOMPointReadOnly which contains a unit quaternion describing the rotational component of the transform. As a unit quaternion, its length is always normalized to 1.0."
        },
        {
          "term": "XRRigidTransform.matrix Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/matrix",
          "desc": "Returns the transform matrix in the form of a 16-member Float32Array. See the section Matrix format for how the array is used to represent a matrix."
        },
        {
          "term": "XRRigidTransform.inverse Read only  \n    This is an experimental API that should not be used in production code.",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform/inverse",
          "desc": "Returns a XRRigidTransform which is the inverse of this transform. That is, if applied to an object that had been previously transformed by the original transform, it will undo the transform and return the original object."
        }
      ]
    }
  },
  {
    "title": "XRSession",
    "calls": {
      "properties": [
        {
          "term": "environmentBlendMode \n    This is an experimental API that should not be used in production code.\n    \n Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/environmentBlendMode",
          "desc": "Returns this session's blend mode which denotes how much of the real-world environment is visible through the XR device and how the device will blend the device imagery with it. Note: environmentBlendMode() is part of the WebXR Augmented Reality Module, which has not been completed."
        },
        {
          "term": "inputSources \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/inputSources",
          "desc": "Returns a list of this session's XRInputSources, each representing an input device used to control the camera and/or scene."
        },
        {
          "term": "renderState \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/renderState",
          "desc": "An XRRenderState object which contains options affecting how the imagery is rendered. This includes things such as the near and far clipping planes (distances defining how close and how far away objects can be and still get rendered), as well as field of view information."
        },
        {
          "term": "visibilityState \n    This is an experimental API that should not be used in production code.\n    \nRead only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/visibilityState",
          "desc": "A DOMString whose value is one of those found in the XRVisibilityState enumerated type, indicating whether or not the session's imagery is visible to the user, and if so, if it's being visible but not currently the target for user events."
        }
      ],
      "methods": [
        {
          "term": "cancelAnimationFrame()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/cancelAnimationFrame",
          "desc": "Removes a callback from the animation frame painting callback from XRSession's set of animation frame rendering callbacks, given the identifying handle returned by a previous call to requestAnimationFrame()."
        },
        {
          "term": "end()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/end",
          "desc": "Ends the WebXR session. Returns a promise which resolves when the session has been shut down."
        },
        {
          "term": "requestAnimationFrame()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestAnimationFrame",
          "desc": "Schedules the specified method to be called the next time the user agent is working on rendering an animation frame for the WebXR device. Returns an integer value which can be used to identify the request for the purposes of canceling the callback using cancelAnimationFrame(). This method is comparable to the Window.requestAnimationFrame() method."
        },
        {
          "term": "requestReferenceSpace()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace",
          "desc": "Requests that a new XRReferenceSpace of the specified type be created. Returns a promise which resolves with the XRReferenceSpace or XRBoundedReferenceSpace which was requested, or throws a NotSupportedError if the requested space type isn't supported by the device."
        },
        {
          "term": "updateRenderState()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession/updateRenderState",
          "desc": "Updates the properties of the session's render state to match the values specified in the specified XRRenderStateInit dictionary. Any properties not included in the given dictionary are left unchanged from their current values."
        }
      ]
    }
  },
  {
    "title": "XRSessionEvent",
    "calls": {
      "constructors": [
        {
          "term": "XRSessionEvent()",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent/XRSessionEvent",
          "desc": "Creates and returns a new XRSessionEvent object configured using the specified XRSessionEventInit object's values as available."
        }
      ],
      "properties": [
        {
          "term": "session Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent/session",
          "desc": "The XRSession to which the event refers."
        }
      ]
    }
  },
  {
    "title": "XRSessionEventInit",
    "calls": {
      "properties": [
        {
          "term": "session",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEventInit/session",
          "desc": "The XRSession to which the event is to be delivered."
        }
      ]
    }
  },
  {
    "title": "XRSessionInit",
    "calls": {
      "properties": [
        {
          "term": "optionalFeatures Optional",
          "link": null,
          "desc": "An array of values identifying features which the returned XRSession may optionally support. At this time, all features are identified using strings from the XRReferenceSpaceType enumeration, but future updates to the WebXR standard may add more features."
        },
        {
          "term": "requiredFeatures Optional",
          "link": null,
          "desc": "An array of values which the returned XRSession must support. These values currently must come from the enumerated type XRReferenceSpaceType. More features may be added in future updates to the WebXR standard."
        }
      ]
    }
  },
  {
    "title": "XRSessionMode",
    "calls": {}
  },
  {
    "title": "XRTargetRayMode",
    "calls": {}
  },
  {
    "title": "XRView",
    "calls": {
      "properties": [
        {
          "term": "eye Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRView/eye",
          "desc": "Which of the two eyes (left) or (right) for which this XRView represents the perspective. This value is used to ensure that any content which is pre-rendered for presenting to a specific eye is distributed or positioned correctly. The value can also be none if the XRView is presenting monoscopic data (such as a 2D image, a full-screen view of text. or a close-up view of something that doesn't need to appear in 3D)."
        },
        {
          "term": "projectionMatrix Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRView/projectionMatrix",
          "desc": "The projection matrix that will transform the scene to appear correctly given the point-of-view indicated by eye. This matrix should be used directly in order to avoid presentation distortions that may lead to potentially serious user discomfort."
        },
        {
          "term": "transform Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRView/transform",
          "desc": "An XRRigidTransform which describes the current position and orientation of the viewpoint in relation to the XRReferenceSpace specified when getViewerPose() was called on the XRFrame being rendered."
        }
      ]
    }
  },
  {
    "title": "XRViewerPose",
    "calls": {
      "properties": [
        {
          "term": "views Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose/views",
          "desc": "An array of XRView objects, one for each viewpoint on the scene which is needed to represent the scene to the user. A typical headset provides a viewer pose with two views whose eye property is either left or right, indicating which eye that view represents. Taken together, these views can reproduce the 3D effect when displayed on the XR device."
        }
      ]
    }
  },
  {
    "title": "XRViewport",
    "calls": {
      "properties": [
        {
          "term": "height Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/height",
          "desc": "The height, in pixels, of the viewport."
        },
        {
          "term": "width Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/width",
          "desc": "The width, in pixels, of the viewport."
        },
        {
          "term": "x Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/x",
          "desc": "The offset from the origin of the destination graphics surface (typically a XRWebGLLayer) to the left edge of the viewport, in pixels."
        },
        {
          "term": "y Read only",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/y",
          "desc": "The offset from the origin of the viewport to the bottom edge of the viewport; WebGL's coordinate system places (0, 0) at the bottom left corner of the surface."
        }
      ]
    }
  },
  {
    "title": "XRVisibilityState",
    "calls": {}
  },
  {
    "title": "XRWebGLLayerInit",
    "calls": {
      "properties": [
        {
          "term": "alpha Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/alpha",
          "desc": "The frame buffer's color buffer will be established with an alpha channel if the alpha Boolean property is true. Otherwise, the color buffer will not have an alpha channel. The default value is true."
        },
        {
          "term": "antialias Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/antialias",
          "desc": "A Boolean value which is true if anti-aliasing is to be used when rendering in the context; otherwise false. The browser selects the anti-aliasing method to use; there is no support for requesting a specific mode yet. The default value is true."
        },
        {
          "term": "depth Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/depth",
          "desc": "A Boolean value which, if true, requests that the new layer have a depth buffer; otherwise, no depth layer is allocated. The default is true."
        },
        {
          "term": "framebufferScaleFactor Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/framebufferScaleFactor",
          "desc": "A floating-point value which is used to scale the image during compositing, with a value of 1.0 represents the default pixel size for the frame buffer. The static XRWebGLLayer function XRWebGLLayer.getNativeFramebufferScaleFactor() returns the scale that would result in a 1:1 pixel ratio, thereby ensuring that the rendering is occurring at the device's native resolution. The default is 1.0."
        },
        {
          "term": "ignoreDepthValues Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/ignoreDepthValues",
          "desc": "A Boolean value which indicates whether or not to ignore the contents of the depth buffer while compositing the scene. The default is false."
        },
        {
          "term": "stencil Optional",
          "link": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/stencil",
          "desc": "A Boolean value which, if true, requests that the new layer include a stencil buffer. Otherwise, no stencil buffer is allocated. The default is false."
        }
      ]
    }
  },
  {
    "title": "XSLTProcessor",
    "calls": {
      "methods": [
        {
          "term": "[Throws] void XSLTProcessor.importStylesheet(Node styleSheet)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Imports the XSLT stylesheet. If the given node is a document node, you can pass in a full XSL Transform or a literal result element transform; otherwise, it must be an <xsl:stylesheet> or <xsl:transform> element."
        },
        {
          "term": "[Throws] DocumentFragment\n    XSLTProcessor.transformToFragment(Node source, Document owner)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Transforms the node source by applying the stylesheet imported using the XSLTProcessor.importStylesheet() function. The owner document of the resulting document fragment is the owner node."
        },
        {
          "term": "[Throws]\n    Document\n    XSLTProcessor.transformToDocument(Node source)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Transforms the node source applying the stylesheet given importing using the XSLTProcessor.importStylesheet() function. The resultant object depends on the output method of the stylesheet: Output method Result type html HTMLDocument xml XMLDocument text XMLDocument with a single root element <transformiix:result> with the text as a child"
        },
        {
          "term": "[Throws] void XSLTProcessor.setParameter(String namespaceURI, String localName, any value)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Sets a parameter in the XSLT stylesheet that was imported. (Sets the value of an <xsl:param>.) A null value for namespaceURI is treated the same as an empty string."
        },
        {
          "term": "[Throws] any XSLTProcessor.getParameter(String namespaceURI, String localName)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Gets the value of a parameter from the XSLT stylesheet. A null value for namespaceURI is treated the same as an empty string."
        },
        {
          "term": "[Throws] void XSLTProcessor.removeParameter(String namespaceURI, String localName)",
          "link": "https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#Throws",
          "desc": "Removes the parameter if it was previously set. This will make the XSLTProcessor use the default value for the parameter as specified in the stylesheet. A null value for namespaceURI is treated the same as an empty string."
        },
        {
          "term": "void XSLTProcessor.clearParameters()",
          "link": "",
          "desc": "Removes all set parameters from the XSLTProcessor. The XSLTProcessor will then use the defaults specified in the XSLT stylesheet."
        },
        {
          "term": "void XSLTProcessor.reset()",
          "link": "",
          "desc": "Removes all parameters and stylesheets from the XSLTProcessor."
        }
      ]
    }
  }
]