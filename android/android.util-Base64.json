{
  "path": "android.util",
  "name": "Base64",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CRLF",
      "desc": "Encoder flag bit to indicate lines should be terminated with a CRLF pair instead of just an LF."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DEFAULT",
      "desc": "Default values for encoder/decoder flags."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_CLOSE",
      "desc": "Flag to pass to Base64OutputStream to indicate that it should not close the output stream it is wrapping when it itself is closed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_PADDING",
      "desc": "Encoder flag bit to omit the padding '=' characters at the end of the output (if any)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_WRAP",
      "desc": "Encoder flag bit to omit all line terminators (i.e., the output will be on one long line)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "URL_SAFE",
      "desc": "Encoder/decoder flag bit to indicate using the \"URL and filename safe\" variant of Base64 (see RFC 3548 section 4) where - and _ are used in place of + and /."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "decode(str: String!, flags: Int)",
      "desc": "Decode the Base64-encoded data in input and return the data in a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "decode(input: ByteArray!, flags: Int)",
      "desc": "Decode the Base64-encoded data in input and return the data in a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "decode(input: ByteArray!, offset: Int, len: Int, flags: Int)",
      "desc": "Decode the Base64-encoded data in input and return the data in a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "encode(input: ByteArray!, flags: Int)",
      "desc": "Base64-encode the given data and return a newly allocated byte[] with the result.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "encode(input: ByteArray!, offset: Int, len: Int, flags: Int)",
      "desc": "Base64-encode the given data and return a newly allocated byte[] with the result.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "encodeToString(input: ByteArray!, flags: Int)",
      "desc": "Base64-encode the given data and return a newly allocated String with the result.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "encodeToString(input: ByteArray!, offset: Int, len: Int, flags: Int)",
      "desc": "Base64-encode the given data and return a newly allocated String with the result.",
      "symbol": "!"
    }
  ]
}