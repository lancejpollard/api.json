{
  "path": "android.renderscript",
  "name": "Script",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "bindAllocation(va: Allocation!, slot: Int)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getVarB(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "getVarD(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getVarF(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVarI(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getVarJ(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getVarV(index: Int, v: FieldPacker!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTimeZone(timeZone: String!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: Float)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: Double)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: Int)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: Long)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: Boolean)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, o: BaseObj!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: FieldPacker!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVar(index: Int, v: FieldPacker!, e: Element!, dims: IntArray!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Script.FieldID",
      "code": "createFieldID(slot: Int, e: Element!)",
      "desc": "Only to be used by generated reflected classes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Script.InvokeID",
      "code": "createInvokeID(slot: Int)",
      "desc": "Only to be used by generated reflected classes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Script.KernelID",
      "code": "createKernelID(slot: Int, sig: Int, ein: Element!, eout: Element!)",
      "desc": "Only to be used by generated reflected classes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(slot: Int, ain: Allocation!, aout: Allocation!, v: FieldPacker!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(slot: Int, ain: Allocation!, aout: Allocation!, v: FieldPacker!, sc: Script.LaunchOptions!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(slot: Int, ains: Array<Allocation!>!, aout: Allocation!, v: FieldPacker!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(slot: Int, ains: Array<Allocation!>!, aout: Allocation!, v: FieldPacker!, sc: Script.LaunchOptions!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invoke(slot: Int)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invoke(slot: Int, v: FieldPacker!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reduce(slot: Int, ains: Array<Allocation!>!, aout: Allocation!, sc: Script.LaunchOptions!)",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Builder",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "FieldBase",
      "desc": "Only intended for use by generated reflected code."
    },
    {
      "type": "nested-classes",
      "code": "FieldID",
      "desc": "FieldID is an identifier for a Script + exported field pair."
    },
    {
      "type": "nested-classes",
      "code": "InvokeID",
      "desc": "InvokeID is an identifier for an invoke function."
    },
    {
      "type": "nested-classes",
      "code": "KernelID",
      "desc": "KernelID is an identifier for a Script + root function pair."
    },
    {
      "type": "nested-classes",
      "code": "LaunchOptions",
      "desc": "Class for specifying the specifics about how a kernel will be launched."
    },
    {
      "type": "inherited-methods",
      "from": "BaseObj"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "destroy()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "finalize()"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getName()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setName(name: String!)"
    }
  ]
}