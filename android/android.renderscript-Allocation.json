{
  "path": "android.renderscript",
  "name": "Allocation",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_GRAPHICS_CONSTANTS",
      "desc": "The Allocation will be used as the source of shader constants by one or more programs."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_GRAPHICS_RENDER_TARGET",
      "desc": "The Allocation will be used as a target for offscreen rendering This was deprecated in API level 16."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_GRAPHICS_TEXTURE",
      "desc": "The Allocation will be used as a texture source by one or more graphics programs."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_GRAPHICS_VERTEX",
      "desc": "The Allocation will be used as a graphics mesh."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_IO_INPUT",
      "desc": "The Allocation will be used as a android.view.Surface consumer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_IO_OUTPUT",
      "desc": "The Allocation will be used as a android.view.Surface producer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_SCRIPT",
      "desc": "The Allocation will be bound to and accessed by scripts."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USAGE_SHARED",
      "desc": "The Allocation's backing store will be inherited from another object (usually a android.graphics.Bitmap); copying to or from the original source Bitmap will cause a synchronization rather than a full copy."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, array: Any!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, d: IntArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, d: ShortArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, d: ByteArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, d: FloatArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFrom(off: Int, count: Int, data: Allocation!, dataOff: Int)",
      "desc": "Copy part of an Allocation into this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFromUnchecked(off: Int, count: Int, array: Any!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFromUnchecked(off: Int, count: Int, d: IntArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFromUnchecked(off: Int, count: Int, d: ShortArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFromUnchecked(off: Int, count: Int, d: ByteArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeFromUnchecked(off: Int, count: Int, d: FloatArray!)",
      "desc": "Copy an array into a 1D region of this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeTo(off: Int, count: Int, array: Any!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeTo(off: Int, count: Int, d: IntArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeTo(off: Int, count: Int, d: ShortArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeTo(off: Int, count: Int, d: ByteArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeTo(off: Int, count: Int, d: FloatArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeToUnchecked(off: Int, count: Int, array: Any!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeToUnchecked(off: Int, count: Int, d: IntArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeToUnchecked(off: Int, count: Int, d: ShortArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeToUnchecked(off: Int, count: Int, d: ByteArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy1DRangeToUnchecked(off: Int, count: Int, d: FloatArray!)",
      "desc": "Copy a 1D region of this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, array: Any!)",
      "desc": "Copy from an array into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, data: ByteArray!)",
      "desc": "Copy from an array into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, data: ShortArray!)",
      "desc": "Copy from an array into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, data: IntArray!)",
      "desc": "Copy from an array into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, data: FloatArray!)",
      "desc": "Copy from an array into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, w: Int, h: Int, data: Allocation!, dataXoff: Int, dataYoff: Int)",
      "desc": "Copy a rectangular region from an Allocation into a rectangular region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeFrom(xoff: Int, yoff: Int, data: Bitmap!)",
      "desc": "Copy a android.graphics.Bitmap into an Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeTo(xoff: Int, yoff: Int, w: Int, h: Int, array: Any!)",
      "desc": "Copy from a rectangular region in this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeTo(xoff: Int, yoff: Int, w: Int, h: Int, data: ByteArray!)",
      "desc": "Copy from a rectangular region in this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeTo(xoff: Int, yoff: Int, w: Int, h: Int, data: ShortArray!)",
      "desc": "Copy from a rectangular region in this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeTo(xoff: Int, yoff: Int, w: Int, h: Int, data: IntArray!)",
      "desc": "Copy from a rectangular region in this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy2DRangeTo(xoff: Int, yoff: Int, w: Int, h: Int, data: FloatArray!)",
      "desc": "Copy from a rectangular region in this Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy3DRangeFrom(xoff: Int, yoff: Int, zoff: Int, w: Int, h: Int, d: Int, array: Any!)",
      "desc": "Copy from an array into a 3D region in this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy3DRangeFrom(xoff: Int, yoff: Int, zoff: Int, w: Int, h: Int, d: Int, data: Allocation!, dataXoff: Int, dataYoff: Int, dataZoff: Int)",
      "desc": "Copy a rectangular region into the allocation from another allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy3DRangeTo(xoff: Int, yoff: Int, zoff: Int, w: Int, h: Int, d: Int, array: Any!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(d: Array<BaseObj!>!)",
      "desc": "Copy an array of RS objects to the Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(array: Any!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(d: IntArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(d: ShortArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(d: ByteArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(d: FloatArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(b: Bitmap!)",
      "desc": "Copy into an Allocation from a android.graphics.Bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFrom(a: Allocation!)",
      "desc": "Copy an Allocation from an Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFromUnchecked(array: Any!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFromUnchecked(d: IntArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFromUnchecked(d: ShortArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFromUnchecked(d: ByteArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyFromUnchecked(d: FloatArray!)",
      "desc": "Copy into this Allocation from an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(b: Bitmap!)",
      "desc": "Copy from the Allocation into a android.graphics.Bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(array: Any!)",
      "desc": "Copy from the Allocation into an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(d: ByteArray!)",
      "desc": "Copy from the Allocation into a byte array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(d: ShortArray!)",
      "desc": "Copy from the Allocation into a short array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(d: IntArray!)",
      "desc": "Copy from the Allocation into a int array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copyTo(d: FloatArray!)",
      "desc": "Copy from the Allocation into a float array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "createAllocations(rs: RenderScript!, t: Type!, usage: Int, numAlloc: Int)",
      "desc": "Creates a new Allocation Array with the given , and usage flags.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createCubemapFromBitmap(rs: RenderScript!, b: Bitmap!, mips: Allocation.MipmapControl!, usage: Int)",
      "desc": "Creates a cubemap Allocation from a android.graphics.Bitmap containing the horizontal list of cube faces.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createCubemapFromBitmap(rs: RenderScript!, b: Bitmap!)",
      "desc": "Creates a non-mipmapped cubemap Allocation for use as a graphics texture from a android.graphics.Bitmap containing the horizontal list of cube faces.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createCubemapFromCubeFaces(rs: RenderScript!, xpos: Bitmap!, xneg: Bitmap!, ypos: Bitmap!, yneg: Bitmap!, zpos: Bitmap!, zneg: Bitmap!, mips: Allocation.MipmapControl!, usage: Int)",
      "desc": "Creates a cubemap Allocation from 6 android.graphics.Bitmap objects containing the cube faces.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createCubemapFromCubeFaces(rs: RenderScript!, xpos: Bitmap!, xneg: Bitmap!, ypos: Bitmap!, yneg: Bitmap!, zpos: Bitmap!, zneg: Bitmap!)",
      "desc": "Creates a non-mipmapped cubemap Allocation for use as a sampler input from 6 android.graphics.Bitmap objects containing the cube faces.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createFromBitmap(rs: RenderScript!, b: Bitmap!, mips: Allocation.MipmapControl!, usage: Int)",
      "desc": "Creates an Allocation from a android.graphics.Bitmap.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createFromBitmap(rs: RenderScript!, b: Bitmap!)",
      "desc": "Creates an Allocation from a android.graphics.Bitmap.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createFromBitmapResource(rs: RenderScript!, res: Resources!, id: Int, mips: Allocation.MipmapControl!, usage: Int)",
      "desc": "Creates an Allocation from the Bitmap referenced by resource ID.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createFromBitmapResource(rs: RenderScript!, res: Resources!, id: Int)",
      "desc": "Creates a non-mipmapped Allocation to use as a graphics texture from the android.graphics.Bitmap referenced by resource ID.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createFromString(rs: RenderScript!, str: String!, usage: Int)",
      "desc": "Creates an Allocation containing string data encoded in UTF-8 format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createSized(rs: RenderScript!, e: Element!, count: Int, usage: Int)",
      "desc": "Creates an Allocation with a specified number of given elements",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createSized(rs: RenderScript!, e: Element!, count: Int)",
      "desc": "Creates an Allocation with a specified number of given elements",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createTyped(rs: RenderScript!, type: Type!, mips: Allocation.MipmapControl!, usage: Int)",
      "desc": "Creates a new Allocation with the given , mipmap flag, and usage flags.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createTyped(rs: RenderScript!, type: Type!, usage: Int)",
      "desc": "Creates an Allocation with the size specified by the type and no mipmaps generated by default",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Allocation",
      "code": "createTyped(rs: RenderScript!, type: Type!)",
      "desc": "Creates an Allocation for use by scripts with a given and no mipmaps",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "destroy()",
      "desc": "For USAGE_IO_OUTPUT, destroy() implies setSurface(null)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "generateMipmaps()",
      "desc": "Generate a mipmap chain."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteBuffer",
      "code": "getByteBuffer()",
      "desc": "Gets or creates a ByteBuffer that contains the raw data of the current Allocation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBytesSize()",
      "desc": "Get the size of the Allocation in bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Element",
      "code": "getElement()",
      "desc": "Get the android.renderscript.Element of the of the Allocation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getStride()",
      "desc": "Gets the stride of the Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Surface",
      "code": "getSurface()",
      "desc": "Returns the handle to a raw buffer that is being managed by the screen compositor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTimeStamp()",
      "desc": "Get the timestamp for the most recent buffer held by this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Type",
      "code": "getType()",
      "desc": "Get the android.renderscript.Type of the Allocation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getUsage()",
      "desc": "Get the usage flags of the Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ioReceive()",
      "desc": "Receive the latest input into the Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ioSend()",
      "desc": "Send a buffer to the output stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resize(dimX: Int)",
      "desc": "Resize a 1D allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAutoPadding(useAutoPadding: Boolean)",
      "desc": "Specifies the mapping between the Allocation's cells and an array's elements when data is copied from the Allocation to the array, or vice-versa."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFromFieldPacker(xoff: Int, fp: FieldPacker!)",
      "desc": "This is only intended to be used by auto-generated code reflected from the RenderScript script files and should not be used by developers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFromFieldPacker(xoff: Int, component_number: Int, fp: FieldPacker!)",
      "desc": "This is only intended to be used by auto-generated code reflected from the RenderScript script files and should not be used by developers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFromFieldPacker(xoff: Int, yoff: Int, zoff: Int, component_number: Int, fp: FieldPacker!)",
      "desc": "This is only intended to be used by auto-generated code reflected from the RenderScript script files and should not be used by developers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnBufferAvailableListener(callback: Allocation.OnBufferAvailableListener!)",
      "desc": "Set a notification handler for USAGE_IO_INPUT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSurface(sur: Surface!)",
      "desc": "Associate a android.view.Surface with this Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "syncAll(srcLocation: Int)",
      "desc": "Propagate changes from one usage of the Allocation to the other usages of the Allocation."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "MipmapControl",
      "desc": "Controls mipmap behavior when using the bitmap creation and update functions."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnBufferAvailableListener",
      "desc": "Interface to handle notification when new buffers are available via USAGE_IO_INPUT."
    },
    {
      "type": "inherited-methods",
      "from": "BaseObj"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getName()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setName(name: String!)"
    }
  ]
}