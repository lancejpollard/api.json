{
  "path": "android.graphics",
  "name": "Paint",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ANTI_ALIAS_FLAG",
      "desc": "Paint flag that enables antialiasing when drawing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURSOR_AFTER",
      "desc": "Option for getTextRunCursor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURSOR_AT",
      "desc": "Option for getTextRunCursor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURSOR_AT_OR_AFTER",
      "desc": "Option for getTextRunCursor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURSOR_AT_OR_BEFORE",
      "desc": "Option for getTextRunCursor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURSOR_BEFORE",
      "desc": "Option for getTextRunCursor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DEV_KERN_TEXT_FLAG",
      "desc": "Legacy Paint flag, no longer used."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DITHER_FLAG",
      "desc": "Paint flag that enables dithering when blitting."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EMBEDDED_BITMAP_TEXT_FLAG",
      "desc": "Paint flag that enables the use of bitmap fonts when drawing text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN",
      "desc": "An integer representing the end of the line has Armentian hyphen (U+058A)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_INSERT_HYPHEN",
      "desc": "An integer representing the end of the line has normal hyphen character (U+002D)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_INSERT_MAQAF",
      "desc": "An integer representing the end of the line has maqaf (Hebrew hyphen, U+05BE)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN",
      "desc": "An integer representing the end of the line has Canadian Syllabics hyphen (U+1400)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN",
      "desc": "An integer representing the end of the line has Zero-Width-Joiner (U+200D) followed by normal hyphen character (U+002D)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_NO_EDIT",
      "desc": "An integer representing the end of the line has no modification for hyphenation."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN",
      "desc": "An integer representing the character at the end of the line is replaced with hyphen character (U+002D)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FAKE_BOLD_TEXT_FLAG",
      "desc": "Paint flag that applies a synthetic bolding effect to drawn text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FILTER_BITMAP_FLAG",
      "desc": "Paint flag that enables bilinear sampling on scaled bitmaps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HINTING_OFF",
      "desc": "Font hinter option that disables font hinting."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HINTING_ON",
      "desc": "Font hinter option that enables font hinting."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LINEAR_TEXT_FLAG",
      "desc": "Paint flag that enables smooth linear scaling of text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "START_HYPHEN_EDIT_INSERT_HYPHEN",
      "desc": "An integer representing the starting of the line has normal hyphen character (U+002D)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "START_HYPHEN_EDIT_INSERT_ZWJ",
      "desc": "An integer representing the starting of the line has Zero-Width-Joiner (U+200D)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "START_HYPHEN_EDIT_NO_EDIT",
      "desc": "An integer representing the starting of the line has no modification for hyphenation."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STRIKE_THRU_TEXT_FLAG",
      "desc": "Paint flag that applies a strike-through decoration to drawn text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SUBPIXEL_TEXT_FLAG",
      "desc": "Paint flag that enables subpixel positioning of text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "UNDERLINE_TEXT_FLAG",
      "desc": "Paint flag that applies an underline decoration to drawn text."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a new paint with default settings."
    },
    {
      "type": "ctor",
      "ctor": "<init>(flags: Int)\n            Create a new paint with the specified flags."
    },
    {
      "type": "ctor",
      "ctor": "<init>(paint: Paint!)\n            Create a new paint, initialized with the attributes in the specified paint parameter."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "ascent()",
      "desc": "Return the distance above (negative) the baseline (ascent) based on the current typeface and text size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "breakText(text: CharArray!, index: Int, count: Int, maxWidth: Float, measuredWidth: FloatArray!)",
      "desc": "Measure the text, stopping early if the measured width exceeds maxWidth."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "breakText(text: CharSequence!, start: Int, end: Int, measureForwards: Boolean, maxWidth: Float, measuredWidth: FloatArray!)",
      "desc": "Measure the text, stopping early if the measured width exceeds maxWidth."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "breakText(text: String!, measureForwards: Boolean, maxWidth: Float, measuredWidth: FloatArray!)",
      "desc": "Measure the text, stopping early if the measured width exceeds maxWidth."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearShadowLayer()",
      "desc": "Clear the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "descent()",
      "desc": "Return the distance below (positive) the baseline (descent) based on the current typeface and text size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equalsForTextMeasurement(other: Paint)",
      "desc": "Returns true of the passed Paint will have the same effect on text measurement"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAlpha()",
      "desc": "Helper to getColor() that just returns the color's alpha value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BlendMode",
      "code": "getBlendMode()",
      "desc": "Get the paint's blend mode object.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getColor()",
      "desc": "Return the paint's color in sRGB."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorFilter",
      "code": "getColorFilter()",
      "desc": "Get the paint's colorfilter (maybe be null).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getColorLong()",
      "desc": "Return the paint's color."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEndHyphenEdit()",
      "desc": "Get the current value of end hyphen edit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFillPath(src: Path!, dst: Path!)",
      "desc": "Applies any/all effects (patheffect, stroking) to src, returning the result in dst."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getFlags()",
      "desc": "Return the paint's flags."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getFontFeatureSettings()",
      "desc": "Returns the font feature settings.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getFontMetrics(metrics: Paint.FontMetrics!)",
      "desc": "Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.FontMetrics",
      "code": "getFontMetrics()",
      "desc": "Allocates a new FontMetrics object, and then calls getFontMetrics(fm) with it, returning the object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getFontMetricsInt(fmi: Paint.FontMetricsInt!)",
      "desc": "Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.FontMetricsInt",
      "code": "getFontMetricsInt()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getFontSpacing()",
      "desc": "Return the recommend line spacing based on the current typeface and text size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getFontVariationSettings()",
      "desc": "Returns the font variation settings.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHinting()",
      "desc": "Return the paint's hinting mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLetterSpacing()",
      "desc": "Return the paint's letter-spacing for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MaskFilter",
      "code": "getMaskFilter()",
      "desc": "Get the paint's maskfilter object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOffsetForAdvance(text: CharArray!, start: Int, end: Int, contextStart: Int, contextEnd: Int, isRtl: Boolean, advance: Float)",
      "desc": "Get the character offset within the string whose position is closest to the specified horizontal position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOffsetForAdvance(text: CharSequence!, start: Int, end: Int, contextStart: Int, contextEnd: Int, isRtl: Boolean, advance: Float)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PathEffect",
      "code": "getPathEffect()",
      "desc": "Get the paint's patheffect object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRunAdvance(text: CharArray!, start: Int, end: Int, contextStart: Int, contextEnd: Int, isRtl: Boolean, offset: Int)",
      "desc": "Measure cursor position within a run of text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRunAdvance(text: CharSequence!, start: Int, end: Int, contextStart: Int, contextEnd: Int, isRtl: Boolean, offset: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Shader",
      "code": "getShader()",
      "desc": "Get the paint's shader object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getShadowLayerColor()",
      "desc": "Returns the color of the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getShadowLayerColorLong()",
      "desc": "Returns the color of the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getShadowLayerDx()",
      "desc": "Returns the x offset of the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getShadowLayerDy()",
      "desc": "Returns the y offset of the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getShadowLayerRadius()",
      "desc": "Returns the blur radius of the shadow layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getStartHyphenEdit()",
      "desc": "Get the current value of start hyphen edit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getStrikeThruPosition()",
      "desc": "Distance from top of the strike-through line to the baseline in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getStrikeThruThickness()",
      "desc": "Returns the thickness of the strike-through line in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.Cap",
      "code": "getStrokeCap()",
      "desc": "Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.Join",
      "code": "getStrokeJoin()",
      "desc": "Return the paint's stroke join type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getStrokeMiter()",
      "desc": "Return the paint's stroke miter value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getStrokeWidth()",
      "desc": "Return the width for stroking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.Style",
      "code": "getStyle()",
      "desc": "Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Paint.Align",
      "code": "getTextAlign()",
      "desc": "Return the paint's Align value for drawing text.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getTextBounds(text: String!, start: Int, end: Int, bounds: Rect!)",
      "desc": "Retrieve the text boundary box and store to bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getTextBounds(text: CharSequence, start: Int, end: Int, bounds: Rect)",
      "desc": "Retrieve the text boundary box and store to bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getTextBounds(text: CharArray!, index: Int, count: Int, bounds: Rect!)",
      "desc": "Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Locale",
      "code": "getTextLocale()",
      "desc": "Get the text's primary Locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LocaleList",
      "code": "getTextLocales()",
      "desc": "Get the text locale list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getTextPath(text: CharArray!, index: Int, count: Int, x: Float, y: Float, path: Path!)",
      "desc": "Return the path (outline) for the specified text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getTextPath(text: String!, start: Int, end: Int, x: Float, y: Float, path: Path!)",
      "desc": "Return the path (outline) for the specified text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTextRunAdvances(chars: CharArray, index: Int, count: Int, contextIndex: Int, contextCount: Int, isRtl: Boolean, advances: FloatArray?, advancesIndex: Int)",
      "desc": "Retrieve the character advances of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextRunCursor(text: CharArray, contextStart: Int, contextLength: Int, isRtl: Boolean, offset: Int, cursorOpt: Int)",
      "desc": "Returns the next cursor position in the run."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextRunCursor(text: CharSequence, contextStart: Int, contextEnd: Int, isRtl: Boolean, offset: Int, cursorOpt: Int)",
      "desc": "Returns the next cursor position in the run."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTextScaleX()",
      "desc": "Return the paint's horizontal scale factor for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTextSize()",
      "desc": "Return the paint's text size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTextSkewX()",
      "desc": "Return the paint's horizontal skew factor for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextWidths(text: CharArray!, index: Int, count: Int, widths: FloatArray!)",
      "desc": "Return the advance widths for the characters in the string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextWidths(text: CharSequence!, start: Int, end: Int, widths: FloatArray!)",
      "desc": "Return the advance widths for the characters in the string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextWidths(text: String!, start: Int, end: Int, widths: FloatArray!)",
      "desc": "Return the advance widths for the characters in the string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextWidths(text: String!, widths: FloatArray!)",
      "desc": "Return the advance widths for the characters in the string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Typeface",
      "code": "getTypeface()",
      "desc": "Get the paint's typeface object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getUnderlinePosition()",
      "desc": "Returns the distance from top of the underline to the baseline in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getUnderlineThickness()",
      "desc": "Returns the thickness of the underline in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getWordSpacing()",
      "desc": "Return the paint's extra word-spacing for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Xfermode",
      "code": "getXfermode()",
      "desc": "Get the paint's transfer mode object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasGlyph(string: String!)",
      "desc": "Determine whether the typeface set on the paint has a glyph supporting the string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAntiAlias()",
      "desc": "Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isDither()",
      "desc": "Helper for getFlags(), returning true if DITHER_FLAG bit is set Dithering affects how colors that are higher precision than the device are down-sampled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isElegantTextHeight()",
      "desc": "Get the elegant metrics flag."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFakeBoldText()",
      "desc": "Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFilterBitmap()",
      "desc": "Whether or not the bitmap filter is activated."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isLinearText()",
      "desc": "Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isStrikeThruText()",
      "desc": "Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSubpixelText()",
      "desc": "Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUnderlineText()",
      "desc": "Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "measureText(text: CharArray!, index: Int, count: Int)",
      "desc": "Return the width of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "measureText(text: String!, start: Int, end: Int)",
      "desc": "Return the width of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "measureText(text: String!)",
      "desc": "Return the width of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "measureText(text: CharSequence!, start: Int, end: Int)",
      "desc": "Return the width of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Restores the paint to its default settings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(src: Paint!)",
      "desc": "Copy the fields from src into this paint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setARGB(a: Int, r: Int, g: Int, b: Int)",
      "desc": "Helper to setColor(), that takes a,r,g,b and constructs the color int"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAlpha(a: Int)",
      "desc": "Helper to setColor(), that only assigns the color's alpha value, leaving its r,g,b values unchanged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAntiAlias(aa: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBlendMode(blendmode: BlendMode?)",
      "desc": "Set or clear the blend mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColor(color: Int)",
      "desc": "Set the paint's color."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColor(color: Long)",
      "desc": "Set the paint's color with a ColorLong."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorFilter",
      "code": "setColorFilter(filter: ColorFilter!)",
      "desc": "Set or clear the paint's colorfilter, returning the parameter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDither(dither: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setElegantTextHeight(elegant: Boolean)",
      "desc": "Set the paint's elegant height metrics flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEndHyphenEdit(endHyphen: Int)",
      "desc": "Set a end hyphen edit on the paint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFakeBoldText(fakeBoldText: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the FAKE_BOLD_TEXT_FLAG bit"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilterBitmap(filter: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFlags(flags: Int)",
      "desc": "Set the paint's flags."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFontFeatureSettings(settings: String!)",
      "desc": "Set font feature settings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setFontVariationSettings(fontVariationSettings: String!)",
      "desc": "Sets TrueType or OpenType font variation settings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHinting(mode: Int)",
      "desc": "Set the paint's hinting mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLetterSpacing(letterSpacing: Float)",
      "desc": "Set the paint's letter-spacing for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLinearText(linearText: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MaskFilter",
      "code": "setMaskFilter(maskfilter: MaskFilter!)",
      "desc": "Set or clear the maskfilter object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PathEffect",
      "code": "setPathEffect(effect: PathEffect!)",
      "desc": "Set or clear the patheffect object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Shader",
      "code": "setShader(shader: Shader!)",
      "desc": "Set or clear the shader object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setShadowLayer(radius: Float, dx: Float, dy: Float, shadowColor: Int)",
      "desc": "This draws a shadow layer below the main layer, with the specified offset and color, and blur radius."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setShadowLayer(radius: Float, dx: Float, dy: Float, shadowColor: Long)",
      "desc": "This draws a shadow layer below the main layer, with the specified offset and color, and blur radius."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStartHyphenEdit(startHyphen: Int)",
      "desc": "Set a start hyphen edit on the paint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrikeThruText(strikeThruText: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrokeCap(cap: Paint.Cap!)",
      "desc": "Set the paint's Cap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrokeJoin(join: Paint.Join!)",
      "desc": "Set the paint's Join."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrokeMiter(miter: Float)",
      "desc": "Set the paint's stroke miter value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrokeWidth(width: Float)",
      "desc": "Set the width for stroking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStyle(style: Paint.Style!)",
      "desc": "Set the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes Fill)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSubpixelText(subpixelText: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextAlign(align: Paint.Align!)",
      "desc": "Set the paint's text alignment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextLocale(locale: Locale)",
      "desc": "Set the text locale list to a one-member list consisting of just the locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextLocales(locales: LocaleList)",
      "desc": "Set the text locale list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextScaleX(scaleX: Float)",
      "desc": "Set the paint's horizontal scale factor for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextSize(textSize: Float)",
      "desc": "Set the paint's text size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextSkewX(skewX: Float)",
      "desc": "Set the paint's horizontal skew factor for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Typeface",
      "code": "setTypeface(typeface: Typeface!)",
      "desc": "Set or clear the typeface object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUnderlineText(underlineText: Boolean)",
      "desc": "Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWordSpacing(wordSpacing: Float)",
      "desc": "Set the paint's extra word-spacing for text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Xfermode",
      "code": "setXfermode(xfermode: Xfermode!)",
      "desc": "Set or clear the transfer mode object.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Align",
      "desc": "Align specifies how drawText aligns its text relative to the [x,y] coordinates."
    },
    {
      "type": "nested-classes",
      "code": "Cap",
      "desc": "The Cap specifies the treatment for the beginning and ending of stroked lines and paths."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "FontMetrics",
      "desc": "Class that describes the various metrics for a font at a given text size."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "FontMetricsInt",
      "desc": "Convenience method for callers that want to have FontMetrics values as integers."
    },
    {
      "type": "nested-classes",
      "code": "Join",
      "desc": "The Join specifies the treatment where lines and curve segments join on a stroked path."
    },
    {
      "type": "nested-classes",
      "code": "Style",
      "desc": "The Style specifies if the primitive being drawn is filled, stroked, or both (in the same color)."
    }
  ]
}