{
  "path": "java.util",
  "name": "DoubleSummaryStatistics",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Construct an empty instance with zero count, zero sum, Double.POSITIVE_INFINITY min, Double.NEGATIVE_INFINITY max and zero average."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "accept(value: Double)",
      "desc": "Records another value into the summary information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "combine(other: DoubleSummaryStatistics!)",
      "desc": "Combines the state of another DoubleSummaryStatistics into this one."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getAverage()",
      "desc": "Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getCount()",
      "desc": "Return the count of values recorded."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getMax()",
      "desc": "Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getMin()",
      "desc": "Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getSum()",
      "desc": "Returns the sum of values recorded, or zero if no values have been recorded."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of the object."
    },
    {
      "type": "inherited-methods",
      "from": "DoubleConsumer"
    },
    {
      "type": "inherited-methods",
      "from": "DoubleConsumer!"
    },
    {
      "type": "inherited-methods",
      "from": "andThen(after: DoubleConsumer!)"
    },
    {
      "type": "inherited-methods",
      "from": "DoubleConsumer"
    },
    {
      "type": "inherited-methods",
      "from": "after"
    },
    {
      "type": "inherited-methods",
      "from": "after"
    }
  ]
}