{
  "path": "java.util",
  "name": "Collections",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "addAll(c: MutableCollection<in T>, vararg elements: T)",
      "desc": "Adds all of the specified elements to the specified collection."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Queue",
      "code": "asLifoQueue(deque: Deque<T>)",
      "desc": "Returns a view of a Deque as a Last-in-first-out (Lifo) Queue.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(list: MutableList<out Comparable<T>!>, key: T)",
      "desc": "Searches the specified list for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(list: MutableList<out T>, key: T, c: Comparator<in T>?)",
      "desc": "Searches the specified list for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "checkedCollection(c: MutableCollection<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified collection.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "checkedList(list: MutableList<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified list.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "checkedMap(m: MutableMap<K, V>, keyType: Class<K>, valueType: Class<V>)",
      "desc": "Returns a dynamically typesafe view of the specified map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableMap",
      "code": "checkedNavigableMap(m: NavigableMap<K, V>, keyType: Class<K>, valueType: Class<V>)",
      "desc": "Returns a dynamically typesafe view of the specified navigable map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableSet",
      "code": "checkedNavigableSet(s: NavigableSet<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified navigable set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Queue",
      "code": "checkedQueue(queue: Queue<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified queue.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "checkedSet(s: MutableSet<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedMap",
      "code": "checkedSortedMap(m: SortedMap<K, V>, keyType: Class<K>, valueType: Class<V>)",
      "desc": "Returns a dynamically typesafe view of the specified sorted map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedSet",
      "code": "checkedSortedSet(s: SortedSet<E>, type: Class<E>)",
      "desc": "Returns a dynamically typesafe view of the specified sorted set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "copy(dest: MutableList<in T>, src: MutableList<out T>)",
      "desc": "Copies all of the elements from one list into another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "disjoint(c1: MutableCollection<*>, c2: MutableCollection<*>)",
      "desc": "Returns true if the two specified collections have no elements in common."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "emptyEnumeration()",
      "desc": "Returns an enumeration that has no elements.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableIterator",
      "code": "emptyIterator()",
      "desc": "Returns an iterator that has no elements.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MutableList",
      "code": "emptyList()",
      "desc": "Returns an empty list (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableListIterator",
      "code": "emptyListIterator()",
      "desc": "Returns a list iterator that has no elements.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MutableMap",
      "code": "emptyMap()",
      "desc": "Returns an empty map (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NavigableMap",
      "code": "emptyNavigableMap()",
      "desc": "Returns an empty navigable map (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableSet",
      "code": "emptyNavigableSet()",
      "desc": "Returns an empty navigable set (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MutableSet",
      "code": "emptySet()",
      "desc": "Returns an empty set (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "SortedMap",
      "code": "emptySortedMap()",
      "desc": "Returns an empty sorted map (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedSet",
      "code": "emptySortedSet()",
      "desc": "Returns an empty sorted set (immutable).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "enumeration(c: MutableCollection<T>)",
      "desc": "Returns an enumeration over the specified collection.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(list: MutableList<in T>, obj: T)",
      "desc": "Replaces all of the elements of the specified list with the specified element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "frequency(c: MutableCollection<*>, o: Any?)",
      "desc": "Returns the number of elements in the specified collection equal to the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "indexOfSubList(source: MutableList<*>, target: MutableList<*>)",
      "desc": "Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "lastIndexOfSubList(source: MutableList<*>, target: MutableList<*>)",
      "desc": "Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ArrayList",
      "code": "list(e: Enumeration<T>)",
      "desc": "Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "max(coll: MutableCollection<out T>)",
      "desc": "Returns the maximum element of the given collection, according to the natural ordering of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "max(coll: MutableCollection<out T>, comp: Comparator<in T>?)",
      "desc": "Returns the maximum element of the given collection, according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "min(coll: MutableCollection<out T>)",
      "desc": "Returns the minimum element of the given collection, according to the natural ordering of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "min(coll: MutableCollection<out T>, comp: Comparator<in T>?)",
      "desc": "Returns the minimum element of the given collection, according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "nCopies(n: Int, o: T)",
      "desc": "Returns an immutable list consisting of n copies of the specified object.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "newSetFromMap(map: MutableMap<E, Boolean!>)",
      "desc": "Returns a set backed by the specified map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "replaceAll(list: MutableList<T>, oldVal: T, newVal: T)",
      "desc": "Replaces all occurrences of one specified value in a list with another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reverse(list: MutableList<*>)",
      "desc": "Reverses the order of the elements in the specified list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Comparator",
      "code": "reverseOrder()",
      "desc": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Comparator",
      "code": "reverseOrder(cmp: Comparator<T>?)",
      "desc": "Returns a comparator that imposes the reverse ordering of the specified comparator.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "rotate(list: MutableList<*>, distance: Int)",
      "desc": "Rotates the elements in the specified list by the specified distance."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "shuffle(list: MutableList<*>)",
      "desc": "Randomly permutes the specified list using a default source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "shuffle(list: MutableList<*>, rnd: Random)",
      "desc": "Randomly permute the specified list using the specified source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "singleton(o: T)",
      "desc": "Returns an immutable set containing only the specified object.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "singletonList(o: T)",
      "desc": "Returns an immutable list containing only the specified object.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "singletonMap(key: K, value: V)",
      "desc": "Returns an immutable map, mapping only the specified key to the specified value.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(list: MutableList<T>)",
      "desc": "Sorts the specified list into ascending order, according to the Comparable of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(list: MutableList<T>, c: Comparator<in T>?)",
      "desc": "Sorts the specified list according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "swap(list: MutableList<*>, i: Int, j: Int)",
      "desc": "Swaps the elements at the specified positions in the specified list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "synchronizedCollection(c: MutableCollection<T>)",
      "desc": "Returns a synchronized (thread-safe) collection backed by the specified collection.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "synchronizedList(list: MutableList<T>)",
      "desc": "Returns a synchronized (thread-safe) list backed by the specified list.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "synchronizedMap(m: MutableMap<K, V>)",
      "desc": "Returns a synchronized (thread-safe) map backed by the specified map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableMap",
      "code": "synchronizedNavigableMap(m: NavigableMap<K, V>)",
      "desc": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableSet",
      "code": "synchronizedNavigableSet(s: NavigableSet<T>)",
      "desc": "Returns a synchronized (thread-safe) navigable set backed by the specified navigable set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "synchronizedSet(s: MutableSet<T>)",
      "desc": "Returns a synchronized (thread-safe) set backed by the specified set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedMap",
      "code": "synchronizedSortedMap(m: SortedMap<K, V>)",
      "desc": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedSet",
      "code": "synchronizedSortedSet(s: SortedSet<T>)",
      "desc": "Returns a synchronized (thread-safe) sorted set backed by the specified sorted set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "unmodifiableCollection(c: MutableCollection<out T>)",
      "desc": "Returns an unmodifiable view of the specified collection.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "unmodifiableList(list: MutableList<out T>)",
      "desc": "Returns an unmodifiable view of the specified list.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "unmodifiableMap(m: MutableMap<out K, out V>)",
      "desc": "Returns an unmodifiable view of the specified map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableMap",
      "code": "unmodifiableNavigableMap(m: NavigableMap<K, out V>)",
      "desc": "Returns an unmodifiable view of the specified navigable map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NavigableSet",
      "code": "unmodifiableNavigableSet(s: NavigableSet<T>)",
      "desc": "Returns an unmodifiable view of the specified navigable set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "unmodifiableSet(s: MutableSet<out T>)",
      "desc": "Returns an unmodifiable view of the specified set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedMap",
      "code": "unmodifiableSortedMap(m: SortedMap<K, out V>)",
      "desc": "Returns an unmodifiable view of the specified sorted map.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SortedSet",
      "code": "unmodifiableSortedSet(s: SortedSet<T>)",
      "desc": "Returns an unmodifiable view of the specified sorted set.",
      "symbol": "<"
    }
  ]
}