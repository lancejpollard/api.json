{
  "path": "android.location",
  "name": "Criteria",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCURACY_COARSE",
      "desc": "A constant indicating an approximate accuracy requirement"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCURACY_FINE",
      "desc": "A constant indicating a finer location accuracy requirement"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCURACY_HIGH",
      "desc": "a constant indicating a high accuracy requirement - may be used for horizontal, altitude, speed or bearing accuracy."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCURACY_LOW",
      "desc": "A constant indicating a low location accuracy requirement - may be used for horizontal, altitude, speed or bearing accuracy."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCURACY_MEDIUM",
      "desc": "A constant indicating a medium accuracy requirement - currently used only for horizontal accuracy."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_REQUIREMENT",
      "desc": "A constant indicating that the application does not choose to place requirement on a particular feature."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "POWER_HIGH",
      "desc": "A constant indicating a high power requirement."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "POWER_LOW",
      "desc": "A constant indicating a low power requirement."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "POWER_MEDIUM",
      "desc": "A constant indicating a medium power requirement."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a new Criteria object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(criteria: Criteria!)\n            Constructs a new Criteria object that is a copy of the given criteria."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAccuracy()",
      "desc": "Returns a constant indicating desired accuracy of location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBearingAccuracy()",
      "desc": "Returns a constant indicating the desired bearing accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHorizontalAccuracy()",
      "desc": "Returns a constant indicating the desired horizontal accuracy (latitude and longitude)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPowerRequirement()",
      "desc": "Returns a constant indicating the desired maximum power requirement."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpeedAccuracy()",
      "desc": "Returns a constant indicating the desired speed accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVerticalAccuracy()",
      "desc": "Returns a constant indicating the desired vertical accuracy (altitude)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAltitudeRequired()",
      "desc": "Returns whether the provider must provide altitude information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isBearingRequired()",
      "desc": "Returns whether the provider must provide bearing information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isCostAllowed()",
      "desc": "Returns whether the provider is allowed to incur monetary cost."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSpeedRequired()",
      "desc": "Returns whether the provider must provide speed information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccuracy(accuracy: Int)",
      "desc": "Indicates the desired accuracy for latitude and longitude."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAltitudeRequired(altitudeRequired: Boolean)",
      "desc": "Indicates whether the provider must provide altitude information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBearingAccuracy(accuracy: Int)",
      "desc": "Indicates the desired bearing accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBearingRequired(bearingRequired: Boolean)",
      "desc": "Indicates whether the provider must provide bearing information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCostAllowed(costAllowed: Boolean)",
      "desc": "Indicates whether the provider is allowed to incur monetary cost."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHorizontalAccuracy(accuracy: Int)",
      "desc": "Indicates the desired horizontal accuracy (latitude and longitude)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPowerRequirement(powerRequirement: Int)",
      "desc": "Indicates the desired maximum power requirement."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSpeedAccuracy(accuracy: Int)",
      "desc": "Indicates the desired speed accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSpeedRequired(speedRequired: Boolean)",
      "desc": "Indicates whether the provider must provide speed information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalAccuracy(accuracy: Int)",
      "desc": "Indicates the desired vertical accuracy (altitude)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}