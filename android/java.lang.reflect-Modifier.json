{
  "path": "java.lang.reflect",
  "name": "Modifier",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ABSTRACT",
      "desc": "The int value representing the abstract modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FINAL",
      "desc": "The int value representing the final modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INTERFACE",
      "desc": "The int value representing the interface modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NATIVE",
      "desc": "The int value representing the native modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PRIVATE",
      "desc": "The int value representing the private modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROTECTED",
      "desc": "The int value representing the protected modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PUBLIC",
      "desc": "The int value representing the public modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATIC",
      "desc": "The int value representing the static modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STRICT",
      "desc": "The int value representing the strictfp modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYNCHRONIZED",
      "desc": "The int value representing the synchronized modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIENT",
      "desc": "The int value representing the transient modifier."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "VOLATILE",
      "desc": "The int value representing the volatile modifier."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "classModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to a class."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "constructorModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to a constructor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "fieldModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to a field."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "interfaceModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to an interface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAbstract(mod: Int)",
      "desc": "Return true if the integer argument includes the abstract modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFinal(mod: Int)",
      "desc": "Return true if the integer argument includes the final modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInterface(mod: Int)",
      "desc": "Return true if the integer argument includes the interface modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isNative(mod: Int)",
      "desc": "Return true if the integer argument includes the native modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPrivate(mod: Int)",
      "desc": "Return true if the integer argument includes the private modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isProtected(mod: Int)",
      "desc": "Return true if the integer argument includes the protected modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPublic(mod: Int)",
      "desc": "Return true if the integer argument includes the public modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStatic(mod: Int)",
      "desc": "Return true if the integer argument includes the static modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStrict(mod: Int)",
      "desc": "Return true if the integer argument includes the strictfp modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSynchronized(mod: Int)",
      "desc": "Return true if the integer argument includes the synchronized modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTransient(mod: Int)",
      "desc": "Return true if the integer argument includes the transient modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVolatile(mod: Int)",
      "desc": "Return true if the integer argument includes the volatile modifier, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "methodModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to a method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "parameterModifiers()",
      "desc": "Return an int value OR-ing together the source language modifiers that can be applied to a parameter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(mod: Int)",
      "desc": "Return a string describing the access modifier flags in the specified modifier.",
      "symbol": "!"
    }
  ]
}