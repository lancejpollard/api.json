{
  "path": "java.io",
  "name": "StreamTokenizer",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TT_EOF",
      "desc": "A constant indicating that the end of the stream has been read."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TT_EOL",
      "desc": "A constant indicating that the end of the line has been read."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TT_NUMBER",
      "desc": "A constant indicating that a number token has been read."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TT_WORD",
      "desc": "A constant indicating that a word token has been read."
    },
    {
      "type": "ctor",
      "ctor": "<init>(is: InputStream!)\n            Creates a stream tokenizer that parses the specified input stream."
    },
    {
      "type": "ctor",
      "ctor": "<init>(r: Reader!)\n            Create a tokenizer that parses the given character stream."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "commentChar(ch: Int)",
      "desc": "Specified that the character argument starts a single-line comment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "eolIsSignificant(flag: Boolean)",
      "desc": "Determines whether or not ends of line are treated as tokens."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "lineno()",
      "desc": "Return the current line number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "lowerCaseMode(fl: Boolean)",
      "desc": "Determines whether or not word token are automatically lowercased."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextToken()",
      "desc": "Parses the next token from the input stream of this tokenizer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ordinaryChar(ch: Int)",
      "desc": "Specifies that the character argument is \"ordinary\" in this tokenizer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ordinaryChars(low: Int, hi: Int)",
      "desc": "Specifies that all characters c in the range low <= c <= high are \"ordinary\" in this tokenizer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parseNumbers()",
      "desc": "Specifies that numbers should be parsed by this tokenizer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "pushBack()",
      "desc": "Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "quoteChar(ch: Int)",
      "desc": "Specifies that matching pairs of this character delimit string constants in this tokenizer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resetSyntax()",
      "desc": "Resets this tokenizer's syntax table so that all characters are \"ordinary."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "slashSlashComments(flag: Boolean)",
      "desc": "Determines whether or not the tokenizer recognizes C++-style comments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "slashStarComments(flag: Boolean)",
      "desc": "Determines whether or not the tokenizer recognizes C-style comments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the string representation of the current stream token and the line number it occurs on."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "whitespaceChars(low: Int, hi: Int)",
      "desc": "Specifies that all characters c in the range low <= c <= high are white space characters."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "wordChars(low: Int, hi: Int)",
      "desc": "Specifies that all characters c in the range low <= c <= high are word constituents."
    }
  ]
}