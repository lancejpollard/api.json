{
  "path": "android.view",
  "name": "InputDevice",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "KEYBOARD_TYPE_ALPHABETIC",
      "desc": "The keyboard supports a complement of alphabetic keys."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "KEYBOARD_TYPE_NONE",
      "desc": "There is no keyboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "KEYBOARD_TYPE_NON_ALPHABETIC",
      "desc": "The keyboard is not fully alphabetic."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_ORIENTATION",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_ORIENTATION."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_PRESSURE",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_PRESSURE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_SIZE",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_SIZE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_TOOL_MAJOR",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_TOOL_MAJOR."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_TOOL_MINOR",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_TOOL_MINOR."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_TOUCH_MAJOR",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_TOUCH_MAJOR."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_TOUCH_MINOR",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_TOUCH_MINOR."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_X",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_X."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOTION_RANGE_Y",
      "desc": "Constant for retrieving the range of values for MotionEvent#AXIS_Y."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_ANY",
      "desc": "A special input source constant that is used when filtering input devices to match devices that provide any type of input source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_BLUETOOTH_STYLUS",
      "desc": "The input device is a Bluetooth stylus."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_BUTTON",
      "desc": "The input source has buttons or keys."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_JOYSTICK",
      "desc": "The input source is a joystick."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_MASK",
      "desc": "A mask for input source classes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_NONE",
      "desc": "The input source has no class."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_POINTER",
      "desc": "The input source is a pointing device associated with a display."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_POSITION",
      "desc": "The input source is an absolute positioning device not associated with a display (unlike SOURCE_CLASS_POINTER)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_CLASS_TRACKBALL",
      "desc": "The input source is a trackball navigation device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_DPAD",
      "desc": "The input source is a DPad."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_GAMEPAD",
      "desc": "The input source is a game pad."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_HDMI",
      "desc": "The input source is a device connected through HDMI-based bus."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_JOYSTICK",
      "desc": "The input source is a joystick."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_KEYBOARD",
      "desc": "The input source is a keyboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_MOUSE",
      "desc": "The input source is a mouse pointing device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_MOUSE_RELATIVE",
      "desc": "The input source is a mouse device whose relative motions should be interpreted as navigation events."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_ROTARY_ENCODER",
      "desc": "The input source is a rotating encoder device whose motions should be interpreted as akin to those of a scroll wheel."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_STYLUS",
      "desc": "The input source is a stylus pointing device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_TOUCHPAD",
      "desc": "The input source is a touch pad or digitizer tablet that is not associated with a display (unlike SOURCE_TOUCHSCREEN)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_TOUCHSCREEN",
      "desc": "The input source is a touch screen pointing device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_TOUCH_NAVIGATION",
      "desc": "The input source is a touch device whose motions should be interpreted as navigation events."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_TRACKBALL",
      "desc": "The input source is a trackball."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOURCE_UNKNOWN",
      "desc": "The input source is unknown."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getControllerNumber()",
      "desc": "The controller number for a given input device."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getDescriptor()",
      "desc": "Gets the input device descriptor, which is a stable identifier for an input device.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "InputDevice",
      "code": "getDevice(id: Int)",
      "desc": "Gets information about the input device with the specified id.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "IntArray",
      "code": "getDeviceIds()",
      "desc": "Gets the ids of all input devices in the system.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getId()",
      "desc": "Gets the input device id."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "KeyCharacterMap",
      "code": "getKeyCharacterMap()",
      "desc": "Gets the key character map associated with this input device.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getKeyboardType()",
      "desc": "Gets the keyboard type."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "InputDevice.MotionRange",
      "code": "getMotionRange(axis: Int)",
      "desc": "Gets information about the range of values for a particular MotionEvent axis.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "InputDevice.MotionRange",
      "code": "getMotionRange(axis: Int, source: Int)",
      "desc": "Gets information about the range of values for a particular MotionEvent axis used by a particular source on the device.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getMotionRanges()",
      "desc": "Gets the ranges for all axes supported by the device.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getName()",
      "desc": "Gets the name of this input device.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getProductId()",
      "desc": "Gets the product id for the given device, if available."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getSources()",
      "desc": "Gets the input sources supported by this input device as a combined bitfield."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getVendorId()",
      "desc": "Gets the vendor id for the given device, if available."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Vibrator",
      "code": "getVibrator()",
      "desc": "Gets the vibrator service associated with the device, if there is one.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "BooleanArray",
      "code": "hasKeys(vararg keys: Int)",
      "desc": "Gets whether the device is capable of producing the list of keycodes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasMicrophone()",
      "desc": "Reports whether the device has a built-in microphone."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEnabled()",
      "desc": "Returns true if input device is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isExternal()",
      "desc": "Returns true if the device is external (connected to USB or Bluetooth or some other peripheral bus), otherwise it is built-in."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isVirtual()",
      "desc": "Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see KeyCharacterMap#VIRTUAL_KEYBOARD)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "supportsSource(source: Int)",
      "desc": "Determines whether the input device supports the given source or sources."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(out: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "MotionRange",
      "desc": "Provides information about the range of values for a particular MotionEvent axis."
    }
  ]
}