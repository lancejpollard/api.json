{
  "path": "android.os",
  "name": "Parcel",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "appendFrom(parcel: Parcel!, offset: Int, length: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "createBinderArray()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "createBinderArrayList()",
      "desc": "Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "BooleanArray",
      "code": "createBooleanArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "createByteArray()",
      "desc": "Read and return a byte[] object from the parcel.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharArray",
      "code": "createCharArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DoubleArray",
      "code": "createDoubleArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FloatArray",
      "code": "createFloatArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IntArray",
      "code": "createIntArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LongArray",
      "code": "createLongArray()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "createStringArray()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "createStringArrayList()",
      "desc": "Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "createTypedArray(c: Parcelable.Creator<T>)",
      "desc": "Read and return a new array containing a particular object type from the parcel at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "createTypedArrayList(c: Parcelable.Creator<T>)",
      "desc": "Read and return a new ArrayList containing a particular object type from the parcel that was written with writeTypedList at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayMap",
      "code": "createTypedArrayMap(creator: Parcelable.Creator<T>)",
      "desc": "Read into a new ArrayMap with string keys items containing a particular object type that were written with writeTypedArrayMap(android.util.ArrayMap,int) at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SparseArray",
      "code": "createTypedSparseArray(creator: Parcelable.Creator<T>)",
      "desc": "Read into a new SparseArray items containing a particular object type that were written with writeTypedSparseArray(android.util.SparseArray,int) at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "dataAvail()",
      "desc": "Returns the amount of data remaining to be read from the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "dataCapacity()",
      "desc": "Returns the total amount of space in the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "dataPosition()",
      "desc": "Returns the current position in the parcel data."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "dataSize()",
      "desc": "Returns the total amount of data contained in the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "enforceInterface(interfaceName: String!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasFileDescriptors()",
      "desc": "Report whether the parcel contains any marshalled file descriptors."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "marshall()",
      "desc": "Returns the raw bytes of the parcel.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Parcel",
      "code": "obtain()",
      "desc": "Retrieve a new Parcel object from the pool."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "readArray(loader: ClassLoader?)",
      "desc": "Read and return a new Object array from the parcel at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "readArrayList(loader: ClassLoader?)",
      "desc": "Read and return a new ArrayList object from the parcel at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readBinderArray(val: Array<IBinder!>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readBinderList(list: MutableList<IBinder!>)",
      "desc": "Read into the given List items IBinder objects that were written with writeBinderList at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "readBoolean()",
      "desc": "Read a boolean value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readBooleanArray(val: BooleanArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "readBundle()",
      "desc": "Read and return a new Bundle object from the parcel at the current dataPosition().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "readBundle(loader: ClassLoader?)",
      "desc": "Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "readByte()",
      "desc": "Read a byte value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readByteArray(val: ByteArray)",
      "desc": "Read a byte[] object from the parcel and copy it into the given byte array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readCharArray(val: CharArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "readDouble()",
      "desc": "Read a double precision floating point value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readDoubleArray(val: DoubleArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readException()",
      "desc": "Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readException(code: Int, msg: String!)",
      "desc": "Throw an exception with the given message."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ParcelFileDescriptor",
      "code": "readFileDescriptor()",
      "desc": "Read a FileDescriptor from the parcel at the current dataPosition().",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "readFloat()",
      "desc": "Read a floating point value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readFloatArray(val: FloatArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "HashMap",
      "code": "readHashMap(loader: ClassLoader?)",
      "desc": "Please use readBundle(java.lang.ClassLoader) instead (whose data must have been written with writeBundle.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "readInt()",
      "desc": "Read an integer value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readIntArray(val: IntArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readList(outVal: MutableList<Any?>, loader: ClassLoader?)",
      "desc": "Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "readLong()",
      "desc": "Read a long integer value from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readLongArray(val: LongArray)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readMap(outVal: MutableMap<Any?, Any?>, loader: ClassLoader?)",
      "desc": "Please use readBundle(java.lang.ClassLoader) instead (whose data must have been written with writeBundle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "readParcelable(loader: ClassLoader?)",
      "desc": "Read and return a new Parcelable from the parcel.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "readParcelableArray(loader: ClassLoader?)",
      "desc": "Read and return a new Parcelable array from the parcel.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Parcelable.Creator",
      "code": "readParcelableCreator(loader: ClassLoader?)",
      "desc": "Read and return a Parcelable.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "readParcelableList(list: MutableList<T>, cl: ClassLoader?)",
      "desc": "Read the list of Parcelable objects at the current data position into the given list.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "PersistableBundle",
      "code": "readPersistableBundle()",
      "desc": "Read and return a new Bundle object from the parcel at the current dataPosition().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "PersistableBundle",
      "code": "readPersistableBundle(loader: ClassLoader?)",
      "desc": "Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Serializable",
      "code": "readSerializable()",
      "desc": "Read and return a new Serializable object from the parcel.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Size",
      "code": "readSize()",
      "desc": "Read a Size from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SizeF",
      "code": "readSizeF()",
      "desc": "Read a SizeF from the parcel at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SparseArray",
      "code": "readSparseArray(loader: ClassLoader?)",
      "desc": "Read and return a new SparseArray object from the parcel at the current dataPosition().",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SparseBooleanArray",
      "code": "readSparseBooleanArray()",
      "desc": "Read and return a new SparseBooleanArray object from the parcel at the current dataPosition().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "readString()",
      "desc": "Read a string value from the parcel at the current dataPosition().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readStringArray(val: Array<String!>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readStringList(list: MutableList<String!>)",
      "desc": "Read into the given List items String objects that were written with writeStringList at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IBinder",
      "code": "readStrongBinder()",
      "desc": "Read an object from the parcel at the current dataPosition().",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readTypedArray(val: Array<T>, c: Parcelable.Creator<T>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readTypedList(list: MutableList<T>, c: Parcelable.Creator<T>)",
      "desc": "Read into the given List items containing a particular object type that were written with writeTypedList at the current dataPosition()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "readTypedObject(c: Parcelable.Creator<T>)",
      "desc": "Read and return a typed Parcelable object from a parcel.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "readValue(loader: ClassLoader?)",
      "desc": "Read a typed object from a parcel.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "recycle()",
      "desc": "Put a Parcel object back into the pool."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDataCapacity(size: Int)",
      "desc": "Change the capacity (current available space) of the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDataPosition(pos: Int)",
      "desc": "Move the current read/write position in the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDataSize(size: Int)",
      "desc": "Change the amount of data in the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "unmarshall(data: ByteArray, offset: Int, length: Int)",
      "desc": "Set the bytes in data to be the raw bytes of this Parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeArray(val: Array<Any!>?)",
      "desc": "Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeBinderArray(val: Array<IBinder!>?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeBinderList(val: MutableList<IBinder!>?)",
      "desc": "Flatten a List containing IBinder objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeBoolean(val: Boolean)",
      "desc": "Write a boolean value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeBooleanArray(val: BooleanArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeBundle(val: Bundle?)",
      "desc": "Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeByte(val: Byte)",
      "desc": "Write a byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeByteArray(b: ByteArray?)",
      "desc": "Write a byte array into the parcel at the current dataPosition, growing dataCapacity if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeByteArray(b: ByteArray?, offset: Int, len: Int)",
      "desc": "Write a byte array into the parcel at the current dataPosition, growing dataCapacity if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeCharArray(val: CharArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeDouble(val: Double)",
      "desc": "Write a double precision floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeDoubleArray(val: DoubleArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeException(e: Exception)",
      "desc": "Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeFileDescriptor(val: FileDescriptor)",
      "desc": "Write a FileDescriptor into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeFloat(val: Float)",
      "desc": "Write a floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeFloatArray(val: FloatArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeInt(val: Int)",
      "desc": "Write an integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeIntArray(val: IntArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeInterfaceToken(interfaceName: String!)",
      "desc": "Store or read an IBinder interface token in the parcel at the current dataPosition."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeList(val: MutableList<Any?>?)",
      "desc": "Flatten a List into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeLong(val: Long)",
      "desc": "Write a long integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeLongArray(val: LongArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeMap(val: MutableMap<Any?, Any?>?)",
      "desc": "Please use writeBundle instead."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeNoException()",
      "desc": "Special function for writing information at the front of the Parcel indicating that no exception occurred."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeParcelable(p: Parcelable?, parcelableFlags: Int)",
      "desc": "Flatten the name of the class of the Parcelable and its contents into the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeParcelableArray(value: Array<T>?, parcelableFlags: Int)",
      "desc": "Write a heterogeneous array of Parcelable objects into the Parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeParcelableCreator(p: Parcelable)",
      "desc": "Flatten the name of the class of the Parcelable into this Parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeParcelableList(val: MutableList<T>?, flags: Int)",
      "desc": "Flatten a List containing arbitrary Parcelable objects into this parcel at the current position."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writePersistableBundle(val: PersistableBundle?)",
      "desc": "Flatten a PersistableBundle into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeSerializable(s: Serializable?)",
      "desc": "Write a generic serializable object in to a Parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeSize(val: Size)",
      "desc": "Flatten a Size into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeSizeF(val: SizeF)",
      "desc": "Flatten a SizeF into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeSparseArray(val: SparseArray<T>?)",
      "desc": "Flatten a generic SparseArray into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeSparseBooleanArray(val: SparseBooleanArray?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeString(val: String?)",
      "desc": "Write a string value into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeStringArray(val: Array<String!>?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeStringList(val: MutableList<String!>?)",
      "desc": "Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeStrongBinder(val: IBinder!)",
      "desc": "Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeStrongInterface(val: IInterface!)",
      "desc": "Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeTypedArray(val: Array<T>?, parcelableFlags: Int)",
      "desc": "Flatten a homogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeTypedArrayMap(val: ArrayMap<String!, T>?, parcelableFlags: Int)",
      "desc": "Flatten an ArrayMap with string keys containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeTypedList(val: MutableList<T>?)",
      "desc": "Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeTypedObject(val: T?, parcelableFlags: Int)",
      "desc": "Flatten the Parcelable object into the parcel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeTypedSparseArray(val: SparseArray<T>?, parcelableFlags: Int)",
      "desc": "Flatten a SparseArray containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeValue(v: Any?)",
      "desc": "Flatten a generic object in to a parcel."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    }
  ]
}