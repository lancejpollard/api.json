{
  "path": "java.security",
  "name": "Provider",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "compute(key: Any!, remappingFunction: BiFunction<in Any!, in Any?, *>)",
      "desc": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "computeIfAbsent(key: Any!, mappingFunction: Function<in Any!, *>)",
      "desc": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "computeIfPresent(key: Any!, remappingFunction: BiFunction<in Any!, in Any, *>)",
      "desc": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "elements()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(action: BiConsumer<in Any!, in Any!>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "get(key: Any!)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getInfo()",
      "desc": "Returns a human-readable description of the provider and its services.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns the name of this provider.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getOrDefault(key: Any!, defaultValue: Any!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getProperty(key: String!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Provider.Service",
      "code": "getService(type: String!, algorithm: String!)",
      "desc": "Get the service describing this Provider's implementation of the specified type of this algorithm or alias.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "getServices()",
      "desc": "Get an unmodifiable Set of all services supported by this Provider.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "getVersion()",
      "desc": "Returns the version number for this provider."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "keys()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "load(inStream: InputStream!)",
      "desc": "Reads a property list (key and element pairs) from the input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "merge(key: Any!, value: Any, remappingFunction: BiFunction<in Any, in Any, *>)",
      "desc": "If the specified key is not already associated with a value or is associated with null, associates it with the given value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "put(key: Any!, value: Any!)",
      "desc": "Sets the key property to have the specified value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "putAll(from: Map<*, *>)",
      "desc": "Copies all of the mappings from the specified Map to this provider."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "putIfAbsent(key: Any!, value: Any!)",
      "desc": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "remove(key: Any!)",
      "desc": "Removes the key property (and its corresponding value).",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(key: Any!, value: Any!)",
      "desc": "Removes the entry for the specified key only if it is currently mapped to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "replace(key: Any!, oldValue: Any!, newValue: Any!)",
      "desc": "Replaces the entry for the specified key only if currently mapped to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "replace(key: Any!, value: Any!)",
      "desc": "Replaces the entry for the specified key only if it is currently mapped to some value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "replaceAll(function: BiFunction<in Any!, in Any!, *>)",
      "desc": "Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string with the name and the version number of this provider."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "putService(s: Provider.Service!)",
      "desc": "Add a service."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeService(s: Provider.Service!)",
      "desc": "Remove a service previously added using putService()."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Service",
      "desc": "The description of a security service."
    },
    {
      "type": "inherited-methods",
      "from": "Hashtable"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clear()"
    },
    {
      "type": "inherited-methods",
      "from": "Any"
    },
    {
      "type": "inherited-methods",
      "from": "clone()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "compute(key: K, remappingFunction: BiFunction<in K, in V?, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfAbsent(key: K, mappingFunction: Function<in K, out V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfPresent(key: K, remappingFunction: BiFunction<in K, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "contains(value: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey"
    },
    {
      "type": "inherited-methods",
      "from": "containsValue"
    },
    {
      "type": "inherited-methods",
      "from": "Map"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsValue(value: V)"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "Map"
    },
    {
      "type": "inherited-methods",
      "from": "Enumeration<V>!"
    },
    {
      "type": "inherited-methods",
      "from": "elements()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "forEach(action: BiConsumer<in K, in V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "get(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "k"
    },
    {
      "type": "inherited-methods",
      "from": "v"
    },
    {
      "type": "inherited-methods",
      "from": "(key.equals(k))"
    },
    {
      "type": "inherited-methods",
      "from": "v"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "V"
    },
    {
      "type": "inherited-methods",
      "from": "getOrDefault(key: K, defaultValue: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isEmpty()"
    },
    {
      "type": "inherited-methods",
      "from": "Enumeration<K>!"
    },
    {
      "type": "inherited-methods",
      "from": "keys()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "merge(key: K, value: V, remappingFunction: BiFunction<in V, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "put(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "key"
    },
    {
      "type": "inherited-methods",
      "from": "value"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "get"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putAll(from: Map<out K, V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "putIfAbsent(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "rehash()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, oldValue: V, newValue: V)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "replaceAll(function: BiFunction<in K, in V, out V>)"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getProperty(key: String!, defaultValue: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "list(out: PrintStream!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "list(out: PrintWriter!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "load(reader: Reader!)"
    },
    {
      "type": "inherited-methods",
      "from": "\\n"
    },
    {
      "type": "inherited-methods",
      "from": "\\r"
    },
    {
      "type": "inherited-methods",
      "from": "\\r\\n"
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": "'#'"
    },
    {
      "type": "inherited-methods",
      "from": "'!'"
    },
    {
      "type": "inherited-methods",
      "from": "' '"
    },
    {
      "type": "inherited-methods",
      "from": "'\\u005Cu0020'"
    },
    {
      "type": "inherited-methods",
      "from": "'\\t'"
    },
    {
      "type": "inherited-methods",
      "from": "'\\u005Cu0009'"
    },
    {
      "type": "inherited-methods",
      "from": "'\\f'"
    },
    {
      "type": "inherited-methods",
      "from": "'\\u005Cu000C'"
    },
    {
      "type": "inherited-methods",
      "from": "'='"
    },
    {
      "type": "inherited-methods",
      "from": "':'"
    },
    {
      "type": "inherited-methods",
      "from": "\\:\\="
    },
    {
      "type": "inherited-methods",
      "from": "\":=\""
    },
    {
      "type": "inherited-methods",
      "from": "\\r"
    },
    {
      "type": "inherited-methods",
      "from": "\\n"
    },
    {
      "type": "inherited-methods",
      "from": "'='"
    },
    {
      "type": "inherited-methods",
      "from": "':'"
    },
    {
      "type": "inherited-methods",
      "from": "\"\""
    },
    {
      "type": "inherited-methods",
      "from": "\"Truth\""
    },
    {
      "type": "inherited-methods",
      "from": "\"Beauty\""
    },
    {
      "type": "inherited-methods",
      "from": "\"fruits\""
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": "\"cheeses\""
    },
    {
      "type": "inherited-methods",
      "from": "\"\""
    },
    {
      "type": "inherited-methods",
      "from": "\\b"
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": "\"\\z\""
    },
    {
      "type": "inherited-methods",
      "from": "\"\\b\""
    },
    {
      "type": "inherited-methods",
      "from": "'b'"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "loadFromXML(in: InputStream!)"
    },
    {
      "type": "inherited-methods",
      "from": "UTF-8"
    },
    {
      "type": "inherited-methods",
      "from": "UTF-16"
    },
    {
      "type": "inherited-methods",
      "from": "Enumeration<*>!"
    },
    {
      "type": "inherited-methods",
      "from": "propertyNames()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "save(out: OutputStream!, comments: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "store(OutputStream out, String comments)"
    },
    {
      "type": "inherited-methods",
      "from": "Any!"
    },
    {
      "type": "inherited-methods",
      "from": "setProperty(key: String!, value: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "put"
    },
    {
      "type": "inherited-methods",
      "from": "put"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "store(writer: Writer!, comments: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "load(Reader)"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "comments"
    },
    {
      "type": "inherited-methods",
      "from": "Writer"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "!"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "toString"
    },
    {
      "type": "inherited-methods",
      "from": "Date"
    },
    {
      "type": "inherited-methods",
      "from": "Writer"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "="
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": "\\"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "!"
    },
    {
      "type": "inherited-methods",
      "from": "="
    },
    {
      "type": "inherited-methods",
      "from": ":"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "store(out: OutputStream!, comments: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "load(InputStream)"
    },
    {
      "type": "inherited-methods",
      "from": "Properties"
    },
    {
      "type": "inherited-methods",
      "from": "store(Writer)"
    },
    {
      "type": "inherited-methods",
      "from": "\\u005Cu"
    },
    {
      "type": "inherited-methods",
      "from": "\\u005Cu0020"
    },
    {
      "type": "inherited-methods",
      "from": "\\u005Cu007E"
    },
    {
      "type": "inherited-methods",
      "from": "\\u005Cu"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "storeToXML(os: OutputStream!, comment: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "storeToXML(os: OutputStream!, comment: String!, encoding: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "UTF-8"
    },
    {
      "type": "inherited-methods",
      "from": "UTF-16"
    },
    {
      "type": "inherited-methods",
      "from": "MutableSet<String!>!"
    },
    {
      "type": "inherited-methods",
      "from": "stringPropertyNames()"
    }
  ]
}