{
  "path": "android.text",
  "name": "PrecomputedText",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PrecomputedText",
      "code": "create(text: CharSequence, params: PrecomputedText.Params)",
      "desc": "Create a new PrecomputedText which will pre-compute text measurement and glyph positioning information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "get(index: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getBounds(start: Int, end: Int, bounds: Rect)",
      "desc": "Retrieves the text bounding box for the given range."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getParagraphCount()",
      "desc": "Returns the count of paragraphs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getParagraphEnd(paraIndex: Int)",
      "desc": "Returns the paragraph end offset of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getParagraphStart(paraIndex: Int)",
      "desc": "Returns the paragraph start offset of the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PrecomputedText.Params",
      "code": "getParams()",
      "desc": "Returns the layout parameters used to measure this text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanEnd(tag: Any!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanFlags(tag: Any!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanStart(tag: Any!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getSpans(start: Int, end: Int, type: Class<T>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getWidth(start: Int, end: Int)",
      "desc": "Returns text width for the given range."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextSpanTransition(start: Int, limit: Int, type: Class<Any!>!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeSpan(what: Any!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSpan(what: Any!, start: Int, end: Int, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "subSequence(startIndex: Int, endIndex: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Params",
      "desc": "The information required for building PrecomputedText."
    }
  ]
}