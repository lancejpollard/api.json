{
  "path": "android.view",
  "name": "View",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCESSIBILITY_LIVE_REGION_ASSERTIVE",
      "desc": "Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCESSIBILITY_LIVE_REGION_NONE",
      "desc": "Live region mode specifying that accessibility services should not automatically announce changes to this view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCESSIBILITY_LIVE_REGION_POLITE",
      "desc": "Live region mode specifying that accessibility services should announce changes to this view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS",
      "desc": "Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE",
      "desc": "Hint indicating that this view can be autofilled with a credit card expiration date."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY",
      "desc": "Hint indicating that this view can be autofilled with a credit card expiration day."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH",
      "desc": "Hint indicating that this view can be autofilled with a credit card expiration month."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR",
      "desc": "Hint indicating that this view can be autofilled with a credit card expiration year."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_NUMBER",
      "desc": "Hint indicating that this view can be autofilled with a credit card number."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE",
      "desc": "Hint indicating that this view can be autofilled with a credit card security code."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_EMAIL_ADDRESS",
      "desc": "Hint indicating that this view can be autofilled with an email address."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_NAME",
      "desc": "Hint indicating that this view can be autofilled with a user's real name."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_PASSWORD",
      "desc": "Hint indicating that this view can be autofilled with a password."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_PHONE",
      "desc": "Hint indicating that this view can be autofilled with a phone number."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_POSTAL_ADDRESS",
      "desc": "Hint indicating that this view can be autofilled with a postal address."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_POSTAL_CODE",
      "desc": "Hint indicating that this view can be autofilled with a postal code."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUTOFILL_HINT_USERNAME",
      "desc": "Hint indicating that this view can be autofilled with a username."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_TYPE_DATE",
      "desc": "Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT (see java.util.Date#getTime()."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_TYPE_LIST",
      "desc": "Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_TYPE_NONE",
      "desc": "Autofill type for views that cannot be autofilled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_TYPE_TEXT",
      "desc": "Autofill type for a text field, which is filled by a CharSequence."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AUTOFILL_TYPE_TOGGLE",
      "desc": "Autofill type for a togglable field, which is filled by a boolean."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_GLOBAL",
      "desc": "Flag indicating that a drag can cross window boundaries."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION",
      "desc": "When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or  , the URI permission grant can be persisted across device reboots until explicitly revoked with android.content.Context#revokeUriPermission(Uri, int) Context."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION",
      "desc": "When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or  , the URI permission grant applies to any URI that is a prefix match against the original granted URI."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_GLOBAL_URI_READ",
      "desc": "When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_GLOBAL_URI_WRITE",
      "desc": "When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAG_FLAG_OPAQUE",
      "desc": "Flag indicating that the drag shadow will be opaque."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAWING_CACHE_QUALITY_AUTO",
      "desc": "Enables automatic quality mode for the drawing cache."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAWING_CACHE_QUALITY_HIGH",
      "desc": "Enables high quality mode for the drawing cache."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DRAWING_CACHE_QUALITY_LOW",
      "desc": "Enables low quality mode for the drawing cache."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FIND_VIEWS_WITH_CONTENT_DESCRIPTION",
      "desc": "Find find views that contain the specified content description."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FIND_VIEWS_WITH_TEXT",
      "desc": "Find views that render the specified text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUSABLE",
      "desc": "This view wants keystrokes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUSABLES_ALL",
      "desc": "View flag indicating whether addFocusables(java.util.ArrayList,int,int) should add all focusable Views regardless if they are focusable in touch mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUSABLES_TOUCH_MODE",
      "desc": "View flag indicating whether addFocusables(java.util.ArrayList,int,int) should add only Views focusable in touch mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUSABLE_AUTO",
      "desc": "This view determines focusability automatically."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_BACKWARD",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_DOWN",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_FORWARD",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_LEFT",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_RIGHT",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_UP",
      "desc": "Use with focusSearch(int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "GONE",
      "desc": "This view is invisible, and it doesn't take any space for layout purposes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HAPTIC_FEEDBACK_ENABLED",
      "desc": "View flag indicating whether this view should have haptic feedback enabled for events such as long presses."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_ACCESSIBILITY_AUTO",
      "desc": "Automatically determine whether a view is important for accessibility."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_ACCESSIBILITY_NO",
      "desc": "The view is not important for accessibility."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS",
      "desc": "The view is not important for accessibility, nor are any of its descendant views."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_ACCESSIBILITY_YES",
      "desc": "The view is important for accessibility."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_AUTOFILL_AUTO",
      "desc": "Automatically determine whether a view is important for autofill."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_AUTOFILL_NO",
      "desc": "The view is not important for autofill, but its children (if any) will be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS",
      "desc": "The view is not important for autofill, and its children (if any) will not be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_AUTOFILL_YES",
      "desc": "The view is important for autofill, and its children (if any) will be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS",
      "desc": "The view is important for autofill, but its children (if any) will not be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_CONTENT_CAPTURE_AUTO",
      "desc": "Automatically determine whether a view is important for content capture."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_CONTENT_CAPTURE_NO",
      "desc": "The view is not important for content capture, but its children (if any) will be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS",
      "desc": "The view is not important for content capture, and its children (if any) will not be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_CONTENT_CAPTURE_YES",
      "desc": "The view is important for content capture, and its children (if any) will be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS",
      "desc": "The view is important for content capture, but its children (if any) will not be traversed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INVISIBLE",
      "desc": "This view is invisible, but it still takes up space for layout purposes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "KEEP_SCREEN_ON",
      "desc": "View flag indicating that the screen should remain on while the window containing this view is visible to the user."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYER_TYPE_HARDWARE",
      "desc": "Indicates that the view has a hardware layer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYER_TYPE_NONE",
      "desc": "Indicates that the view does not have a layer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYER_TYPE_SOFTWARE",
      "desc": "Indicates that the view has a software layer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYOUT_DIRECTION_INHERIT",
      "desc": "Horizontal layout direction of this view is inherited from its parent."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYOUT_DIRECTION_LOCALE",
      "desc": "Horizontal layout direction of this view is from deduced from the default language script for the locale."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYOUT_DIRECTION_LTR",
      "desc": "Horizontal layout direction of this view is from Left to Right."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LAYOUT_DIRECTION_RTL",
      "desc": "Horizontal layout direction of this view is from Right to Left."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEASURED_HEIGHT_STATE_SHIFT",
      "desc": "Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int,int,int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEASURED_SIZE_MASK",
      "desc": "Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEASURED_STATE_MASK",
      "desc": "Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEASURED_STATE_TOO_SMALL",
      "desc": "Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NOT_FOCUSABLE",
      "desc": "This view does not want keystrokes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_ID",
      "desc": "Used to mark a View that has no ID."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OVER_SCROLL_ALWAYS",
      "desc": "Always allow a user to over-scroll this view, provided it is a view that can scroll."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OVER_SCROLL_IF_CONTENT_SCROLLS",
      "desc": "Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OVER_SCROLL_NEVER",
      "desc": "Never allow a user to over-scroll this view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCREEN_STATE_OFF",
      "desc": "Indicates that the screen has changed state and is now off."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCREEN_STATE_ON",
      "desc": "Indicates that the screen has changed state and is now on."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBARS_INSIDE_INSET",
      "desc": "The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBARS_INSIDE_OVERLAY",
      "desc": "The scrollbar style to display the scrollbars inside the content area, without increasing the padding."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBARS_OUTSIDE_INSET",
      "desc": "The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBARS_OUTSIDE_OVERLAY",
      "desc": "The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBAR_POSITION_DEFAULT",
      "desc": "Position the scroll bar at the default position as determined by the system."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBAR_POSITION_LEFT",
      "desc": "Position the scroll bar along the left edge."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLLBAR_POSITION_RIGHT",
      "desc": "Position the scroll bar along the right edge."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_AXIS_HORIZONTAL",
      "desc": "Indicates scrolling along the horizontal axis."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_AXIS_NONE",
      "desc": "Indicates no axis of view scrolling."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_AXIS_VERTICAL",
      "desc": "Indicates scrolling along the vertical axis."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_BOTTOM",
      "desc": "Scroll indicator direction for the bottom edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_END",
      "desc": "Scroll indicator direction for the ending edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_LEFT",
      "desc": "Scroll indicator direction for the left edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_RIGHT",
      "desc": "Scroll indicator direction for the right edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_START",
      "desc": "Scroll indicator direction for the starting edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCROLL_INDICATOR_TOP",
      "desc": "Scroll indicator direction for the top edge of the view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SOUND_EFFECTS_ENABLED",
      "desc": "View flag indicating whether this view should have sound effects enabled for events such as clicking and touching."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATUS_BAR_HIDDEN",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATUS_BAR_VISIBLE",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_FULLSCREEN",
      "desc": "Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_HIDE_NAVIGATION",
      "desc": "Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_IMMERSIVE",
      "desc": "Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_IMMERSIVE_STICKY",
      "desc": "Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN",
      "desc": "Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION",
      "desc": "Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LAYOUT_STABLE",
      "desc": "Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(android.graphics.Rect)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR",
      "desc": "Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR",
      "desc": "Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_LOW_PROFILE",
      "desc": "Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive \"low profile\" mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_FLAG_VISIBLE",
      "desc": "Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SYSTEM_UI_LAYOUT_FLAGS",
      "desc": "Flags that can impact the layout in relation to system UI."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_CENTER",
      "desc": "Center the paragraph, e."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_GRAVITY",
      "desc": "Default for the root view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_INHERIT",
      "desc": "Default text alignment."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_TEXT_END",
      "desc": "Align to the end of the paragraph, e."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_TEXT_START",
      "desc": "Align to the start of the paragraph, e."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_VIEW_END",
      "desc": "Align to the end of the view, which is ALIGN_RIGHT if the view's resolved layoutDirection is LTR, and ALIGN_LEFT otherwise."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_ALIGNMENT_VIEW_START",
      "desc": "Align to the start of the view, which is ALIGN_LEFT if the view's resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_ANY_RTL",
      "desc": "Text direction is using \"any-RTL\" algorithm."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_FIRST_STRONG",
      "desc": "Text direction is using \"first strong algorithm\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_FIRST_STRONG_LTR",
      "desc": "Text direction is using \"first strong algorithm\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_FIRST_STRONG_RTL",
      "desc": "Text direction is using \"first strong algorithm\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_INHERIT",
      "desc": "Text direction is inherited through ViewGroup"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_LOCALE",
      "desc": "Text direction is coming from the system Locale."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_LTR",
      "desc": "Text direction is forced to LTR."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TEXT_DIRECTION_RTL",
      "desc": "Text direction is forced to RTL."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "VIEW_LOG_TAG",
      "desc": "The logging tag used by this class with android."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "VISIBLE",
      "desc": "This view is visible."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!)\n            Simple constructor to use when creating a view from code."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet?)\n            Constructor that is called when inflating a view from XML."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet?, defStyleAttr: Int)\n            Perform inflation from XML and apply a class-specific base style from a theme attribute."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet?, defStyleAttr: Int, defStyleRes: Int)\n            Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addChildrenForAccessibility(outChildren: ArrayList<View!>!)",
      "desc": "Adds the children of this View relevant for accessibility to the given list as output."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addExtraDataToAccessibilityNodeInfo(info: AccessibilityNodeInfo, extraDataKey: String, arguments: Bundle?)",
      "desc": "Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addFocusables(views: ArrayList<View!>!, direction: Int)",
      "desc": "Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addFocusables(views: ArrayList<View!>!, direction: Int, focusableMode: Int)",
      "desc": "Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addKeyboardNavigationClusters(views: MutableCollection<View!>, direction: Int)",
      "desc": "Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addOnAttachStateChangeListener(listener: View.OnAttachStateChangeListener!)",
      "desc": "Add a listener for attach state changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addOnLayoutChangeListener(listener: View.OnLayoutChangeListener!)",
      "desc": "Add a listener that will be called when the bounds of the view change due to layout processing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addOnUnhandledKeyEventListener(listener: View.OnUnhandledKeyEventListener!)",
      "desc": "Adds a listener which will receive unhandled KeyEvents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addTouchables(views: ArrayList<View!>!)",
      "desc": "Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewPropertyAnimator",
      "code": "animate()",
      "desc": "This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "announceForAccessibility(text: CharSequence!)",
      "desc": "Convenience method for sending a AccessibilityEvent#TYPE_ANNOUNCEMENT AccessibilityEvent to suggest that an accessibility service announce the specified text to its users."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "autofill(value: AutofillValue!)",
      "desc": "Automatically fills the content of this view with the value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "autofill(values: SparseArray<AutofillValue!>)",
      "desc": "Automatically fills the content of the virtual children within this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "bringToFront()",
      "desc": "Change the view's z order in the tree, so it's on top of other sibling views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "buildDrawingCache()",
      "desc": "Calling this method is equivalent to calling buildDrawingCache(false)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "buildDrawingCache(autoScale: Boolean)",
      "desc": "Forces the drawing cache to be built if the drawing cache is invalid."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "buildLayer()",
      "desc": "Forces this view's layer to be created and this view to be rendered into its layer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "callOnClick()",
      "desc": "Directly call any attached OnClickListener."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canResolveLayoutDirection()",
      "desc": "Check if layout direction resolution can be done."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canResolveTextAlignment()",
      "desc": "Check if text alignment resolution can be done."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canResolveTextDirection()",
      "desc": "Check if text direction resolution can be done."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canScrollHorizontally(direction: Int)",
      "desc": "Check if this view can be scrolled horizontally in a certain direction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canScrollVertically(direction: Int)",
      "desc": "Check if this view can be scrolled vertically in a certain direction."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "cancelDragAndDrop()",
      "desc": "Cancels an ongoing drag and drop operation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "cancelLongPress()",
      "desc": "Cancels a pending long press."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "cancelPendingInputEvents()",
      "desc": "Cancel any deferred high-level input events that were previously posted to the event queue."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "checkInputConnectionProxy(view: View!)",
      "desc": "Called by the android.view.inputmethod.InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearAnimation()",
      "desc": "Cancels any animations for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearFocus()",
      "desc": "Called when this view wants to give up focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "combineMeasuredStates(curState: Int, newState: Int)",
      "desc": "Merge two states as returned by getMeasuredState()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "computeScroll()",
      "desc": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsets",
      "code": "computeSystemWindowInsets(in: WindowInsets!, outLocalInsets: Rect!)",
      "desc": "Compute insets that should be consumed by this view and the ones that should propagate to those under it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "createAccessibilityNodeInfo()",
      "desc": "Returns an AccessibilityNodeInfo representing this view from the point of view of an android.accessibilityservice.AccessibilityService.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "createContextMenu(menu: ContextMenu!)",
      "desc": "Show the context menu for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "destroyDrawingCache()",
      "desc": "Frees the resources used by the drawing cache."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsets",
      "code": "dispatchApplyWindowInsets(insets: WindowInsets!)",
      "desc": "Request to apply the given window insets to this view or another view in its subtree.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchCapturedPointerEvent(event: MotionEvent!)",
      "desc": "Pass a captured pointer event down to the focused view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchConfigurationChanged(newConfig: Configuration!)",
      "desc": "Dispatch a notification about a resource configuration change down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchDisplayHint(hint: Int)",
      "desc": "Dispatch a hint about whether this view is displayed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchDragEvent(event: DragEvent!)",
      "desc": "Detects if this View is enabled and has a drag event listener."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchDrawableHotspotChanged(x: Float, y: Float)",
      "desc": "Dispatches drawableHotspotChanged to all of this View's children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchFinishTemporaryDetach()",
      "desc": "Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchGenericMotionEvent(event: MotionEvent!)",
      "desc": "Dispatch a generic motion event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchKeyEvent(event: KeyEvent!)",
      "desc": "Dispatch a key event to the next view on the focus path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchKeyEventPreIme(event: KeyEvent!)",
      "desc": "Dispatch a key event before it is processed by any input method associated with the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchKeyShortcutEvent(event: KeyEvent!)",
      "desc": "Dispatches a key shortcut event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchNestedFling(velocityX: Float, velocityY: Float, consumed: Boolean)",
      "desc": "Dispatch a fling to a nested scrolling parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchNestedPreFling(velocityX: Float, velocityY: Float)",
      "desc": "Dispatch a fling to a nested scrolling parent before it is processed by this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchNestedPrePerformAccessibilityAction(action: Int, arguments: Bundle!)",
      "desc": "Report an accessibility action to this view's parents for delegated processing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchNestedPreScroll(dx: Int, dy: Int, consumed: IntArray?, offsetInWindow: IntArray?)",
      "desc": "Dispatch one step of a nested scroll in progress before this view consumes any portion of it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchNestedScroll(dxConsumed: Int, dyConsumed: Int, dxUnconsumed: Int, dyUnconsumed: Int, offsetInWindow: IntArray?)",
      "desc": "Dispatch one step of a nested scroll in progress."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchPointerCaptureChanged(hasCapture: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchPopulateAccessibilityEvent(event: AccessibilityEvent!)",
      "desc": "Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchProvideAutofillStructure(structure: ViewStructure, flags: Int)",
      "desc": "Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchProvideStructure(structure: ViewStructure!)",
      "desc": "Dispatch creation of ViewStructure down the hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchStartTemporaryDetach()",
      "desc": "Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchSystemUiVisibilityChanged(visibility: Int)",
      "desc": "Dispatch callbacks to setOnSystemUiVisibilityChangeListener down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchTouchEvent(event: MotionEvent!)",
      "desc": "Pass the touch screen motion event down to the target view, or this view if it is the target."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchTrackballEvent(event: MotionEvent!)",
      "desc": "Pass a trackball motion event down to the focused view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchUnhandledMove(focused: View!, direction: Int)",
      "desc": "This method is the last chance for the focused view and its ancestors to respond to an arrow key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchWindowFocusChanged(hasFocus: Boolean)",
      "desc": "Called when the window containing this view gains or loses window focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchWindowInsetsAnimationEnd(animation: WindowInsetsAnimation)",
      "desc": "Dispatches WindowInsetsAnimation.Callback#onEnd(WindowInsetsAnimation) when Window Insets animation ends."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchWindowInsetsAnimationPrepare(animation: WindowInsetsAnimation)",
      "desc": "Dispatches WindowInsetsAnimation.Callback#onPrepare(WindowInsetsAnimation) when Window Insets animation is being prepared."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsets",
      "code": "dispatchWindowInsetsAnimationProgress(insets: WindowInsets, runningAnimations: MutableList<WindowInsetsAnimation!>)",
      "desc": "Dispatches WindowInsetsAnimation.Callback#onProgress(WindowInsets, List) when Window Insets animation makes progress."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsetsAnimation.Bounds",
      "code": "dispatchWindowInsetsAnimationStart(animation: WindowInsetsAnimation, bounds: WindowInsetsAnimation.Bounds)",
      "desc": "Dispatches WindowInsetsAnimation.Callback#onStart(WindowInsetsAnimation, Bounds) when Window Insets animation is started."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchWindowSystemUiVisiblityChanged(visible: Int)",
      "desc": "Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchWindowVisibilityChanged(visibility: Int)",
      "desc": "Dispatch a window visibility change down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(canvas: Canvas!)",
      "desc": "Manually render this view (and all of its children) to the given Canvas."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "drawableHotspotChanged(x: Float, y: Float)",
      "desc": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "findFocus()",
      "desc": "Find the view in the hierarchy rooted at this view that currently has focus.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "findViewById(id: Int)",
      "desc": "Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "findViewWithTag(tag: Any!)",
      "desc": "Look for a child view with the given tag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "findViewsWithText(outViews: ArrayList<View!>!, searched: CharSequence!, flags: Int)",
      "desc": "Finds the Views that contain given text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "focusSearch(direction: Int)",
      "desc": "Find the nearest view in the specified direction that can take focus.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forceHasOverlappingRendering(hasOverlappingRendering: Boolean)",
      "desc": "Sets the behavior for overlapping rendering for this view (see   for more details on this behavior)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forceLayout()",
      "desc": "Forces this view to be laid out during the next layout pass."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "generateViewId()",
      "desc": "Generate a value suitable for use in setId(int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getAccessibilityClassName()",
      "desc": "Return the class name of this object to be used for accessibility purposes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View.AccessibilityDelegate",
      "code": "getAccessibilityDelegate()",
      "desc": "Returns the delegate for implementing accessibility support via composition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAccessibilityLiveRegion()",
      "desc": "Gets the live region mode for this View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeProvider",
      "code": "getAccessibilityNodeProvider()",
      "desc": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to android.accessibilityservice.AccessibilityServices that explore the window content.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getAccessibilityPaneTitle()",
      "desc": "Get the title of the pane for purposes of accessibility.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAccessibilityTraversalAfter()",
      "desc": "Gets the id of a view after which this one is visited in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAccessibilityTraversalBefore()",
      "desc": "Gets the id of a view before which this one is visited in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getAlpha()",
      "desc": "The opacity of the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Animation",
      "code": "getAnimation()",
      "desc": "Get the animation currently associated with this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Matrix",
      "code": "getAnimationMatrix()",
      "desc": "Return the current transformation matrix of the view.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IBinder",
      "code": "getApplicationWindowToken()",
      "desc": "Retrieve a unique token identifying the top-level \"real\" window of the window that this view is attached to.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "getAttributeResolutionStack(attribute: Int)",
      "desc": "Returns the ordered list of resource ID that are considered when resolving attribute values for this View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "getAttributeSourceResourceMap()",
      "desc": "Returns the mapping of attribute resource ID to source resource ID where the attribute value was set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getAutofillHints()",
      "desc": "Gets the hints that help an android.service.autofill.AutofillService determine how to autofill the view with the user's data.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AutofillId",
      "code": "getAutofillId()",
      "desc": "Gets the unique, logical identifier of this view in the activity, for autofill purposes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAutofillType()",
      "desc": "Describes the autofill type of this view, so an android.service.autofill.AutofillService can create the proper AutofillValue when autofilling the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AutofillValue",
      "code": "getAutofillValue()",
      "desc": "Gets the View's current autofill value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getBackground()",
      "desc": "Gets the background drawable",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BlendMode",
      "code": "getBackgroundTintBlendMode()",
      "desc": "Return the blending mode used to apply the tint to the background drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "getBackgroundTintList()",
      "desc": "Return the tint applied to the background drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PorterDuff.Mode",
      "code": "getBackgroundTintMode()",
      "desc": "Return the blending mode used to apply the tint to the background drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBaseline()",
      "desc": "Return the offset of the widget's text baseline from the widget's top boundary."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getBottom()",
      "desc": "Bottom position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCameraDistance()",
      "desc": "Gets the distance along the Z axis from the camera to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Rect",
      "code": "getClipBounds()",
      "desc": "Returns a copy of the current clipBounds.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getClipBounds(outRect: Rect!)",
      "desc": "Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getClipToOutline()",
      "desc": "Returns whether the Outline should be used to clip the contents of the View."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ContentCaptureSession",
      "code": "getContentCaptureSession()",
      "desc": "Gets the session used to notify content capture events.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getContentDescription()",
      "desc": "Returns the View's content description.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Context",
      "code": "getContext()",
      "desc": "Returns the context the view is running in, through which it can access the current theme, resources, etc.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getDefaultFocusHighlightEnabled()",
      "desc": "/** Returns whether this View should use a default focus highlight when it gets focused but doesn't have android.R.attr#state_focused defined in its background."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDefaultSize(size: Int, measureSpec: Int)",
      "desc": "Utility to return a default size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Display",
      "code": "getDisplay()",
      "desc": "Gets the logical display to which the view's window has been attached.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IntArray",
      "code": "getDrawableState()",
      "desc": "Return an array of resource IDs of the drawable states representing the current state of the view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getDrawingCache()",
      "desc": "Calling this method is equivalent to calling getDrawingCache(false).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getDrawingCache(autoScale: Boolean)",
      "desc": "Returns the bitmap in which this view drawing is cached.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDrawingCacheBackgroundColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDrawingCacheQuality()",
      "desc": "Returns the quality of the drawing cache."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getDrawingRect(outRect: Rect!)",
      "desc": "Return the visible drawing bounds of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getDrawingTime()",
      "desc": "Return the time at which the drawing of the view hierarchy started."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getElevation()",
      "desc": "The base elevation of this view relative to its parent, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getExplicitStyle()",
      "desc": "Returns the resource ID for the style specified using style=\"...\" in the AttributeSet's backing XML element or Resources#ID_NULL otherwise if not specified or otherwise not applicable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFilterTouchesWhenObscured()",
      "desc": "Gets whether the framework should discard touches when the view's window is obscured by another visible window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFitsSystemWindows()",
      "desc": "Check for state of setFitsSystemWindows(boolean)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getFocusable()",
      "desc": "Returns the focusable setting for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ArrayList",
      "code": "getFocusables(direction: Int)",
      "desc": "Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getFocusedRect(r: Rect!)",
      "desc": "When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getForeground()",
      "desc": "Returns the drawable used as the foreground of this View.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getForegroundGravity()",
      "desc": "Describes how the foreground is positioned."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BlendMode",
      "code": "getForegroundTintBlendMode()",
      "desc": "Return the blending mode used to apply the tint to the foreground drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "getForegroundTintList()",
      "desc": "Return the tint applied to the foreground drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PorterDuff.Mode",
      "code": "getForegroundTintMode()",
      "desc": "Return the blending mode used to apply the tint to the foreground drawable, if specified.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getGlobalVisibleRect(r: Rect!, globalOffset: Point!)",
      "desc": "If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getGlobalVisibleRect(r: Rect!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Handler",
      "code": "getHandler()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getHasOverlappingRendering()",
      "desc": "Returns the value for overlapping rendering that is used internally."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": "Return the height of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getHitRect(outRect: Rect!)",
      "desc": "Hit rectangle in parent's coordinates"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHorizontalFadingEdgeLength()",
      "desc": "Returns the size of the horizontal faded edges used to indicate that more content in this view is visible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getHorizontalScrollbarThumbDrawable()",
      "desc": "Returns the currently configured Drawable for the thumb of the horizontal scroll bar if it exists, null otherwise.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getHorizontalScrollbarTrackDrawable()",
      "desc": "Returns the currently configured Drawable for the track of the horizontal scroll bar if it exists, null otherwise.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getId()",
      "desc": "Returns this view's identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getImportantForAccessibility()",
      "desc": "Gets the mode for determining whether this View is important for accessibility."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getImportantForAutofill()",
      "desc": "Gets the mode for determining whether this view is important for autofill."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getImportantForContentCapture()",
      "desc": "Gets the mode for determining whether this view is important for content capture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getKeepScreenOn()",
      "desc": "Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyEvent.DispatcherState",
      "code": "getKeyDispatcherState()",
      "desc": "Return the global KeyEvent.DispatcherState for this view's window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLabelFor()",
      "desc": "Gets the id of a view for which this view serves as a label for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLayerType()",
      "desc": "Indicates what type of layer is currently associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLayoutDirection()",
      "desc": "Returns the resolved layout direction for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewGroup.LayoutParams",
      "code": "getLayoutParams()",
      "desc": "Get the LayoutParams associated with this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLeft()",
      "desc": "Left position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getLocalVisibleRect(r: Rect!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getLocationInSurface(location: IntArray)",
      "desc": "Compute the view's coordinate within the surface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getLocationInWindow(outLocation: IntArray!)",
      "desc": "Computes the coordinates of this view in its window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getLocationOnScreen(outLocation: IntArray!)",
      "desc": "Computes the coordinates of this view on the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Matrix",
      "code": "getMatrix()",
      "desc": "The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMeasuredHeight()",
      "desc": "Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMeasuredHeightAndState()",
      "desc": "Return the full height measurement information for this view as computed by the most recent call to measure(int,int)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMeasuredState()",
      "desc": "Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMeasuredWidth()",
      "desc": "Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMeasuredWidthAndState()",
      "desc": "Return the full width measurement information for this view as computed by the most recent call to measure(int,int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumHeight()",
      "desc": "Returns the minimum height of the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumWidth()",
      "desc": "Returns the minimum width of the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextClusterForwardId()",
      "desc": "Gets the id of the root of the next keyboard navigation cluster."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextFocusDownId()",
      "desc": "Gets the id of the view to use when the next focus is FOCUS_DOWN."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextFocusForwardId()",
      "desc": "Gets the id of the view to use when the next focus is FOCUS_FORWARD."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextFocusLeftId()",
      "desc": "Gets the id of the view to use when the next focus is FOCUS_LEFT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextFocusRightId()",
      "desc": "Gets the id of the view to use when the next focus is FOCUS_RIGHT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNextFocusUpId()",
      "desc": "Gets the id of the view to use when the next focus is FOCUS_UP."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View.OnFocusChangeListener",
      "code": "getOnFocusChangeListener()",
      "desc": "Returns the focus-change callback registered for this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOutlineAmbientShadowColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewOutlineProvider",
      "code": "getOutlineProvider()",
      "desc": "Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOutlineSpotShadowColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOverScrollMode()",
      "desc": "Returns the over-scroll mode for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewOverlay",
      "code": "getOverlay()",
      "desc": "Returns the overlay for this view, creating it if it does not yet exist.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingBottom()",
      "desc": "Returns the bottom padding of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingEnd()",
      "desc": "Returns the end padding of this view depending on its resolved layout direction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingLeft()",
      "desc": "Returns the left padding of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingRight()",
      "desc": "Returns the right padding of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingStart()",
      "desc": "Returns the start padding of this view depending on its resolved layout direction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPaddingTop()",
      "desc": "Returns the top padding of this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ViewParent",
      "code": "getParent()",
      "desc": "Gets the parent of this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewParent",
      "code": "getParentForAccessibility()",
      "desc": "Gets the parent for accessibility purposes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPivotX()",
      "desc": "The x location of the point around which the view is rotated and scaled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPivotY()",
      "desc": "The y location of the point around which the view is rotated and scaled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PointerIcon",
      "code": "getPointerIcon()",
      "desc": "Gets the pointer icon for the current view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Resources",
      "code": "getResources()",
      "desc": "Returns the resources associated with this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getRevealOnFocusHint()",
      "desc": "Returns this view's preference for reveal behavior when it gains focus."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getRight()",
      "desc": "Right position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "getRootView()",
      "desc": "Finds the topmost view in the current view hierarchy.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsets",
      "code": "getRootWindowInsets()",
      "desc": "Provide original WindowInsets that are dispatched to the view hierarchy.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRotation()",
      "desc": "The degrees that the view is rotated around the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRotationX()",
      "desc": "The degrees that the view is rotated around the horizontal axis through the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRotationY()",
      "desc": "The degrees that the view is rotated around the vertical axis through the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getScaleX()",
      "desc": "The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getScaleY()",
      "desc": "The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getScrollBarDefaultDelayBeforeFade()",
      "desc": "Returns the delay before scrollbars fade."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getScrollBarFadeDuration()",
      "desc": "Returns the scrollbar fade duration."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getScrollBarSize()",
      "desc": "Returns the scrollbar size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getScrollBarStyle()",
      "desc": "Returns the current scrollbar style."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getScrollIndicators()",
      "desc": "Returns a bitmask representing the enabled scroll indicators."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScrollX()",
      "desc": "Return the scrolled left position of this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScrollY()",
      "desc": "Return the scrolled top position of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSolidColor()",
      "desc": "Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSourceLayoutResId()",
      "desc": "A View can be inflated from an XML layout."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "getStateDescription()",
      "desc": "Returns the View's state description.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StateListAnimator",
      "code": "getStateListAnimator()",
      "desc": "Returns the current StateListAnimator if exists.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getSystemGestureExclusionRects()",
      "desc": "Retrieve the list of areas within this view's post-layout coordinate space where the system should not intercept touch or other pointing device gestures.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSystemUiVisibility()",
      "desc": "Returns the last setSystemUiVisibility(int) that this view has requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getTag()",
      "desc": "Returns this view's tag.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getTag(key: Int)",
      "desc": "Returns the tag associated with this view and the specified key.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextAlignment()",
      "desc": "Return the resolved text alignment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextDirection()",
      "desc": "Return the resolved text direction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getTooltipText()",
      "desc": "Returns the view's tooltip text.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getTop()",
      "desc": "Top position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TouchDelegate",
      "code": "getTouchDelegate()",
      "desc": "Gets the TouchDelegate for this View.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ArrayList",
      "code": "getTouchables()",
      "desc": "Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTransitionAlpha()",
      "desc": "This property is intended only for use by the Fade transition, which animates it to produce a visual translucency that does not side-effect (or get affected by) the real alpha property."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getTransitionName()",
      "desc": "Returns the name of the View to be used to identify Views in Transitions.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTranslationX()",
      "desc": "The horizontal location of this view relative to its left position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTranslationY()",
      "desc": "The vertical location of this view relative to its top position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTranslationZ()",
      "desc": "The depth location of this view relative to its elevation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getUniqueDrawingId()",
      "desc": "Get the identifier used for this view by the drawing system."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVerticalFadingEdgeLength()",
      "desc": "Returns the size of the vertical faded edges used to indicate that more content in this view is visible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVerticalScrollbarPosition()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getVerticalScrollbarThumbDrawable()",
      "desc": "Returns the currently configured Drawable for the thumb of the vertical scroll bar if it exists, null otherwise.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getVerticalScrollbarTrackDrawable()",
      "desc": "Returns the currently configured Drawable for the track of the vertical scroll bar if it exists, null otherwise.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVerticalScrollbarWidth()",
      "desc": "Returns the width of the vertical scrollbar."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ViewTreeObserver",
      "code": "getViewTreeObserver()",
      "desc": "Returns the ViewTreeObserver for this view's hierarchy.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVisibility()",
      "desc": "Returns the visibility status for this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": "Return the width of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowId",
      "code": "getWindowId()",
      "desc": "Retrieve the WindowId for the window this view is currently attached to.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsetsController",
      "code": "getWindowInsetsController()",
      "desc": "Retrieves the single WindowInsetsController of the window this view is attached to.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWindowSystemUiVisibility()",
      "desc": "Returns the current system UI visibility that is currently set for the entire window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IBinder",
      "code": "getWindowToken()",
      "desc": "Retrieve a unique token identifying the window this view is attached to.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWindowVisibility()",
      "desc": "Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getWindowVisibleDisplayFrame(outRect: Rect!)",
      "desc": "Retrieve the overall visible display size in which the window this view is attached to has been positioned in."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getX()",
      "desc": "The visual x position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getY()",
      "desc": "The visual y position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getZ()",
      "desc": "The visual z position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasExplicitFocusable()",
      "desc": "Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasFocus()",
      "desc": "Returns true if this view has focus itself, or is the ancestor of the view that has focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasFocusable()",
      "desc": "Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasNestedScrollingParent()",
      "desc": "Returns true if this view has a nested scrolling parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasOnClickListeners()",
      "desc": "Return whether this view has an attached OnClickListener."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasOnLongClickListeners()",
      "desc": "Return whether this view has an attached OnLongClickListener."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasOverlappingRendering()",
      "desc": "Returns whether this View has content which overlaps."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasPointerCapture()",
      "desc": "Checks pointer capture status."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasTransientState()",
      "desc": "Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasWindowFocus()",
      "desc": "Returns true if this view is in a window that currently has window focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "inflate(context: Context!, resource: Int, root: ViewGroup!)",
      "desc": "Inflate a view from an XML resource.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidate(dirty: Rect!)",
      "desc": "Mark the area defined by dirty as needing to be drawn."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidate(l: Int, t: Int, r: Int, b: Int)",
      "desc": "Mark the area defined by the rect (l,t,r,b) as needing to be drawn."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidate()",
      "desc": "Invalidate the whole view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidateDrawable(drawable: Drawable)",
      "desc": "Invalidates the specified Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidateOutline()",
      "desc": "Called to rebuild this View's Outline from its ViewOutlineProvider"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAccessibilityFocused()",
      "desc": "Returns whether this View is accessibility focused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAccessibilityHeading()",
      "desc": "Gets whether this view is a heading for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isActivated()",
      "desc": "Indicates the activation state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAttachedToWindow()",
      "desc": "Returns true if this view is currently attached to a window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClickable()",
      "desc": "Indicates whether this view reacts to click events or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isContextClickable()",
      "desc": "Indicates whether this view reacts to context clicks or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDirty()",
      "desc": "True if this view has changed since the last time being drawn."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDrawingCacheEnabled()",
      "desc": "Indicates whether the drawing cache is enabled for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDuplicateParentStateEnabled()",
      "desc": "Indicates whether this duplicates its drawable state from its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEnabled()",
      "desc": "Returns the enabled status for this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFocusable()",
      "desc": "Returns whether this View is currently able to take focus."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFocusableInTouchMode()",
      "desc": "When a view is focusable, it may not want to take focus when in touch mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFocused()",
      "desc": "Returns true if this view has focus"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFocusedByDefault()",
      "desc": "Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isForceDarkAllowed()",
      "desc": "See setForceDarkAllowed(boolean)"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHapticFeedbackEnabled()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHardwareAccelerated()",
      "desc": "Indicates whether this view is attached to a hardware accelerated window or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHorizontalFadingEdgeEnabled()",
      "desc": "Indicate whether the horizontal edges are faded when the view is scrolled horizontally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHorizontalScrollBarEnabled()",
      "desc": "Indicate whether the horizontal scrollbar should be drawn or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHovered()",
      "desc": "Returns true if the view is currently hovered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isImportantForAccessibility()",
      "desc": "Computes whether this view should be exposed for accessibility."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isImportantForAutofill()",
      "desc": "Hints the Android System whether the android.app.assist.AssistStructure.ViewNode associated with this view is considered important for autofill purposes."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isImportantForContentCapture()",
      "desc": "Hints the Android System whether this view is considered important for content capture, based on the value explicitly set by setImportantForContentCapture(int) and heuristics when it's IMPORTANT_FOR_CONTENT_CAPTURE_AUTO."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInEditMode()",
      "desc": "Indicates whether this View is currently in edit mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInLayout()",
      "desc": "Returns whether the view hierarchy is currently undergoing a layout pass."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInTouchMode()",
      "desc": "Returns whether the device is currently in touch mode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isKeyboardNavigationCluster()",
      "desc": "Returns whether this View is a root of a keyboard navigation cluster."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLaidOut()",
      "desc": "Returns true if this view has been through at least one layout since it was last attached to or detached from a window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLayoutDirectionResolved()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLayoutRequested()",
      "desc": "Indicates whether or not this view's layout will be requested during the next hierarchy layout pass."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLongClickable()",
      "desc": "Indicates whether this view reacts to long click events or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isNestedScrollingEnabled()",
      "desc": "Returns true if nested scrolling is enabled for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isOpaque()",
      "desc": "Indicates whether this View is opaque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPaddingRelative()",
      "desc": "Return if the padding has been set through relative values setPaddingRelative(int,int,int,int) or through"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPivotSet()",
      "desc": "Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPressed()",
      "desc": "Indicates whether the view is currently in pressed state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSaveEnabled()",
      "desc": "Indicates whether this view will save its state (that is, whether its onSaveInstanceState method will be called)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSaveFromParentEnabled()",
      "desc": "Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScreenReaderFocusable()",
      "desc": "Returns whether the view should be treated as a focusable unit by screen reader accessibility tools."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScrollContainer()",
      "desc": "Indicates whether this view is one of the set of scrollable containers in its window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScrollbarFadingEnabled()",
      "desc": "Returns true if scrollbars will fade when this view is not scrolling"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSelected()",
      "desc": "Indicates the selection state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isShowingLayoutBounds()",
      "desc": "Returns true when the View is attached and the system developer setting to show the layout bounds is enabled or false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isShown()",
      "desc": "Returns the visibility of this view and all of its ancestors"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSoundEffectsEnabled()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isTemporarilyDetached()",
      "desc": "Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTextAlignmentResolved()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTextDirectionResolved()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVerticalFadingEdgeEnabled()",
      "desc": "Indicate whether the vertical edges are faded when the view is scrolled horizontally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVerticalScrollBarEnabled()",
      "desc": "Indicate whether the vertical scrollbar should be drawn or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVisibleToUserForAutofill(virtualId: Int)",
      "desc": "Computes whether this virtual autofill view is visible to the user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "jumpDrawablesToCurrentState()",
      "desc": "Call Drawable#jumpToCurrentState() on all Drawable objects associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "keyboardNavigationClusterSearch(currentCluster: View!, direction: Int)",
      "desc": "Find the nearest keyboard navigation cluster in the specified direction.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "layout(l: Int, t: Int, r: Int, b: Int)",
      "desc": "Assign a size and position to a view and all of its descendants"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "measure(widthMeasureSpec: Int, heightMeasureSpec: Int)",
      "desc": "This is called to find out how big a view should be."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "offsetLeftAndRight(offset: Int)",
      "desc": "Offset this view's horizontal location by the specified amount of pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "offsetTopAndBottom(offset: Int)",
      "desc": "Offset this view's vertical location by the specified number of pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsets",
      "code": "onApplyWindowInsets(insets: WindowInsets!)",
      "desc": "Called when the view should apply WindowInsets according to its internal policy.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onCancelPendingInputEvents()",
      "desc": "Called as the result of a call to cancelPendingInputEvents() on this view or a parent view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onCapturedPointerEvent(event: MotionEvent!)",
      "desc": "Implement this method to handle captured pointer events"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onCheckIsTextEditor()",
      "desc": "Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InputConnection",
      "code": "onCreateInputConnection(outAttrs: EditorInfo!)",
      "desc": "Create a new InputConnection for an InputMethod to interact with the view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onDragEvent(event: DragEvent!)",
      "desc": "Handles drag events sent by the system following a call to  startDragAndDrop()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onDrawForeground(canvas: Canvas!)",
      "desc": "Draw any foreground content for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onFilterTouchEventForSecurity(event: MotionEvent!)",
      "desc": "Filter the touch event to apply security policies."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onFinishTemporaryDetach()",
      "desc": "Called after onStartTemporaryDetach when the container is done changing the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onGenericMotionEvent(event: MotionEvent!)",
      "desc": "Implement this method to handle generic motion events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onHoverChanged(hovered: Boolean)",
      "desc": "Implement this method to handle hover state changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onHoverEvent(event: MotionEvent!)",
      "desc": "Implement this method to handle hover events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onInitializeAccessibilityEvent(event: AccessibilityEvent!)",
      "desc": "Initializes an AccessibilityEvent with information about this View which is the event source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onInitializeAccessibilityNodeInfo(info: AccessibilityNodeInfo!)",
      "desc": "Initializes an AccessibilityNodeInfo with information about this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyDown(keyCode: Int, event: KeyEvent!)",
      "desc": "Default implementation of KeyEvent.Callback#onKeyDown(int, KeyEvent): perform press of the view when KeyEvent#KEYCODE_DPAD_CENTER or KeyEvent#KEYCODE_ENTER is released, if the view is enabled and clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyLongPress(keyCode: Int, event: KeyEvent!)",
      "desc": "Default implementation of KeyEvent.Callback#onKeyLongPress(int, KeyEvent): always returns false (doesn't handle the event)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyMultiple(keyCode: Int, repeatCount: Int, event: KeyEvent!)",
      "desc": "Default implementation of KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent): always returns false (doesn't handle the event)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyPreIme(keyCode: Int, event: KeyEvent!)",
      "desc": "Handle a key event before it is processed by any input method associated with the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyShortcut(keyCode: Int, event: KeyEvent!)",
      "desc": "Called on the focused view when a key shortcut event is not handled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyUp(keyCode: Int, event: KeyEvent!)",
      "desc": "Default implementation of KeyEvent.Callback#onKeyUp(int, KeyEvent): perform clicking of the view when KeyEvent#KEYCODE_DPAD_CENTER, KeyEvent#KEYCODE_ENTER or KeyEvent#KEYCODE_SPACE is released."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onPointerCaptureChange(hasCapture: Boolean)",
      "desc": "Called when the window has just acquired or lost pointer capture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onPopulateAccessibilityEvent(event: AccessibilityEvent!)",
      "desc": "Called from dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onProvideAutofillStructure(structure: ViewStructure!, flags: Int)",
      "desc": "Populates a ViewStructure to fullfil an autofill request."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onProvideAutofillVirtualStructure(structure: ViewStructure!, flags: Int)",
      "desc": "Populates a ViewStructure containing virtual children to fullfil an autofill request."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onProvideContentCaptureStructure(structure: ViewStructure, flags: Int)",
      "desc": "Populates a ViewStructure for content capture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onProvideStructure(structure: ViewStructure!)",
      "desc": "Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onProvideVirtualStructure(structure: ViewStructure!)",
      "desc": "Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PointerIcon",
      "code": "onResolvePointerIcon(event: MotionEvent!, pointerIndex: Int)",
      "desc": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onRtlPropertiesChanged(layoutDirection: Int)",
      "desc": "Called when any RTL property (layout direction or text direction or text alignment) has been changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onScreenStateChanged(screenState: Int)",
      "desc": "This method is called whenever the state of the screen this view is attached to changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onStartTemporaryDetach()",
      "desc": "This is called when a container is going to temporarily detach a child, with ViewGroup#detachViewFromParent(View)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onTouchEvent(event: MotionEvent!)",
      "desc": "Implement this method to handle touch screen motion events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onTrackballEvent(event: MotionEvent!)",
      "desc": "Implement this method to handle trackball motion events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onVisibilityAggregated(isVisible: Boolean)",
      "desc": "Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onWindowFocusChanged(hasWindowFocus: Boolean)",
      "desc": "Called when the window containing this view gains or loses focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onWindowSystemUiVisibilityChanged(visible: Int)",
      "desc": "Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performAccessibilityAction(action: Int, arguments: Bundle!)",
      "desc": "Performs the specified accessibility action on the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performClick()",
      "desc": "Call this view's OnClickListener, if it is defined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performContextClick(x: Float, y: Float)",
      "desc": "Call this view's OnContextClickListener, if it is defined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performContextClick()",
      "desc": "Call this view's OnContextClickListener, if it is defined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performHapticFeedback(feedbackConstant: Int)",
      "desc": "BZZZTT!!1!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performHapticFeedback(feedbackConstant: Int, flags: Int)",
      "desc": "BZZZTT!!1!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performLongClick()",
      "desc": "Calls this view's OnLongClickListener, if it is defined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performLongClick(x: Float, y: Float)",
      "desc": "Calls this view's OnLongClickListener, if it is defined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "playSoundEffect(soundConstant: Int)",
      "desc": "Play a sound effect for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "post(action: Runnable!)",
      "desc": "Causes the Runnable to be added to the message queue."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "postDelayed(action: Runnable!, delayMillis: Long)",
      "desc": "Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidate()",
      "desc": "Cause an invalidate to happen on a subsequent cycle through the event loop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidate(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidateDelayed(delayMilliseconds: Long)",
      "desc": "Cause an invalidate to happen on a subsequent cycle through the event loop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidateDelayed(delayMilliseconds: Long, left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidateOnAnimation()",
      "desc": "Cause an invalidate to happen on the next animation time step, typically the next display frame."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postInvalidateOnAnimation(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postOnAnimation(action: Runnable!)",
      "desc": "Causes the Runnable to execute on the next animation time step."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postOnAnimationDelayed(action: Runnable!, delayMillis: Long)",
      "desc": "Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "refreshDrawableState()",
      "desc": "Call this to force a view to update its drawable state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "releasePointerCapture()",
      "desc": "Releases the pointer capture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeCallbacks(action: Runnable!)",
      "desc": "Removes the specified Runnable from the message queue."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeOnAttachStateChangeListener(listener: View.OnAttachStateChangeListener!)",
      "desc": "Remove a listener for attach state changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeOnLayoutChangeListener(listener: View.OnLayoutChangeListener!)",
      "desc": "Remove a listener for layout changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeOnUnhandledKeyEventListener(listener: View.OnUnhandledKeyEventListener!)",
      "desc": "Removes a listener which will receive unhandled KeyEvents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestApplyInsets()",
      "desc": "Ask that a new dispatch of onApplyWindowInsets(android.view.WindowInsets) be performed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestFitSystemWindows()",
      "desc": "Ask that a new dispatch of fitSystemWindows(android.graphics.Rect) be performed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "requestFocus()",
      "desc": "Call this to try to give focus to a specific view or to one of its descendants."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "requestFocus(direction: Int)",
      "desc": "Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "requestFocus(direction: Int, previouslyFocusedRect: Rect!)",
      "desc": "Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "requestFocusFromTouch()",
      "desc": "Call this to try to give focus to a specific view or to one of its descendants."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestLayout()",
      "desc": "Call this when something has changed which has invalidated the layout of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestPointerCapture()",
      "desc": "Requests pointer capture mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "requestRectangleOnScreen(rectangle: Rect!)",
      "desc": "Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "requestRectangleOnScreen(rectangle: Rect!, immediate: Boolean)",
      "desc": "Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "requestUnbufferedDispatch(event: MotionEvent!)",
      "desc": "Request unbuffered dispatch of the given stream of MotionEvents to this View."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "requestUnbufferedDispatch(source: Int)",
      "desc": "Request unbuffered dispatch of the given event source class to this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "requireViewById(id: Int)",
      "desc": "Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resetPivot()",
      "desc": "Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "resolveSize(size: Int, measureSpec: Int)",
      "desc": "Version of resolveSizeAndState(int,int,int) returning only the MEASURED_SIZE_MASK bits of the result."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "resolveSizeAndState(size: Int, measureSpec: Int, childMeasuredState: Int)",
      "desc": "Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "restoreDefaultFocus()",
      "desc": "Gives focus to the default-focus view in the view hierarchy that has this view as a root."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restoreHierarchyState(container: SparseArray<Parcelable!>!)",
      "desc": "Restore this view hierarchy's frozen state from the given container."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "saveAttributeDataForStyleable(context: Context, styleable: IntArray, attrs: AttributeSet?, t: TypedArray, defStyleAttr: Int, defStyleRes: Int)",
      "desc": "Stores debugging information about attributes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "saveHierarchyState(container: SparseArray<Parcelable!>!)",
      "desc": "Store this view hierarchy's frozen state into the given container."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scheduleDrawable(who: Drawable, what: Runnable, when: Long)",
      "desc": "Schedules an action on a drawable to occur at a specified time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scrollBy(x: Int, y: Int)",
      "desc": "Move the scrolled position of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scrollTo(x: Int, y: Int)",
      "desc": "Set the scrolled position of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sendAccessibilityEvent(eventType: Int)",
      "desc": "Sends an accessibility event of the given type."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sendAccessibilityEventUnchecked(event: AccessibilityEvent!)",
      "desc": "This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityDelegate(delegate: View.AccessibilityDelegate?)",
      "desc": "Sets a delegate for implementing accessibility support via composition (as opposed to inheritance)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityHeading(isHeading: Boolean)",
      "desc": "Set if view is a heading for a section of content for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityLiveRegion(mode: Int)",
      "desc": "Sets the live region mode for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityPaneTitle(accessibilityPaneTitle: CharSequence?)",
      "desc": "Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityTraversalAfter(afterId: Int)",
      "desc": "Sets the id of a view after which this one is visited in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityTraversalBefore(beforeId: Int)",
      "desc": "Sets the id of a view before which this one is visited in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setActivated(activated: Boolean)",
      "desc": "Changes the activated state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAlpha(alpha: Float)",
      "desc": "Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimation(animation: Animation!)",
      "desc": "Sets the next animation to play for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimationMatrix(matrix: Matrix?)",
      "desc": "Changes the transformation matrix on the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAutofillHints(vararg autofillHints: String!)",
      "desc": "Sets the hints that help an android.service.autofill.AutofillService determine how to autofill the view with the user's data."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAutofillId(id: AutofillId?)",
      "desc": "Sets the unique, logical identifier of this view in the activity, for autofill purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackground(background: Drawable!)",
      "desc": "Set the background to a given Drawable, or remove the background."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundColor(color: Int)",
      "desc": "Sets the background color for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundDrawable(background: Drawable!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundResource(resid: Int)",
      "desc": "Set the background to a given resource."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundTintBlendMode(blendMode: BlendMode?)",
      "desc": "Specifies the blending mode used to apply the tint specified by setBackgroundTintList(android.content.res.ColorStateList)} to the background drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundTintList(tint: ColorStateList?)",
      "desc": "Applies a tint to the background drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundTintMode(tintMode: PorterDuff.Mode?)",
      "desc": "Specifies the blending mode used to apply the tint specified by setBackgroundTintList(android.content.res.ColorStateList)} to the background drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setBottom(bottom: Int)",
      "desc": "Sets the bottom position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCameraDistance(distance: Float)",
      "desc": "Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClickable(clickable: Boolean)",
      "desc": "Enables or disables click events for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClipBounds(clipBounds: Rect!)",
      "desc": "Sets a rectangular area on this view to which the view will be clipped when it is drawn."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClipToOutline(clipToOutline: Boolean)",
      "desc": "Sets whether the View's Outline should be used to clip the contents of the View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentCaptureSession(contentCaptureSession: ContentCaptureSession?)",
      "desc": "Sets the (optional) ContentCaptureSession associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentDescription(contentDescription: CharSequence!)",
      "desc": "Sets the View's content description."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContextClickable(contextClickable: Boolean)",
      "desc": "Enables or disables context clicking for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDefaultFocusHighlightEnabled(defaultFocusHighlightEnabled: Boolean)",
      "desc": "Sets whether this View should use a default focus highlight when it gets focused but doesn't have android.R.attr#state_focused defined in its background."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDrawingCacheBackgroundColor(color: Int)",
      "desc": "Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDrawingCacheEnabled(enabled: Boolean)",
      "desc": "Enables or disables the drawing cache."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDrawingCacheQuality(quality: Int)",
      "desc": "Set the drawing cache quality of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDuplicateParentStateEnabled(enabled: Boolean)",
      "desc": "Enables or disables the duplication of the parent's state into this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setElevation(elevation: Float)",
      "desc": "Sets the base elevation of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEnabled(enabled: Boolean)",
      "desc": "Set the enabled state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFadingEdgeLength(length: Int)",
      "desc": "Set the size of the faded edge used to indicate that more content in this view is available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilterTouchesWhenObscured(enabled: Boolean)",
      "desc": "Sets whether the framework should discard touches when the view's window is obscured by another visible window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFitsSystemWindows(fitSystemWindows: Boolean)",
      "desc": "Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(android.graphics.Rect) will be executed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusable(focusable: Boolean)",
      "desc": "Set whether this view can receive the focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusable(focusable: Int)",
      "desc": "Sets whether this view can receive focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusableInTouchMode(focusableInTouchMode: Boolean)",
      "desc": "Set whether this view can receive focus while in touch mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusedByDefault(isFocusedByDefault: Boolean)",
      "desc": "Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForceDarkAllowed(allow: Boolean)",
      "desc": "Sets whether or not to allow force dark to apply to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForeground(foreground: Drawable!)",
      "desc": "Supply a Drawable that is to be rendered on top of all of the content in the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForegroundGravity(gravity: Int)",
      "desc": "Describes how the foreground is positioned."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForegroundTintBlendMode(blendMode: BlendMode?)",
      "desc": "Specifies the blending mode used to apply the tint specified by setForegroundTintList(android.content.res.ColorStateList)} to the background drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForegroundTintList(tint: ColorStateList?)",
      "desc": "Applies a tint to the foreground drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForegroundTintMode(tintMode: PorterDuff.Mode?)",
      "desc": "Specifies the blending mode used to apply the tint specified by setForegroundTintList(android.content.res.ColorStateList)} to the background drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHapticFeedbackEnabled(hapticFeedbackEnabled: Boolean)",
      "desc": "Set whether this view should have haptic feedback for events such as long presses."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHasTransientState(hasTransientState: Boolean)",
      "desc": "Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHorizontalFadingEdgeEnabled(horizontalFadingEdgeEnabled: Boolean)",
      "desc": "Define whether the horizontal edges should be faded when this view is scrolled horizontally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHorizontalScrollBarEnabled(horizontalScrollBarEnabled: Boolean)",
      "desc": "Define whether the horizontal scrollbar should be drawn or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHorizontalScrollbarThumbDrawable(drawable: Drawable?)",
      "desc": "Defines the horizontal thumb drawable"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHorizontalScrollbarTrackDrawable(drawable: Drawable?)",
      "desc": "Defines the horizontal track drawable"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHovered(hovered: Boolean)",
      "desc": "Sets whether the view is currently hovered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setId(id: Int)",
      "desc": "Sets the identifier for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setImportantForAccessibility(mode: Int)",
      "desc": "Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setImportantForAutofill(mode: Int)",
      "desc": "Sets the mode for determining whether this view is considered important for autofill."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setImportantForContentCapture(mode: Int)",
      "desc": "Sets the mode for determining whether this view is considered important for content capture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setKeepScreenOn(keepScreenOn: Boolean)",
      "desc": "Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setKeyboardNavigationCluster(isCluster: Boolean)",
      "desc": "Set whether this view is a root of a keyboard navigation cluster."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLabelFor(id: Int)",
      "desc": "Sets the id of a view for which this view serves as a label for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLayerPaint(paint: Paint?)",
      "desc": "Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLayerType(layerType: Int, paint: Paint?)",
      "desc": "Specifies the type of layer backing this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLayoutDirection(layoutDirection: Int)",
      "desc": "Set the layout direction for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLayoutParams(params: ViewGroup.LayoutParams!)",
      "desc": "Set the layout parameters associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setLeft(left: Int)",
      "desc": "Sets the left position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setLeftTopRightBottom(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Assign a size and position to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLongClickable(longClickable: Boolean)",
      "desc": "Enables or disables long click events for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumHeight(minHeight: Int)",
      "desc": "Sets the minimum height of the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumWidth(minWidth: Int)",
      "desc": "Sets the minimum width of the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNestedScrollingEnabled(enabled: Boolean)",
      "desc": "Enable or disable nested scrolling for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextClusterForwardId(nextClusterForwardId: Int)",
      "desc": "Sets the id of the view to use as the root of the next keyboard navigation cluster."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextFocusDownId(nextFocusDownId: Int)",
      "desc": "Sets the id of the view to use when the next focus is FOCUS_DOWN."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextFocusForwardId(nextFocusForwardId: Int)",
      "desc": "Sets the id of the view to use when the next focus is FOCUS_FORWARD."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextFocusLeftId(nextFocusLeftId: Int)",
      "desc": "Sets the id of the view to use when the next focus is FOCUS_LEFT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextFocusRightId(nextFocusRightId: Int)",
      "desc": "Sets the id of the view to use when the next focus is FOCUS_RIGHT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextFocusUpId(nextFocusUpId: Int)",
      "desc": "Sets the id of the view to use when the next focus is FOCUS_UP."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnApplyWindowInsetsListener(listener: View.OnApplyWindowInsetsListener!)",
      "desc": "Set an OnApplyWindowInsetsListener to take over the policy for applying window insets to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnCapturedPointerListener(l: View.OnCapturedPointerListener!)",
      "desc": "Set a listener to receive callbacks when the pointer capture state of a view changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnClickListener(l: View.OnClickListener?)",
      "desc": "Register a callback to be invoked when this view is clicked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnContextClickListener(l: View.OnContextClickListener?)",
      "desc": "Register a callback to be invoked when this view is context clicked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnCreateContextMenuListener(l: View.OnCreateContextMenuListener!)",
      "desc": "Register a callback to be invoked when the context menu for this view is being built."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDragListener(l: View.OnDragListener!)",
      "desc": "Register a drag event listener callback object for this View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnFocusChangeListener(l: View.OnFocusChangeListener!)",
      "desc": "Register a callback to be invoked when focus of this view changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnGenericMotionListener(l: View.OnGenericMotionListener!)",
      "desc": "Register a callback to be invoked when a generic motion event is sent to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnHoverListener(l: View.OnHoverListener!)",
      "desc": "Register a callback to be invoked when a hover event is sent to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnKeyListener(l: View.OnKeyListener!)",
      "desc": "Register a callback to be invoked when a hardware key is pressed in this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnLongClickListener(l: View.OnLongClickListener?)",
      "desc": "Register a callback to be invoked when this view is clicked and held."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnScrollChangeListener(l: View.OnScrollChangeListener!)",
      "desc": "Register a callback to be invoked when the scroll X or Y positions of this view change."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnSystemUiVisibilityChangeListener(l: View.OnSystemUiVisibilityChangeListener!)",
      "desc": "Set a listener to receive callbacks when the visibility of the system bar changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnTouchListener(l: View.OnTouchListener!)",
      "desc": "Register a callback to be invoked when a touch event is sent to this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOutlineAmbientShadowColor(color: Int)",
      "desc": "Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOutlineProvider(provider: ViewOutlineProvider!)",
      "desc": "Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOutlineSpotShadowColor(color: Int)",
      "desc": "Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOverScrollMode(overScrollMode: Int)",
      "desc": "Set the over-scroll mode for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPadding(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Sets the padding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPaddingRelative(start: Int, top: Int, end: Int, bottom: Int)",
      "desc": "Sets the relative padding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPivotX(pivotX: Float)",
      "desc": "Sets the x location of the point around which the view is rotated and scaled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPivotY(pivotY: Float)",
      "desc": "Sets the y location of the point around which the view is rotated and scaled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPointerIcon(pointerIcon: PointerIcon!)",
      "desc": "Set the pointer icon for the current view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPressed(pressed: Boolean)",
      "desc": "Sets the pressed state for this view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRevealOnFocusHint(revealOnFocus: Boolean)",
      "desc": "Sets this view's preference for reveal behavior when it gains focus."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRight(right: Int)",
      "desc": "Sets the right position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotation(rotation: Float)",
      "desc": "Sets the degrees that the view is rotated around the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotationX(rotationX: Float)",
      "desc": "Sets the degrees that the view is rotated around the horizontal axis through the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotationY(rotationY: Float)",
      "desc": "Sets the degrees that the view is rotated around the vertical axis through the pivot point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSaveEnabled(enabled: Boolean)",
      "desc": "Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState method will be called)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSaveFromParentEnabled(enabled: Boolean)",
      "desc": "Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScaleX(scaleX: Float)",
      "desc": "Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScaleY(scaleY: Float)",
      "desc": "Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScreenReaderFocusable(screenReaderFocusable: Boolean)",
      "desc": "Sets whether this View should be a focusable element for screen readers and include non-focusable Views from its subtree when providing feedback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollBarDefaultDelayBeforeFade(scrollBarDefaultDelayBeforeFade: Int)",
      "desc": "Define the delay before scrollbars fade."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollBarFadeDuration(scrollBarFadeDuration: Int)",
      "desc": "Define the scrollbar fade duration."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollBarSize(scrollBarSize: Int)",
      "desc": "Define the scrollbar size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollBarStyle(style: Int)",
      "desc": "Specify the style of the scrollbars."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollContainer(isScrollContainer: Boolean)",
      "desc": "Change whether this view is one of the set of scrollable containers in its window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollIndicators(indicators: Int)",
      "desc": "Sets the state of all scroll indicators."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollIndicators(indicators: Int, mask: Int)",
      "desc": "Sets the state of the scroll indicators specified by the mask."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollX(value: Int)",
      "desc": "Set the horizontal scrolled position of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollY(value: Int)",
      "desc": "Set the vertical scrolled position of your view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollbarFadingEnabled(fadeScrollbars: Boolean)",
      "desc": "Define whether scrollbars will fade when the view is not scrolling."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSelected(selected: Boolean)",
      "desc": "Changes the selection state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSoundEffectsEnabled(soundEffectsEnabled: Boolean)",
      "desc": "Set whether this view should have sound effects enabled for events such as clicking and touching."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStateDescription(stateDescription: CharSequence?)",
      "desc": "Sets the View's state description."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStateListAnimator(stateListAnimator: StateListAnimator!)",
      "desc": "Attaches the provided StateListAnimator to this View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSystemGestureExclusionRects(rects: MutableList<Rect!>)",
      "desc": "Sets a list of areas within this view's post-layout coordinate space where the system should not intercept touch or other pointing device gestures."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSystemUiVisibility(visibility: Int)",
      "desc": "Request that the visibility of the status bar or other screen/window decorations be changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTag(tag: Any!)",
      "desc": "Sets the tag associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTag(key: Int, tag: Any!)",
      "desc": "Sets a tag associated with this view and a key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextAlignment(textAlignment: Int)",
      "desc": "Set the text alignment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextDirection(textDirection: Int)",
      "desc": "Set the text direction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTooltipText(tooltipText: CharSequence?)",
      "desc": "Sets the tooltip text which will be displayed in a small popup next to the view."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setTop(top: Int)",
      "desc": "Sets the top position of this view relative to its parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTouchDelegate(delegate: TouchDelegate!)",
      "desc": "Sets the TouchDelegate for this View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTransitionAlpha(alpha: Float)",
      "desc": "This property is intended only for use by the Fade transition, which animates it to produce a visual translucency that does not side-effect (or get affected by) the real alpha property."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setTransitionName(transitionName: String!)",
      "desc": "Sets the name of the View to be used to identify Views in Transitions."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTransitionVisibility(visibility: Int)",
      "desc": "Changes the visibility of this View without triggering any other changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTranslationX(translationX: Float)",
      "desc": "Sets the horizontal location of this view relative to its left position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTranslationY(translationY: Float)",
      "desc": "Sets the vertical location of this view relative to its top position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTranslationZ(translationZ: Float)",
      "desc": "Sets the depth location of this view relative to its elevation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalFadingEdgeEnabled(verticalFadingEdgeEnabled: Boolean)",
      "desc": "Define whether the vertical edges should be faded when this view is scrolled vertically."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalScrollBarEnabled(verticalScrollBarEnabled: Boolean)",
      "desc": "Define whether the vertical scrollbar should be drawn or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalScrollbarPosition(position: Int)",
      "desc": "Set the position of the vertical scroll bar."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalScrollbarThumbDrawable(drawable: Drawable?)",
      "desc": "Defines the vertical scrollbar thumb drawable"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVerticalScrollbarTrackDrawable(drawable: Drawable?)",
      "desc": "Defines the vertical scrollbar track drawable"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVisibility(visibility: Int)",
      "desc": "Set the visibility state of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWillNotCacheDrawing(willNotCacheDrawing: Boolean)",
      "desc": "When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWillNotDraw(willNotDraw: Boolean)",
      "desc": "If this view doesn't do any drawing on its own, set this flag to allow further optimizations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowInsetsAnimationCallback(callback: WindowInsetsAnimation.Callback?)",
      "desc": "Sets a WindowInsetsAnimation.Callback to be notified about animations of windows that cause insets."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setX(x: Float)",
      "desc": "Sets the visual x position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setY(y: Float)",
      "desc": "Sets the visual y position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setZ(z: Float)",
      "desc": "Sets the visual z position of this view, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "showContextMenu()",
      "desc": "Shows the context menu for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "showContextMenu(x: Float, y: Float)",
      "desc": "Shows the context menu for this view anchored to the specified view-relative coordinate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ActionMode",
      "code": "startActionMode(callback: ActionMode.Callback!)",
      "desc": "Start an action mode with the default type ActionMode#TYPE_PRIMARY.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ActionMode",
      "code": "startActionMode(callback: ActionMode.Callback!, type: Int)",
      "desc": "Start an action mode with the given type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startAnimation(animation: Animation!)",
      "desc": "Start the specified animation now."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "startDrag(data: ClipData!, shadowBuilder: View.DragShadowBuilder!, myLocalState: Any!, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "startDragAndDrop(data: ClipData!, shadowBuilder: View.DragShadowBuilder!, myLocalState: Any!, flags: Int)",
      "desc": "Starts a drag and drop operation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "startNestedScroll(axes: Int)",
      "desc": "Begin a nestable scroll operation along the given axes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "stopNestedScroll()",
      "desc": "Stop a nested scroll in progress."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "transformMatrixToGlobal(matrix: Matrix)",
      "desc": "Modifies the input matrix such that it maps view-local coordinates to on-screen coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "transformMatrixToLocal(matrix: Matrix)",
      "desc": "Modifies the input matrix such that it maps on-screen coordinates to view-local coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unscheduleDrawable(who: Drawable, what: Runnable)",
      "desc": "Cancels a scheduled action on a drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unscheduleDrawable(who: Drawable!)",
      "desc": "Unschedule any events associated with the given Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "updateDragShadow(shadowBuilder: View.DragShadowBuilder!)",
      "desc": "Updates the drag shadow for the ongoing drag and drop operation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "willNotCacheDrawing()",
      "desc": "Returns whether or not this View can cache its drawing or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "willNotDraw()",
      "desc": "Returns whether or not this View draws on its own."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "awakenScrollBars()",
      "desc": "Trigger the scrollbars to draw."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "awakenScrollBars(startDelay: Int)",
      "desc": "Trigger the scrollbars to draw."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "awakenScrollBars(startDelay: Int, invalidate: Boolean)",
      "desc": "Trigger the scrollbars to draw."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeHorizontalScrollExtent()",
      "desc": "Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeHorizontalScrollOffset()",
      "desc": "Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeHorizontalScrollRange()",
      "desc": "Compute the horizontal range that the horizontal scrollbar represents."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeVerticalScrollExtent()",
      "desc": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeVerticalScrollOffset()",
      "desc": "Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "computeVerticalScrollRange()",
      "desc": "Compute the vertical range that the vertical scrollbar represents."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchDraw(canvas: Canvas!)",
      "desc": "Called by draw to draw the child views."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchGenericFocusedEvent(event: MotionEvent!)",
      "desc": "Dispatch a generic motion event to the currently focused view."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchGenericPointerEvent(event: MotionEvent!)",
      "desc": "Dispatch a generic motion event to the view under the first pointer."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchHoverEvent(event: MotionEvent!)",
      "desc": "Dispatch a hover event."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchRestoreInstanceState(container: SparseArray<Parcelable!>!)",
      "desc": "Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchSaveInstanceState(container: SparseArray<Parcelable!>!)",
      "desc": "Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchSetActivated(activated: Boolean)",
      "desc": "Dispatch setActivated to all of this View's children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchSetPressed(pressed: Boolean)",
      "desc": "Dispatch setPressed to all of this View's children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchSetSelected(selected: Boolean)",
      "desc": "Dispatch setSelected to all of this View's children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchVisibilityChanged(changedView: View, visibility: Int)",
      "desc": "Dispatch a view visibility change down the view hierarchy."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "drawableStateChanged()",
      "desc": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "fitSystemWindows(insets: Rect!)",
      "desc": "Called by the view hierarchy when the content insets for a window have changed, to allow it to adjust its content to fit within those windows."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "getBottomFadingEdgeStrength()",
      "desc": "Returns the strength, or intensity, of the bottom faded edge."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBottomPaddingOffset()",
      "desc": "Amount by which to extend the bottom fading region."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "ContextMenu.ContextMenuInfo",
      "code": "getContextMenuInfo()",
      "desc": "Views should implement this if they have extra information to associate with the context menu.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHorizontalScrollbarHeight()",
      "desc": "Returns the height of the horizontal scrollbar."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLeftFadingEdgeStrength()",
      "desc": "Returns the strength, or intensity, of the left faded edge."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLeftPaddingOffset()",
      "desc": "Amount by which to extend the left fading region."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "getRightFadingEdgeStrength()",
      "desc": "Returns the strength, or intensity, of the right faded edge."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRightPaddingOffset()",
      "desc": "Amount by which to extend the right fading region."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSuggestedMinimumHeight()",
      "desc": "Returns the suggested minimum height that the view should use."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSuggestedMinimumWidth()",
      "desc": "Returns the suggested minimum width that the view should use."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "getTopFadingEdgeStrength()",
      "desc": "Returns the strength, or intensity, of the top faded edge."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTopPaddingOffset()",
      "desc": "Amount by which to extend the top fading region."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWindowAttachCount()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPaddingOffsetRequired()",
      "desc": "If the View draws content inside its padding and enables fading edges, it needs to support padding offsets."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "mergeDrawableStates(baseState: IntArray!, additionalState: IntArray!)",
      "desc": "Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onAnimationEnd()",
      "desc": "Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onAnimationStart()",
      "desc": "Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onAttachedToWindow()",
      "desc": "This is called when the view is attached to a window."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onConfigurationChanged(newConfig: Configuration!)",
      "desc": "Called when the current configuration of the resources being used by the application have changed."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onCreateContextMenu(menu: ContextMenu!)",
      "desc": "Views should implement this if the view itself is going to add items to the context menu."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "onCreateDrawableState(extraSpace: Int)",
      "desc": "Generate the new android.graphics.drawable.Drawable state for this view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onDetachedFromWindow()",
      "desc": "This is called when the view is detached from a window."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onDisplayHint(hint: Int)",
      "desc": "Gives this view a hint about whether is displayed or not."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onDraw(canvas: Canvas!)",
      "desc": "Implement this to do your drawing."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Unit",
      "code": "onDrawScrollBars(canvas: Canvas!)",
      "desc": "Request the drawing of the horizontal and the vertical scrollbar."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onFinishInflate()",
      "desc": "Finalize inflating a view from XML."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onFocusChanged(gainFocus: Boolean, direction: Int, previouslyFocusedRect: Rect?)",
      "desc": "Called by the view system when the focus state of this view changes."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Called from layout when this view should assign a size and position to each of its children."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int)",
      "desc": "Measure the view and its content to determine the measured width and the measured height."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onOverScrolled(scrollX: Int, scrollY: Int, clampedX: Boolean, clampedY: Boolean)",
      "desc": "Called by overScrollBy(int,int,int,int,int,int,int,int,boolean) to respond to the results of an over-scroll operation."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onRestoreInstanceState(state: Parcelable!)",
      "desc": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Parcelable",
      "code": "onSaveInstanceState()",
      "desc": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onScrollChanged(l: Int, t: Int, oldl: Int, oldt: Int)",
      "desc": "This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents)."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onSetAlpha(alpha: Int)",
      "desc": "Invoked if there is a Transform that involves alpha."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int)",
      "desc": "This is called during layout when the size of this view has changed."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onVisibilityChanged(changedView: View, visibility: Int)",
      "desc": "Called when the visibility of the view or an ancestor of the view has changed."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onWindowVisibilityChanged(visibility: Int)",
      "desc": "Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE)."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "overScrollBy(deltaX: Int, deltaY: Int, scrollX: Int, scrollY: Int, scrollRangeX: Int, scrollRangeY: Int, maxOverScrollX: Int, maxOverScrollY: Int, isTouchEvent: Boolean)",
      "desc": "Scroll the view with standard behavior for scrolling beyond the normal content boundaries."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Unit",
      "code": "setMeasuredDimension(measuredWidth: Int, measuredHeight: Int)",
      "desc": "This method must be called by onMeasure(int,int) to store the measured width and measured height."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "verifyDrawable(who: Drawable)",
      "desc": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "AccessibilityDelegate",
      "desc": "This class represents a delegate that can be registered in a View to enhance accessibility support via composition rather via inheritance."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "BaseSavedState",
      "desc": "Base class for derived classes that want to save and restore their own state in android.view.View#onSaveInstanceState()."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "DragShadowBuilder",
      "desc": "Creates an image that the system displays during the drag and drop operation."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "MeasureSpec",
      "desc": "A MeasureSpec encapsulates the layout requirements passed from parent to child."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnApplyWindowInsetsListener",
      "desc": "Listener for applying window insets on a view in a custom way."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnAttachStateChangeListener",
      "desc": "Interface definition for a callback to be invoked when this view is attached or detached from its window."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnCapturedPointerListener",
      "desc": "Interface definition for a callback to be invoked when a captured pointer event is being dispatched this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnClickListener",
      "desc": "Interface definition for a callback to be invoked when a view is clicked."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnContextClickListener",
      "desc": "Interface definition for a callback to be invoked when a view is context clicked."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnCreateContextMenuListener",
      "desc": "Interface definition for a callback to be invoked when the context menu for this view is being built."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDragListener",
      "desc": "Interface definition for a callback to be invoked when a drag is being dispatched to this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnFocusChangeListener",
      "desc": "Interface definition for a callback to be invoked when the focus state of a view changed."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnGenericMotionListener",
      "desc": "Interface definition for a callback to be invoked when a generic motion event is dispatched to this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnHoverListener",
      "desc": "Interface definition for a callback to be invoked when a hover event is dispatched to this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnKeyListener",
      "desc": "Interface definition for a callback to be invoked when a hardware key event is dispatched to this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnLayoutChangeListener",
      "desc": "Interface definition for a callback to be invoked when the layout bounds of a view changes due to layout processing."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnLongClickListener",
      "desc": "Interface definition for a callback to be invoked when a view has been clicked and held."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnScrollChangeListener",
      "desc": "Interface definition for a callback to be invoked when the scroll X or Y positions of a view change."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnSystemUiVisibilityChangeListener",
      "desc": "Interface definition for a callback to be invoked when the status bar changes visibility."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnTouchListener",
      "desc": "Interface definition for a callback to be invoked when a touch event is dispatched to this view."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnUnhandledKeyEventListener",
      "desc": "Interface definition for a callback to be invoked when a hardware key event hasn't been handled by the view hierarchy."
    }
  ]
}