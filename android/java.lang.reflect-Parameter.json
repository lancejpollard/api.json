{
  "path": "java.lang.reflect",
  "name": "Parameter",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares based on the executable and the index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "getAnnotation(annotationClass: Class<T>)",
      "desc": "Returns this element's annotation for the specified type if such an annotation is present, else null.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getAnnotations()",
      "desc": "Returns annotations that are present on this element.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getAnnotationsByType(annotationClass: Class<T>)",
      "desc": "Returns annotations that are associated with this element.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "getDeclaredAnnotation(annotationClass: Class<T>)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getDeclaredAnnotations()",
      "desc": "Returns annotations that are directly present on this element.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getDeclaredAnnotationsByType(annotationClass: Class<T>)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Executable",
      "code": "getDeclaringExecutable()",
      "desc": "Return the Executable which declares this parameter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getModifiers()",
      "desc": "Get the modifier flags for this the parameter represented by this Parameter object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns the name of the parameter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Type",
      "code": "getParameterizedType()",
      "desc": "Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Class",
      "code": "getType()",
      "desc": "Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code based on the executable's hash code and the index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isImplicit()",
      "desc": "Returns true if this parameter is implicitly declared in source code; returns false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isNamePresent()",
      "desc": "Returns true if the parameter has a name; returns false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSynthetic()",
      "desc": "Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isVarArgs()",
      "desc": "Returns true if this parameter represents a variable argument list; returns false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string describing this parameter."
    },
    {
      "type": "inherited-methods",
      "from": "AnnotatedElement"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isAnnotationPresent(annotationClass: Class<out Annotation!>)"
    },
    {
      "type": "inherited-methods",
      "from": "getAnnotation(annotationClass) != null"
    }
  ]
}