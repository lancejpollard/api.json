{
  "path": "android.view",
  "name": "GestureDetector",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(listener: GestureDetector.OnGestureListener!, handler: Handler!)\n            Creates a GestureDetector with the supplied listener."
    },
    {
      "type": "ctor",
      "ctor": "<init>(listener: GestureDetector.OnGestureListener!)\n            Creates a GestureDetector with the supplied listener."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, listener: GestureDetector.OnGestureListener!)\n            Creates a GestureDetector with the supplied listener."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, listener: GestureDetector.OnGestureListener!, handler: Handler!)\n            Creates a GestureDetector with the supplied listener that runs deferred events on the thread associated with the supplied android.os.Handler."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, listener: GestureDetector.OnGestureListener!, handler: Handler!, unused: Boolean)\n            Creates a GestureDetector with the supplied listener that runs deferred events on the thread associated with the supplied android.os.Handler."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLongpressEnabled()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onGenericMotionEvent(ev: MotionEvent!)",
      "desc": "Analyzes the given generic motion event and if applicable triggers the appropriate callbacks on the OnGestureListener supplied."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onTouchEvent(ev: MotionEvent!)",
      "desc": "Analyzes the given motion event and if applicable triggers the appropriate callbacks on the OnGestureListener supplied."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContextClickListener(onContextClickListener: GestureDetector.OnContextClickListener!)",
      "desc": "Sets the listener which will be called for context clicks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIsLongpressEnabled(isLongpressEnabled: Boolean)",
      "desc": "Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDoubleTapListener(onDoubleTapListener: GestureDetector.OnDoubleTapListener!)",
      "desc": "Sets the listener which will be called for double-tap and related gestures."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnContextClickListener",
      "desc": "The listener that is used to notify when a context click occurs."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDoubleTapListener",
      "desc": "The listener that is used to notify when a double-tap or a confirmed single-tap occur."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnGestureListener",
      "desc": "The listener that is used to notify when gestures occur."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "SimpleOnGestureListener",
      "desc": "A convenience class to extend when you only want to listen for a subset of all the gestures."
    }
  ]
}