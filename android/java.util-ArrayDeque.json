{
  "path": "java.util",
  "name": "ArrayDeque",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs an empty array deque with an initial capacity sufficient to hold 16 elements."
    },
    {
      "type": "ctor",
      "ctor": "<init>(numElements: Int)\n            Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements."
    },
    {
      "type": "ctor",
      "ctor": "<init>(c: MutableCollection<out E>)\n            Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "add(element: E)",
      "desc": "Inserts the specified element at the end of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addFirst(e: E)",
      "desc": "Inserts the specified element at the front of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addLast(e: E)",
      "desc": "Inserts the specified element at the end of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Removes all of the elements from this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ArrayDeque",
      "code": "clone()",
      "desc": "Returns a copy of this deque.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(element: E?)",
      "desc": "Returns true if this deque contains the specified element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableIterator",
      "code": "descendingIterator()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "element()",
      "desc": "Retrieves, but does not remove, the head of the queue represented by this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "getFirst()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "getLast()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Returns true if this deque contains no elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableIterator",
      "code": "iterator()",
      "desc": "Returns an iterator over the elements in this deque.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "offer(e: E)",
      "desc": "Inserts the specified element at the end of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "offerFirst(e: E)",
      "desc": "Inserts the specified element at the front of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "offerLast(e: E)",
      "desc": "Inserts the specified element at the end of this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "peek()",
      "desc": "Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "peekFirst()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "peekLast()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "poll()",
      "desc": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "pollFirst()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "pollLast()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "pop()",
      "desc": "Pops an element from the stack represented by this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "push(e: E)",
      "desc": "Pushes an element onto the stack represented by this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "remove()",
      "desc": "Retrieves and removes the head of the queue represented by this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(element: E?)",
      "desc": "Removes a single instance of the specified element from this deque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "removeFirst()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeFirstOccurrence(o: Any?)",
      "desc": "Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "removeLast()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeLastOccurrence(o: Any?)",
      "desc": "Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator",
      "code": "spliterator()",
      "desc": "Creates a late-binding and fail-fast Spliterator over the elements in this deque.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "toArray()",
      "desc": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element).",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "toArray(a: Array<T>)",
      "desc": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
      "symbol": "<"
    },
    {
      "type": "inherited-methods",
      "from": "AbstractCollection"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "addAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "removeAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "retainAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    },
    {
      "type": "inherited-methods",
      "from": "String#valueOf(Object)"
    }
  ]
}