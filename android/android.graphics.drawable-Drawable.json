{
  "path": "android.graphics.drawable",
  "name": "Drawable",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyTheme(t: Resources.Theme)",
      "desc": "Applies the specified theme to this Drawable and its children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canApplyTheme()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearColorFilter()",
      "desc": "Removes the color filter for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "copyBounds(bounds: Rect)",
      "desc": "Return a copy of the drawable's bounds in the specified Rect (allocated by the caller)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Rect",
      "code": "copyBounds()",
      "desc": "Return a copy of the drawable's bounds in a new Rect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromPath(pathName: String!)",
      "desc": "Create a drawable from file path name.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromResourceStream(res: Resources!, value: TypedValue!, is: InputStream!, srcName: String!)",
      "desc": "Create a drawable from an inputstream, using the given resources and value to determine density information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromResourceStream(res: Resources?, value: TypedValue?, is: InputStream?, srcName: String?, opts: BitmapFactory.Options?)",
      "desc": "Create a drawable from an inputstream, using the given resources and value to determine density information.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromStream(is: InputStream!, srcName: String!)",
      "desc": "Create a drawable from an inputstream",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromXml(r: Resources, parser: XmlPullParser)",
      "desc": "Create a drawable from an XML document."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromXml(r: Resources, parser: XmlPullParser, theme: Resources.Theme?)",
      "desc": "Create a drawable from an XML document using an optional Theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet)",
      "desc": "Create from inside an XML document."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)",
      "desc": "Create a drawable from inside an XML document using an optional Theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "draw(canvas: Canvas)",
      "desc": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAlpha()",
      "desc": "Gets the current alpha value for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Rect",
      "code": "getBounds()",
      "desc": "Return the drawable's bounds Rect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable.Callback",
      "code": "getCallback()",
      "desc": "Return the current Callback implementation attached to this Drawable.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getChangingConfigurations()",
      "desc": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorFilter",
      "code": "getColorFilter()",
      "desc": "Returns the current color filter, or null if none set.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable.ConstantState",
      "code": "getConstantState()",
      "desc": "Return a ConstantState instance that holds the shared state of this Drawable.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getCurrent()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Rect",
      "code": "getDirtyBounds()",
      "desc": "Return the drawable's dirty bounds Rect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getHotspotBounds(outRect: Rect)",
      "desc": "Populates outRect with the hotspot bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicHeight()",
      "desc": "Returns the drawable's intrinsic height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicWidth()",
      "desc": "Returns the drawable's intrinsic width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLayoutDirection()",
      "desc": "Returns the resolved layout direction for this Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLevel()",
      "desc": "Retrieve the current level."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumHeight()",
      "desc": "Returns the minimum height suggested by this Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumWidth()",
      "desc": "Returns the minimum width suggested by this Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getOpacity()",
      "desc": "Return the opacity/transparency of this Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Insets",
      "code": "getOpticalInsets()",
      "desc": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getOutline(outline: Outline)",
      "desc": "Called to get the drawable to populate the Outline that defines its drawing area."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getPadding(padding: Rect)",
      "desc": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "getState()",
      "desc": "Describes the current state, as a union of primitve states, such as android.R.attr#state_focused, android.R.attr#state_selected, etc."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Region",
      "code": "getTransparentRegion()",
      "desc": "Returns a Region representing the part of the Drawable that is completely transparent.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet)",
      "desc": "Inflate this Drawable from an XML resource."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)",
      "desc": "Inflate this Drawable from an XML resource optionally styled by a theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "invalidateSelf()",
      "desc": "Use the current Callback implementation to have this Drawable redrawn."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAutoMirrored()",
      "desc": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFilterBitmap()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isProjected()",
      "desc": "Whether this drawable requests projection."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStateful()",
      "desc": "Indicates whether this drawable will change its appearance based on state."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isVisible()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "jumpToCurrentState()",
      "desc": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "mutate()",
      "desc": "Make this drawable mutable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onLayoutDirectionChanged(layoutDirection: Int)",
      "desc": "Called when the drawable's resolved layout direction changes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "resolveOpacity(op1: Int, op2: Int)",
      "desc": "Return the appropriate opacity value for two source opacities."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scheduleSelf(what: Runnable, when: Long)",
      "desc": "Use the current Callback implementation to have this Drawable scheduled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAlpha(alpha: Int)",
      "desc": "Specify an alpha value for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAutoMirrored(mirrored: Boolean)",
      "desc": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBounds(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Specify a bounding rectangle for the Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBounds(bounds: Rect)",
      "desc": "Specify a bounding rectangle for the Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCallback(cb: Drawable.Callback?)",
      "desc": "Bind a Callback object to this Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setChangingConfigurations(configs: Int)",
      "desc": "Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setColorFilter(colorFilter: ColorFilter?)",
      "desc": "Specify an optional color filter for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColorFilter(color: Int, mode: PorterDuff.Mode)",
      "desc": "Specify a color and Porter-Duff mode to be the color filter for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDither(dither: Boolean)",
      "desc": "Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilterBitmap(filter: Boolean)",
      "desc": "Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHotspot(x: Float, y: Float)",
      "desc": "Specifies the hotspot's location within the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHotspotBounds(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setLayoutDirection(layoutDirection: Int)",
      "desc": "Set the layout direction for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setLevel(level: Int)",
      "desc": "Specify the level for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setState(stateSet: IntArray)",
      "desc": "Specify a set of states for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTint(tintColor: Int)",
      "desc": "Specifies tint color for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintBlendMode(blendMode: BlendMode?)",
      "desc": "Specifies a tint blending mode for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintList(tint: ColorStateList?)",
      "desc": "Specifies tint color for this drawable as a color state list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintMode(tintMode: PorterDuff.Mode?)",
      "desc": "Specifies a tint blending mode for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setVisible(visible: Boolean, restart: Boolean)",
      "desc": "Set whether this Drawable is visible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unscheduleSelf(what: Runnable)",
      "desc": "Use the current Callback implementation to have this Drawable unscheduled."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onBoundsChange(bounds: Rect!)",
      "desc": "Override this in your subclass to change appearance if you vary based on the bounds."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onLevelChange(level: Int)",
      "desc": "Override this in your subclass to change appearance if you vary based on level."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onStateChange(state: IntArray!)",
      "desc": "Override this in your subclass to change appearance if you recognize the specified state."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Callback",
      "desc": "Implement this interface if you want to create an animated drawable that extends Drawable."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ConstantState",
      "desc": "This abstract class is used by Drawables to store shared constant state and data between Drawables."
    }
  ]
}