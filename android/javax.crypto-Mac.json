{
  "path": "javax.crypto",
  "name": "Mac",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Returns a clone if the provider implementation is cloneable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "doFinal()",
      "desc": "Finishes the MAC operation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "doFinal(output: ByteArray!, outOffset: Int)",
      "desc": "Finishes the MAC operation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "doFinal(input: ByteArray!)",
      "desc": "Processes the given array of bytes and finishes the MAC operation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getAlgorithm()",
      "desc": "Returns the algorithm name of this Mac object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Mac",
      "code": "getInstance(algorithm: String!)",
      "desc": "Returns a Mac object that implements the specified MAC algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Mac",
      "code": "getInstance(algorithm: String!, provider: String!)",
      "desc": "Returns a Mac object that implements the specified MAC algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Mac",
      "code": "getInstance(algorithm: String!, provider: Provider!)",
      "desc": "Returns a Mac object that implements the specified MAC algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMacLength()",
      "desc": "Returns the length of the MAC in bytes."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Provider",
      "code": "getProvider()",
      "desc": "Returns the provider of this Mac object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(key: Key!)",
      "desc": "Initializes this Mac object with the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(key: Key!, params: AlgorithmParameterSpec!)",
      "desc": "Initializes this Mac object with the given key and algorithm parameters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Resets this Mac object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "update(input: Byte)",
      "desc": "Processes the given byte."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "update(input: ByteArray!)",
      "desc": "Processes the given array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "update(input: ByteArray!, offset: Int, len: Int)",
      "desc": "Processes the first len bytes in input, starting at offset inclusive."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "update(input: ByteBuffer!)",
      "desc": "Processes input.remaining() bytes in the ByteBuffer input, starting at input.position()."
    }
  ]
}