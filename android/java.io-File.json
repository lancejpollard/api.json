{
  "path": "java.io",
  "name": "File",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(pathname: String)\n            Creates a new File instance by converting the given pathname string into an abstract pathname."
    },
    {
      "type": "ctor",
      "ctor": "<init>(parent: String?, child: String)\n            Creates a new File instance from a parent pathname string and a child pathname string."
    },
    {
      "type": "ctor",
      "ctor": "<init>(parent: File?, child: String)\n            Creates a new File instance from a parent abstract pathname and a child pathname string."
    },
    {
      "type": "ctor",
      "ctor": "<init>(uri: URI)\n            Creates a new File instance by converting the given  URI into an abstract pathname."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canExecute()",
      "desc": "Tests whether the application can execute the file denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canRead()",
      "desc": "Tests whether the application can read the file denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canWrite()",
      "desc": "Tests whether the application can modify the file denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compareTo(other: File)",
      "desc": "Compares two abstract pathnames lexicographically."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "createNewFile()",
      "desc": "Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "File",
      "code": "createTempFile(prefix: String, suffix: String?, directory: File?)",
      "desc": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "File",
      "code": "createTempFile(prefix: String, suffix: String?)",
      "desc": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "delete()",
      "desc": "Deletes the file or directory denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "deleteOnExit()",
      "desc": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Tests this abstract pathname for equality with the given object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "exists()",
      "desc": "Tests whether the file or directory denoted by this abstract pathname exists."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "File",
      "code": "getAbsoluteFile()",
      "desc": "Returns the absolute form of this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getAbsolutePath()",
      "desc": "Returns the absolute path of this file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "File",
      "code": "getCanonicalFile()",
      "desc": "Returns the canonical form of this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getCanonicalPath()",
      "desc": "Returns the canonical pathname string of this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getFreeSpace()",
      "desc": "Returns the number of unallocated bytes in the partition named by this abstract path name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns the name of the file or directory denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getParent()",
      "desc": "Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "File",
      "code": "getParentFile()",
      "desc": "Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPath()",
      "desc": "Converts this abstract pathname into a pathname string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTotalSpace()",
      "desc": "Returns the size of the partition named by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getUsableSpace()",
      "desc": "Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Computes a hash code for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAbsolute()",
      "desc": "Tests whether this abstract pathname is absolute."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDirectory()",
      "desc": "Tests whether the file denoted by this abstract pathname is a directory."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFile()",
      "desc": "Tests whether the file denoted by this abstract pathname is a normal file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHidden()",
      "desc": "Tests whether the file named by this abstract pathname is a hidden file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "lastModified()",
      "desc": "Returns the time that the file denoted by this abstract pathname was last modified."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "length()",
      "desc": "Returns the length of the file denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "list()",
      "desc": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "list(filter: FilenameFilter?)",
      "desc": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "listFiles()",
      "desc": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "listFiles(filter: FilenameFilter?)",
      "desc": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "listFiles(filter: FileFilter?)",
      "desc": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "listRoots()",
      "desc": "Returns the file system roots.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "mkdir()",
      "desc": "Creates the directory named by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "mkdirs()",
      "desc": "Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "renameTo(dest: File)",
      "desc": "Renames the file denoted by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setExecutable(executable: Boolean, ownerOnly: Boolean)",
      "desc": "Sets the owner's or everybody's execute permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setExecutable(executable: Boolean)",
      "desc": "A convenience method to set the owner's execute permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setLastModified(time: Long)",
      "desc": "Sets the last-modified time of the file or directory named by this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setReadOnly()",
      "desc": "Marks the file or directory named by this abstract pathname so that only read operations are allowed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setReadable(readable: Boolean, ownerOnly: Boolean)",
      "desc": "Sets the owner's or everybody's read permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setReadable(readable: Boolean)",
      "desc": "A convenience method to set the owner's read permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setWritable(writable: Boolean, ownerOnly: Boolean)",
      "desc": "Sets the owner's or everybody's write permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setWritable(writable: Boolean)",
      "desc": "A convenience method to set the owner's write permission for this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Path",
      "code": "toPath()",
      "desc": "Returns a Path object constructed from the this abstract path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the pathname string of this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "URI",
      "code": "toURI()",
      "desc": "Constructs a  URI that represents this abstract pathname."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "URL",
      "code": "toURL()",
      "desc": "Converts this abstract pathname into a file: URL."
    }
  ]
}