{
  "path": "java.util",
  "name": "Hashtable",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int, loadFactor: Float)\n            Constructs a new, empty hashtable with the specified initial capacity and the specified load factor."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int)\n            Constructs a new, empty hashtable with the specified initial capacity and default load factor (0.75)."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(t: MutableMap<out K, out V>!)\n            Constructs a new hashtable with the same mappings as the given Map."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Clears this hashtable so that it contains no keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Creates a shallow copy of this hashtable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "compute(key: K, remappingFunction: BiFunction<in K, in V?, out V?>)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "computeIfAbsent(key: K, mappingFunction: Function<in K, out V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "computeIfPresent(key: K, remappingFunction: BiFunction<in K, in V, out V?>)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(value: Any!)",
      "desc": "Tests if some key maps into the specified value in this hashtable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsKey(key: K)",
      "desc": "Tests if the specified object is a key in this hashtable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsValue(value: V)",
      "desc": "Returns true if this hashtable maps one or more keys to this value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "elements()",
      "desc": "Returns an enumeration of the values in this hashtable.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares the specified Object with this Map for equality, as per the definition in the Map interface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(action: BiConsumer<in K, in V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "get(key: K)",
      "desc": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "getOrDefault(key: K, defaultValue: V)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns the hash code value for this Map as per the definition in the Map interface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Tests if this hashtable maps no keys to values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "keys()",
      "desc": "Returns an enumeration of the keys in this hashtable.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "merge(key: K, value: V, remappingFunction: BiFunction<in V, in V, out V?>)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "put(key: K, value: V)",
      "desc": "Maps the specified key to the specified value in this hashtable.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "putAll(from: Map<out K, V>)",
      "desc": "Copies all of the mappings from the specified map to this hashtable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "putIfAbsent(key: K, value: V)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "remove(key: K)",
      "desc": "Removes the key (and its corresponding value) from this hashtable.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(key: K, value: V)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "replace(key: K, oldValue: V, newValue: V)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "replace(key: K, value: V)",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "replaceAll(function: BiFunction<in K, in V, out V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters \", \" (comma and space)."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "rehash()",
      "desc": "Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently."
    }
  ]
}