{
  "path": "java.util.concurrent",
  "name": "CountDownLatch",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(count: Int)\n            Constructs a CountDownLatch initialized with the given count."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "await()",
      "desc": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "await(timeout: Long, unit: TimeUnit!)",
      "desc": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt, or the specified waiting time elapses."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "countDown()",
      "desc": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getCount()",
      "desc": "Returns the current count."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this latch, as well as its state."
    }
  ]
}