{
  "path": "android.graphics.drawable",
  "name": "BitmapDrawable",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create an empty drawable, not dealing with density."
    },
    {
      "type": "ctor",
      "ctor": "<init>(res: Resources!)\n            Create an empty drawable, setting initial target density based on the display metrics of the resources."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bitmap: Bitmap!)\n            Create drawable from a bitmap, not dealing with density."
    },
    {
      "type": "ctor",
      "ctor": "<init>(res: Resources!, bitmap: Bitmap!)\n            Create drawable from a bitmap, setting initial target density based on the display metrics of the resources."
    },
    {
      "type": "ctor",
      "ctor": "<init>(filepath: String!)\n            Create a drawable by opening a given file path and decoding the bitmap."
    },
    {
      "type": "ctor",
      "ctor": "<init>(res: Resources!, filepath: String!)\n            Create a drawable by opening a given file path and decoding the bitmap."
    },
    {
      "type": "ctor",
      "ctor": "<init>(is: InputStream!)\n            Create a drawable by decoding a bitmap from the given input stream."
    },
    {
      "type": "ctor",
      "ctor": "<init>(res: Resources!, is: InputStream!)\n            Create a drawable by decoding a bitmap from the given input stream."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyTheme(t: Resources.Theme)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canApplyTheme()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(canvas: Canvas)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAlpha()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap",
      "code": "getBitmap()",
      "desc": "Returns the bitmap used by this drawable to render.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getChangingConfigurations()",
      "desc": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorFilter",
      "code": "getColorFilter()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Drawable.ConstantState",
      "code": "getConstantState()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGravity()",
      "desc": "Get the gravity used to position/stretch the bitmap within its bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOpacity()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Insets",
      "code": "getOpticalInsets()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getOutline(outline: Outline)",
      "desc": "Called to get the drawable to populate the Outline that defines its drawing area."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Paint",
      "code": "getPaint()",
      "desc": "Returns the paint used to render this drawable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Shader.TileMode",
      "code": "getTileModeX()",
      "desc": "Indicates the repeat behavior of this drawable on the X axis.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Shader.TileMode",
      "code": "getTileModeY()",
      "desc": "Indicates the repeat behavior of this drawable on the Y axis.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasAntiAlias()",
      "desc": "Indicates whether anti-aliasing is enabled for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasMipMap()",
      "desc": "Indicates whether the mipmap hint is enabled on this drawable's bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAutoMirrored()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFilterBitmap()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStateful()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "mutate()",
      "desc": "A mutable BitmapDrawable still shares its Bitmap with any other Drawable that comes from the same resource."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAlpha(alpha: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAntiAlias(aa: Boolean)",
      "desc": "Enables or disables anti-aliasing for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAutoMirrored(mirrored: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColorFilter(colorFilter: ColorFilter?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDither(dither: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilterBitmap(filter: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGravity(gravity: Int)",
      "desc": "Set the gravity used to position/stretch the bitmap within its bounds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMipMap(mipMap: Boolean)",
      "desc": "Enables or disables the mipmap hint for this drawable's bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTargetDensity(canvas: Canvas!)",
      "desc": "Set the density scale at which this drawable will be rendered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTargetDensity(metrics: DisplayMetrics!)",
      "desc": "Set the density scale at which this drawable will be rendered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTargetDensity(density: Int)",
      "desc": "Set the density at which this drawable will be rendered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTileModeX(mode: Shader.TileMode!)",
      "desc": "Sets the repeat behavior of this drawable on the X axis."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTileModeXY(xmode: Shader.TileMode!, ymode: Shader.TileMode!)",
      "desc": "Sets the repeat behavior of this drawable on both axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setTileModeY(mode: Shader.TileMode!)",
      "desc": "Sets the repeat behavior of this drawable on the Y axis."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintBlendMode(blendMode: BlendMode!)",
      "desc": "Specifies a tint blending mode for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintList(tint: ColorStateList?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onBoundsChange(bounds: Rect!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onStateChange(stateSet: IntArray!)",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clearColorFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "copyBounds(bounds: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "copyBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable?"
    },
    {
      "type": "inherited-methods",
      "from": "createFromPath(pathName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "createFromResourceStream(res: Resources!, value: TypedValue!, is: InputStream!, srcName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable?"
    },
    {
      "type": "inherited-methods",
      "from": "createFromResourceStream(res: Resources?, value: TypedValue?, is: InputStream?, srcName: String?, opts: BitmapFactory.Options?)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "createFromStream(is: InputStream!, srcName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXml(r: Resources, parser: XmlPullParser)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXml(r: Resources, parser: XmlPullParser, theme: Resources.Theme?)"
    },
    {
      "type": "inherited-methods",
      "from": "Theme"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)"
    },
    {
      "type": "inherited-methods",
      "from": "Theme"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "getBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable.Callback?"
    },
    {
      "type": "inherited-methods",
      "from": "getCallback()"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrent()"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "getDirtyBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "getHotspotBounds(outRect: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "outRect"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLayoutDirection()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLevel()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMinimumHeight()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMinimumWidth()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "getPadding(padding: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "IntArray"
    },
    {
      "type": "inherited-methods",
      "from": "getState()"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_focused"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_selected"
    },
    {
      "type": "inherited-methods",
      "from": "Region?"
    },
    {
      "type": "inherited-methods",
      "from": "getTransparentRegion()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf()"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isProjected()"
    },
    {
      "type": "inherited-methods",
      "from": "android.graphics.RenderNode"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isVisible()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "jumpToCurrentState()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "onLayoutDirectionChanged(layoutDirection: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "onLevelChange(level: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "resolveOpacity(op1: Int, op2: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "getOpacity"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "scheduleSelf(what: Runnable, when: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setBounds(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setBounds(bounds: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setCallback(cb: Drawable.Callback?)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setChangingConfigurations(configs: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(color: Int, mode: PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "PorterDuffColorFilter"
    },
    {
      "type": "inherited-methods",
      "from": "tint"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setHotspot(x: Float, y: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setHotspotBounds(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setLayoutDirection(layoutDirection: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setLevel(level: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setState(stateSet: IntArray)"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_focused"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_pressed"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setTint(tintColor: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "setTintList(android.content.res.ColorStateList)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setTintMode(tintMode: PorterDuff.Mode?)"
    },
    {
      "type": "inherited-methods",
      "from": "PorterDuff.Mode#SRC_IN"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setVisible(visible: Boolean, restart: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "unscheduleSelf(what: Runnable)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    }
  ]
}