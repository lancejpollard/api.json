{
  "path": "android.graphics",
  "name": "ColorMatrix",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a new colormatrix initialized to identity (as if reset() had been called)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(src: FloatArray!)\n            Create a new colormatrix initialized with the specified array of values."
    },
    {
      "type": "ctor",
      "ctor": "<init>(src: ColorMatrix!)\n            Create a new colormatrix initialized with the specified colormatrix."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FloatArray",
      "code": "getArray()",
      "desc": "Return the array of floats representing this colormatrix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "postConcat(postmatrix: ColorMatrix!)",
      "desc": "Concat this colormatrix with the specified postmatrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "preConcat(prematrix: ColorMatrix!)",
      "desc": "Concat this colormatrix with the specified prematrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Set this colormatrix to identity:"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(src: ColorMatrix!)",
      "desc": "Assign the src colormatrix into this matrix, copying all of its values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(src: FloatArray!)",
      "desc": "Assign the array of floats into this matrix, copying all of its values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setConcat(matA: ColorMatrix!, matB: ColorMatrix!)",
      "desc": "Set this colormatrix to the concatenation of the two specified colormatrices, such that the resulting colormatrix has the same effect as applying matB and then applying matA."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRGB2YUV()",
      "desc": "Set the matrix to convert RGB to YUV"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotate(axis: Int, degrees: Float)",
      "desc": "Set the rotation on a color axis by the specified values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSaturation(sat: Float)",
      "desc": "Set the matrix to affect the saturation of colors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScale(rScale: Float, gScale: Float, bScale: Float, aScale: Float)",
      "desc": "Set this colormatrix to scale by the specified values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setYUV2RGB()",
      "desc": "Set the matrix to convert from YUV to RGB"
    }
  ]
}