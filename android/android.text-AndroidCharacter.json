{
  "path": "android.text",
  "name": "AndroidCharacter",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_AMBIGUOUS",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_FULL_WIDTH",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_HALF_WIDTH",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_NARROW",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_NEUTRAL",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "EAST_ASIAN_WIDTH_WIDE",
      "desc": ""
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getDirectionalities(src: CharArray!, dest: ByteArray!, count: Int)",
      "desc": "Fill in the first count bytes of dest with the directionalities from the first count chars of src."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEastAsianWidth(input: Char)",
      "desc": "Calculate the East Asian Width of a character according to Unicode TR#11."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getEastAsianWidths(src: CharArray!, start: Int, count: Int, dest: ByteArray!)",
      "desc": "Fill the first count bytes of dest with the East Asian Width from count chars of src starting at start."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMirror(ch: Char)",
      "desc": "Return the right-to-left mirror (or the original char if none) of the specified char."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "mirror(text: CharArray!, start: Int, count: Int)",
      "desc": "Replace the specified slice of text with the chars' right-to-left mirrors (if any), returning true if any replacements were made."
    }
  ]
}