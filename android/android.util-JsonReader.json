{
  "path": "android.util",
  "name": "JsonReader",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(in: Reader!)\n            Creates a new instance that reads a JSON-encoded stream from in."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "beginArray()",
      "desc": "Consumes the next token from the JSON stream and asserts that it is the beginning of a new array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "beginObject()",
      "desc": "Consumes the next token from the JSON stream and asserts that it is the beginning of a new object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this JSON reader and the underlying Reader."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "endArray()",
      "desc": "Consumes the next token from the JSON stream and asserts that it is the end of the current array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "endObject()",
      "desc": "Consumes the next token from the JSON stream and asserts that it is the end of the current object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNext()",
      "desc": "Returns true if the current array or object has another element."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isLenient()",
      "desc": "Returns true if this parser is liberal in what it accepts."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "nextBoolean()",
      "desc": "Returns the JsonToken#BOOLEAN value of the next token, consuming it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "nextDouble()",
      "desc": "Returns the JsonToken#NUMBER value of the next token, consuming it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "nextInt()",
      "desc": "Returns the JsonToken#NUMBER value of the next token, consuming it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "nextLong()",
      "desc": "Returns the JsonToken#NUMBER value of the next token, consuming it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "nextName()",
      "desc": "Returns the next token, a JsonToken#NAME, and consumes it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "nextNull()",
      "desc": "Consumes the next token from the JSON stream and asserts that it is a literal null."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "nextString()",
      "desc": "Returns the JsonToken#STRING value of the next token, consuming it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "JsonToken",
      "code": "peek()",
      "desc": "Returns the type of the next token without consuming it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setLenient(lenient: Boolean)",
      "desc": "Configure this parser to be be liberal in what it accepts."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "skipValue()",
      "desc": "Skips the next value recursively."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    }
  ]
}