{
  "path": "android.animation",
  "name": "ValueAnimator",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INFINITE",
      "desc": "This value used used with the setRepeatCount(int) property to repeat the animation indefinitely."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RESTART",
      "desc": "When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation restarts from the beginning."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "REVERSE",
      "desc": "When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation reverses direction on every iteration."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new ValueAnimator object."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addUpdateListener(listener: ValueAnimator.AnimatorUpdateListener!)",
      "desc": "Adds a listener to the set of listeners that are sent update events through the life of an animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "areAnimatorsEnabled()",
      "desc": "Returns whether animators are currently enabled, system-wide."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "cancel()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "clone()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "end()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getAnimatedFraction()",
      "desc": "Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getAnimatedValue()",
      "desc": "The most recent value calculated by this ValueAnimator when there is just one property being animated.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getAnimatedValue(propertyName: String!)",
      "desc": "The most recent value calculated by this ValueAnimator for propertyName.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getCurrentPlayTime()",
      "desc": "Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getDuration()",
      "desc": "Gets the length of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getFrameDelay()",
      "desc": "The amount of time, in milliseconds, between each frame of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TimeInterpolator",
      "code": "getInterpolator()",
      "desc": "Returns the timing interpolator that this ValueAnimator uses.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRepeatCount()",
      "desc": "Defines how many times the animation should repeat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRepeatMode()",
      "desc": "Defines what this animation should do when it reaches the end."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getStartDelay()",
      "desc": "The amount of time, in milliseconds, to delay starting the animation after start() is called."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTotalDuration()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getValues()",
      "desc": "Returns the values that this ValueAnimator animates between.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isRunning()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStarted()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "ofArgb(vararg values: Int)",
      "desc": "Constructs and returns a ValueAnimator that animates between color values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "ofFloat(vararg values: Float)",
      "desc": "Constructs and returns a ValueAnimator that animates between float values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "ofInt(vararg values: Int)",
      "desc": "Constructs and returns a ValueAnimator that animates between int values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "ofObject(evaluator: TypeEvaluator<Any!>!, vararg values: Any!)",
      "desc": "Constructs and returns a ValueAnimator that animates between Object values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "ofPropertyValuesHolder(vararg values: PropertyValuesHolder!)",
      "desc": "Constructs and returns a ValueAnimator that animates between the values specified in the PropertyValuesHolder objects.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "pause()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeAllUpdateListeners()",
      "desc": "Removes all listeners from the set listening to frame updates for this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeUpdateListener(listener: ValueAnimator.AnimatorUpdateListener!)",
      "desc": "Removes a listener from the set listening to frame updates for this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resume()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reverse()",
      "desc": "Plays the ValueAnimator in reverse."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrentFraction(fraction: Float)",
      "desc": "Sets the position of the animation to the specified fraction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrentPlayTime(playTime: Long)",
      "desc": "Sets the position of the animation to the specified point in time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ValueAnimator",
      "code": "setDuration(duration: Long)",
      "desc": "Sets the length of the animation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEvaluator(value: TypeEvaluator<Any!>!)",
      "desc": "The type evaluator to be used when calculating the animated values of this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFloatValues(vararg values: Float)",
      "desc": "Sets float values that will be animated between."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFrameDelay(frameDelay: Long)",
      "desc": "The amount of time, in milliseconds, between each frame of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIntValues(vararg values: Int)",
      "desc": "Sets int values that will be animated between."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInterpolator(value: TimeInterpolator!)",
      "desc": "The time interpolator used in calculating the elapsed fraction of this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setObjectValues(vararg values: Any!)",
      "desc": "Sets the values to animate between for this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRepeatCount(value: Int)",
      "desc": "Sets how many times the animation should be repeated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRepeatMode(value: Int)",
      "desc": "Defines what this animation should do when it reaches the end."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStartDelay(startDelay: Long)",
      "desc": "The amount of time, in milliseconds, to delay starting the animation after start() is called."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setValues(vararg values: PropertyValuesHolder!)",
      "desc": "Sets the values, per property, being animated between."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "start()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Animator"
    },
    {
      "type": "inherited-constants",
      "from": "Long"
    },
    {
      "type": "inherited-constants",
      "from": "DURATION_INFINITE"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "AnimatorUpdateListener",
      "desc": "Implementors of this interface can add themselves as update listeners to an ValueAnimator instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that ValueAnimator."
    },
    {
      "type": "inherited-methods",
      "from": "Animator"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "addListener(listener: Animator.AnimatorListener!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "addPauseListener(listener: Animator.AnimatorPauseListener!)"
    },
    {
      "type": "inherited-methods",
      "from": "ArrayList<Animator.AnimatorListener!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getListeners()"
    },
    {
      "type": "inherited-methods",
      "from": "android.animation.Animator.AnimatorListener"
    },
    {
      "type": "inherited-methods",
      "from": "Animator"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isPaused()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "removeAllListeners()"
    },
    {
      "type": "inherited-methods",
      "from": "listeners"
    },
    {
      "type": "inherited-methods",
      "from": "pauseListeners"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "removeListener(listener: Animator.AnimatorListener!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "removePauseListener(listener: Animator.AnimatorPauseListener!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setTarget(target: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "ValueAnimator"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setupEndValues()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setupStartValues()"
    }
  ]
}