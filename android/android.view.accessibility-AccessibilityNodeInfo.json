{
  "path": "android.view.accessibility",
  "name": "AccessibilityNodeInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_ACCESSIBILITY_FOCUS",
      "desc": "Action that gives accessibility focus to the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_COLUMN_INT",
      "desc": "Argument for specifying the collection column to make visible on screen."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN",
      "desc": "Argument for whether when moving at granularity to extend the selection or to move it otherwise."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_HTML_ELEMENT_STRING",
      "desc": "Argument for which HTML element to get moving to the next/previous HTML element."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT",
      "desc": "Argument for which movement granularity to be used when traversing the node text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_MOVE_WINDOW_X",
      "desc": "Argument for specifying the x coordinate to which to move a window."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_MOVE_WINDOW_Y",
      "desc": "Argument for specifying the y coordinate to which to move a window."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT",
      "desc": "Argument to represent the duration in milliseconds to press and hold a node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_PROGRESS_VALUE",
      "desc": "Argument for specifying the progress value to set."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_ROW_INT",
      "desc": "Argument for specifying the collection row to make visible on screen."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_SELECTION_END_INT",
      "desc": "Argument for specifying the selection end."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_SELECTION_START_INT",
      "desc": "Argument for specifying the selection start."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE",
      "desc": "Argument for specifying the text content to set."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_CLEAR_ACCESSIBILITY_FOCUS",
      "desc": "Action that clears accessibility focus of the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_CLEAR_FOCUS",
      "desc": "Action that clears input focus of the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_CLEAR_SELECTION",
      "desc": "Action that deselects the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_CLICK",
      "desc": "Action that clicks on the node info."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_COLLAPSE",
      "desc": "Action to collapse an expandable node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_COPY",
      "desc": "Action to copy the current selection to the clipboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_CUT",
      "desc": "Action to cut the current selection and place it to the clipboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_DISMISS",
      "desc": "Action to dismiss a dismissable node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_EXPAND",
      "desc": "Action to expand an expandable node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_FOCUS",
      "desc": "Action that gives input focus to the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_LONG_CLICK",
      "desc": "Action that long clicks on the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_NEXT_AT_MOVEMENT_GRANULARITY",
      "desc": "Action that requests to go to the next entity in this node's text at a given movement granularity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_NEXT_HTML_ELEMENT",
      "desc": "Action to move to the next HTML element of a given type."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_PASTE",
      "desc": "Action to paste the current clipboard content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY",
      "desc": "Action that requests to go to the previous entity in this node's text at a given movement granularity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_PREVIOUS_HTML_ELEMENT",
      "desc": "Action to move to the previous HTML element of a given type."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_SCROLL_BACKWARD",
      "desc": "Action to scroll the node content backward."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_SCROLL_FORWARD",
      "desc": "Action to scroll the node content forward."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_SELECT",
      "desc": "Action that selects the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_SET_SELECTION",
      "desc": "Action to set the selection."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACTION_SET_TEXT",
      "desc": "Action that sets the text of the node."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_DATA_RENDERING_INFO_KEY",
      "desc": "Key used to request extra data for the rendering information."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH",
      "desc": "Integer argument specifying the end index of the requested text location data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX",
      "desc": "Integer argument specifying the start index of the requested text location data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY",
      "desc": "Key used to request and locate extra data for text character location."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_ACCESSIBILITY",
      "desc": "The accessibility focus."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOCUS_INPUT",
      "desc": "The input focus."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOVEMENT_GRANULARITY_CHARACTER",
      "desc": "Movement granularity bit for traversing the text of a node by character."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOVEMENT_GRANULARITY_LINE",
      "desc": "Movement granularity bit for traversing the text of a node by line."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOVEMENT_GRANULARITY_PAGE",
      "desc": "Movement granularity bit for traversing the text of a node by page."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOVEMENT_GRANULARITY_PARAGRAPH",
      "desc": "Movement granularity bit for traversing the text of a node by paragraph."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MOVEMENT_GRANULARITY_WORD",
      "desc": "Movement granularity bit for traversing the text of a node by word."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new AccessibilityNodeInfo."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: View)\n            Creates a new AccessibilityNodeInfo with the given source."
    },
    {
      "type": "ctor",
      "ctor": "<init>(root: View, virtualDescendantId: Int)\n            Creates a new AccessibilityNodeInfo with the given source."
    },
    {
      "type": "ctor",
      "ctor": "<init>(info: AccessibilityNodeInfo)\n            Copy constructor."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addAction(action: AccessibilityNodeInfo.AccessibilityAction!)",
      "desc": "Adds an action that can be performed on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addAction(action: Int)",
      "desc": "Adds an action that can be performed on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addChild(child: View!)",
      "desc": "Adds a child."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addChild(root: View!, virtualDescendantId: Int)",
      "desc": "Adds a virtual child which is a descendant of the given root."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canOpenPopup()",
      "desc": "Gets if this node opens a popup or a dialog."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "findAccessibilityNodeInfosByText(text: String!)",
      "desc": "Finds AccessibilityNodeInfos by text.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "findAccessibilityNodeInfosByViewId(viewId: String!)",
      "desc": "Finds AccessibilityNodeInfos by the fully qualified view id's resource name where a fully qualified id is of the from \"package:id/id_resource_name\".",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "findFocus(focus: Int)",
      "desc": "Find the view that has the specified focus type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "focusSearch(direction: Int)",
      "desc": "Searches for the nearest view in the specified direction that can take the input focus.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getActionList()",
      "desc": "Gets the actions that can be performed on the node.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getActions()",
      "desc": "Gets the actions that can be performed on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getAvailableExtraData()",
      "desc": "Get the extra data available for this node.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getBoundsInParent(outBounds: Rect!)",
      "desc": "Gets the node bounds in the viewParent's coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getBoundsInScreen(outBounds: Rect!)",
      "desc": "Gets the node bounds in screen coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getChild(index: Int)",
      "desc": "Get the child at given index.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getChildCount()",
      "desc": "Gets the number of children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getClassName()",
      "desc": "Gets the class this node comes from.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo.CollectionInfo",
      "code": "getCollectionInfo()",
      "desc": "Gets the collection info if the node is a collection.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo.CollectionItemInfo",
      "code": "getCollectionItemInfo()",
      "desc": "Gets the collection item info if the node is a collection item.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getContentDescription()",
      "desc": "Gets the content description of this node.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDrawingOrder()",
      "desc": "Get the drawing order of the view corresponding it this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getError()",
      "desc": "Gets the error text of this node.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo.ExtraRenderingInfo",
      "code": "getExtraRenderingInfo()",
      "desc": "Gets the ExtraRenderingInfo if the node is meant to be refreshed with extra data to examine rendering related accessibility issues.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bundle",
      "code": "getExtras()",
      "desc": "Gets an optional bundle with extra data.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getHintText()",
      "desc": "Gets the hint text of this node.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getInputType()",
      "desc": "Gets the input type of the source as defined by InputType."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getLabelFor()",
      "desc": "Gets the node info for which the view represented by this info serves as a label for accessibility purposes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getLabeledBy()",
      "desc": "Gets the node info which serves as the label of the view represented by this info for accessibility purposes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLiveRegion()",
      "desc": "Gets the node's live region mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxTextLength()",
      "desc": "Returns the maximum text length for this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMovementGranularities()",
      "desc": "Gets the movement granularities for traversing the text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getPackageName()",
      "desc": "Gets the package this node comes from.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getPaneTitle()",
      "desc": "Get the title of the pane represented by this node.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getParent()",
      "desc": "Gets the parent.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo.RangeInfo",
      "code": "getRangeInfo()",
      "desc": "Gets the range info if this node is a range.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getStateDescription()",
      "desc": "Get the state description of this node.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getText()",
      "desc": "Gets the text of this node.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextSelectionEnd()",
      "desc": "Gets the text selection end if text is selected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextSelectionStart()",
      "desc": "Gets the text selection start or the cursor position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getTooltipText()",
      "desc": "Gets the tooltip text of this node.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo.TouchDelegateInfo",
      "code": "getTouchDelegateInfo()",
      "desc": "Get the TouchDelegateInfo for touch delegate behavior with the represented view.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getTraversalAfter()",
      "desc": "Gets the node after which this one is visited in accessibility traversal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "getTraversalBefore()",
      "desc": "Gets the node before which this one is visited during traversal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getViewIdResourceName()",
      "desc": "Gets the fully qualified resource name of the source view's id.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityWindowInfo",
      "code": "getWindow()",
      "desc": "Gets the window to which this node belongs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWindowId()",
      "desc": "Gets the id of the window from which the info comes from."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAccessibilityFocused()",
      "desc": "Gets whether this node is accessibility focused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isCheckable()",
      "desc": "Gets whether this node is checkable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isChecked()",
      "desc": "Gets whether this node is checked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClickable()",
      "desc": "Gets whether this node is clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isContentInvalid()",
      "desc": "Gets if the content of this node is invalid."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isContextClickable()",
      "desc": "Gets whether this node is context clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDismissable()",
      "desc": "Gets if the node can be dismissed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEditable()",
      "desc": "Gets if the node is editable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEnabled()",
      "desc": "Gets whether this node is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFocusable()",
      "desc": "Gets whether this node is focusable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFocused()",
      "desc": "Gets whether this node is focused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHeading()",
      "desc": "Returns whether node represents a heading."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isImportantForAccessibility()",
      "desc": "Returns whether the node originates from a view considered important for accessibility."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLongClickable()",
      "desc": "Gets whether this node is long clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isMultiLine()",
      "desc": "Gets if the node is a multi line editable text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPassword()",
      "desc": "Gets whether this node is a password."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScreenReaderFocusable()",
      "desc": "Returns whether the node is explicitly marked as a focusable unit by a screen reader."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScrollable()",
      "desc": "Gets if the node is scrollable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSelected()",
      "desc": "Gets whether this node is selected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isShowingHintText()",
      "desc": "Returns whether the node's text represents a hint for the user to enter text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTextEntryKey()",
      "desc": "Returns whether node represents a text entry key that is part of a keyboard or keypad."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVisibleToUser()",
      "desc": "Gets whether this node is visible to the user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "obtain(source: View!)",
      "desc": "Returns a cached instance if such is available otherwise a new one and sets the source.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "obtain(root: View!, virtualDescendantId: Int)",
      "desc": "Returns a cached instance if such is available otherwise a new one and sets the source.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "obtain()",
      "desc": "Returns a cached instance if such is available otherwise a new one.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "obtain(info: AccessibilityNodeInfo!)",
      "desc": "Returns a cached instance if such is available or a new one is create.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performAction(action: Int)",
      "desc": "Performs an action on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performAction(action: Int, arguments: Bundle!)",
      "desc": "Performs an action on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "recycle()",
      "desc": "Return an instance back to be reused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "refresh()",
      "desc": "Refreshes this info with the latest state of the view it represents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "refreshWithExtraData(extraDataKey: String!, args: Bundle!)",
      "desc": "Refreshes this info with the latest state of the view it represents, and request new data be added by the View."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeAction(action: Int)",
      "desc": "Removes an action that can be performed on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeAction(action: AccessibilityNodeInfo.AccessibilityAction!)",
      "desc": "Removes an action that can be performed on the node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeChild(child: View!)",
      "desc": "Removes a child."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeChild(root: View!, virtualDescendantId: Int)",
      "desc": "Removes a virtual child which is a descendant of the given root."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAccessibilityFocused(focused: Boolean)",
      "desc": "Sets whether this node is accessibility focused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAvailableExtraData(extraDataKeys: MutableList<String!>!)",
      "desc": "Set the extra data available for this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBoundsInParent(bounds: Rect!)",
      "desc": "Sets the node bounds in the viewParent's coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBoundsInScreen(bounds: Rect!)",
      "desc": "Sets the node bounds in screen coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCanOpenPopup(opensPopup: Boolean)",
      "desc": "Sets if this node opens a popup or a dialog."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCheckable(checkable: Boolean)",
      "desc": "Sets whether this node is checkable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setChecked(checked: Boolean)",
      "desc": "Sets whether this node is checked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClassName(className: CharSequence!)",
      "desc": "Sets the class this node comes from."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClickable(clickable: Boolean)",
      "desc": "Sets whether this node is clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCollectionInfo(collectionInfo: AccessibilityNodeInfo.CollectionInfo!)",
      "desc": "Sets the collection info if the node is a collection."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCollectionItemInfo(collectionItemInfo: AccessibilityNodeInfo.CollectionItemInfo!)",
      "desc": "Sets the collection item info if the node is a collection item."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentDescription(contentDescription: CharSequence!)",
      "desc": "Sets the content description of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentInvalid(contentInvalid: Boolean)",
      "desc": "Sets if the content of this node is invalid."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContextClickable(contextClickable: Boolean)",
      "desc": "Sets whether this node is context clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDismissable(dismissable: Boolean)",
      "desc": "Sets if the node can be dismissed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDrawingOrder(drawingOrderInParent: Int)",
      "desc": "Set the drawing order of the view corresponding it this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEditable(editable: Boolean)",
      "desc": "Sets whether this node is editable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEnabled(enabled: Boolean)",
      "desc": "Sets whether this node is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setError(error: CharSequence!)",
      "desc": "Sets the error text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusable(focusable: Boolean)",
      "desc": "Sets whether this node is focusable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocused(focused: Boolean)",
      "desc": "Sets whether this node is focused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHeading(isHeading: Boolean)",
      "desc": "Sets whether the node represents a heading."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHintText(hintText: CharSequence!)",
      "desc": "Sets the hint text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setImportantForAccessibility(important: Boolean)",
      "desc": "Sets whether the node is considered important for accessibility."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInputType(inputType: Int)",
      "desc": "Sets the input type of the source as defined by InputType."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLabelFor(labeled: View!)",
      "desc": "Sets the view for which the view represented by this info serves as a label for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLabelFor(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the view for which the view represented by this info serves as a label for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLabeledBy(label: View!)",
      "desc": "Sets the view which serves as the label of the view represented by this info for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLabeledBy(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the view which serves as the label of the view represented by this info for accessibility purposes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLiveRegion(mode: Int)",
      "desc": "Sets the node's live region mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLongClickable(longClickable: Boolean)",
      "desc": "Sets whether this node is long clickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaxTextLength(max: Int)",
      "desc": "Sets the maximum text length, or -1 for no limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMovementGranularities(granularities: Int)",
      "desc": "Sets the movement granularities for traversing the text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMultiLine(multiLine: Boolean)",
      "desc": "Sets if the node is a multi line editable text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPackageName(packageName: CharSequence!)",
      "desc": "Sets the package this node comes from."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPaneTitle(paneTitle: CharSequence?)",
      "desc": "If this node represents a visually distinct region of the screen that may update separately from the rest of the window, it is considered a pane."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParent(parent: View!)",
      "desc": "Sets the parent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParent(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the parent to be a virtual descendant of the given root."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPassword(password: Boolean)",
      "desc": "Sets whether this node is a password."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRangeInfo(rangeInfo: AccessibilityNodeInfo.RangeInfo!)",
      "desc": "Sets the range info if this node is a range."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScreenReaderFocusable(screenReaderFocusable: Boolean)",
      "desc": "Sets whether the node should be considered a focusable unit by a screen reader."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScrollable(scrollable: Boolean)",
      "desc": "Sets if the node is scrollable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSelected(selected: Boolean)",
      "desc": "Sets whether this node is selected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setShowingHintText(showingHintText: Boolean)",
      "desc": "Sets whether the node's text represents a hint for the user to enter text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSource(source: View!)",
      "desc": "Sets the source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSource(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the source to be a virtual descendant of the given root."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStateDescription(stateDescription: CharSequence?)",
      "desc": "Sets the state description of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setText(text: CharSequence!)",
      "desc": "Sets the text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextEntryKey(isTextEntryKey: Boolean)",
      "desc": "Sets whether the node represents a text entry key that is part of a keyboard or keypad."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextSelection(start: Int, end: Int)",
      "desc": "Sets the text selection start and end."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTooltipText(tooltipText: CharSequence?)",
      "desc": "Sets the tooltip text of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTouchDelegateInfo(delegatedInfo: AccessibilityNodeInfo.TouchDelegateInfo)",
      "desc": "Set touch delegate info if the represented view has a TouchDelegate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTraversalAfter(view: View!)",
      "desc": "Sets the view whose node is visited after this one in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTraversalAfter(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the node after which this one is visited in accessibility traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTraversalBefore(view: View!)",
      "desc": "Sets the view before whose node this one should be visited during traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTraversalBefore(root: View!, virtualDescendantId: Int)",
      "desc": "Sets the node before which this one is visited during traversal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setViewIdResourceName(viewIdResName: String!)",
      "desc": "Sets the fully qualified resource name of the source view's id."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVisibleToUser(visibleToUser: Boolean)",
      "desc": "Sets whether this node is visible to the user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flags: Int)",
      "desc": "Flatten this object in to a Parcel."
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "AccessibilityAction",
      "desc": "A class defining an action that can be performed on an AccessibilityNodeInfo."
    },
    {
      "type": "nested-classes",
      "code": "CollectionInfo",
      "desc": "Class with information if a node is a collection."
    },
    {
      "type": "nested-classes",
      "code": "CollectionItemInfo",
      "desc": "Class with information if a node is a collection item."
    },
    {
      "type": "nested-classes",
      "code": "ExtraRenderingInfo",
      "desc": "Class with information of a view useful to evaluate accessibility needs."
    },
    {
      "type": "nested-classes",
      "code": "RangeInfo",
      "desc": "Class with information if a node is a range."
    },
    {
      "type": "nested-classes",
      "code": "TouchDelegateInfo",
      "desc": "Class with information of touch delegated views and regions from TouchDelegate for the AccessibilityNodeInfo."
    }
  ]
}