{
  "path": "java.lang",
  "name": "Character",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BYTES",
      "desc": "The number of bytes used to represent a char value in unsigned binary form."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "COMBINING_SPACING_MARK",
      "desc": "General category \"Mc\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "CONNECTOR_PUNCTUATION",
      "desc": "General category \"Pc\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "CONTROL",
      "desc": "General category \"Cc\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "CURRENCY_SYMBOL",
      "desc": "General category \"Sc\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DASH_PUNCTUATION",
      "desc": "General category \"Pd\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DECIMAL_DIGIT_NUMBER",
      "desc": "General category \"Nd\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_ARABIC_NUMBER",
      "desc": "Weak bidirectional character type \"AN\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_BOUNDARY_NEUTRAL",
      "desc": "Weak bidirectional character type \"BN\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR",
      "desc": "Weak bidirectional character type \"CS\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_EUROPEAN_NUMBER",
      "desc": "Weak bidirectional character type \"EN\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR",
      "desc": "Weak bidirectional character type \"ES\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR",
      "desc": "Weak bidirectional character type \"ET\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_LEFT_TO_RIGHT",
      "desc": "Strong bidirectional character type \"L\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING",
      "desc": "Strong bidirectional character type \"LRE\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE",
      "desc": "Strong bidirectional character type \"LRO\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_NONSPACING_MARK",
      "desc": "Weak bidirectional character type \"NSM\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_OTHER_NEUTRALS",
      "desc": "Neutral bidirectional character type \"ON\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_PARAGRAPH_SEPARATOR",
      "desc": "Neutral bidirectional character type \"B\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT",
      "desc": "Weak bidirectional character type \"PDF\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_RIGHT_TO_LEFT",
      "desc": "Strong bidirectional character type \"R\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC",
      "desc": "Strong bidirectional character type \"AL\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING",
      "desc": "Strong bidirectional character type \"RLE\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE",
      "desc": "Strong bidirectional character type \"RLO\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_SEGMENT_SEPARATOR",
      "desc": "Neutral bidirectional character type \"S\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_UNDEFINED",
      "desc": "Undefined bidirectional character type."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "DIRECTIONALITY_WHITESPACE",
      "desc": "Neutral bidirectional character type \"WS\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "ENCLOSING_MARK",
      "desc": "General category \"Me\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "END_PUNCTUATION",
      "desc": "General category \"Pe\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "FINAL_QUOTE_PUNCTUATION",
      "desc": "General category \"Pf\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "FORMAT",
      "desc": "General category \"Cf\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "INITIAL_QUOTE_PUNCTUATION",
      "desc": "General category \"Pi\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "LETTER_NUMBER",
      "desc": "General category \"Nl\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "LINE_SEPARATOR",
      "desc": "General category \"Zl\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "LOWERCASE_LETTER",
      "desc": "General category \"Ll\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "MATH_SYMBOL",
      "desc": "General category \"Sm\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_CODE_POINT",
      "desc": "The maximum value of a  Unicode code point, constant U+10FFFF."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_HIGH_SURROGATE",
      "desc": "The maximum value of a  Unicode high-surrogate code unit in the UTF-16 encoding, constant '\\u005CuDBFF'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_LOW_SURROGATE",
      "desc": "The maximum value of a  Unicode low-surrogate code unit in the UTF-16 encoding, constant '\\u005CuDFFF'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_RADIX",
      "desc": "The maximum radix available for conversion to and from strings."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_SURROGATE",
      "desc": "The maximum value of a Unicode surrogate code unit in the UTF-16 encoding, constant '\\u005CuDFFF'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_VALUE",
      "desc": "The constant value of this field is the largest value of type char, '\\u005CuFFFF'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_CODE_POINT",
      "desc": "The minimum value of a  Unicode code point, constant U+0000."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_HIGH_SURROGATE",
      "desc": "The minimum value of a  Unicode high-surrogate code unit in the UTF-16 encoding, constant '\\u005CuD800'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_LOW_SURROGATE",
      "desc": "The minimum value of a  Unicode low-surrogate code unit in the UTF-16 encoding, constant '\\u005CuDC00'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_RADIX",
      "desc": "The minimum radix available for conversion to and from strings."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_SUPPLEMENTARY_CODE_POINT",
      "desc": "The minimum value of a  Unicode supplementary code point, constant U+10000."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_SURROGATE",
      "desc": "The minimum value of a Unicode surrogate code unit in the UTF-16 encoding, constant '\\u005CuD800'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_VALUE",
      "desc": "The constant value of this field is the smallest value of type char, '\\u005Cu0000'."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "MODIFIER_LETTER",
      "desc": "General category \"Lm\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "MODIFIER_SYMBOL",
      "desc": "General category \"Sk\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "NON_SPACING_MARK",
      "desc": "General category \"Mn\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "OTHER_LETTER",
      "desc": "General category \"Lo\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "OTHER_NUMBER",
      "desc": "General category \"No\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "OTHER_PUNCTUATION",
      "desc": "General category \"Po\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "OTHER_SYMBOL",
      "desc": "General category \"So\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "PARAGRAPH_SEPARATOR",
      "desc": "General category \"Zp\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "PRIVATE_USE",
      "desc": "General category \"Co\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SIZE",
      "desc": "The number of bits used to represent a char value in unsigned binary form, constant 16."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "SPACE_SEPARATOR",
      "desc": "General category \"Zs\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "START_PUNCTUATION",
      "desc": "General category \"Ps\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "SURROGATE",
      "desc": "General category \"Cs\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "TITLECASE_LETTER",
      "desc": "General category \"Lt\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "UNASSIGNED",
      "desc": "General category \"Cn\" in the Unicode specification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Byte",
      "code": "UPPERCASE_LETTER",
      "desc": "General category \"Lu\" in the Unicode specification."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: Char)\n            Constructs a newly allocated Character object that represents the specified char value."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "charCount(codePoint: Int)",
      "desc": "Determines the number of char values needed to represent the specified character (Unicode code point)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Char",
      "code": "charValue()",
      "desc": "Returns the value of this Character object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(seq: CharSequence, index: Int)",
      "desc": "Returns the code point at the given index of the CharSequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(a: CharArray!, index: Int)",
      "desc": "Returns the code point at the given index of the char array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(a: CharArray!, index: Int, limit: Int)",
      "desc": "Returns the code point at the given index of the char array, where only array elements with index less than limit can be used."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(seq: CharSequence, index: Int)",
      "desc": "Returns the code point preceding the given index of the CharSequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(a: CharArray!, index: Int)",
      "desc": "Returns the code point preceding the given index of the char array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(a: CharArray!, index: Int, start: Int)",
      "desc": "Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointCount(seq: CharSequence, beginIndex: Int, endIndex: Int)",
      "desc": "Returns the number of Unicode code points in the text range of the specified char sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointCount(a: CharArray!, offset: Int, count: Int)",
      "desc": "Returns the number of Unicode code points in a subarray of the char array argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "compare(x: Char, y: Char)",
      "desc": "Compares two char values numerically."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: Char)",
      "desc": "Compares two Character objects numerically."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "digit(ch: Char, radix: Int)",
      "desc": "Returns the numeric value of the character ch in the specified radix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "digit(codePoint: Int, radix: Int)",
      "desc": "Returns the numeric value of the specified character (Unicode code point) in the specified radix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares this object against the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "forDigit(digit: Int, radix: Int)",
      "desc": "Determines the character representation for a specific digit in the specified radix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Byte",
      "code": "getDirectionality(ch: Char)",
      "desc": "Returns the Unicode directionality property for the given character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Byte",
      "code": "getDirectionality(codePoint: Int)",
      "desc": "Returns the Unicode directionality property for the given character (Unicode code point)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getName(codePoint: Int)",
      "desc": "Returns the Unicode name of the specified character codePoint, or null if the code point is unassigned.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getNumericValue(ch: Char)",
      "desc": "Returns the int value that the specified Unicode character represents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getNumericValue(codePoint: Int)",
      "desc": "Returns the int value that the specified character (Unicode code point) represents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getType(ch: Char)",
      "desc": "Returns a value indicating a character's general category."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getType(codePoint: Int)",
      "desc": "Returns a value indicating a character's general category."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code for this Character; equal to the result of invoking charValue()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "hashCode(value: Char)",
      "desc": "Returns a hash code for a char value; compatible with Character.hashCode()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "highSurrogate(codePoint: Int)",
      "desc": "Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isAlphabetic(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is an alphabet."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isBmpCodePoint(codePoint: Int)",
      "desc": "Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDefined(ch: Char)",
      "desc": "Determines if a character is defined in Unicode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDefined(codePoint: Int)",
      "desc": "Determines if a character (Unicode code point) is defined in Unicode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDigit(ch: Char)",
      "desc": "Determines if the specified character is a digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDigit(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isHighSurrogate(ch: Char)",
      "desc": "Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isISOControl(ch: Char)",
      "desc": "Determines if the specified character is an ISO control character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isISOControl(codePoint: Int)",
      "desc": "Determines if the referenced character (Unicode code point) is an ISO control character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isIdentifierIgnorable(ch: Char)",
      "desc": "Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isIdentifierIgnorable(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isIdeographic(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierPart(ch: Char)",
      "desc": "Determines if the specified character may be part of a Java identifier as other than the first character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierPart(codePoint: Int)",
      "desc": "Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierStart(ch: Char)",
      "desc": "Determines if the specified character is permissible as the first character in a Java identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierStart(codePoint: Int)",
      "desc": "Determines if the character (Unicode code point) is permissible as the first character in a Java identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaLetter(ch: Char)",
      "desc": "Determines if the specified character is permissible as the first character in a Java identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaLetterOrDigit(ch: Char)",
      "desc": "Determines if the specified character may be part of a Java identifier as other than the first character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetter(ch: Char)",
      "desc": "Determines if the specified character is a letter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetter(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a letter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetterOrDigit(ch: Char)",
      "desc": "Determines if the specified character is a letter or digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetterOrDigit(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a letter or digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLowSurrogate(ch: Char)",
      "desc": "Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLowerCase(ch: Char)",
      "desc": "Determines if the specified character is a lowercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLowerCase(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a lowercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isMirrored(ch: Char)",
      "desc": "Determines whether the character is mirrored according to the Unicode specification."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isMirrored(codePoint: Int)",
      "desc": "Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSpace(ch: Char)",
      "desc": "Determines if the specified character is ISO-LATIN-1 white space."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSpaceChar(ch: Char)",
      "desc": "Determines if the specified character is a Unicode space character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSpaceChar(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a Unicode space character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSupplementaryCodePoint(codePoint: Int)",
      "desc": "Determines whether the specified character (Unicode code point) is in the supplementary character range."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSurrogate(ch: Char)",
      "desc": "Determines if the given char value is a Unicode surrogate code unit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSurrogatePair(high: Char, low: Char)",
      "desc": "Determines whether the specified pair of char values is a valid  Unicode surrogate pair."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isTitleCase(ch: Char)",
      "desc": "Determines if the specified character is a titlecase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isTitleCase(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is a titlecase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierPart(ch: Char)",
      "desc": "Determines if the specified character may be part of a Unicode identifier as other than the first character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierPart(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierStart(ch: Char)",
      "desc": "Determines if the specified character is permissible as the first character in a Unicode identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierStart(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUpperCase(ch: Char)",
      "desc": "Determines if the specified character is an uppercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUpperCase(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is an uppercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isValidCodePoint(codePoint: Int)",
      "desc": "Determines whether the specified code point is a valid  Unicode code point value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isWhitespace(ch: Char)",
      "desc": "Determines if the specified character is white space according to Java."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isWhitespace(codePoint: Int)",
      "desc": "Determines if the specified character (Unicode code point) is white space according to Java."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "lowSurrogate(codePoint: Int)",
      "desc": "Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "offsetByCodePoints(seq: CharSequence, index: Int, codePointOffset: Int)",
      "desc": "Returns the index within the given char sequence that is offset from the given index by codePointOffset code points."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "offsetByCodePoints(a: CharArray!, start: Int, count: Int, index: Int, codePointOffset: Int)",
      "desc": "Returns the index within the given char subarray that is offset from the given index by codePointOffset code points."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "reverseBytes(ch: Char)",
      "desc": "Returns the value obtained by reversing the order of the bytes in the specified char value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toChars(codePoint: Int, dst: CharArray!, dstIndex: Int)",
      "desc": "Converts the specified character (Unicode code point) to its UTF-16 representation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "CharArray",
      "code": "toChars(codePoint: Int)",
      "desc": "Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toCodePoint(high: Char, low: Char)",
      "desc": "Converts the specified surrogate pair to its supplementary code point value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "toLowerCase(ch: Char)",
      "desc": "Converts the character argument to lowercase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toLowerCase(codePoint: Int)",
      "desc": "Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a String object representing this Character's value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toString(c: Char)",
      "desc": "Returns a String object representing the specified char."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "toTitleCase(ch: Char)",
      "desc": "Converts the character argument to titlecase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toTitleCase(codePoint: Int)",
      "desc": "Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "toUpperCase(ch: Char)",
      "desc": "Converts the character argument to uppercase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toUpperCase(codePoint: Int)",
      "desc": "Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "valueOf(c: Char)",
      "desc": "Returns a Character instance representing the specified char value."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Subset",
      "desc": "Instances of this class represent particular subsets of the Unicode character set."
    },
    {
      "type": "nested-classes",
      "code": "UnicodeBlock",
      "desc": "A family of character subsets representing the character blocks in the Unicode specification."
    },
    {
      "type": "nested-classes",
      "code": "UnicodeScript",
      "desc": "A family of character subsets representing the character scripts defined in the  Unicode Standard Annex #24: Script Names."
    }
  ]
}