{
  "path": "android.media",
  "name": "MediaMetadataRetriever",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_ALBUM",
      "desc": "The metadata key to retrieve the information about the album title of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_ALBUMARTIST",
      "desc": "The metadata key to retrieve the information about the performers or artist associated with the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_ARTIST",
      "desc": "The metadata key to retrieve the information about the artist of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_AUTHOR",
      "desc": "The metadata key to retrieve the information about the author of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_BITRATE",
      "desc": "This key retrieves the average bitrate (in bits/sec), if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_CAPTURE_FRAMERATE",
      "desc": "This key retrieves the original capture framerate, if it's available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_CD_TRACK_NUMBER",
      "desc": "The metadata key to retrieve the numeric string describing the order of the audio data source on its original recording."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_COLOR_RANGE",
      "desc": "This key retrieves the color range, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_COLOR_STANDARD",
      "desc": "This key retrieves the color standard, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_COLOR_TRANSFER",
      "desc": "This key retrieves the color transfer, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_COMPILATION",
      "desc": "The metadata key to retrieve the music album compilation status."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_COMPOSER",
      "desc": "The metadata key to retrieve the information about the composer of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_DATE",
      "desc": "The metadata key to retrieve the date when the data source was created or modified."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_DISC_NUMBER",
      "desc": "The metadata key to retrieve the numberic string that describes which part of a set the audio data source comes from."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_DURATION",
      "desc": "The metadata key to retrieve the playback duration (in ms) of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_EXIF_LENGTH",
      "desc": "If the media contains EXIF data, this key retrieves the length of the data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_EXIF_OFFSET",
      "desc": "If the media contains EXIF data, this key retrieves the offset value of the data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_GENRE",
      "desc": "The metadata key to retrieve the content type or genre of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_HAS_AUDIO",
      "desc": "If this key exists the media contains audio content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_HAS_IMAGE",
      "desc": "If this key exists the media contains still image content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_HAS_VIDEO",
      "desc": "If this key exists the media contains video content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_IMAGE_COUNT",
      "desc": "If the media contains still images, this key retrieves the number of still images."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_IMAGE_HEIGHT",
      "desc": "If the media contains still images, this key retrieves the height of the primary image."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_IMAGE_PRIMARY",
      "desc": "If the media contains still images, this key retrieves the image index of the primary image."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_IMAGE_ROTATION",
      "desc": "If the media contains still images, this key retrieves the rotation angle (in degrees clockwise) of the primary image."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_IMAGE_WIDTH",
      "desc": "If the media contains still images, this key retrieves the width of the primary image."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_LOCATION",
      "desc": "This key retrieves the location information, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_MIMETYPE",
      "desc": "The metadata key to retrieve the mime type of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_NUM_TRACKS",
      "desc": "The metadata key to retrieve the number of tracks, such as audio, video, text, in the data source, such as a mp4 or 3gpp file."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_TITLE",
      "desc": "The metadata key to retrieve the data source title."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_VIDEO_FRAME_COUNT",
      "desc": "If the media contains video and this key exists, it retrieves the total number of frames in the video sequence."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_VIDEO_HEIGHT",
      "desc": "If the media contains video, this key retrieves its height."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_VIDEO_ROTATION",
      "desc": "This key retrieves the video rotation angle in degrees, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_VIDEO_WIDTH",
      "desc": "If the media contains video, this key retrieves its width."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_WRITER",
      "desc": "The metadata key to retrieve the information of the writer (such as lyricist) of the data source."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "METADATA_KEY_YEAR",
      "desc": "The metadata key to retrieve the year when the data source was created or modified."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OPTION_CLOSEST",
      "desc": "This option is used with getFrameAtTime(long,int) to retrieve a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OPTION_CLOSEST_SYNC",
      "desc": "This option is used with getFrameAtTime(long,int) to retrieve a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OPTION_NEXT_SYNC",
      "desc": "This option is used with getFrameAtTime(long,int) to retrieve a sync (or key) frame associated with a data source that is located right after or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OPTION_PREVIOUS_SYNC",
      "desc": "This option is used with getFrameAtTime(long,int) to retrieve a sync (or key) frame associated with a data source that is located right before or at the given time."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "extractMetadata(keyCode: Int)",
      "desc": "Call this method after setDataSource().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "getEmbeddedPicture()",
      "desc": "Call this method after setDataSource().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtIndex(frameIndex: Int, params: MediaMetadataRetriever.BitmapParams)",
      "desc": "This method retrieves a video frame by its index.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtIndex(frameIndex: Int)",
      "desc": "This method is similar to getFrameAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams) except that the default for BitmapParams will be used.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtTime(timeUs: Long, option: Int)",
      "desc": "This method is similar to getFrameAtTime(long,int,android.media.MediaMetadataRetriever.BitmapParams) except that the device will choose the actual Bitmap.Config to use.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtTime(timeUs: Long, option: Int, params: MediaMetadataRetriever.BitmapParams)",
      "desc": "Call this method after setDataSource().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtTime(timeUs: Long)",
      "desc": "Call this method after setDataSource().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getFrameAtTime()",
      "desc": "Call this method after setDataSource().",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getFramesAtIndex(frameIndex: Int, numFrames: Int, params: MediaMetadataRetriever.BitmapParams)",
      "desc": "This method retrieves a consecutive set of video frames starting at the specified index.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getFramesAtIndex(frameIndex: Int, numFrames: Int)",
      "desc": "This method is similar to getFramesAtIndex(int,int,android.media.MediaMetadataRetriever.BitmapParams) except that the default for BitmapParams will be used.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getImageAtIndex(imageIndex: Int, params: MediaMetadataRetriever.BitmapParams)",
      "desc": "This method retrieves a still image by its index.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getImageAtIndex(imageIndex: Int)",
      "desc": "This method is similar to getImageAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams) except that the default for BitmapParams will be used.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getPrimaryImage(params: MediaMetadataRetriever.BitmapParams)",
      "desc": "This method retrieves the primary image of the media content.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getPrimaryImage()",
      "desc": "This method is similar to getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams) except that the default for BitmapParams will be used.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getScaledFrameAtTime(timeUs: Long, option: Int, dstWidth: Int, dstHeight: Int)",
      "desc": "This method is similar to getScaledFrameAtTime(long,int,int,int,android.media.MediaMetadataRetriever.BitmapParams) except that the device will choose the actual Bitmap.Config to use.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Bitmap",
      "code": "getScaledFrameAtTime(timeUs: Long, option: Int, dstWidth: Int, dstHeight: Int, params: MediaMetadataRetriever.BitmapParams)",
      "desc": "Retrieve a video frame near a given timestamp scaled to a desired size.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "release()",
      "desc": "Call it when one is done with the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(path: String!)",
      "desc": "Sets the data source (file pathname) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(uri: String!, headers: MutableMap<String!, String!>!)",
      "desc": "Sets the data source (URI) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(fd: FileDescriptor!, offset: Long, length: Long)",
      "desc": "Sets the data source (FileDescriptor) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(fd: FileDescriptor!)",
      "desc": "Sets the data source (FileDescriptor) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(context: Context!, uri: Uri!)",
      "desc": "Sets the data source as a content Uri."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(dataSource: MediaDataSource!)",
      "desc": "Sets the data source (MediaDataSource) to use."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "BitmapParams",
      "desc": ""
    }
  ]
}