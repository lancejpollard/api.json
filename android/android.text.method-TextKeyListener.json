{
  "path": "android.text.method",
  "name": "TextKeyListener",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(cap: TextKeyListener.Capitalize!, autotext: Boolean)\n            Creates a new TextKeyListener with the specified capitalization and correction properties."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear(e: Editable!)",
      "desc": "Clear all the input state (autotext, autocap, multitap, undo) from the specified Editable, going beyond Editable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getInputType()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TextKeyListener",
      "code": "getInstance(autotext: Boolean, cap: TextKeyListener.Capitalize!)",
      "desc": "Returns a new or existing instance with the specified capitalization and correction properties.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TextKeyListener",
      "code": "getInstance()",
      "desc": "Returns a new or existing instance with no automatic capitalization or correction.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyDown(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyOther(view: View!, content: Editable!, event: KeyEvent!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyUp(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onSpanAdded(s: Spannable!, what: Any!, start: Int, end: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onSpanChanged(s: Spannable!, what: Any!, start: Int, end: Int, st: Int, en: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onSpanRemoved(s: Spannable!, what: Any!, start: Int, end: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "release()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "shouldCap(cap: TextKeyListener.Capitalize!, cs: CharSequence!, off: Int)",
      "desc": "Returns whether it makes sense to automatically capitalize at the specified position in the specified text, with the specified rules."
    },
    {
      "type": "inherited-constants",
      "from": "MetaKeyKeyListener"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_ALT_LOCKED"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_ALT_ON"
    },
    {
      "type": "inherited-constants",
      "from": "KeyEvent#META_ALT_ON"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_CAP_LOCKED"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_SHIFT_ON"
    },
    {
      "type": "inherited-constants",
      "from": "KeyEvent#META_SHIFT_ON"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_SYM_LOCKED"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "META_SYM_ON"
    },
    {
      "type": "inherited-constants",
      "from": "KeyEvent#META_SYM_ON"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Capitalize",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "MetaKeyKeyListener"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "adjustMetaAfterKeypress(content: Spannable!)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "adjustMetaAfterKeypress(state: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clearMetaKeyState(view: View!, content: Editable!, states: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "clearMetaKeyState(state: Long, which: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clearMetaKeyState(content: Editable!, states: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(text: CharSequence!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(text: CharSequence!, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(text: CharSequence!, meta: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(text: CharSequence!, meta: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(state: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMetaState(state: Long, meta: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "handleKeyDown(state: Long, keyCode: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "handleKeyUp(state: Long, keyCode: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isMetaTracker(text: CharSequence!, what: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isSelectingMetaTracker(text: CharSequence!, what: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "onKeyUp(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "resetLockedMeta(content: Spannable!)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "resetLockedMeta(state: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "resetMetaState(text: Spannable!)"
    },
    {
      "type": "inherited-methods",
      "from": "BaseKeyListener"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "backspace(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "KeyEvent#KEYCODE_DEL"
    },
    {
      "type": "inherited-methods",
      "from": "TextView"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "forwardDelete(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)"
    },
    {
      "type": "inherited-methods",
      "from": "KeyEvent#KEYCODE_FORWARD_DEL"
    },
    {
      "type": "inherited-methods",
      "from": "TextView"
    },
    {
      "type": "inherited-methods",
      "from": "KeyListener"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getInputType()"
    },
    {
      "type": "inherited-methods",
      "from": "android.text.InputType"
    },
    {
      "type": "inherited-methods",
      "from": "android.text.InputType#TYPE_NULL"
    }
  ]
}