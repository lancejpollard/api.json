{
  "path": "javax.xml.parsers",
  "name": "DocumentBuilderFactory",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Any",
      "code": "getAttribute(name: String!)",
      "desc": "Allows the user to retrieve specific attributes on the underlying implementation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getFeature(name: String!)",
      "desc": "Get the state of the named feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Schema",
      "code": "getSchema()",
      "desc": "Gets the Schema object specified through the setSchema(javax.xml.validation.Schema) method.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isCoalescing()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isExpandEntityReferences()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which expand entity reference nodes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isIgnoringComments()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which ignores comments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isIgnoringElementContentWhitespace()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isNamespaceAware()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which are namespace aware."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isValidating()",
      "desc": "Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isXIncludeAware()",
      "desc": "Get state of XInclude processing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "DocumentBuilder",
      "code": "newDocumentBuilder()",
      "desc": "Creates a new instance of a javax.xml.parsers.DocumentBuilder using the currently configured parameters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DocumentBuilderFactory",
      "code": "newInstance()",
      "desc": "Returns Android's implementation of DocumentBuilderFactory.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DocumentBuilderFactory",
      "code": "newInstance(factoryClassName: String!, classLoader: ClassLoader!)",
      "desc": "Returns an instance of the named implementation of DocumentBuilderFactory.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAttribute(name: String!, value: Any!)",
      "desc": "Allows the user to set specific attributes on the underlying implementation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCoalescing(coalescing: Boolean)",
      "desc": "Specifies that the parser produced by this code will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExpandEntityReferences(expandEntityRef: Boolean)",
      "desc": "Specifies that the parser produced by this code will expand entity reference nodes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeature(name: String!, value: Boolean)",
      "desc": "Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIgnoringComments(ignoreComments: Boolean)",
      "desc": "Specifies that the parser produced by this code will ignore comments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIgnoringElementContentWhitespace(whitespace: Boolean)",
      "desc": "Specifies that the parsers created by this factory must eliminate whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing XML documents (see XML Rec 2.10)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNamespaceAware(awareness: Boolean)",
      "desc": "Specifies that the parser produced by this code will provide support for XML namespaces."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSchema(schema: Schema!)",
      "desc": "Set the Schema to be used by parsers created from this factory."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setValidating(validating: Boolean)",
      "desc": "Specifies that the parser produced by this code will validate documents as they are parsed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setXIncludeAware(state: Boolean)",
      "desc": "Set state of XInclude processing."
    }
  ]
}