{
  "path": "android.content.pm",
  "name": "ApplicationInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_AUDIO",
      "desc": "Category for apps which primarily work with audio or music, such as music players."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_GAME",
      "desc": "Category for apps which are primarily games."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_IMAGE",
      "desc": "Category for apps which primarily work with images or photos, such as camera or gallery apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_MAPS",
      "desc": "Category for apps which are primarily maps apps, such as navigation apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_NEWS",
      "desc": "Category for apps which are primarily news apps, such as newspapers, magazines, or sports apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_PRODUCTIVITY",
      "desc": "Category for apps which are primarily productivity apps, such as cloud storage or workplace apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_SOCIAL",
      "desc": "Category for apps which are primarily social apps, such as messaging, communication, email, or social network apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_UNDEFINED",
      "desc": "Value when category is undefined."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CATEGORY_VIDEO",
      "desc": "Category for apps which primarily work with video or movies, such as streaming video apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_ALLOW_BACKUP",
      "desc": "Value for flags: set to false if the application does not wish to permit any OS-driven backups of its data; true otherwise."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_ALLOW_CLEAR_USER_DATA",
      "desc": "Value for flags: default value for the corresponding ActivityInfo flag."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_ALLOW_TASK_REPARENTING",
      "desc": "Value for flags: default value for the corresponding ActivityInfo flag."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_DEBUGGABLE",
      "desc": "Value for flags: set to true if this application would like to allow debugging of its code, even when installed on a non-development system."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_EXTERNAL_STORAGE",
      "desc": "Value for flags: Set to true if the application is currently installed on external/removable/unprotected storage."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_EXTRACT_NATIVE_LIBS",
      "desc": "When set installer extracts native libs from ."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_FACTORY_TEST",
      "desc": "Value for flags: set to true if this application holds the android.Manifest.permission#FACTORY_TEST permission and the device is running in factory test mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_FULL_BACKUP_ONLY",
      "desc": "Value for flags: true if the application asks that only full-data streaming backups of its data be performed even though it defines a BackupAgent, which normally indicates that the app will manage its backed-up data via incremental key/value updates."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_HARDWARE_ACCELERATED",
      "desc": "Value for flags: true when the application's rendering should be hardware accelerated."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_HAS_CODE",
      "desc": "Value for flags: set to true if this application has code associated with it."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_INSTALLED",
      "desc": "Value for flags: true if the application is currently installed for the calling user."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_IS_DATA_ONLY",
      "desc": "Value for flags: true if the application only has its data installed; the application package itself does not currently exist on the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_IS_GAME",
      "desc": "Value for flags: true if the application was declared to be a game, or false if it is a non-game application."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_KILL_AFTER_RESTORE",
      "desc": "Value for flags: set to false if the application must be kept in memory following a full-system restore operation; true otherwise."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_LARGE_HEAP",
      "desc": "Value for flags: true when the application has requested a large heap for its processes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_MULTIARCH",
      "desc": "Value for flags: true if code from this application will need to be loaded into other applications' processes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_PERSISTENT",
      "desc": "Value for flags: set to true if this application is persistent."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_RESIZEABLE_FOR_SCREENS",
      "desc": "Value for flags: true when the application knows how to adjust its UI for different screen sizes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_RESTORE_ANY_VERSION",
      "desc": "Value for flags: Set to true if the application's backup agent claims to be able to handle restore data even \"from the future,\" i."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_STOPPED",
      "desc": "Value for flags: true if this application's package is in the stopped state."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_LARGE_SCREENS",
      "desc": "Value for flags: true when the application's window can be increased in size for larger screens."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_NORMAL_SCREENS",
      "desc": "Value for flags: true when the application's window can be displayed on normal screens."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_RTL",
      "desc": "Value for flags: true when the application is willing to support RTL (right to left)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_SCREEN_DENSITIES",
      "desc": "Value for flags: true when the application knows how to accommodate different screen densities."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_SMALL_SCREENS",
      "desc": "Value for flags: true when the application's window can be reduced in size for smaller screens."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUPPORTS_XLARGE_SCREENS",
      "desc": "Value for flags: true when the application's window can be increased in size for extra large screens."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SUSPENDED",
      "desc": "Value for flags: true if this application's package is in the suspended state."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SYSTEM",
      "desc": "Value for flags: if set, this application is installed in the device's system image."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_TEST_ONLY",
      "desc": "Value for flags: this is set if the application has specified  android:testOnly to be true."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_UPDATED_SYSTEM_APP",
      "desc": "Value for flags: this is set if this application has been installed as an update to a built-in system application."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_USES_CLEARTEXT_TRAFFIC",
      "desc": "Value for flags: true if the application may use cleartext network traffic (e.g., HTTP rather than HTTPS; WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_VM_SAFE_MODE",
      "desc": "Value for flags: set to true if this application would like to request the VM to operate under the safe mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "GWP_ASAN_ALWAYS",
      "desc": "Always enable GWP-ASan in this application or process."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "GWP_ASAN_DEFAULT",
      "desc": "Default (unspecified) setting of GWP-ASan."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "GWP_ASAN_NEVER",
      "desc": "Never enable GWP-ASan in this application or process."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "ctor",
      "ctor": "<init>(orig: ApplicationInfo!)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dump(pw: Printer!, prefix: String!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getCategoryTitle(context: Context!, category: Int)",
      "desc": "Return a concise, localized title for the given ApplicationInfo#category value, or null for unknown values such as CATEGORY_UNDEFINED.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGwpAsanMode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isProfileableByShell()",
      "desc": "Returns whether or not this application can be profiled by the shell user, even when running on a device that is running in user mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isResourceOverlay()",
      "desc": "Returns true if the package has declared in its manifest that it is a runtime resource overlay."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isVirtualPreload()",
      "desc": "Returns whether or not this application was installed as a virtual preload."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "loadDescription(pm: PackageManager!)",
      "desc": "Retrieve the textual description of the application.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, parcelableFlags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "DisplayNameComparator",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "PackageItemInfo"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "dumpBack(pw: Printer!, prefix: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "dumpFront(pw: Printer!, prefix: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "loadBanner(pm: PackageManager!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "loadIcon(pm: PackageManager!)"
    },
    {
      "type": "inherited-methods",
      "from": "CharSequence"
    },
    {
      "type": "inherited-methods",
      "from": "loadLabel(pm: PackageManager)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "loadLogo(pm: PackageManager!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "loadUnbadgedIcon(pm: PackageManager!)"
    },
    {
      "type": "inherited-methods",
      "from": "XmlResourceParser!"
    },
    {
      "type": "inherited-methods",
      "from": "loadXmlMetaData(pm: PackageManager!, name: String!)"
    }
  ]
}