{
  "path": "java.text",
  "name": "Collator",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CANONICAL_DECOMPOSITION",
      "desc": "Decomposition mode value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FULL_DECOMPOSITION",
      "desc": "Decomposition mode value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "IDENTICAL",
      "desc": "Collator strength value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_DECOMPOSITION",
      "desc": "Decomposition mode value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PRIMARY",
      "desc": "Collator strength value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SECONDARY",
      "desc": "Collator strength value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TERTIARY",
      "desc": "Collator strength value."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Returns a new collator with the same decomposition mode and strength value as this collator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "compare(source: String!, target: String!)",
      "desc": "Compares the source string to the target string according to the collation rules for this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compare(o1: Any!, o2: Any!)",
      "desc": "Compares its two arguments for order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(source: String!, target: String!)",
      "desc": "Convenience method for comparing the equality of two strings based on this Collator's collation rules."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares the equality of two Collators."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getAvailableLocales()",
      "desc": "Returns an array of all locales for which the getInstance methods of this class can return localized instances.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "CollationKey",
      "code": "getCollationKey(source: String!)",
      "desc": "Transforms the String into a series of bits that can be compared bitwise to other CollationKeys.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDecomposition()",
      "desc": "Get the decomposition mode of this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Collator",
      "code": "getInstance()",
      "desc": "Gets the Collator for the current default locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Collator",
      "code": "getInstance(desiredLocale: Locale!)",
      "desc": "Gets the Collator for the desired locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getStrength()",
      "desc": "Returns this Collator's strength property."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Generates the hash code for this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecomposition(decompositionMode: Int)",
      "desc": "Set the decomposition mode of this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStrength(newStrength: Int)",
      "desc": "Sets this Collator's strength property."
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "reversed()"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(other: Comparator<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "compare(a, b) == 0"
    },
    {
      "type": "inherited-methods",
      "from": "other"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(keyExtractor: Function<in T, out U>!, keyComparator: Comparator<in U>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(keyExtractor: Function<in T, out U>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparable"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingDouble(keyExtractor: ToDoubleFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "double"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingInt(keyExtractor: ToIntFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "int"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingLong(keyExtractor: ToLongFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "long"
    }
  ]
}