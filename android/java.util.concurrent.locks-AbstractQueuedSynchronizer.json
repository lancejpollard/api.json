{
  "path": "java.util.concurrent.locks",
  "name": "AbstractQueuedSynchronizer",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "acquire(arg: Int)",
      "desc": "Acquires in exclusive mode, ignoring interrupts."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "acquireInterruptibly(arg: Int)",
      "desc": "Acquires in exclusive mode, aborting if interrupted."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "acquireShared(arg: Int)",
      "desc": "Acquires in shared mode, ignoring interrupts."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "acquireSharedInterruptibly(arg: Int)",
      "desc": "Acquires in shared mode, aborting if interrupted."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableCollection",
      "code": "getExclusiveQueuedThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire in exclusive mode.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Thread",
      "code": "getFirstQueuedThread()",
      "desc": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getQueueLength()",
      "desc": "Returns an estimate of the number of threads waiting to acquire."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableCollection",
      "code": "getQueuedThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableCollection",
      "code": "getSharedQueuedThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire in shared mode.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWaitQueueLength(condition: AbstractQueuedSynchronizer.ConditionObject!)",
      "desc": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableCollection",
      "code": "getWaitingThreads(condition: AbstractQueuedSynchronizer.ConditionObject!)",
      "desc": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasContended()",
      "desc": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedPredecessors()",
      "desc": "Queries whether any threads have been waiting to acquire longer than the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedThreads()",
      "desc": "Queries whether any threads are waiting to acquire."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasWaiters(condition: AbstractQueuedSynchronizer.ConditionObject!)",
      "desc": "Queries whether any threads are waiting on the given condition associated with this synchronizer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isQueued(thread: Thread!)",
      "desc": "Returns true if the given thread is currently queued."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "owns(condition: AbstractQueuedSynchronizer.ConditionObject!)",
      "desc": "Queries whether the given ConditionObject uses this synchronizer as its lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "release(arg: Int)",
      "desc": "Releases in exclusive mode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "releaseShared(arg: Int)",
      "desc": "Releases in shared mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this synchronizer, as well as its state."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "tryAcquireNanos(arg: Int, nanosTimeout: Long)",
      "desc": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "tryAcquireSharedNanos(arg: Int, nanosTimeout: Long)",
      "desc": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Boolean",
      "code": "compareAndSetState(expect: Int, update: Int)",
      "desc": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "getState()",
      "desc": "Returns the current value of synchronization state."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHeldExclusively()",
      "desc": "Returns true if synchronization is held exclusively with respect to the current (calling) thread."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Unit",
      "code": "setState(newState: Int)",
      "desc": "Sets the value of synchronization state."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "tryAcquire(arg: Int)",
      "desc": "Attempts to acquire in exclusive mode."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "tryAcquireShared(arg: Int)",
      "desc": "Attempts to acquire in shared mode."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "tryRelease(arg: Int)",
      "desc": "Attempts to set the state to reflect a release in exclusive mode."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "tryReleaseShared(arg: Int)",
      "desc": "Attempts to set the state to reflect a release in shared mode."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "ConditionObject",
      "desc": "Condition implementation for a AbstractQueuedSynchronizer serving as the basis of a Lock implementation."
    },
    {
      "type": "inherited-methods",
      "from": "AbstractOwnableSynchronizer"
    },
    {
      "type": "inherited-methods",
      "from": "Thread!"
    },
    {
      "type": "inherited-methods",
      "from": "getExclusiveOwnerThread()"
    },
    {
      "type": "inherited-methods",
      "from": "setExclusiveOwnerThread"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "volatile"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setExclusiveOwnerThread(thread: Thread!)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "volatile"
    }
  ]
}