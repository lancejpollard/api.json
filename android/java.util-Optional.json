{
  "path": "java.util",
  "name": "Optional",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Optional",
      "code": "empty()",
      "desc": "Returns an empty Optional instance.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Indicates whether some other object is \"equal to\" this Optional."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Optional",
      "code": "filter(predicate: Predicate<in T>!)",
      "desc": "If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Optional",
      "code": "flatMap(mapper: Function<in T, Optional<U>!>!)",
      "desc": "If a value is present, apply the provided Optional-bearing mapping function to it, return that result, otherwise return an empty Optional.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "get()",
      "desc": "If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "ifPresent(consumer: Consumer<in T>)",
      "desc": "If a value is present, invoke the specified consumer with the value, otherwise do nothing."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isPresent()",
      "desc": "Return true if there is a value present, otherwise false."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Optional",
      "code": "map(mapper: Function<in T, out U>!)",
      "desc": "If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Optional",
      "code": "of(value: T)",
      "desc": "Returns an Optional with the specified present non-null value.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Optional",
      "code": "ofNullable(value: T?)",
      "desc": "Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "orElse(other: T)",
      "desc": "Return the value if present, otherwise return other."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "orElseGet(other: Supplier<out T>!)",
      "desc": "Return the value if present, otherwise invoke other and return the result of that invocation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "orElseThrow(exceptionSupplier: Supplier<out X>!)",
      "desc": "Return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a non-empty string representation of this Optional suitable for debugging."
    }
  ]
}