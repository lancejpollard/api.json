{
  "path": "java.io",
  "name": "StringReader",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(s: String!)\n            Creates a new string reader."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes the stream and releases any system resources associated with it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "mark(readAheadLimit: Int)",
      "desc": "Marks the present position in the stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "markSupported()",
      "desc": "Tells whether this stream supports the mark() operation, which it does."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read()",
      "desc": "Reads a single character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read(cbuf: CharArray!, off: Int, len: Int)",
      "desc": "Reads characters into a portion of an array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "ready()",
      "desc": "Tells whether this stream is ready to be read."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "skip(ns: Long)",
      "desc": "Skips the specified number of characters in the stream."
    },
    {
      "type": "inherited-methods",
      "from": "Reader"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "read(target: CharBuffer!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "read(cbuf: CharArray!)"
    }
  ]
}