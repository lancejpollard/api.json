{
  "path": "android.net.wifi.hotspot2.pps",
  "name": "Credential",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructor for creating Credential with default values."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: Credential!)\n            Copy constructor."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "X509Certificate",
      "code": "getCaCertificate()",
      "desc": "Get the CA (Certification Authority) certificate associated with this credential.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Credential.CertificateCredential",
      "code": "getCertCredential()",
      "desc": "Get the certificate credential information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getClientCertificateChain()",
      "desc": "Get the client certificate chain associated with this credential.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "PrivateKey",
      "code": "getClientPrivateKey()",
      "desc": "Get the client private key associated with this credential.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getRealm()",
      "desc": "Get the realm associated with this credential.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Credential.SimCredential",
      "code": "getSimCredential()",
      "desc": "Get the SIM credential information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Credential.UserCredential",
      "code": "getUserCredential()",
      "desc": "Get the user credential information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCaCertificate(caCertificate: X509Certificate!)",
      "desc": "Set the CA (Certification Authority) certificate associated with this credential."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCertCredential(certCredential: Credential.CertificateCredential!)",
      "desc": "Set the certificate credential information."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setClientCertificateChain(certificateChain: Array<X509Certificate!>!)",
      "desc": "Set the client certificate chain associated with this credential."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setClientPrivateKey(clientPrivateKey: PrivateKey!)",
      "desc": "Set the client private key associated with this credential."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRealm(realm: String!)",
      "desc": "Set the realm associated with this credential."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setSimCredential(simCredential: Credential.SimCredential!)",
      "desc": "Set the SIM credential information."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setUserCredential(userCredential: Credential.UserCredential!)",
      "desc": "Set the user credential information."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "CertificateCredential",
      "desc": "Certificate based credential."
    },
    {
      "type": "nested-classes",
      "code": "SimCredential",
      "desc": "SIM (Subscriber Identify Module) based credential."
    },
    {
      "type": "nested-classes",
      "code": "UserCredential",
      "desc": "Username-password based credential."
    }
  ]
}