{
  "path": "android.text",
  "name": "BidiFormatter",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "BidiFormatter",
      "code": "getInstance()",
      "desc": "Factory for creating an instance of BidiFormatter for the default locale directionality.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "BidiFormatter",
      "code": "getInstance(rtlContext: Boolean)",
      "desc": "Factory for creating an instance of BidiFormatter given the context directionality.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "BidiFormatter",
      "code": "getInstance(locale: Locale!)",
      "desc": "Factory for creating an instance of BidiFormatter given the context locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getStereoReset()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isRtl(str: String!)",
      "desc": "Estimates the directionality of a string using the default text direction heuristic."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isRtl(str: CharSequence!)",
      "desc": "Operates like isRtl(java.lang.String), but takes a CharSequence instead of a string"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isRtlContext()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "unicodeWrap(str: String?, heuristic: TextDirectionHeuristic!, isolate: Boolean)",
      "desc": "Formats a string of given directionality for use in plain-text output of the context directionality, so an opposite-directionality string is neither garbled nor garbles its surroundings.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "unicodeWrap(str: CharSequence?, heuristic: TextDirectionHeuristic!, isolate: Boolean)",
      "desc": "Operates like unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean), but takes a CharSequence instead of a string",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "unicodeWrap(str: String!, heuristic: TextDirectionHeuristic!)",
      "desc": "Operates like unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean), but assumes isolate is true.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "unicodeWrap(str: CharSequence!, heuristic: TextDirectionHeuristic!)",
      "desc": "Operates like unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean), but assumes isolate is true.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "unicodeWrap(str: String!, isolate: Boolean)",
      "desc": "Operates like unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean), but uses the formatter's default direction estimation algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "unicodeWrap(str: CharSequence!, isolate: Boolean)",
      "desc": "Operates like unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean), but uses the formatter's default direction estimation algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "unicodeWrap(str: String!)",
      "desc": "Operates like unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean), but uses the formatter's default direction estimation algorithm and assumes isolate is true.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "unicodeWrap(str: CharSequence!)",
      "desc": "Operates like unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean), but uses the formatter's default direction estimation algorithm and assumes isolate is true.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Builder",
      "desc": "A class for building a BidiFormatter with non-default options."
    }
  ]
}