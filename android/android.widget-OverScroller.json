{
  "path": "android.widget",
  "name": "OverScroller",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!)\n            Creates an OverScroller with a viscous fluid scroll interpolator and flywheel."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, interpolator: Interpolator!)\n            Creates an OverScroller with flywheel enabled."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, interpolator: Interpolator!, bounceCoefficientX: Float, bounceCoefficientY: Float)\n            Creates an OverScroller with flywheel enabled."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, interpolator: Interpolator!, bounceCoefficientX: Float, bounceCoefficientY: Float, flywheel: Boolean)\n            Creates an OverScroller."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "abortAnimation()",
      "desc": "Stops the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "computeScrollOffset()",
      "desc": "Call this when you want to know the new location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fling(startX: Int, startY: Int, velocityX: Int, velocityY: Int, minX: Int, maxX: Int, minY: Int, maxY: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fling(startX: Int, startY: Int, velocityX: Int, velocityY: Int, minX: Int, maxX: Int, minY: Int, maxY: Int, overX: Int, overY: Int)",
      "desc": "Start scrolling based on a fling gesture."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "forceFinished(finished: Boolean)",
      "desc": "Force the finished field to a particular value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCurrVelocity()",
      "desc": "Returns the absolute value of the current velocity."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getCurrX()",
      "desc": "Returns the current X offset in the scroll."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getCurrY()",
      "desc": "Returns the current Y offset in the scroll."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getFinalX()",
      "desc": "Returns where the scroll will end."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getFinalY()",
      "desc": "Returns where the scroll will end."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getStartX()",
      "desc": "Returns the start X offset in the scroll."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getStartY()",
      "desc": "Returns the start Y offset in the scroll."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFinished()",
      "desc": "Returns whether the scroller has finished scrolling."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isOverScrolled()",
      "desc": "Returns whether the current Scroller is currently returning to a valid position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "notifyHorizontalEdgeReached(startX: Int, finalX: Int, overX: Int)",
      "desc": "Notify the scroller that we've reached a horizontal boundary."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "notifyVerticalEdgeReached(startY: Int, finalY: Int, overY: Int)",
      "desc": "Notify the scroller that we've reached a vertical boundary."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setFriction(friction: Float)",
      "desc": "The amount of friction applied to flings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "springBack(startX: Int, startY: Int, minX: Int, maxX: Int, minY: Int, maxY: Int)",
      "desc": "Call this when you want to 'spring back' into a valid coordinate range."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startScroll(startX: Int, startY: Int, dx: Int, dy: Int)",
      "desc": "Start scrolling by providing a starting point and the distance to travel."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startScroll(startX: Int, startY: Int, dx: Int, dy: Int, duration: Int)",
      "desc": "Start scrolling by providing a starting point and the distance to travel."
    }
  ]
}