{
  "path": "java.util.concurrent.atomic",
  "name": "AtomicLongFieldUpdater",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "accumulateAndGet(obj: T, x: Long, accumulatorFunction: LongBinaryOperator!)",
      "desc": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "addAndGet(obj: T, delta: Long)",
      "desc": "Atomically adds the given value to the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "compareAndSet(obj: T, expect: Long, update: Long)",
      "desc": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "decrementAndGet(obj: T)",
      "desc": "Atomically decrements by one the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "get(obj: T)",
      "desc": "Gets the current value held in the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndAccumulate(obj: T, x: Long, accumulatorFunction: LongBinaryOperator!)",
      "desc": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getAndAdd(obj: T, delta: Long)",
      "desc": "Atomically adds the given value to the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getAndDecrement(obj: T)",
      "desc": "Atomically decrements by one the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getAndIncrement(obj: T)",
      "desc": "Atomically increments by one the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getAndSet(obj: T, newValue: Long)",
      "desc": "Atomically sets the field of the given object managed by this updater to the given value and returns the old value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndUpdate(obj: T, updateFunction: LongUnaryOperator!)",
      "desc": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "incrementAndGet(obj: T)",
      "desc": "Atomically increments by one the current value of the field of the given object managed by this updater."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "lazySet(obj: T, newValue: Long)",
      "desc": "Eventually sets the field of the given object managed by this updater to the given updated value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AtomicLongFieldUpdater",
      "code": "newUpdater(tclass: Class<U>!, fieldName: String!)",
      "desc": "Creates and returns an updater for objects with the given field.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "set(obj: T, newValue: Long)",
      "desc": "Sets the field of the given object managed by this updater to the given updated value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "updateAndGet(obj: T, updateFunction: LongUnaryOperator!)",
      "desc": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "weakCompareAndSet(obj: T, expect: Long, update: Long)",
      "desc": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value."
    }
  ]
}