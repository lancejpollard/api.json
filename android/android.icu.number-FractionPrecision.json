{
  "path": "android.icu.number",
  "name": "FractionPrecision",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Precision",
      "code": "withMaxDigits(maxSignificantDigits: Int)",
      "desc": "Ensure that no more than this number of significant digits are retained when rounding according to fraction rules.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Precision",
      "code": "withMinDigits(minSignificantDigits: Int)",
      "desc": "Ensure that no less than this number of significant digits are retained when rounding according to fraction rules.",
      "symbol": "!"
    },
    {
      "type": "inherited-methods",
      "from": "Precision"
    },
    {
      "type": "inherited-methods",
      "from": "CurrencyPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "currency(currencyUsage: Currency.CurrencyUsage!)"
    },
    {
      "type": "inherited-methods",
      "from": "Precision.fixedFraction(2)"
    },
    {
      "type": "inherited-methods",
      "from": "Precision.integer()"
    },
    {
      "type": "inherited-methods",
      "from": "Precision.increment(0.05)"
    },
    {
      "type": "inherited-methods",
      "from": "FractionPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "fixedFraction(minMaxFractionPlaces: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "minMaxFraction"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "fixedSignificantDigits(minMaxSignificantDigits: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "minMaxSignificantDigits"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "increment(roundingIncrement: BigDecimal!)"
    },
    {
      "type": "inherited-methods",
      "from": "java.math.BigDecimal#scale()"
    },
    {
      "type": "inherited-methods",
      "from": "FractionPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "integer()"
    },
    {
      "type": "inherited-methods",
      "from": "FractionPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "maxFraction(maxFractionPlaces: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "maxSignificantDigits(maxSignificantDigits: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "FractionPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "minFraction(minFractionPlaces: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "unlimited"
    },
    {
      "type": "inherited-methods",
      "from": "FractionPrecision!"
    },
    {
      "type": "inherited-methods",
      "from": "minMaxFraction(minFractionPlaces: Int, maxFractionPlaces: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "minMaxSignificantDigits(minSignificantDigits: Int, maxSignificantDigits: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "minSignificantDigits(minSignificantDigits: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "unlimited"
    },
    {
      "type": "inherited-methods",
      "from": "Precision!"
    },
    {
      "type": "inherited-methods",
      "from": "unlimited()"
    },
    {
      "type": "inherited-methods",
      "from": "minFraction"
    },
    {
      "type": "inherited-methods",
      "from": "minSignificantDigits"
    },
    {
      "type": "inherited-methods",
      "from": "maxFraction"
    },
    {
      "type": "inherited-methods",
      "from": "maxSignificantDigits"
    }
  ]
}