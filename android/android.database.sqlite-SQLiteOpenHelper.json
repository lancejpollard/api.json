{
  "path": "android.database.sqlite",
  "name": "SQLiteOpenHelper",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(context: Context?, name: String?, factory: SQLiteDatabase.CursorFactory?, version: Int)\n            Create a helper object to create, open, and/or manage a database."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context?, name: String?, factory: SQLiteDatabase.CursorFactory?, version: Int, errorHandler: DatabaseErrorHandler?)\n            Create a helper object to create, open, and/or manage a database."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context?, name: String?, version: Int, openParams: SQLiteDatabase.OpenParams)\n            Create a helper object to create, open, and/or manage a database."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Close any open database object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getDatabaseName()",
      "desc": "Return the name of the SQLite database being opened, as given to the constructor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SQLiteDatabase",
      "code": "getReadableDatabase()",
      "desc": "Create and/or open a database.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SQLiteDatabase",
      "code": "getWritableDatabase()",
      "desc": "Create and/or open a database that will be used for reading and writing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onConfigure(db: SQLiteDatabase!)",
      "desc": "Called when the database connection is being configured, to enable features such as write-ahead logging or foreign key support."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "onCreate(db: SQLiteDatabase!)",
      "desc": "Called when the database is created for the first time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onDowngrade(db: SQLiteDatabase!, oldVersion: Int, newVersion: Int)",
      "desc": "Called when the database needs to be downgraded."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onOpen(db: SQLiteDatabase!)",
      "desc": "Called when the database has been opened."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "onUpgrade(db: SQLiteDatabase!, oldVersion: Int, newVersion: Int)",
      "desc": "Called when the database needs to be upgraded."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIdleConnectionTimeout(idleConnectionTimeoutMs: Long)",
      "desc": "Sets the maximum number of milliseconds that SQLite connection is allowed to be idle before it is closed and removed from the pool."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLookasideConfig(slotSize: Int, slotCount: Int)",
      "desc": "Configures lookaside memory allocator"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOpenParams(openParams: SQLiteDatabase.OpenParams)",
      "desc": "Sets configuration parameters that are used for opening SQLiteDatabase."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWriteAheadLoggingEnabled(enabled: Boolean)",
      "desc": "Enables or disables the use of write-ahead logging for the database."
    }
  ]
}