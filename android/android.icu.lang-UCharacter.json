{
  "path": "android.icu.lang",
  "name": "UCharacter",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOLD_CASE_DEFAULT",
      "desc": "[icu] Option value for case folding: use default mappings defined in CaseFolding."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FOLD_CASE_EXCLUDE_SPECIAL_I",
      "desc": "[icu] Option value for case folding: Use the modified set of mappings provided in CaseFolding."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_CODE_POINT",
      "desc": "Constant U+10FFFF, same as Character#MAX_CODE_POINT."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_HIGH_SURROGATE",
      "desc": "Constant U+DBFF, same as Character#MAX_HIGH_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_LOW_SURROGATE",
      "desc": "Constant U+DFFF, same as Character#MAX_LOW_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_RADIX",
      "desc": "Compatibility constant for Java Character's MAX_RADIX."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MAX_SURROGATE",
      "desc": "Constant U+DFFF, same as Character#MAX_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_VALUE",
      "desc": "The highest Unicode code point value (scalar value), constant U+10FFFF (uses 21 bits)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_CODE_POINT",
      "desc": "Constant U+0000, same as Character#MIN_CODE_POINT."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_HIGH_SURROGATE",
      "desc": "Constant U+D800, same as Character#MIN_HIGH_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_LOW_SURROGATE",
      "desc": "Constant U+DC00, same as Character#MIN_LOW_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_RADIX",
      "desc": "Compatibility constant for Java Character's MIN_RADIX."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_SUPPLEMENTARY_CODE_POINT",
      "desc": "Constant U+10000, same as Character#MIN_SUPPLEMENTARY_CODE_POINT."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "MIN_SURROGATE",
      "desc": "Constant U+D800, same as Character#MIN_SURROGATE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_VALUE",
      "desc": "The lowest Unicode code point value, constant 0."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "NO_NUMERIC_VALUE",
      "desc": "Special value that is returned by getUnicodeNumericValue(int) when no numeric value is defined for a code point."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "REPLACEMENT_CHAR",
      "desc": "Unicode value used when translating into Unicode encoding form and there is no existing character."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SUPPLEMENTARY_MIN_VALUE",
      "desc": "The minimum value for Supplementary code points, constant U+10000."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TITLECASE_NO_BREAK_ADJUSTMENT",
      "desc": "Do not adjust the titlecasing indexes from BreakIterator::next() indexes; titlecase exactly the characters at breaks from the iterator."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TITLECASE_NO_LOWERCASE",
      "desc": "Do not lowercase non-initial parts of words when titlecasing."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "charCount(cp: Int)",
      "desc": "Same as Character#charCount."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(seq: CharSequence!, index: Int)",
      "desc": "Same as Character#codePointAt(CharSequence, int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(text: CharArray!, index: Int)",
      "desc": "Same as Character#codePointAt(char[], int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointAt(text: CharArray!, index: Int, limit: Int)",
      "desc": "Same as Character#codePointAt(char[], int, int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(seq: CharSequence!, index: Int)",
      "desc": "Same as Character#codePointBefore(CharSequence, int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(text: CharArray!, index: Int)",
      "desc": "Same as Character#codePointBefore(char[], int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointBefore(text: CharArray!, index: Int, limit: Int)",
      "desc": "Same as Character#codePointBefore(char[], int, int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointCount(text: CharSequence!, start: Int, limit: Int)",
      "desc": "Equivalent to the Character#codePointCount(CharSequence, int, int) method, for convenience."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "codePointCount(text: CharArray!, start: Int, limit: Int)",
      "desc": "Equivalent to the Character#codePointCount(char[], int, int) method, for convenience."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "digit(ch: Int, radix: Int)",
      "desc": "Returnss the numeric value of a decimal digit code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "digit(ch: Int)",
      "desc": "Returnss the numeric value of a decimal digit code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "foldCase(ch: Int, defaultmapping: Boolean)",
      "desc": "[icu] The given character is mapped to its case folding equivalent according to UnicodeData."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "foldCase(str: String!, defaultmapping: Boolean)",
      "desc": "[icu] The given string is mapped to its case folding equivalent according to UnicodeData.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "foldCase(ch: Int, options: Int)",
      "desc": "[icu] The given character is mapped to its case folding equivalent according to UnicodeData."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "foldCase(str: String!, options: Int)",
      "desc": "[icu] The given string is mapped to its case folding equivalent according to UnicodeData.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Char",
      "code": "forDigit(digit: Int, radix: Int)",
      "desc": "Provide the java."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "VersionInfo",
      "code": "getAge(ch: Int)",
      "desc": "[icu] Returns the \"age\" of the code point.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBidiPairedBracket(c: Int)",
      "desc": "[icu] Maps the specified character to its paired bracket character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCharFromExtendedName(name: String!)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCharFromName(name: String!)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCharFromNameAlias(name: String!)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCodePoint(lead: Char, trail: Char)",
      "desc": "[icu] Returns a code point corresponding to the two surrogate code units."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCodePoint(char16: Char)",
      "desc": "[icu] Returns the code point corresponding to the BMP code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getCombiningClass(ch: Int)",
      "desc": "[icu] Returns the combining class of the argument codepoint"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getDirection(ch: Int)",
      "desc": "[icu] Returns the Bidirection property of a code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Byte",
      "code": "getDirectionality(cp: Int)",
      "desc": "Equivalent to the Character#getDirectionality(char) method, for convenience."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getExtendedName(ch: Int)",
      "desc": "[icu] Returns a name for a valid codepoint.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "ValueIterator",
      "code": "getExtendedNameIterator()",
      "desc": "[icu]",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getHanNumericValue(ch: Int)",
      "desc": "[icu] Returns the numeric value of a Han character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getIntPropertyMaxValue(type: Int)",
      "desc": "[icu] Returns the maximum value for an integer/binary Unicode property."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getIntPropertyMinValue(type: Int)",
      "desc": "[icu] Returns the minimum value for an integer/binary Unicode property type."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getIntPropertyValue(ch: Int, type: Int)",
      "desc": "[icu] Returns the property value for a Unicode property type of a code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMirror(ch: Int)",
      "desc": "[icu] Maps the specified code point to a \"mirror-image\" code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getName(ch: Int)",
      "desc": "[icu] Returns the most current Unicode name of the argument code point, or null if the character is unassigned or outside the range UCharacter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getName(s: String!, separator: String!)",
      "desc": "[icu] Returns the names for each of the characters in a string",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getNameAlias(ch: Int)",
      "desc": "[icu] Returns the corrected name from NameAliases.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "ValueIterator",
      "code": "getNameIterator()",
      "desc": "[icu]",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getNumericValue(ch: Int)",
      "desc": "Returns the numeric value of the code point as a nonnegative integer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getPropertyEnum(propertyAlias: CharSequence!)",
      "desc": "[icu] Return the UProperty selector for a given property name, as specified in the Unicode database file PropertyAliases."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getPropertyName(property: Int, nameChoice: Int)",
      "desc": "[icu] Return the Unicode name for a given property, as given in the Unicode database file PropertyAliases.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getPropertyValueEnum(property: Int, valueAlias: CharSequence!)",
      "desc": "[icu] Return the property value integer for a given value name, as specified in the Unicode database file PropertyValueAliases."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getPropertyValueName(property: Int, value: Int, nameChoice: Int)",
      "desc": "[icu] Return the Unicode name for a given property value, as given in the Unicode database file PropertyValueAliases.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getType(ch: Int)",
      "desc": "Returns a value indicating a code point's Unicode category."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "RangeValueIterator",
      "code": "getTypeIterator()",
      "desc": "[icu]",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "getUnicodeNumericValue(ch: Int)",
      "desc": "[icu] Returns the numeric value for a Unicode code point as defined in the Unicode Character Database."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "VersionInfo",
      "code": "getUnicodeVersion()",
      "desc": "[icu] Returns the version of Unicode data used.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "hasBinaryProperty(ch: Int, property: Int)",
      "desc": "[icu] Check a binary Unicode property for a code point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isBMP(ch: Int)",
      "desc": "[icu] Determines if the code point is in the BMP plane."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isBaseForm(ch: Int)",
      "desc": "[icu] Determines whether the specified code point is of base form."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDefined(ch: Int)",
      "desc": "Determines if a code point has a defined meaning in the up-to-date Unicode standard."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDigit(ch: Int)",
      "desc": "Determines if a code point is a Java digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isHighSurrogate(ch: Char)",
      "desc": "Same as Character#isHighSurrogate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isISOControl(ch: Int)",
      "desc": "Determines if the specified code point is an ISO control character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isIdentifierIgnorable(ch: Int)",
      "desc": "Determines if the specified code point should be regarded as an ignorable character in a Java identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierPart(cp: Int)",
      "desc": "Compatibility override of Java method, delegates to java."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isJavaIdentifierStart(cp: Int)",
      "desc": "Compatibility override of Java method, delegates to java."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLegal(ch: Int)",
      "desc": "[icu] A code point is illegal if and only if"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLegal(str: String!)",
      "desc": "[icu] A string is legal iff all its code points are legal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetter(ch: Int)",
      "desc": "Determines if the specified code point is a letter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLetterOrDigit(ch: Int)",
      "desc": "Determines if the specified code point is a letter or digit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLowSurrogate(ch: Char)",
      "desc": "Same as Character#isLowSurrogate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isLowerCase(ch: Int)",
      "desc": "Determines if the specified code point is a lowercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isMirrored(ch: Int)",
      "desc": "Determines whether the code point has the \"mirrored\" property."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isPrintable(ch: Int)",
      "desc": "[icu] Determines whether the specified code point is a printable character according to the Unicode standard."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSpaceChar(ch: Int)",
      "desc": "Determines if the specified code point is a Unicode specified space character, i."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSupplementary(ch: Int)",
      "desc": "[icu] Determines if the code point is a supplementary character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSupplementaryCodePoint(cp: Int)",
      "desc": "Same as Character#isSupplementaryCodePoint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isSurrogatePair(high: Char, low: Char)",
      "desc": "Same as Character#isSurrogatePair."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isTitleCase(ch: Int)",
      "desc": "Determines if the specified code point is a titlecase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUAlphabetic(ch: Int)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isULowercase(ch: Int)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUUppercase(ch: Int)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUWhiteSpace(ch: Int)",
      "desc": "[icu]"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierPart(ch: Int)",
      "desc": "Determines if the specified code point may be any part of a Unicode identifier other than the starting character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUnicodeIdentifierStart(ch: Int)",
      "desc": "Determines if the specified code point is permissible as the first character in a Unicode identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isUpperCase(ch: Int)",
      "desc": "Determines if the specified code point is an uppercase character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isValidCodePoint(cp: Int)",
      "desc": "Equivalent to Character#isValidCodePoint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isWhitespace(ch: Int)",
      "desc": "Determines if the specified code point is a white space character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "offsetByCodePoints(text: CharSequence!, index: Int, codePointOffset: Int)",
      "desc": "Equivalent to the Character#offsetByCodePoints(CharSequence, int, int) method, for convenience."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "offsetByCodePoints(text: CharArray!, start: Int, count: Int, index: Int, codePointOffset: Int)",
      "desc": "Equivalent to the Character#offsetByCodePoints(char[], int, int, int, int) method, for convenience."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toChars(cp: Int, dst: CharArray!, dstIndex: Int)",
      "desc": "Same as Character#toChars(int, char[], int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "CharArray",
      "code": "toChars(cp: Int)",
      "desc": "Same as Character#toChars(int).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toCodePoint(high: Char, low: Char)",
      "desc": "Same as Character#toCodePoint."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toLowerCase(ch: Int)",
      "desc": "The given code point is mapped to its lowercase equivalent; if the code point has no lowercase equivalent, the code point itself is returned."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toLowerCase(str: String!)",
      "desc": "Returns the lowercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toLowerCase(locale: Locale!, str: String!)",
      "desc": "Returns the lowercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toLowerCase(locale: ULocale!, str: String!)",
      "desc": "Returns the lowercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toString(ch: Int)",
      "desc": "Converts argument code point and returns a String object representing the code point's value in UTF-16 format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toTitleCase(ch: Int)",
      "desc": "Converts the code point argument to titlecase."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toTitleCase(str: String!, breakiter: BreakIterator!)",
      "desc": "Returns the titlecase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toTitleCase(locale: Locale!, str: String!, breakiter: BreakIterator!)",
      "desc": "Returns the titlecase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toTitleCase(locale: ULocale!, str: String!, titleIter: BreakIterator!)",
      "desc": "Returns the titlecase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toTitleCase(locale: ULocale!, str: String!, titleIter: BreakIterator!, options: Int)",
      "desc": "Returns the titlecase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toTitleCase(locale: Locale!, str: String!, titleIter: BreakIterator!, options: Int)",
      "desc": "[icu]",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toUpperCase(ch: Int)",
      "desc": "Converts the character argument to uppercase."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toUpperCase(str: String!)",
      "desc": "Returns the uppercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toUpperCase(locale: Locale!, str: String!)",
      "desc": "Returns the uppercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toUpperCase(locale: ULocale!, str: String!)",
      "desc": "Returns the uppercase version of the argument string.",
      "symbol": "!"
    },
    {
      "type": "inherited-constants",
      "from": "ECharacterDirection"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "ARABIC_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "BLOCK_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "BOUNDARY_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "COMMON_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_ARABIC_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "ARABIC_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_BOUNDARY_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "BOUNDARY_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "COMMON_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_EUROPEAN_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER_TERMINATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_LEFT_TO_RIGHT"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_NONSPACING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "DIR_NON_SPACING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_OTHER_NEUTRALS"
    },
    {
      "type": "inherited-constants",
      "from": "java.lang.Character#DIRECTIONALITY_OTHER_NEUTRALS"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_PARAGRAPH_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "BLOCK_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "POP_DIRECTIONAL_FORMAT"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_RIGHT_TO_LEFT"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_ARABIC"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_SEGMENT_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": ""
    },
    {
      "type": "inherited-constants",
      "from": "SEGMENT_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_UNDEFINED"
    },
    {
      "type": "inherited-constants",
      "from": "char"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DIRECTIONALITY_WHITESPACE"
    },
    {
      "type": "inherited-constants",
      "from": "java.lang.Character#DIRECTIONALITY_WHITESPACE"
    },
    {
      "type": "inherited-constants",
      "from": "WHITE_SPACE_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "DIR_NON_SPACING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "EUROPEAN_NUMBER_TERMINATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "FIRST_STRONG_ISOLATE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT_ISOLATE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "LEFT_TO_RIGHT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "POP_DIRECTIONAL_FORMAT"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "POP_DIRECTIONAL_ISOLATE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_ARABIC"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_EMBEDDING"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_ISOLATE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "RIGHT_TO_LEFT_OVERRIDE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "SEGMENT_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "WHITE_SPACE_NEUTRAL"
    },
    {
      "type": "inherited-constants",
      "from": "ECharacterCategory"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "COMBINING_SPACING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "CONNECTOR_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "CONTROL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "CURRENCY_SYMBOL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DASH_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "DECIMAL_DIGIT_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "ENCLOSING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "END_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "FINAL_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "FINAL_QUOTE_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "FORMAT"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "GENERAL_OTHER_TYPES"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "INITIAL_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "INITIAL_QUOTE_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "LETTER_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "LINE_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "LOWERCASE_LETTER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "MATH_SYMBOL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "MODIFIER_LETTER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "MODIFIER_SYMBOL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "NON_SPACING_MARK"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_LETTER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_NUMBER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "OTHER_SYMBOL"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "PARAGRAPH_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "PRIVATE_USE"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "SPACE_SEPARATOR"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "START_PUNCTUATION"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "SURROGATE"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "TITLECASE_LETTER"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "UNASSIGNED"
    },
    {
      "type": "inherited-constants",
      "from": "Byte"
    },
    {
      "type": "inherited-constants",
      "from": "UPPERCASE_LETTER"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "BidiPairedBracketType",
      "desc": "Bidi Paired Bracket Type constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DecompositionType",
      "desc": "Decomposition Type constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "EastAsianWidth",
      "desc": "East Asian Width constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "GraphemeClusterBreak",
      "desc": "Grapheme Cluster Break constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "HangulSyllableType",
      "desc": "Hangul Syllable Type constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "IndicPositionalCategory",
      "desc": "Indic Positional Category constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "IndicSyllabicCategory",
      "desc": "Indic Syllabic Category constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "JoiningGroup",
      "desc": "Joining Group constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "JoiningType",
      "desc": "Joining Type constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "LineBreak",
      "desc": "Line Break constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "NumericType",
      "desc": "Numeric Type constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "SentenceBreak",
      "desc": "Sentence Break constants."
    },
    {
      "type": "nested-classes",
      "code": "UnicodeBlock",
      "desc": "[icu enhancement] ICU's replacement for java.lang.Character.UnicodeBlock."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "VerticalOrientation",
      "desc": "Vertical Orientation constants."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "WordBreak",
      "desc": "Word Break constants."
    }
  ]
}