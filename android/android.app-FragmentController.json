{
  "path": "android.app",
  "name": "FragmentController",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "attachHost(parent: Fragment!)",
      "desc": "Attaches the host to the FragmentManager for this controller."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "FragmentController",
      "code": "createController(callbacks: FragmentHostCallback<*>!)",
      "desc": "Returns a FragmentController.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchActivityCreated()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the activity created state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchConfigurationChanged(newConfig: Configuration!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know a configuration change occurred."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchContextItemSelected(item: MenuItem!)",
      "desc": "Sends a context item selection event to the Fragments managed by the controller's FragmentManager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchCreate()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the create state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchCreateOptionsMenu(menu: Menu!, inflater: MenuInflater!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know they should create an options menu."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchDestroy()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the destroy state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchDestroyView()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the destroy view state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchLowMemory()",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know the device is in a low memory condition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchMultiWindowModeChanged(isInMultiWindowMode: Boolean)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of the activity changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchMultiWindowModeChanged(isInMultiWindowMode: Boolean, newConfig: Configuration!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of the activity changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchOptionsItemSelected(item: MenuItem!)",
      "desc": "Sends an option item selection event to the Fragments managed by the controller's FragmentManager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchOptionsMenuClosed(menu: Menu!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know their options menu has closed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchPause()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the pause state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchPictureInPictureModeChanged(isInPictureInPictureMode: Boolean)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture mode of the activity changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture mode of the activity changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "dispatchPrepareOptionsMenu(menu: Menu!)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know they should prepare their options menu for display."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchResume()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the resume state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchStart()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the start state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchStop()",
      "desc": "Moves all Fragments managed by the controller's FragmentManager into the stop state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dispatchTrimMemory(level: Int)",
      "desc": "Lets all Fragments managed by the controller's FragmentManager know they should trim their memory usage."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "doLoaderDestroy()",
      "desc": "Destroys the loaders and, if their state is not being retained, removes them."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "doLoaderStart()",
      "desc": "Starts the loaders."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "doLoaderStop(retain: Boolean)",
      "desc": "Stops the loaders, optionally retaining their state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dumpLoaders(prefix: String!, fd: FileDescriptor!, writer: PrintWriter!, args: Array<String!>!)",
      "desc": "Dumps the current state of the loaders."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "execPendingActions()",
      "desc": "Execute any pending actions for the Fragments managed by the controller's FragmentManager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Fragment",
      "code": "findFragmentByWho(who: String!)",
      "desc": "Returns a fragment with the given identifier.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FragmentManager",
      "code": "getFragmentManager()",
      "desc": "Returns a FragmentManager for this controller.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LoaderManager",
      "code": "getLoaderManager()",
      "desc": "Returns a LoaderManager.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "noteStateNotSaved()",
      "desc": "Marks the fragment state as unsaved."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "onCreateView(parent: View!, name: String!, context: Context!, attrs: AttributeSet!)",
      "desc": "Instantiates a Fragment's view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reportLoaderStart()",
      "desc": "Lets the loaders know the host is ready to receive notifications."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restoreAllState(state: Parcelable!, nonConfigList: MutableList<Fragment!>!)",
      "desc": "Restores the saved state for all Fragments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restoreAllState(state: Parcelable!, nonConfig: FragmentManagerNonConfig!)",
      "desc": "Restores the saved state for all Fragments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restoreLoaderNonConfig(loaderManagers: ArrayMap<String!, LoaderManager!>!)",
      "desc": "Restores the saved state for all LoaderManagers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ArrayMap",
      "code": "retainLoaderNonConfig()",
      "desc": "Returns a list of LoaderManagers that have opted to retain their instance across configuration changes.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FragmentManagerNonConfig",
      "code": "retainNestedNonConfig()",
      "desc": "Returns a nested tree of Fragments that have opted to retain their instance across configuration changes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "retainNonConfig()",
      "desc": "Returns a list of Fragments that have opted to retain their instance across configuration changes.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Parcelable",
      "code": "saveAllState()",
      "desc": "Saves the state for all Fragments.",
      "symbol": "!"
    }
  ]
}