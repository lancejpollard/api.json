{
  "path": "java.lang",
  "name": "String",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Initializes a newly created String object so that it represents an empty character sequence."
    },
    {
      "type": "ctor",
      "ctor": "<init>(original: String)\n            Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: CharArray!)\n            Allocates a new String so that it represents the sequence of characters currently contained in the character array argument."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: CharArray!, offset: Int, count: Int)\n            Allocates a new String that contains characters from a subarray of the character array argument."
    },
    {
      "type": "ctor",
      "ctor": "<init>(codePoints: IntArray!, offset: Int, count: Int)\n            Allocates a new String that contains characters from a subarray of the Unicode code point array argument."
    },
    {
      "type": "ctor",
      "ctor": "<init>(ascii: ByteArray!, hibyte: Int, offset: Int, count: Int)\n            Allocates a new String constructed from a subarray of an array of 8-bit integer values."
    },
    {
      "type": "ctor",
      "ctor": "<init>(ascii: ByteArray!, hibyte: Int)\n            Allocates a new String containing characters constructed from an array of 8-bit integer values."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!, offset: Int, length: Int, charsetName: String)\n            Constructs a new String by decoding the specified subarray of bytes using the specified charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!, offset: Int, length: Int, charset: Charset)\n            Constructs a new String by decoding the specified subarray of bytes using the specified charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!, charsetName: String)\n            Constructs a new String by decoding the specified array of bytes using the specified charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!, charset: Charset)\n            Constructs a new String by decoding the specified array of bytes using the specified charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!, offset: Int, length: Int)\n            Constructs a new String by decoding the specified subarray of bytes using the platform's default charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bytes: ByteArray!)\n            Constructs a new String by decoding the specified array of bytes using the platform's default charset."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buffer: StringBuffer)\n            Allocates a new string that contains the sequence of characters currently contained in the string buffer argument."
    },
    {
      "type": "ctor",
      "ctor": "<init>(builder: StringBuilder)\n            Allocates a new string that contains the sequence of characters currently contained in the string builder argument."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "codePointAt(index: Int)",
      "desc": "Returns the character (Unicode code point) at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "codePointBefore(index: Int)",
      "desc": "Returns the character (Unicode code point) before the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "codePointCount(beginIndex: Int, endIndex: Int)",
      "desc": "Returns the number of Unicode code points in the specified text range of this String."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: String)",
      "desc": "Compares two strings lexicographically."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareToIgnoreCase(str: String)",
      "desc": "Compares two strings lexicographically, ignoring case differences."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "concat(str: String)",
      "desc": "Concatenates the specified string to the end of this string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "contains(s: CharSequence)",
      "desc": "Returns true if and only if this string contains the specified sequence of char values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "contentEquals(sb: StringBuffer)",
      "desc": "Compares this string to the specified StringBuffer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "contentEquals(cs: CharSequence)",
      "desc": "Compares this string to the specified CharSequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "copyValueOf(data: CharArray!, offset: Int, count: Int)",
      "desc": "Equivalent to valueOf(char[],int,int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "copyValueOf(data: CharArray!)",
      "desc": "Equivalent to valueOf(char[])."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "endsWith(suffix: String)",
      "desc": "Tests if this string ends with the specified suffix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares this string to the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equalsIgnoreCase(anotherString: String?)",
      "desc": "Compares this String to another String, ignoring case considerations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "format(format: String, vararg args: Any!)",
      "desc": "Returns a formatted string using the specified format string and arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "format(l: Locale, format: String, vararg args: Any!)",
      "desc": "Returns a formatted string using the specified locale, format string, and arguments."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Char",
      "code": "get(index: Int)",
      "desc": "Returns the char value at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getBytes(srcBegin: Int, srcEnd: Int, dst: ByteArray!, dstBegin: Int)",
      "desc": "Copies characters from this string into the destination byte array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getBytes(charsetName: String)",
      "desc": "Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getBytes(charset: Charset)",
      "desc": "Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getBytes()",
      "desc": "Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getChars(srcBegin: Int, srcEnd: Int, dst: CharArray!, dstBegin: Int)",
      "desc": "Copies characters from this string into the destination character array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code for this string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "indexOf(ch: Int)",
      "desc": "Returns the index within this string of the first occurrence of the specified character."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "indexOf(ch: Int, fromIndex: Int)",
      "desc": "Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "indexOf(str: String)",
      "desc": "Returns the index within this string of the first occurrence of the specified substring."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "indexOf(str: String, fromIndex: Int)",
      "desc": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "intern()",
      "desc": "Returns a canonical representation for the string object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Returns true if, and only if, length() is 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "join(delimiter: CharSequence, vararg elements: CharSequence!)",
      "desc": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "join(delimiter: CharSequence, elements: MutableIterable<CharSequence!>)",
      "desc": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lastIndexOf(ch: Int)",
      "desc": "Returns the index within this string of the last occurrence of the specified character."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lastIndexOf(ch: Int, fromIndex: Int)",
      "desc": "Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lastIndexOf(str: String)",
      "desc": "Returns the index within this string of the last occurrence of the specified substring."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lastIndexOf(str: String, fromIndex: Int)",
      "desc": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "matches(regex: String)",
      "desc": "Tells whether or not this string matches the given regular expression."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "offsetByCodePoints(index: Int, codePointOffset: Int)",
      "desc": "Returns the index within this String that is offset from the given index by codePointOffset code points."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "regionMatches(toffset: Int, other: String, ooffset: Int, len: Int)",
      "desc": "Tests if two string regions are equal."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "regionMatches(ignoreCase: Boolean, toffset: Int, other: String, ooffset: Int, len: Int)",
      "desc": "Tests if two string regions are equal."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "replace(oldChar: Char, newChar: Char)",
      "desc": "Returns a string resulting from replacing all occurrences of oldChar in this string with newChar."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "replace(target: CharSequence, replacement: CharSequence)",
      "desc": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "replaceAll(regex: String, replacement: String)",
      "desc": "Replaces each substring of this string that matches the given regular expression with the given replacement."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "replaceFirst(regex: String, replacement: String)",
      "desc": "Replaces the first substring of this string that matches the given regular expression with the given replacement."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "split(regex: String, limit: Int)",
      "desc": "Splits this string around matches of the given regular expression.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "split(regex: String)",
      "desc": "Splits this string around matches of the given regular expression.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "startsWith(prefix: String, toffset: Int)",
      "desc": "Tests if the substring of this string beginning at the specified index starts with the specified prefix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "startsWith(prefix: String)",
      "desc": "Tests if this string starts with the specified prefix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "subSequence(startIndex: Int, endIndex: Int)",
      "desc": "Returns a character sequence that is a subsequence of this sequence."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "substring(beginIndex: Int)",
      "desc": "Returns a string that is a substring of this string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "substring(beginIndex: Int, endIndex: Int)",
      "desc": "Returns a string that is a substring of this string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharArray",
      "code": "toCharArray()",
      "desc": "Converts this string to a new character array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toLowerCase(locale: Locale)",
      "desc": "Converts all of the characters in this String to lower case using the rules of the given Locale."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toLowerCase()",
      "desc": "Converts all of the characters in this String to lower case using the rules of the default locale."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "This object (which is already a string!) is itself returned."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toUpperCase(locale: Locale)",
      "desc": "Converts all of the characters in this String to upper case using the rules of the given Locale."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toUpperCase()",
      "desc": "Converts all of the characters in this String to upper case using the rules of the default locale."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "trim()",
      "desc": "Returns a string whose value is this string, with any leading and trailing whitespace removed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(obj: Any?)",
      "desc": "Returns the string representation of the Object argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(data: CharArray!)",
      "desc": "Returns the string representation of the char array argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(data: CharArray!, offset: Int, count: Int)",
      "desc": "Returns the string representation of a specific subarray of the char array argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(b: Boolean)",
      "desc": "Returns the string representation of the boolean argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(c: Char)",
      "desc": "Returns the string representation of the char argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(i: Int)",
      "desc": "Returns the string representation of the int argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(l: Long)",
      "desc": "Returns the string representation of the long argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(f: Float)",
      "desc": "Returns the string representation of the float argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "valueOf(d: Double)",
      "desc": "Returns the string representation of the double argument."
    }
  ]
}