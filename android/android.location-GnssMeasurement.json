{
  "path": "android.location",
  "name": "GnssMeasurement",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_CYCLE_SLIP",
      "desc": "The state of the getAccumulatedDeltaRangeMeters() has a cycle slip detected."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_HALF_CYCLE_REPORTED",
      "desc": "Reports whether the flag ADR_STATE_HALF_CYCLE_RESOLVED has been reported by the GNSS hardware."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_HALF_CYCLE_RESOLVED",
      "desc": "Reports whether the value getAccumulatedDeltaRangeMeters() has resolved the half cycle ambiguity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_RESET",
      "desc": "The state of the getAccumulatedDeltaRangeMeters() has detected a reset."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_UNKNOWN",
      "desc": "The state of the value getAccumulatedDeltaRangeMeters() is invalid or unknown."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ADR_STATE_VALID",
      "desc": "The state of the getAccumulatedDeltaRangeMeters() is valid."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MULTIPATH_INDICATOR_DETECTED",
      "desc": "The measurement shows signs of multi-path."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MULTIPATH_INDICATOR_NOT_DETECTED",
      "desc": "The measurement shows no signs of multi-path."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MULTIPATH_INDICATOR_UNKNOWN",
      "desc": "The indicator is not available or the presence or absence of multipath is unknown."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_2ND_CODE_LOCK",
      "desc": "This GNSS measurement's tracking state has secondary code lock."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_BDS_D2_BIT_SYNC",
      "desc": "This Beidou measurement's tracking state has D2 bit sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_BDS_D2_SUBFRAME_SYNC",
      "desc": "This Beidou measurement's tracking state has D2 sub-frame sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_BIT_SYNC",
      "desc": "This GNSS measurement's tracking state has bit sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_CODE_LOCK",
      "desc": "This GNSS measurement's tracking state has code lock."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GAL_E1BC_CODE_LOCK",
      "desc": "This Galileo measurement's tracking state has E1B/C code lock."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GAL_E1B_PAGE_SYNC",
      "desc": "This Galileo measurement's tracking state has E1B page sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GAL_E1C_2ND_CODE_LOCK",
      "desc": "This Galileo measurement's tracking state has E1C secondary code lock."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GLO_STRING_SYNC",
      "desc": "This Glonass measurement's tracking state has string sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GLO_TOD_DECODED",
      "desc": "This Glonass measurement's tracking state has time-of-day decoded."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_GLO_TOD_KNOWN",
      "desc": "This Glonass measurement's tracking state has time-of-day known, possibly not decoded over the air but has been determined from other sources."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_MSEC_AMBIGUOUS",
      "desc": "This GNSS measurement's tracking state contains millisecond ambiguity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_SBAS_SYNC",
      "desc": "This SBAS measurement's tracking state has whole second level sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_SUBFRAME_SYNC",
      "desc": "This GNSS measurement's tracking state has sub-frame sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_SYMBOL_SYNC",
      "desc": "This GNSS measurement's tracking state has symbol sync."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_TOW_DECODED",
      "desc": "This GNSS measurement's tracking state has time-of-week decoded."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_TOW_KNOWN",
      "desc": "This GNSS measurement's tracking state has time-of-week known, possibly not decoded over the air but has been determined from other sources."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STATE_UNKNOWN",
      "desc": "This GNSS measurement's tracking state is invalid or unknown."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getAccumulatedDeltaRangeMeters()",
      "desc": "Gets the accumulated delta range since the last channel reset, in meters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getAccumulatedDeltaRangeState()",
      "desc": "Gets 'Accumulated Delta Range' state."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getAccumulatedDeltaRangeUncertaintyMeters()",
      "desc": "Gets the accumulated delta range's uncertainty (1-Sigma) in meters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getAutomaticGainControlLevelDb()",
      "desc": "Gets the Automatic Gain Control level in dB."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getBasebandCn0DbHz()",
      "desc": "Gets the baseband carrier-to-noise density in dB-Hz."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getCarrierCycles()",
      "desc": "The number of full carrier cycles between the satellite and the receiver."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getCarrierFrequencyHz()",
      "desc": "Gets the carrier frequency of the tracked signal."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getCarrierPhase()",
      "desc": "Gets the RF phase detected by the receiver."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getCarrierPhaseUncertainty()",
      "desc": "Gets the carrier-phase's uncertainty (1-Sigma)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getCn0DbHz()",
      "desc": "Gets the Carrier-to-noise density in dB-Hz."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getCodeType()",
      "desc": "Gets the GNSS measurement's code type."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getConstellationType()",
      "desc": "Gets the constellation type."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getFullInterSignalBiasNanos()",
      "desc": "Gets the GNSS measurement's inter-signal bias in nanoseconds with sub-nanosecond accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getFullInterSignalBiasUncertaintyNanos()",
      "desc": "Gets the GNSS measurement's inter-signal bias uncertainty (1 sigma) in nanoseconds with sub-nanosecond accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMultipathIndicator()",
      "desc": "Gets a value indicating the 'multipath' state of the event."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getPseudorangeRateMetersPerSecond()",
      "desc": "Gets the Pseudorange rate at the timestamp in m/s."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getPseudorangeRateUncertaintyMetersPerSecond()",
      "desc": "Gets the pseudorange's rate uncertainty (1-Sigma) in m/s."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getReceivedSvTimeNanos()",
      "desc": "Gets the received GNSS satellite time, at the measurement time, in nanoseconds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getReceivedSvTimeUncertaintyNanos()",
      "desc": "Gets the error estimate (1-sigma) for the received GNSS time, in nanoseconds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getSatelliteInterSignalBiasNanos()",
      "desc": "Gets the GNSS measurement's satellite inter-signal bias in nanoseconds with sub-nanosecond accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getSatelliteInterSignalBiasUncertaintyNanos()",
      "desc": "Gets the GNSS measurement's satellite inter-signal bias uncertainty (1 sigma) in nanoseconds with sub-nanosecond accuracy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getSnrInDb()",
      "desc": "Gets the (post-correlation & integration) Signal-to-Noise ratio (SNR) in dB."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getState()",
      "desc": "Gets per-satellite sync state."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getSvid()",
      "desc": "Gets the satellite ID."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "getTimeOffsetNanos()",
      "desc": "Gets the time offset at which the measurement was taken in nanoseconds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasAutomaticGainControlLevelDb()",
      "desc": "Returns true if getAutomaticGainControlLevelDb() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasBasebandCn0DbHz()",
      "desc": "Returns true if getBasebandCn0DbHz() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasCarrierCycles()",
      "desc": "Returns true if getCarrierCycles() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasCarrierFrequencyHz()",
      "desc": "Returns true if getCarrierFrequencyHz() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasCarrierPhase()",
      "desc": "Returns true if getCarrierPhase() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasCarrierPhaseUncertainty()",
      "desc": "Returns true if getCarrierPhaseUncertainty() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasCodeType()",
      "desc": "Returns true if getCodeType() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasFullInterSignalBiasNanos()",
      "desc": "Returns true if getFullInterSignalBiasNanos() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasFullInterSignalBiasUncertaintyNanos()",
      "desc": "Returns true if getFullInterSignalBiasUncertaintyNanos() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasSatelliteInterSignalBiasNanos()",
      "desc": "Returns true if getSatelliteInterSignalBiasNanos() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasSatelliteInterSignalBiasUncertaintyNanos()",
      "desc": "Returns true if getSatelliteInterSignalBiasUncertaintyNanos() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasSnrInDb()",
      "desc": "Returns true if getSnrInDb() is available, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}