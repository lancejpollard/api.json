{
  "path": "java.time.chrono",
  "name": "IsoChronology",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "date(era: Era!, yearOfEra: Int, month: Int, dayOfMonth: Int)",
      "desc": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "date(prolepticYear: Int, month: Int, dayOfMonth: Int)",
      "desc": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "date(temporal: TemporalAccessor!)",
      "desc": "Obtains an ISO local date from another date-time object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateEpochDay(epochDay: Long)",
      "desc": "Obtains an ISO local date from the epoch-day.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateNow()",
      "desc": "Obtains the current ISO local date from the system clock in the default time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateNow(zone: ZoneId!)",
      "desc": "Obtains the current ISO local date from the system clock in the specified time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateNow(clock: Clock!)",
      "desc": "Obtains the current ISO local date from the specified clock.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateYearDay(era: Era!, yearOfEra: Int, dayOfYear: Int)",
      "desc": "Obtains an ISO local date from the era, year-of-era and day-of-year fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "dateYearDay(prolepticYear: Int, dayOfYear: Int)",
      "desc": "Obtains an ISO local date from the proleptic-year and day-of-year fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IsoEra",
      "code": "eraOf(eraValue: Int)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "eras()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getCalendarType()",
      "desc": "Gets the calendar type of the underlying calendar system - 'iso8601'.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getId()",
      "desc": "Gets the ID of the chronology - 'ISO'.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isLeapYear(prolepticYear: Long)",
      "desc": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "localDateTime(temporal: TemporalAccessor!)",
      "desc": "Obtains an ISO local date-time from another date-time object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Period",
      "code": "period(years: Int, months: Int, days: Int)",
      "desc": "Obtains a period for this chronology based on years, months and days.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "prolepticYear(era: Era!, yearOfEra: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ValueRange",
      "code": "range(field: ChronoField!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "resolveDate(fieldValues: MutableMap<TemporalField!, Long!>!, resolverStyle: ResolverStyle!)",
      "desc": "Resolves parsed ChronoField values into a date during parsing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZonedDateTime",
      "code": "zonedDateTime(temporal: TemporalAccessor!)",
      "desc": "Obtains an ISO zoned date-time from another date-time object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZonedDateTime",
      "code": "zonedDateTime(instant: Instant!, zone: ZoneId!)",
      "desc": "Obtains an ISO zoned date-time in this chronology from an Instant.",
      "symbol": "!"
    },
    {
      "type": "inherited-methods",
      "from": "AbstractChronology"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "compareTo(other: Chronology!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparable"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "date(era: Era!, yearOfEra: Int, month: Int, dayOfMonth: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "date(prolepticYear: Int, month: Int, dayOfMonth: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "date(temporal: TemporalAccessor!)"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalAccessor"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoField#EPOCH_DAY"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalQuery"
    },
    {
      "type": "inherited-methods",
      "from": "aChronology::date"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateEpochDay(epochDay: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoField#EPOCH_DAY"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateNow()"
    },
    {
      "type": "inherited-methods",
      "from": "Clock#systemDefaultZone()"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateNow(zone: ZoneId!)"
    },
    {
      "type": "inherited-methods",
      "from": "Clock#system(ZoneId)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateNow(clock: Clock!)"
    },
    {
      "type": "inherited-methods",
      "from": "Clock"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateYearDay(era: Era!, yearOfEra: Int, dayOfYear: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate!"
    },
    {
      "type": "inherited-methods",
      "from": "dateYearDay(prolepticYear: Int, dayOfYear: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Era!"
    },
    {
      "type": "inherited-methods",
      "from": "eraOf(eraValue: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "MutableList<Era!>!"
    },
    {
      "type": "inherited-methods",
      "from": "eras()"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getCalendarType()"
    },
    {
      "type": "inherited-methods",
      "from": "getCalendarType"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology"
    },
    {
      "type": "inherited-methods",
      "from": "of(java.lang.String)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getDisplayName(style: TextStyle!, locale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getId()"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology"
    },
    {
      "type": "inherited-methods",
      "from": "of(java.lang.String)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isLeapYear(prolepticYear: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDateTime<out ChronoLocalDate!>!"
    },
    {
      "type": "inherited-methods",
      "from": "localDateTime(temporal: TemporalAccessor!)"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalAccessor"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDate"
    },
    {
      "type": "inherited-methods",
      "from": "LocalTime"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalQuery"
    },
    {
      "type": "inherited-methods",
      "from": "aChronology::localDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoPeriod!"
    },
    {
      "type": "inherited-methods",
      "from": "period(years: Int, months: Int, days: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoPeriod"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "prolepticYear(era: Era!, yearOfEra: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "JapaneseChronology"
    },
    {
      "type": "inherited-methods",
      "from": "ValueRange!"
    },
    {
      "type": "inherited-methods",
      "from": "range(field: ChronoField!)"
    },
    {
      "type": "inherited-methods",
      "from": "long"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoZonedDateTime<out ChronoLocalDate!>!"
    },
    {
      "type": "inherited-methods",
      "from": "zonedDateTime(temporal: TemporalAccessor!)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoZonedDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalAccessor"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoZonedDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "ZoneId"
    },
    {
      "type": "inherited-methods",
      "from": "ZoneOffset"
    },
    {
      "type": "inherited-methods",
      "from": "Instant"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "ZoneId"
    },
    {
      "type": "inherited-methods",
      "from": "ZoneOffset"
    },
    {
      "type": "inherited-methods",
      "from": "Instant"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalQuery"
    },
    {
      "type": "inherited-methods",
      "from": "aChronology::zonedDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoZonedDateTime<out ChronoLocalDate!>!"
    },
    {
      "type": "inherited-methods",
      "from": "zonedDateTime(instant: Instant!, zone: ZoneId!)"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoZonedDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "Instant"
    }
  ]
}