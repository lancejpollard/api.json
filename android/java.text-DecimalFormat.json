{
  "path": "java.text",
  "name": "DecimalFormat",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a DecimalFormat using the default pattern and symbols for the default FORMAT locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!)\n            Creates a DecimalFormat using the given pattern and the symbols for the default FORMAT locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, symbols: DecimalFormatSymbols!)\n            Creates a DecimalFormat using the given pattern and symbols."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyLocalizedPattern(pattern: String!)",
      "desc": "Apply the given pattern to this Format object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyPattern(pattern: String!)",
      "desc": "Apply the given pattern to this Format object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Standard override; no change in semantics."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Overrides equals"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "StringBuffer",
      "code": "format(number: Any, toAppendTo: StringBuffer, pos: FieldPosition)",
      "desc": "Formats a number and appends the resulting text to the given string buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Double, result: StringBuffer, fieldPosition: FieldPosition)",
      "desc": "Formats a double to produce a string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Long, result: StringBuffer, fieldPosition: FieldPosition)",
      "desc": "Format a long to produce a string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AttributedCharacterIterator",
      "code": "formatToCharacterIterator(obj: Any!)",
      "desc": "Formats an Object producing an AttributedCharacterIterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency",
      "code": "getCurrency()",
      "desc": "Gets the currency used by this decimal format when formatting currency values.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "getDecimalFormatSymbols()",
      "desc": "Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGroupingSize()",
      "desc": "Return the grouping size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumFractionDigits()",
      "desc": "Gets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumIntegerDigits()",
      "desc": "Gets the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumFractionDigits()",
      "desc": "Gets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumIntegerDigits()",
      "desc": "Gets the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMultiplier()",
      "desc": "Gets the multiplier for use in percent, per mille, and similar formats."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getNegativePrefix()",
      "desc": "Get the negative prefix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getNegativeSuffix()",
      "desc": "Get the negative suffix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPositivePrefix()",
      "desc": "Get the positive prefix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPositiveSuffix()",
      "desc": "Get the positive suffix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "RoundingMode",
      "code": "getRoundingMode()",
      "desc": "Gets the java.math.RoundingMode used in this DecimalFormat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Overrides hashCode"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDecimalSeparatorAlwaysShown()",
      "desc": "Allows you to get the behavior of the decimal separator with integers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isGroupingUsed()",
      "desc": "Returns true if grouping is used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseBigDecimal()",
      "desc": "Returns whether the parse(java.lang.String,java.text.ParsePosition) method returns BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseIntegerOnly()",
      "desc": "Returns true if this format will parse numbers as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Number",
      "code": "parse(text: String, pos: ParsePosition)",
      "desc": "Parses text from a string to produce a Number.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrency(currency: Currency)",
      "desc": "Sets the currency used by this number format when formatting currency values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalFormatSymbols(newSymbols: DecimalFormatSymbols!)",
      "desc": "Sets the decimal format symbols, which is generally not changed by the programmer or user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalSeparatorAlwaysShown(newValue: Boolean)",
      "desc": "Allows you to set the behavior of the decimal separator with integers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingSize(newValue: Int)",
      "desc": "Set the grouping size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingUsed(newValue: Boolean)",
      "desc": "Set whether or not grouping will be used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumFractionDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumIntegerDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumFractionDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumIntegerDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMultiplier(newValue: Int)",
      "desc": "Sets the multiplier for use in percent, per mille, and similar formats."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNegativePrefix(newValue: String!)",
      "desc": "Set the negative prefix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNegativeSuffix(newValue: String!)",
      "desc": "Set the negative suffix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseBigDecimal(newValue: Boolean)",
      "desc": "Sets whether the parse(java.lang.String,java.text.ParsePosition) method returns BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseIntegerOnly(value: Boolean)",
      "desc": "Sets whether or not numbers should be parsed as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPositivePrefix(newValue: String!)",
      "desc": "Set the positive prefix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPositiveSuffix(newValue: String!)",
      "desc": "Set the positive suffix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingMode(roundingMode: RoundingMode?)",
      "desc": "Sets the java.math.RoundingMode used in this DecimalFormat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toLocalizedPattern()",
      "desc": "Synthesizes a localized pattern string that represents the current state of this Format object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toPattern()",
      "desc": "Synthesizes a pattern string that represents the current state of this Format object.",
      "symbol": "!"
    },
    {
      "type": "inherited-constants",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "FRACTION_FIELD"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "INTEGER_FIELD"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: Double)"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<Locale!>"
    },
    {
      "type": "inherited-methods",
      "from": "getAvailableLocales()"
    },
    {
      "type": "inherited-methods",
      "from": "get*Instance"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT))"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance(inLocale: Locale)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(inLocale: Locale)"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance(inLocale)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT))"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance(inLocale: Locale)"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance(inLocale: Locale)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance(Locale.getDefault(Locale.Category.FORMAT))"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance(inLocale: Locale)"
    },
    {
      "type": "inherited-methods",
      "from": "Number?"
    },
    {
      "type": "inherited-methods",
      "from": "parse(source: String)"
    },
    {
      "type": "inherited-methods",
      "from": "parse(java.lang.String,java.text.ParsePosition)"
    },
    {
      "type": "inherited-methods",
      "from": "Any?"
    },
    {
      "type": "inherited-methods",
      "from": "parseObject(source: String, pos: ParsePosition)"
    },
    {
      "type": "inherited-methods",
      "from": "Number"
    },
    {
      "type": "inherited-methods",
      "from": "pos"
    },
    {
      "type": "inherited-methods",
      "from": "pos"
    },
    {
      "type": "inherited-methods",
      "from": "pos"
    },
    {
      "type": "inherited-methods",
      "from": "pos"
    },
    {
      "type": "inherited-methods",
      "from": "pos"
    },
    {
      "type": "inherited-methods",
      "from": "parse(java.lang.String,java.text.ParsePosition)"
    },
    {
      "type": "inherited-methods",
      "from": "Format"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(obj: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "format"
    },
    {
      "type": "inherited-methods",
      "from": "(obj, new StringBuffer(), new FieldPosition(0)).toString();"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator!"
    },
    {
      "type": "inherited-methods",
      "from": "formatToCharacterIterator(obj: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "Field"
    },
    {
      "type": "inherited-methods",
      "from": "Format"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "Any!"
    },
    {
      "type": "inherited-methods",
      "from": "parseObject(source: String!)"
    }
  ]
}