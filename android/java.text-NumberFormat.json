{
  "path": "java.text",
  "name": "NumberFormat",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FRACTION_FIELD",
      "desc": "Field constant used to construct a FieldPosition object."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INTEGER_FIELD",
      "desc": "Field constant used to construct a FieldPosition object."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Overrides Cloneable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Overrides equals."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Any, toAppendTo: StringBuffer, pos: FieldPosition)",
      "desc": "Formats a number and appends the resulting text to the given string buffer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: Double)",
      "desc": "Specialization of format."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: Long)",
      "desc": "Specialization of format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: Double, toAppendTo: StringBuffer, pos: FieldPosition)",
      "desc": "Specialization of format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: Long, toAppendTo: StringBuffer, pos: FieldPosition)",
      "desc": "Specialization of format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getAvailableLocales()",
      "desc": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency",
      "code": "getCurrency()",
      "desc": "Gets the currency used by this number format when formatting currency values.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getCurrencyInstance()",
      "desc": "Returns a currency format for the current default FORMAT locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getCurrencyInstance(inLocale: Locale)",
      "desc": "Returns a currency format for the specified locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getInstance()",
      "desc": "Returns a general-purpose number format for the current default FORMAT locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getInstance(inLocale: Locale)",
      "desc": "Returns a general-purpose number format for the specified locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getIntegerInstance()",
      "desc": "Returns an integer number format for the current default FORMAT locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getIntegerInstance(inLocale: Locale)",
      "desc": "Returns an integer number format for the specified locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumFractionDigits()",
      "desc": "Returns the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumIntegerDigits()",
      "desc": "Returns the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumFractionDigits()",
      "desc": "Returns the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumIntegerDigits()",
      "desc": "Returns the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getNumberInstance()",
      "desc": "Returns a general-purpose number format for the current default FORMAT locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getNumberInstance(inLocale: Locale)",
      "desc": "Returns a general-purpose number format for the specified locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getPercentInstance()",
      "desc": "Returns a percentage format for the current default FORMAT locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getPercentInstance(inLocale: Locale)",
      "desc": "Returns a percentage format for the specified locale."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "RoundingMode",
      "code": "getRoundingMode()",
      "desc": "Gets the java.math.RoundingMode used in this NumberFormat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Overrides hashCode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isGroupingUsed()",
      "desc": "Returns true if grouping is used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseIntegerOnly()",
      "desc": "Returns true if this format will parse numbers as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Number",
      "code": "parse(source: String, parsePosition: ParsePosition)",
      "desc": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Number",
      "code": "parse(source: String)",
      "desc": "Parses text from the beginning of the given string to produce a number.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "parseObject(source: String, pos: ParsePosition)",
      "desc": "Parses text from a string to produce a Number.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrency(currency: Currency)",
      "desc": "Sets the currency used by this number format when formatting currency values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingUsed(newValue: Boolean)",
      "desc": "Set whether or not grouping will be used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumFractionDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumIntegerDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumFractionDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumIntegerDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseIntegerOnly(value: Boolean)",
      "desc": "Sets whether or not numbers should be parsed as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingMode(roundingMode: RoundingMode?)",
      "desc": "Sets the java.math.RoundingMode used in this NumberFormat."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Field",
      "desc": "Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from NumberFormat.formatToCharacterIterator and as field identifiers in FieldPosition."
    },
    {
      "type": "inherited-methods",
      "from": "Format"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(obj: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "format"
    },
    {
      "type": "inherited-methods",
      "from": "(obj, new StringBuffer(), new FieldPosition(0)).toString();"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator!"
    },
    {
      "type": "inherited-methods",
      "from": "formatToCharacterIterator(obj: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "Field"
    },
    {
      "type": "inherited-methods",
      "from": "Format"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "AttributedCharacterIterator"
    },
    {
      "type": "inherited-methods",
      "from": "Any!"
    },
    {
      "type": "inherited-methods",
      "from": "parseObject(source: String!)"
    }
  ]
}