{
  "path": "java.nio.channels",
  "name": "AsynchronousFileChannel",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "force(metaData: Boolean)",
      "desc": "Forces any updates to this channel's file to be written to the storage device that contains it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "lock(position: Long, size: Long, shared: Boolean, attachment: A, handler: CompletionHandler<FileLock!, in A>!)",
      "desc": "Acquires a lock on the given region of this channel's file."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "lock(attachment: A, handler: CompletionHandler<FileLock!, in A>!)",
      "desc": "Acquires an exclusive lock on this channel's file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Future",
      "code": "lock(position: Long, size: Long, shared: Boolean)",
      "desc": "Acquires a lock on the given region of this channel's file.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Future",
      "code": "lock()",
      "desc": "Acquires an exclusive lock on this channel's file.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AsynchronousFileChannel",
      "code": "open(file: Path!, options: MutableSet<out OpenOption!>!, executor: ExecutorService!, vararg attrs: FileAttribute<*>!)",
      "desc": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AsynchronousFileChannel",
      "code": "open(file: Path!, vararg options: OpenOption!)",
      "desc": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "read(dst: ByteBuffer!, position: Long, attachment: A, handler: CompletionHandler<Int!, in A>!)",
      "desc": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Future",
      "code": "read(dst: ByteBuffer!, position: Long)",
      "desc": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "size()",
      "desc": "Returns the current size of this channel's file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "AsynchronousFileChannel",
      "code": "truncate(size: Long)",
      "desc": "Truncates this channel's file to the given size.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileLock",
      "code": "tryLock(position: Long, size: Long, shared: Boolean)",
      "desc": "Attempts to acquire a lock on the given region of this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FileLock",
      "code": "tryLock()",
      "desc": "Attempts to acquire an exclusive lock on this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "write(src: ByteBuffer!, position: Long, attachment: A, handler: CompletionHandler<Int!, in A>!)",
      "desc": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Future",
      "code": "write(src: ByteBuffer!, position: Long)",
      "desc": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position.",
      "symbol": "<"
    },
    {
      "type": "inherited-methods",
      "from": "AsynchronousChannel"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "close()"
    },
    {
      "type": "inherited-methods",
      "from": "AsynchronousCloseException"
    },
    {
      "type": "inherited-methods",
      "from": "ClosedChannelException"
    },
    {
      "type": "inherited-methods",
      "from": "Channel"
    },
    {
      "type": "inherited-methods",
      "from": "Channel"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isOpen()"
    }
  ]
}