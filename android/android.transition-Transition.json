{
  "path": "android.transition",
  "name": "Transition",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MATCH_ID",
      "desc": "With setMatchOrder(int...), chooses to match by android.view.View#getId()."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MATCH_INSTANCE",
      "desc": "With setMatchOrder(int...), chooses to match by View instance."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MATCH_ITEM_ID",
      "desc": "With setMatchOrder(int...), chooses to match by the android.widget.Adapter item id."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MATCH_NAME",
      "desc": "With setMatchOrder(int...), chooses to match by android.view.View#getTransitionName()."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a Transition object with no target objects."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!)\n            Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "addListener(listener: Transition.TransitionListener!)",
      "desc": "Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "addTarget(targetId: Int)",
      "desc": "Adds the id of a target view that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "addTarget(targetName: String!)",
      "desc": "Adds the transitionName of a target view that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "addTarget(targetType: Class<Any!>!)",
      "desc": "Adds the Class of a target view that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "addTarget(target: View!)",
      "desc": "Sets the target view instances that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canRemoveViews()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "captureEndValues(transitionValues: TransitionValues!)",
      "desc": "Captures the values in the end scene for the properties that this transition monitors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "captureStartValues(transitionValues: TransitionValues!)",
      "desc": "Captures the values in the start scene for the properties that this transition monitors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "clone()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Animator",
      "code": "createAnimator(sceneRoot: ViewGroup!, startValues: TransitionValues!, endValues: TransitionValues!)",
      "desc": "This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeChildren(targetId: Int, exclude: Boolean)",
      "desc": "Whether to add the children of the given id to the list of targets to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeChildren(target: View!, exclude: Boolean)",
      "desc": "Whether to add the children of given target to the list of target children to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeChildren(type: Class<Any!>!, exclude: Boolean)",
      "desc": "Whether to add the given type to the list of types whose children should be excluded from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeTarget(targetId: Int, exclude: Boolean)",
      "desc": "Whether to add the given id to the list of target ids to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeTarget(targetName: String!, exclude: Boolean)",
      "desc": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeTarget(target: View!, exclude: Boolean)",
      "desc": "Whether to add the given target to the list of targets to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "excludeTarget(type: Class<Any!>!, exclude: Boolean)",
      "desc": "Whether to add the given type to the list of types to exclude from this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getDuration()",
      "desc": "Returns the duration set on this transition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Rect",
      "code": "getEpicenter()",
      "desc": "Returns the epicenter as specified by the android.transition.Transition.EpicenterCallback or null if no callback exists.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition.EpicenterCallback",
      "code": "getEpicenterCallback()",
      "desc": "Returns the callback used to find the epicenter of the Transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TimeInterpolator",
      "code": "getInterpolator()",
      "desc": "Returns the interpolator set on this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns the name of this Transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PathMotion",
      "code": "getPathMotion()",
      "desc": "Returns the algorithm object used to interpolate along two dimensions.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TransitionPropagation",
      "code": "getPropagation()",
      "desc": "Returns the android.transition.TransitionPropagation used to calculate Animator start delays.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getStartDelay()",
      "desc": "Returns the startDelay set on this transition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getTargetIds()",
      "desc": "Returns the list of target IDs that this transition limits itself to tracking and animating.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getTargetNames()",
      "desc": "Returns the list of target transitionNames that this transition limits itself to tracking and animating.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getTargetTypes()",
      "desc": "Returns the list of target transitionNames that this transition limits itself to tracking and animating.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getTargets()",
      "desc": "Returns the list of target views that this transition limits itself to tracking and animating.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getTransitionProperties()",
      "desc": "Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(android.transition.TransitionValues) that this transition cares about for the purposes of canceling overlapping animations.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TransitionValues",
      "code": "getTransitionValues(view: View!, start: Boolean)",
      "desc": "This method can be called by transitions to get the TransitionValues for any particular view during the transition-playing process.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTransitionRequired(startValues: TransitionValues?, endValues: TransitionValues?)",
      "desc": "Returns whether or not the transition should create an Animator, based on the values captured during captureStartValues(android.transition.TransitionValues) and captureEndValues(android.transition.TransitionValues)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "removeListener(listener: Transition.TransitionListener!)",
      "desc": "Removes a listener from the set listening to this animation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "removeTarget(targetId: Int)",
      "desc": "Removes the given targetId from the list of ids that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "removeTarget(targetName: String!)",
      "desc": "Removes the given targetName from the list of transitionNames that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "removeTarget(target: View!)",
      "desc": "Removes the given target from the list of targets that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "removeTarget(target: Class<Any!>!)",
      "desc": "Removes the given target from the list of targets that this Transition is interested in animating.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "setDuration(duration: Long)",
      "desc": "Sets the duration of this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEpicenterCallback(epicenterCallback: Transition.EpicenterCallback!)",
      "desc": "Sets the callback to use to find the epicenter of a Transition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "setInterpolator(interpolator: TimeInterpolator!)",
      "desc": "Sets the interpolator of this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMatchOrder(vararg matches: Int)",
      "desc": "Sets the order in which Transition matches View start and end values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPathMotion(pathMotion: PathMotion!)",
      "desc": "Sets the algorithm used to calculate two-dimensional interpolation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPropagation(transitionPropagation: TransitionPropagation!)",
      "desc": "Sets the method for determining Animator start delays."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "setStartDelay(startDelay: Long)",
      "desc": "Sets the startDelay of this transition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "EpicenterCallback",
      "desc": "Class to get the epicenter of Transition."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "TransitionListener",
      "desc": "A transition listener receives notifications from a transition."
    }
  ]
}