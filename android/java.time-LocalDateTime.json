{
  "path": "java.time",
  "name": "LocalDateTime",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Temporal",
      "code": "adjustInto(temporal: Temporal!)",
      "desc": "Adjusts the specified temporal object to have the same date and time as this object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "OffsetDateTime",
      "code": "atOffset(offset: ZoneOffset!)",
      "desc": "Combines this date-time with an offset to create an OffsetDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZonedDateTime",
      "code": "atZone(zone: ZoneId!)",
      "desc": "Combines this date-time with a time-zone to create a ZonedDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: ChronoLocalDateTime<*>!)",
      "desc": "Compares this date-time to another date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Checks if this date-time is equal to another date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(formatter: DateTimeFormatter!)",
      "desc": "Formats this date-time using the specified formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "from(temporal: TemporalAccessor!)",
      "desc": "Obtains an instance of LocalDateTime from a temporal object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "get(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this date-time as an int."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDayOfMonth()",
      "desc": "Gets the day-of-month field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DayOfWeek",
      "code": "getDayOfWeek()",
      "desc": "Gets the day-of-week field, which is an enum DayOfWeek.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDayOfYear()",
      "desc": "Gets the day-of-year field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHour()",
      "desc": "Gets the hour-of-day field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getLong(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this date-time as a long."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMinute()",
      "desc": "Gets the minute-of-hour field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Month",
      "code": "getMonth()",
      "desc": "Gets the month-of-year field using the Month enum.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMonthValue()",
      "desc": "Gets the month-of-year field from 1 to 12."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getNano()",
      "desc": "Gets the nano-of-second field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getSecond()",
      "desc": "Gets the second-of-minute field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getYear()",
      "desc": "Gets the year field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "A hash code for this date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAfter(other: ChronoLocalDateTime<*>!)",
      "desc": "Checks if this date-time is after the specified date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isBefore(other: ChronoLocalDateTime<*>!)",
      "desc": "Checks if this date-time is before the specified date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEqual(other: ChronoLocalDateTime<*>!)",
      "desc": "Checks if this date-time is equal to the specified date-time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(field: TemporalField!)",
      "desc": "Checks if the specified field is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(unit: TemporalUnit!)",
      "desc": "Checks if the specified unit is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minus(amountToSubtract: TemporalAmount!)",
      "desc": "Returns a copy of this date-time with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minus(amountToSubtract: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this date-time with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusDays(days: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of days subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusHours(hours: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of hours subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusMinutes(minutes: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of minutes subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusMonths(months: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of months subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusNanos(nanos: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusSeconds(seconds: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of seconds subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusWeeks(weeks: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of weeks subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "minusYears(years: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of years subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "now()",
      "desc": "Obtains the current date-time from the system clock in the default time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "now(zone: ZoneId!)",
      "desc": "Obtains the current date-time from the system clock in the specified time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "now(clock: Clock!)",
      "desc": "Obtains the current date-time from the specified clock.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Month!, dayOfMonth: Int, hour: Int, minute: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Month!, dayOfMonth: Int, hour: Int, minute: Int, second: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Month!, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanoOfSecond: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Int, dayOfMonth: Int, hour: Int, minute: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Int, dayOfMonth: Int, hour: Int, minute: Int, second: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(year: Int, month: Int, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanoOfSecond: Int)",
      "desc": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "of(date: LocalDate!, time: LocalTime!)",
      "desc": "Obtains an instance of LocalDateTime from a date and time.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "ofEpochSecond(epochSecond: Long, nanoOfSecond: Int, offset: ZoneOffset!)",
      "desc": "Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "ofInstant(instant: Instant!, zone: ZoneId!)",
      "desc": "Obtains an instance of LocalDateTime from an Instant and zone ID.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "parse(text: CharSequence!)",
      "desc": "Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDateTime",
      "code": "parse(text: CharSequence!, formatter: DateTimeFormatter!)",
      "desc": "Obtains an instance of LocalDateTime from a text string using a specific formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plus(amountToAdd: TemporalAmount!)",
      "desc": "Returns a copy of this date-time with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plus(amountToAdd: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this date-time with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusDays(days: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of days added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusHours(hours: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of hours added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusMinutes(minutes: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of minutes added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusMonths(months: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of months added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusNanos(nanos: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of nanoseconds added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusSeconds(seconds: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of seconds added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusWeeks(weeks: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of weeks added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "plusYears(years: Long)",
      "desc": "Returns a copy of this LocalDateTime with the specified number of years added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "R",
      "code": "query(query: TemporalQuery<R>!)",
      "desc": "Queries this date-time using the specified query."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ValueRange",
      "code": "range(field: TemporalField!)",
      "desc": "Gets the range of valid values for the specified field.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "toLocalDate()",
      "desc": "Gets the LocalDate part of this date-time.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "toLocalTime()",
      "desc": "Gets the LocalTime part of this date-time.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Outputs this date-time as a String, such as 2007-12-03T10:15:30."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "truncatedTo(unit: TemporalUnit!)",
      "desc": "Returns a copy of this LocalDateTime with the time truncated.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "until(endExclusive: Temporal!, unit: TemporalUnit!)",
      "desc": "Calculates the amount of time until another date-time in terms of the specified unit."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "with(adjuster: TemporalAdjuster!)",
      "desc": "Returns an adjusted copy of this date-time.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "with(field: TemporalField!, newValue: Long)",
      "desc": "Returns a copy of this date-time with the specified field set to a new value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withDayOfMonth(dayOfMonth: Int)",
      "desc": "Returns a copy of this LocalDateTime with the day-of-month altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withDayOfYear(dayOfYear: Int)",
      "desc": "Returns a copy of this LocalDateTime with the day-of-year altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withHour(hour: Int)",
      "desc": "Returns a copy of this LocalDateTime with the hour-of-day altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withMinute(minute: Int)",
      "desc": "Returns a copy of this LocalDateTime with the minute-of-hour altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withMonth(month: Int)",
      "desc": "Returns a copy of this LocalDateTime with the month-of-year altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withNano(nanoOfSecond: Int)",
      "desc": "Returns a copy of this LocalDateTime with the nano-of-second altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withSecond(second: Int)",
      "desc": "Returns a copy of this LocalDateTime with the second-of-minute altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "withYear(year: Int)",
      "desc": "Returns a copy of this LocalDateTime with the year altered.",
      "symbol": "!"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalAccessor"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "get(field: TemporalField!)"
    },
    {
      "type": "inherited-methods",
      "from": "int"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "getLong(field: TemporalField!)"
    },
    {
      "type": "inherited-methods",
      "from": "long"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isSupported(field: TemporalField!)"
    },
    {
      "type": "inherited-methods",
      "from": "range"
    },
    {
      "type": "inherited-methods",
      "from": "get"
    },
    {
      "type": "inherited-methods",
      "from": "R"
    },
    {
      "type": "inherited-methods",
      "from": "query(query: TemporalQuery<R>!)"
    },
    {
      "type": "inherited-methods",
      "from": "LocalDate::from"
    },
    {
      "type": "inherited-methods",
      "from": "ZoneId::from"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalQuery"
    },
    {
      "type": "inherited-methods",
      "from": "ValueRange!"
    },
    {
      "type": "inherited-methods",
      "from": "range(field: TemporalField!)"
    },
    {
      "type": "inherited-methods",
      "from": "long"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoLocalDateTime"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology!"
    },
    {
      "type": "inherited-methods",
      "from": "getChronology()"
    },
    {
      "type": "inherited-methods",
      "from": "Chronology"
    },
    {
      "type": "inherited-methods",
      "from": "ChronoField"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "toEpochSecond(offset: ZoneOffset!)"
    },
    {
      "type": "inherited-methods",
      "from": "Instant!"
    },
    {
      "type": "inherited-methods",
      "from": "toInstant(offset: ZoneOffset!)"
    },
    {
      "type": "inherited-methods",
      "from": "Instant"
    },
    {
      "type": "inherited-methods",
      "from": "Instant"
    },
    {
      "type": "inherited-methods",
      "from": "Temporal"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "until(endExclusive: Temporal!, unit: TemporalUnit!)"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalUnit"
    },
    {
      "type": "inherited-methods",
      "from": "this"
    },
    {
      "type": "inherited-methods",
      "from": "startTime.until(endTime, HOURS)"
    },
    {
      "type": "inherited-methods",
      "from": "TemporalUnit#between(Temporal, Temporal)"
    }
  ]
}