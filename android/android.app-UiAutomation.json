{
  "path": "android.app",
  "name": "UiAutomation",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES",
      "desc": "UiAutomation supresses accessibility services by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_FREEZE_0",
      "desc": "Rotation constant: Freeze rotation to 0 degrees (natural orientation)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_FREEZE_180",
      "desc": "Rotation constant: Freeze rotation to 180 degrees ."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_FREEZE_270",
      "desc": "Rotation constant: Freeze rotation to 270 degrees ."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_FREEZE_90",
      "desc": "Rotation constant: Freeze rotation to 90 degrees ."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_FREEZE_CURRENT",
      "desc": "Rotation constant: Freeze rotation to its current state."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROTATION_UNFREEZE",
      "desc": "Rotation constant: Unfreeze rotation (rotating the device changes its rotation state)."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "adoptShellPermissionIdentity()",
      "desc": "Adopt the permission identity of the shell UID for all permissions."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "adoptShellPermissionIdentity(vararg permissions: String!)",
      "desc": "Adopt the permission identity of the shell UID only for the provided permissions."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "clearWindowAnimationFrameStats()",
      "desc": "Clears the window animation rendering statistics."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "clearWindowContentFrameStats(windowId: Int)",
      "desc": "Clears the frame statistics for the content of a given window."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "dropShellPermissionIdentity()",
      "desc": "Drop the shell permission identity adopted by a previous call to adoptShellPermissionIdentity()."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AccessibilityEvent",
      "code": "executeAndWaitForEvent(command: Runnable!, filter: UiAutomation.AccessibilityEventFilter!, timeoutMillis: Long)",
      "desc": "Executes a command and waits for a specific accessibility event up to a given wait timeout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ParcelFileDescriptor",
      "code": "executeShellCommand(command: String!)",
      "desc": "Executes a shell command.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AccessibilityNodeInfo",
      "code": "findFocus(focus: Int)",
      "desc": "Find the view that has the specified focus type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AccessibilityNodeInfo",
      "code": "getRootInActiveWindow()",
      "desc": "Gets the root AccessibilityNodeInfo in the active window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AccessibilityServiceInfo",
      "code": "getServiceInfo()",
      "desc": "Gets the an AccessibilityServiceInfo describing this UiAutomation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "WindowAnimationFrameStats",
      "code": "getWindowAnimationFrameStats()",
      "desc": "Gets the window animation frame statistics.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "WindowContentFrameStats",
      "code": "getWindowContentFrameStats(windowId: Int)",
      "desc": "Gets the frame statistics for a given window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getWindows()",
      "desc": "Gets the windows on the screen of the default display.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SparseArray",
      "code": "getWindowsOnAllDisplays()",
      "desc": "Gets the windows on the screen of all displays.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "grantRuntimePermission(packageName: String!, permission: String!)",
      "desc": "Grants a runtime permission to a package."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "grantRuntimePermissionAsUser(packageName: String!, permission: String!, userHandle: UserHandle!)",
      "desc": "Grants a runtime permission to a package for a user."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "injectInputEvent(event: InputEvent!, sync: Boolean)",
      "desc": "A method for injecting an arbitrary input event."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "performGlobalAction(action: Int)",
      "desc": "Performs a global action."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "revokeRuntimePermission(packageName: String!, permission: String!)",
      "desc": "Revokes a runtime permission from a package."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "revokeRuntimePermissionAsUser(packageName: String!, permission: String!, userHandle: UserHandle!)",
      "desc": "Revokes a runtime permission from a package."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setOnAccessibilityEventListener(listener: UiAutomation.OnAccessibilityEventListener!)",
      "desc": "Sets a callback for observing the stream of AccessibilityEvents."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setRotation(rotation: Int)",
      "desc": "Sets the device rotation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRunAsMonkey(enable: Boolean)",
      "desc": "Sets whether this UiAutomation to run in a \"monkey\" mode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setServiceInfo(info: AccessibilityServiceInfo!)",
      "desc": "Sets the AccessibilityServiceInfo that describes how this UiAutomation will be handled by the platform accessibility layer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap",
      "code": "takeScreenshot()",
      "desc": "Takes a screenshot.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "waitForIdle(idleTimeoutMillis: Long, globalTimeoutMillis: Long)",
      "desc": "Waits for the accessibility event stream to become idle, which is not to have received an accessibility event within idleTimeoutMillis."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "AccessibilityEventFilter",
      "desc": "Listener for filtering accessibility events."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnAccessibilityEventListener",
      "desc": "Listener for observing the AccessibilityEvent stream."
    }
  ]
}