{
  "path": "com.google.android.util",
  "name": "AbstractMessageParser",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "musicNote",
      "desc": "Music note that indicates user is listening to a music track."
    },
    {
      "type": "ctor",
      "ctor": "<init>(text: String!)\n            Create a message parser to parse urls, formatting, acronyms, smileys, /me text and music"
    },
    {
      "type": "ctor",
      "ctor": "<init>(text: String!, parseSmilies: Boolean, parseAcronyms: Boolean, parseFormatting: Boolean, parseUrls: Boolean, parseMusic: Boolean, parseMeText: Boolean)\n            Create a message parser, specifying the kinds of text to parse"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AbstractMessageParser.Part",
      "code": "getPart(index: Int)",
      "desc": "Return the part at the given index.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getPartCount()",
      "desc": "Return the number of parts."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getParts()",
      "desc": "Return the list of parts from the parsed text",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getRawText()",
      "desc": "Returns the raw text being parsed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parse()",
      "desc": "Parses the text string into an internal representation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toHtml()",
      "desc": "Converts the entire message into a single HTML display string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AbstractMessageParser.Token",
      "code": "tokenForUrl(url: String!, text: String!)",
      "desc": "Get a the appropriate Token for a given URL",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "AbstractMessageParser.Resources",
      "code": "getResources()",
      "desc": "Subclasses must define the schemes, domains, smileys and acronyms that are necessary for parsing",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "String",
      "code": "reverse(str: String!)",
      "desc": "Returns the reverse of the given string.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Acronym",
      "desc": "Represents an acronym that was found in the input."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "FlickrPhoto",
      "desc": "Represents a link to a Flickr photo or album."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Format",
      "desc": "Represents a character that changes formatting."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Html",
      "desc": "Represents a simple string of html text."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Link",
      "desc": "Represents a link that was found in the input."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "MusicTrack",
      "desc": "Represents a music track token at the beginning."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Part",
      "desc": "Represents set of tokens that are delivered as a single message."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Photo",
      "desc": "Represents a link to a Picasa photo or album."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Resources",
      "desc": "Interface representing the set of resources needed by a message parser"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Smiley",
      "desc": "Represents a smiley that was found in the input."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Token",
      "desc": "Represents a unit of parsed output."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "TrieNode",
      "desc": ""
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Video",
      "desc": "Represents a link to a Google Video."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "YouTubeVideo",
      "desc": "Represents a link to a YouTube video."
    }
  ]
}