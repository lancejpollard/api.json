{
  "path": "java.net",
  "name": "DatagramSocket",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a datagram socket and binds it to any available port on the local host machine."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bindaddr: SocketAddress!)\n            Creates a datagram socket, bound to the specified local socket address."
    },
    {
      "type": "ctor",
      "ctor": "<init>(port: Int)\n            Constructs a datagram socket and binds it to the specified port on the local host machine."
    },
    {
      "type": "ctor",
      "ctor": "<init>(port: Int, laddr: InetAddress!)\n            Creates a datagram socket, bound to the specified local address."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "bind(addr: SocketAddress!)",
      "desc": "Binds this DatagramSocket to a specific address and port."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this datagram socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "connect(address: InetAddress!, port: Int)",
      "desc": "Connects the socket to a remote address for this socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "connect(addr: SocketAddress!)",
      "desc": "Connects this socket to a remote socket address (IP address + port number)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "disconnect()",
      "desc": "Disconnects the socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getBroadcast()",
      "desc": "Tests if SO_BROADCAST is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DatagramChannel",
      "code": "getChannel()",
      "desc": "Returns the unique java.nio.channels.DatagramChannel object associated with this datagram socket, if any.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InetAddress",
      "code": "getInetAddress()",
      "desc": "Returns the address to which this socket is connected.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InetAddress",
      "code": "getLocalAddress()",
      "desc": "Gets the local address to which the socket is bound.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLocalPort()",
      "desc": "Returns the port number on the local host to which this socket is bound."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SocketAddress",
      "code": "getLocalSocketAddress()",
      "desc": "Returns the address of the endpoint this socket is bound to.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPort()",
      "desc": "Returns the port number to which this socket is connected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getReceiveBufferSize()",
      "desc": "Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SocketAddress",
      "code": "getRemoteSocketAddress()",
      "desc": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getReuseAddress()",
      "desc": "Tests if SO_REUSEADDR is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSendBufferSize()",
      "desc": "Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSoTimeout()",
      "desc": "Retrieve setting for SO_TIMEOUT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTrafficClass()",
      "desc": "Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isBound()",
      "desc": "Returns the binding state of the socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClosed()",
      "desc": "Returns whether the socket is closed or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isConnected()",
      "desc": "Returns the connection state of the socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "receive(p: DatagramPacket!)",
      "desc": "Receives a datagram packet from this socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "send(p: DatagramPacket!)",
      "desc": "Sends a datagram packet from this socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBroadcast(on: Boolean)",
      "desc": "Enable/disable SO_BROADCAST."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDatagramSocketImplFactory(fac: DatagramSocketImplFactory!)",
      "desc": "Sets the datagram socket implementation factory for the application."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReceiveBufferSize(size: Int)",
      "desc": "Sets the SO_RCVBUF option to the specified value for this DatagramSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReuseAddress(on: Boolean)",
      "desc": "Enable/disable the SO_REUSEADDR socket option."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSendBufferSize(size: Int)",
      "desc": "Sets the SO_SNDBUF option to the specified value for this DatagramSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSoTimeout(timeout: Int)",
      "desc": "Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTrafficClass(tc: Int)",
      "desc": "Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket."
    }
  ]
}