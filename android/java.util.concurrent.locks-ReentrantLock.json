{
  "path": "java.util.concurrent.locks",
  "name": "ReentrantLock",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates an instance of ReentrantLock."
    },
    {
      "type": "ctor",
      "ctor": "<init>(fair: Boolean)\n            Creates an instance of ReentrantLock with the given fairness policy."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHoldCount()",
      "desc": "Queries the number of holds on this lock by the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getQueueLength()",
      "desc": "Returns an estimate of the number of threads waiting to acquire this lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWaitQueueLength(condition: Condition!)",
      "desc": "Returns an estimate of the number of threads waiting on the given condition associated with this lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedThread(thread: Thread!)",
      "desc": "Queries whether the given thread is waiting to acquire this lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedThreads()",
      "desc": "Queries whether any threads are waiting to acquire this lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasWaiters(condition: Condition!)",
      "desc": "Queries whether any threads are waiting on the given condition associated with this lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFair()",
      "desc": "Returns true if this lock has fairness set true."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isHeldByCurrentThread()",
      "desc": "Queries if this lock is held by the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLocked()",
      "desc": "Queries if this lock is held by any thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "lock()",
      "desc": "Acquires the lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "lockInterruptibly()",
      "desc": "Acquires the lock unless the current thread is Thread#interrupt."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Condition",
      "code": "newCondition()",
      "desc": "Returns a Condition instance for use with this Lock instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this lock, as well as its lock state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "tryLock()",
      "desc": "Acquires the lock only if it is not held by another thread at the time of invocation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "tryLock(timeout: Long, unit: TimeUnit!)",
      "desc": "Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unlock()",
      "desc": "Attempts to release this lock."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Thread",
      "code": "getOwner()",
      "desc": "Returns the thread that currently owns this lock, or null if not owned.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getQueuedThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire this lock.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getWaitingThreads(condition: Condition!)",
      "desc": "Returns a collection containing those threads that may be waiting on the given condition associated with this lock.",
      "symbol": "<"
    }
  ]
}