{
  "path": "android.opengl",
  "name": "Matrix",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "frustumM(m: FloatArray!, offset: Int, left: Float, right: Float, bottom: Float, top: Float, near: Float, far: Float)",
      "desc": "Defines a projection matrix in terms of six clip planes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "invertM(mInv: FloatArray!, mInvOffset: Int, m: FloatArray!, mOffset: Int)",
      "desc": "Inverts a 4 x 4 matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "length(x: Float, y: Float, z: Float)",
      "desc": "Computes the length of a vector."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "multiplyMM(result: FloatArray!, resultOffset: Int, lhs: FloatArray!, lhsOffset: Int, rhs: FloatArray!, rhsOffset: Int)",
      "desc": "Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "multiplyMV(resultVec: FloatArray!, resultVecOffset: Int, lhsMat: FloatArray!, lhsMatOffset: Int, rhsVec: FloatArray!, rhsVecOffset: Int)",
      "desc": "Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "orthoM(m: FloatArray!, mOffset: Int, left: Float, right: Float, bottom: Float, top: Float, near: Float, far: Float)",
      "desc": "Computes an orthographic projection matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "perspectiveM(m: FloatArray!, offset: Int, fovy: Float, aspect: Float, zNear: Float, zFar: Float)",
      "desc": "Defines a projection matrix in terms of a field of view angle, an aspect ratio, and z clip planes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "rotateM(rm: FloatArray!, rmOffset: Int, m: FloatArray!, mOffset: Int, a: Float, x: Float, y: Float, z: Float)",
      "desc": "Rotates matrix m by angle a (in degrees) around the axis (x, y, z)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "rotateM(m: FloatArray!, mOffset: Int, a: Float, x: Float, y: Float, z: Float)",
      "desc": "Rotates matrix m in place by angle a (in degrees) around the axis (x, y, z)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scaleM(sm: FloatArray!, smOffset: Int, m: FloatArray!, mOffset: Int, x: Float, y: Float, z: Float)",
      "desc": "Scales matrix m by x, y, and z, putting the result in sm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scaleM(m: FloatArray!, mOffset: Int, x: Float, y: Float, z: Float)",
      "desc": "Scales matrix m in place by sx, sy, and sz."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIdentityM(sm: FloatArray!, smOffset: Int)",
      "desc": "Sets matrix m to the identity matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLookAtM(rm: FloatArray!, rmOffset: Int, eyeX: Float, eyeY: Float, eyeZ: Float, centerX: Float, centerY: Float, centerZ: Float, upX: Float, upY: Float, upZ: Float)",
      "desc": "Defines a viewing transformation in terms of an eye point, a center of view, and an up vector."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotateEulerM(rm: FloatArray!, rmOffset: Int, x: Float, y: Float, z: Float)",
      "desc": "Converts Euler angles to a rotation matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRotateM(rm: FloatArray!, rmOffset: Int, a: Float, x: Float, y: Float, z: Float)",
      "desc": "Creates a matrix for rotation by angle a (in degrees) around the axis (x, y, z)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "translateM(tm: FloatArray!, tmOffset: Int, m: FloatArray!, mOffset: Int, x: Float, y: Float, z: Float)",
      "desc": "Translates matrix m by x, y, and z, putting the result in tm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "translateM(m: FloatArray!, mOffset: Int, x: Float, y: Float, z: Float)",
      "desc": "Translates matrix m by x, y, and z in place."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "transposeM(mTrans: FloatArray!, mTransOffset: Int, m: FloatArray!, mOffset: Int)",
      "desc": "Transposes a 4 x 4 matrix."
    }
  ]
}