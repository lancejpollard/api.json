{
  "path": "android.media",
  "name": "MediaPlayer",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_IO",
      "desc": "File or network related operation errors."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_MALFORMED",
      "desc": "Bitstream is not conforming to the related coding standard or file spec."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK",
      "desc": "The video is streamed and its container is not valid for progressive playback i."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_SERVER_DIED",
      "desc": "Media server died."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_TIMED_OUT",
      "desc": "Some operation takes too long to complete, usually more than 3-5 seconds."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_UNKNOWN",
      "desc": "Unspecified media player error."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_ERROR_UNSUPPORTED",
      "desc": "Bitstream is conforming to the related coding standard or file spec, but the media framework does not support the feature."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_AUDIO_NOT_PLAYING",
      "desc": "Informs that audio is not playing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_BAD_INTERLEAVING",
      "desc": "Bad interleaving means that a media has been improperly interleaved or not interleaved at all, e."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_BUFFERING_END",
      "desc": "MediaPlayer is resuming playback after filling buffers."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_BUFFERING_START",
      "desc": "MediaPlayer is temporarily pausing playback internally in order to buffer more data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_METADATA_UPDATE",
      "desc": "A new set of metadata is available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_NOT_SEEKABLE",
      "desc": "The media cannot be seeked (e.g live stream)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_STARTED_AS_NEXT",
      "desc": "The player was started because it was used as the next player for another player, which just completed playback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_SUBTITLE_TIMED_OUT",
      "desc": "Reading the subtitle track takes too long."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_UNKNOWN",
      "desc": "Unspecified media player info."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_UNSUPPORTED_SUBTITLE",
      "desc": "Subtitle track was not supported by the media framework."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_VIDEO_NOT_PLAYING",
      "desc": "Informs that video is not playing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_VIDEO_RENDERING_START",
      "desc": "The player just pushed the very first video frame for rendering."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MEDIA_INFO_VIDEO_TRACK_LAGGING",
      "desc": "The video is too complex for the decoder: it can't decode frames fast enough."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MEDIA_MIMETYPE_TEXT_SUBRIP",
      "desc": "MIME type for SubRip (SRT) container."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PREPARE_DRM_STATUS_PREPARATION_ERROR",
      "desc": "The DRM preparation has failed ."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR",
      "desc": "The device required DRM provisioning but couldn't reach the provisioning server."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR",
      "desc": "The device required DRM provisioning but the provisioning server denied the request."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PREPARE_DRM_STATUS_SUCCESS",
      "desc": "The status codes for OnDrmPreparedListener#onDrmPrepared listener."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SEEK_CLOSEST",
      "desc": "This mode is used with seekTo(long,int) to move media position to a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SEEK_CLOSEST_SYNC",
      "desc": "This mode is used with seekTo(long,int) to move media position to a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SEEK_NEXT_SYNC",
      "desc": "This mode is used with seekTo(long,int) to move media position to a sync (or key) frame associated with a data source that is located right after or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SEEK_PREVIOUS_SYNC",
      "desc": "This mode is used with seekTo(long,int) to move media position to a sync (or key) frame associated with a data source that is located right before or at the given time."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "VIDEO_SCALING_MODE_SCALE_TO_FIT",
      "desc": "Specifies a video scaling mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING",
      "desc": "Specifies a video scaling mode."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Default constructor."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addOnRoutingChangedListener(listener: AudioRouting.OnRoutingChangedListener!, handler: Handler!)",
      "desc": "Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this MediaPlayer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addTimedTextSource(path: String!, mimeType: String!)",
      "desc": "Adds an external timed text source file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addTimedTextSource(context: Context!, uri: Uri!, mimeType: String!)",
      "desc": "Adds an external timed text source file (Uri)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addTimedTextSource(fd: FileDescriptor!, mimeType: String!)",
      "desc": "Adds an external timed text source file (FileDescriptor)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addTimedTextSource(fd: FileDescriptor!, offset: Long, length: Long, mime: String!)",
      "desc": "Adds an external timed text file (FileDescriptor)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "attachAuxEffect(effectId: Int)",
      "desc": "Attaches an auxiliary effect to the player."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearOnMediaTimeDiscontinuityListener()",
      "desc": "Clears the listener previously set with setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener) or setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener,android.os.Handler)"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearOnSubtitleDataListener()",
      "desc": "Clears the listener previously set with setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener) or setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener,android.os.Handler)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer",
      "code": "create(context: Context!, uri: Uri!)",
      "desc": "Convenience method to create a MediaPlayer for a given Uri.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer",
      "code": "create(context: Context!, uri: Uri!, holder: SurfaceHolder!)",
      "desc": "Convenience method to create a MediaPlayer for a given Uri.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer",
      "code": "create(context: Context!, uri: Uri!, holder: SurfaceHolder!, audioAttributes: AudioAttributes!, audioSessionId: Int)",
      "desc": "Same factory method as create(android.content.Context,android.net.Uri,android.view.SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer",
      "code": "create(context: Context!, resid: Int)",
      "desc": "Convenience method to create a MediaPlayer for a given resource id.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer",
      "code": "create(context: Context!, resid: Int, audioAttributes: AudioAttributes!, audioSessionId: Int)",
      "desc": "Same factory method as create(android.content.Context,int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "VolumeShaper",
      "code": "createVolumeShaper(configuration: VolumeShaper.Configuration)",
      "desc": "Returns a VolumeShaper object that can be used modify the volume envelope of the player or track."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "deselectTrack(index: Int)",
      "desc": "Deselect a track."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAudioSessionId()",
      "desc": "Returns the audio session ID."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getCurrentPosition()",
      "desc": "Gets the current playback position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaPlayer.DrmInfo",
      "code": "getDrmInfo()",
      "desc": "Retrieves the DRM Info associated with the current source",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getDrmPropertyString(propertyName: String)",
      "desc": "Read a DRM engine plugin String property value, given the property name string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDuration()",
      "desc": "Gets the duration of the file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaDrm.KeyRequest",
      "code": "getKeyRequest(keySetId: ByteArray?, initData: ByteArray?, mimeType: String?, keyType: Int, optionalParameters: MutableMap<String!, String!>?)",
      "desc": "A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PersistableBundle",
      "code": "getMetrics()",
      "desc": "Return Metrics data about the current player.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PlaybackParams",
      "code": "getPlaybackParams()",
      "desc": "Gets the playback params, containing the current playback rate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AudioDeviceInfo",
      "code": "getPreferredDevice()",
      "desc": "Returns the selected output specified by setPreferredDevice.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AudioDeviceInfo",
      "code": "getRoutedDevice()",
      "desc": "Returns an AudioDeviceInfo identifying the current routing of this MediaPlayer Note: The query is only valid if the MediaPlayer is currently playing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSelectedTrack(trackType: Int)",
      "desc": "Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by getTrackInfo(), and can be used in calls to selectTrack(int) or deselectTrack(int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SyncParams",
      "code": "getSyncParams()",
      "desc": "Gets the A/V sync mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaTimestamp",
      "code": "getTimestamp()",
      "desc": "Get current playback position as a MediaTimestamp.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getTrackInfo()",
      "desc": "Returns an array of track information.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVideoHeight()",
      "desc": "Returns the height of the video."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getVideoWidth()",
      "desc": "Returns the width of the video."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLooping()",
      "desc": "Checks whether the MediaPlayer is looping or non-looping."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPlaying()",
      "desc": "Checks whether the MediaPlayer is playing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "pause()",
      "desc": "Pauses playback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "prepare()",
      "desc": "Prepares the player for playback, synchronously."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "prepareAsync()",
      "desc": "Prepares the player for playback, asynchronously."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "prepareDrm(uuid: UUID)",
      "desc": "Prepares the DRM for the current source"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "provideKeyResponse(keySetId: ByteArray?, response: ByteArray)",
      "desc": "A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "release()",
      "desc": "Releases resources associated with this MediaPlayer object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "releaseDrm()",
      "desc": "Releases the DRM session"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeOnRoutingChangedListener(listener: AudioRouting.OnRoutingChangedListener!)",
      "desc": "Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Resets the MediaPlayer to its uninitialized state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restoreKeys(keySetId: ByteArray)",
      "desc": "Restore persisted offline keys into a new session."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "seekTo(msec: Long, mode: Int)",
      "desc": "Moves the media to specified time position by considering the given mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "seekTo(msec: Int)",
      "desc": "Seeks to specified time position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "selectTrack(index: Int)",
      "desc": "Selects a track."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAudioAttributes(attributes: AudioAttributes!)",
      "desc": "Sets the audio attributes for this MediaPlayer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAudioSessionId(sessionId: Int)",
      "desc": "Sets the audio session ID."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAudioStreamType(streamtype: Int)",
      "desc": "Sets the audio stream type for this MediaPlayer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAuxEffectSendLevel(level: Float)",
      "desc": "Sets the send level of the player to the attached auxiliary effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(context: Context, uri: Uri)",
      "desc": "Sets the data source as a content Uri."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(context: Context, uri: Uri, headers: MutableMap<String!, String!>?, cookies: MutableList<HttpCookie!>?)",
      "desc": "Sets the data source as a content Uri."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(context: Context, uri: Uri, headers: MutableMap<String!, String!>?)",
      "desc": "Sets the data source as a content Uri."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(path: String!)",
      "desc": "Sets the data source (file-path or http/rtsp URL) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(afd: AssetFileDescriptor)",
      "desc": "Sets the data source (AssetFileDescriptor) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(fd: FileDescriptor!)",
      "desc": "Sets the data source (FileDescriptor) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(fd: FileDescriptor!, offset: Long, length: Long)",
      "desc": "Sets the data source (FileDescriptor) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDataSource(dataSource: MediaDataSource!)",
      "desc": "Sets the data source (MediaDataSource) to use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDisplay(sh: SurfaceHolder!)",
      "desc": "Sets the SurfaceHolder to use for displaying the video portion of the media."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDrmPropertyString(propertyName: String, value: String)",
      "desc": "Set a DRM engine plugin String property value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLooping(looping: Boolean)",
      "desc": "Sets the player to be looping or non-looping."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNextMediaPlayer(next: MediaPlayer!)",
      "desc": "Set the MediaPlayer to start when this MediaPlayer finishes playback (i.e. reaches the end of the stream)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnBufferingUpdateListener(listener: MediaPlayer.OnBufferingUpdateListener!)",
      "desc": "Register a callback to be invoked when the status of a network stream's buffer has changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnCompletionListener(listener: MediaPlayer.OnCompletionListener!)",
      "desc": "Register a callback to be invoked when the end of a media source has been reached during playback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDrmConfigHelper(listener: MediaPlayer.OnDrmConfigHelper!)",
      "desc": "Register a callback to be invoked for configuration of the DRM object before the session is created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDrmInfoListener(listener: MediaPlayer.OnDrmInfoListener!)",
      "desc": "Register a callback to be invoked when the DRM info is known."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDrmInfoListener(listener: MediaPlayer.OnDrmInfoListener!, handler: Handler!)",
      "desc": "Register a callback to be invoked when the DRM info is known."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDrmPreparedListener(listener: MediaPlayer.OnDrmPreparedListener!)",
      "desc": "Register a callback to be invoked when the DRM object is prepared."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDrmPreparedListener(listener: MediaPlayer.OnDrmPreparedListener!, handler: Handler!)",
      "desc": "Register a callback to be invoked when the DRM object is prepared."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnErrorListener(listener: MediaPlayer.OnErrorListener!)",
      "desc": "Register a callback to be invoked when an error has happened during an asynchronous operation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnInfoListener(listener: MediaPlayer.OnInfoListener!)",
      "desc": "Register a callback to be invoked when an info/warning is available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnMediaTimeDiscontinuityListener(listener: MediaPlayer.OnMediaTimeDiscontinuityListener, handler: Handler)",
      "desc": "Sets the listener to be invoked when a media time discontinuity is encountered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnMediaTimeDiscontinuityListener(listener: MediaPlayer.OnMediaTimeDiscontinuityListener)",
      "desc": "Sets the listener to be invoked when a media time discontinuity is encountered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnPreparedListener(listener: MediaPlayer.OnPreparedListener!)",
      "desc": "Register a callback to be invoked when the media source is ready for playback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnSeekCompleteListener(listener: MediaPlayer.OnSeekCompleteListener!)",
      "desc": "Register a callback to be invoked when a seek operation has been completed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnSubtitleDataListener(listener: MediaPlayer.OnSubtitleDataListener, handler: Handler)",
      "desc": "Sets the listener to be invoked when a subtitle track has new data available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnSubtitleDataListener(listener: MediaPlayer.OnSubtitleDataListener)",
      "desc": "Sets the listener to be invoked when a subtitle track has new data available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnTimedMetaDataAvailableListener(listener: MediaPlayer.OnTimedMetaDataAvailableListener!)",
      "desc": "Register a callback to be invoked when a selected track has timed metadata available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnTimedTextListener(listener: MediaPlayer.OnTimedTextListener!)",
      "desc": "Register a callback to be invoked when a timed text is available for display."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnVideoSizeChangedListener(listener: MediaPlayer.OnVideoSizeChangedListener!)",
      "desc": "Register a callback to be invoked when the video size is known or updated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPlaybackParams(params: PlaybackParams)",
      "desc": "Sets playback rate using PlaybackParams."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setPreferredDevice(deviceInfo: AudioDeviceInfo!)",
      "desc": "Specifies an audio device (via an AudioDeviceInfo object) to route the output from this MediaPlayer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScreenOnWhilePlaying(screenOn: Boolean)",
      "desc": "Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSurface(surface: Surface!)",
      "desc": "Sets the Surface to be used as the sink for the video portion of the media."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSyncParams(params: SyncParams)",
      "desc": "Sets A/V sync mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVideoScalingMode(mode: Int)",
      "desc": "Sets video scaling mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setVolume(leftVolume: Float, rightVolume: Float)",
      "desc": "Sets the volume on this player."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWakeMode(context: Context!, mode: Int)",
      "desc": "Set the low-level power management behavior for this MediaPlayer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "start()",
      "desc": "Starts or resumes playback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "stop()",
      "desc": "Stops playback after playback has been started or paused."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "DrmInfo",
      "desc": "Encapsulates the DRM properties of the source."
    },
    {
      "type": "nested-classes",
      "code": "MetricsConstants",
      "desc": ""
    },
    {
      "type": "nested-classes",
      "code": "NoDrmSchemeException",
      "desc": "Thrown when a DRM method is called before preparing a DRM scheme through prepareDrm()."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnBufferingUpdateListener",
      "desc": "Interface definition of a callback to be invoked indicating buffering status of a media resource being streamed over the network."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnCompletionListener",
      "desc": "Interface definition for a callback to be invoked when playback of a media source has completed."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDrmConfigHelper",
      "desc": "Interface definition of a callback to be invoked when the app can do DRM configuration (get/set properties) before the session is opened."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDrmInfoListener",
      "desc": "Interface definition of a callback to be invoked when the DRM info becomes available"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDrmPreparedListener",
      "desc": "Interface definition of a callback to notify the app when the DRM is ready for key request/response"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnErrorListener",
      "desc": "Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time)."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnInfoListener",
      "desc": "Interface definition of a callback to be invoked to communicate some info and/or warning about the media or its playback."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnMediaTimeDiscontinuityListener",
      "desc": "Interface definition of a callback to be invoked when discontinuity in the normal progression of the media time is detected."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnPreparedListener",
      "desc": "Interface definition for a callback to be invoked when the media source is ready for playback."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnSeekCompleteListener",
      "desc": "Interface definition of a callback to be invoked indicating the completion of a seek operation."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnSubtitleDataListener",
      "desc": "Interface definition of a callback to be invoked when a player subtitle track has new subtitle data available."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnTimedMetaDataAvailableListener",
      "desc": "Interface definition of a callback to be invoked when a track has timed metadata available."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnTimedTextListener",
      "desc": "Interface definition of a callback to be invoked when a timed text is available for display."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnVideoSizeChangedListener",
      "desc": "Interface definition of a callback to be invoked when the video size is first known or updated"
    },
    {
      "type": "nested-classes",
      "code": "ProvisioningNetworkErrorException",
      "desc": "Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to a network error (Internet reachability, timeout, etc.)."
    },
    {
      "type": "nested-classes",
      "code": "ProvisioningServerErrorException",
      "desc": "Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to the provisioning server denying the request."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "TrackInfo",
      "desc": "Class for MediaPlayer to return each audio/video/subtitle track's metadata."
    }
  ]
}