{
  "path": "android.icu.text",
  "name": "DecimalFormat",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PAD_AFTER_PREFIX",
      "desc": "[icu] Constant for getPadPosition() and setPadPosition(int) to specify pad characters inserted after the prefix."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PAD_AFTER_SUFFIX",
      "desc": "[icu] Constant for getPadPosition() and setPadPosition(int) to specify pad characters inserted after the suffix."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PAD_BEFORE_PREFIX",
      "desc": "[icu] Constant for getPadPosition() and setPadPosition(int) to specify pad characters inserted before the prefix."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PAD_BEFORE_SUFFIX",
      "desc": "[icu] Constant for getPadPosition() and setPadPosition(int) to specify pad characters inserted before the suffix."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a DecimalFormat based on the number pattern and symbols for the default locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!)\n            Creates a DecimalFormat based on the given pattern, using symbols for the default locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, symbols: DecimalFormatSymbols!)\n            Creates a DecimalFormat based on the given pattern and symbols."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, symbols: DecimalFormatSymbols!, infoInput: CurrencyPluralInfo!, style: Int)\n            Creates a DecimalFormat based on the given pattern and symbols, with additional control over the behavior of currency."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyLocalizedPattern(localizedPattern: String!)",
      "desc": "Converts the given string to standard notation and then parses it using applyPattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyPattern(pattern: String!)",
      "desc": "Parses the given pattern string and overwrites the settings specified in the pattern string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "areSignificantDigitsUsed()",
      "desc": "[icu] Returns whether significant digits are being used in rounding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Tests for equality between this formatter and another formatter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Double, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Long, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: BigInteger!, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "[icu] Formats a BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: BigDecimal!, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "[icu] Formats a BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: BigDecimal!, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "[icu] Formats an ICU BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(currAmt: CurrencyAmount!, result: StringBuffer!, fieldPosition: FieldPosition!)",
      "desc": "[icu] Formats a CurrencyAmount.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AttributedCharacterIterator",
      "code": "formatToCharacterIterator(obj: Any!)",
      "desc": "Formats an Object producing an AttributedCharacterIterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency",
      "code": "getCurrency()",
      "desc": "Returns the currency used to display currency amounts.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CurrencyPluralInfo",
      "code": "getCurrencyPluralInfo()",
      "desc": "[icu] Returns the current instance of CurrencyPluralInfo.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency.CurrencyUsage",
      "code": "getCurrencyUsage()",
      "desc": "[icu] Returns the strategy for rounding currency amounts.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "getDecimalFormatSymbols()",
      "desc": "Returns a copy of the decimal format symbols used by this formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getFormatWidth()",
      "desc": "Returns the minimum number of characters in formatted output."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGroupingSize()",
      "desc": "Returns the primary grouping size in use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MathContext",
      "code": "getMathContext()",
      "desc": "[icu] Returns the java.math.MathContext being used to round numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MathContext",
      "code": "getMathContextICU()",
      "desc": "[icu] Returns the android.icu.math.MathContext being used to round numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumFractionDigits()",
      "desc": "Returns the effective maximum number of integer digits after the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumIntegerDigits()",
      "desc": "Returns the effective maximum number of digits before the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumSignificantDigits()",
      "desc": "[icu] Returns the effective maximum number of significant digits displayed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Byte",
      "code": "getMinimumExponentDigits()",
      "desc": "[icu] Returns the minimum number of digits printed in the exponent in scientific notation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumFractionDigits()",
      "desc": "Returns the effective minimum number of integer digits after the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumIntegerDigits()",
      "desc": "Returns the effective minimum number of digits before the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumSignificantDigits()",
      "desc": "[icu] Returns the effective minimum number of significant digits displayed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMultiplier()",
      "desc": "Returns the multiplier being applied to numbers before they are formatted."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getNegativePrefix()",
      "desc": "Affixes: Gets the negative prefix string currently being used to format numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getNegativeSuffix()",
      "desc": "Affixes: Gets the negative suffix string currently being used to format numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPadCharacter()",
      "desc": "[icu] Returns the character used for padding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPadPosition()",
      "desc": "[icu] Returns the position used for padding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getParseMaxDigits()",
      "desc": "Always returns 1000, the default prior to ICU 59."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPositivePrefix()",
      "desc": "Affixes: Gets the positive prefix string currently being used to format numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPositiveSuffix()",
      "desc": "Affixes: Gets the positive suffix string currently being used to format numbers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "getRoundingIncrement()",
      "desc": "[icu] Returns the increment to which numbers are being rounded.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRoundingMode()",
      "desc": "Returns the rounding mode being used to round numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSecondaryGroupingSize()",
      "desc": "[icu] Returns the secondary grouping size in use."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code value for the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDecimalPatternMatchRequired()",
      "desc": "[icu] Returns whether the presence of a decimal point must match the pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDecimalSeparatorAlwaysShown()",
      "desc": "Returns whether the decimal separator is shown on integers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isExponentSignAlwaysShown()",
      "desc": "[icu] Returns whether the sign (plus or minus) is always printed in scientific notation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isGroupingUsed()",
      "desc": "Returns whether or not grouping separators are being printed in the output."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseBigDecimal()",
      "desc": "Returns whether parse will always return a BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseIntegerOnly()",
      "desc": "Returns true if this format will parse numbers as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseStrict()",
      "desc": "[icu] Returns whether strict parsing is in effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isScientificNotation()",
      "desc": "[icu] Returns whether scientific (exponential) notation is enabled on this formatter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Number",
      "code": "parse(text: String!, parsePosition: ParsePosition!)",
      "desc": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CurrencyAmount",
      "code": "parseCurrency(text: CharSequence!, parsePosition: ParsePosition!)",
      "desc": "Parses text from the given string as a CurrencyAmount.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrency(currency: Currency!)",
      "desc": "Sets the currency to be used when formatting numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrencyPluralInfo(newInfo: CurrencyPluralInfo!)",
      "desc": "[icu] Sets a custom instance of CurrencyPluralInfo."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrencyUsage(usage: Currency.CurrencyUsage!)",
      "desc": "[icu] Sets the currency-dependent strategy to use when rounding numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalFormatSymbols(newSymbols: DecimalFormatSymbols!)",
      "desc": "Sets the decimal format symbols used by this formatter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalPatternMatchRequired(value: Boolean)",
      "desc": "[icu] Parsing: This method is used to either require or  the presence of a decimal point in the string being parsed (disabled by default)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalSeparatorAlwaysShown(value: Boolean)",
      "desc": "Separators: Sets whether the decimal separator (a period in en-US) is shown on integers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExponentSignAlwaysShown(expSignAlways: Boolean)",
      "desc": "[icu] Scientific Notation: Sets whether the sign (plus or minus) is always to be shown in the exponent in scientific notation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFormatWidth(width: Int)",
      "desc": "Padding: Sets the minimum width of the string output by the formatting pipeline."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingSize(width: Int)",
      "desc": "Grouping: Sets the primary grouping size (distance between grouping separators) used when formatting large numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingUsed(enabled: Boolean)",
      "desc": "Grouping: Sets whether grouping is to be used when formatting numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMathContext(mathContext: MathContext!)",
      "desc": "[icu] Rounding and Digit Limits: Sets the java.math.MathContext used to round numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMathContextICU(mathContextICU: MathContext!)",
      "desc": "[icu] Rounding and Digit Limits: Overload of setMathContext for android.icu.math.MathContext."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumFractionDigits(value: Int)",
      "desc": "Rounding and Digit Limits: Sets the maximum number of digits to display after the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumIntegerDigits(value: Int)",
      "desc": "Rounding and Digit Limits: Sets the maximum number of digits to display before the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumSignificantDigits(value: Int)",
      "desc": "[icu] Rounding and Digit Limits: Sets the maximum number of significant digits to be displayed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumExponentDigits(minExpDig: Byte)",
      "desc": "[icu] Scientific Notation: Sets the minimum number of digits to be printed in the exponent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumFractionDigits(value: Int)",
      "desc": "Rounding and Digit Limits: Sets the minimum number of digits to display after the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumIntegerDigits(value: Int)",
      "desc": "Rounding and Digit Limits: Sets the minimum number of digits to display before the decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumSignificantDigits(value: Int)",
      "desc": "[icu] Rounding and Digit Limits: Sets the minimum number of significant digits to be displayed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMultiplier(multiplier: Int)",
      "desc": "Sets a number that will be used to multiply all numbers prior to formatting."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNegativePrefix(prefix: String!)",
      "desc": "Affixes: Sets the string to prepend to negative numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNegativeSuffix(suffix: String!)",
      "desc": "Affixes: Sets the string to append to negative numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPadCharacter(padChar: Char)",
      "desc": "[icu] Padding: Sets the character used to pad numbers that are narrower than the width specified in setFormatWidth."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPadPosition(padPos: Int)",
      "desc": "[icu] Padding: Sets the position where to insert the pad character when narrower than the width specified in setFormatWidth."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseBigDecimal(value: Boolean)",
      "desc": "Whether to make parse prefer returning a android.icu.math.BigDecimal when possible."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseIntegerOnly(parseIntegerOnly: Boolean)",
      "desc": "Parsing: Sets whether to ignore the fraction part of a number when parsing (defaults to false)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseMaxDigits(maxDigits: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseStrict(parseStrict: Boolean)",
      "desc": "[icu] Sets whether strict parsing is in effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPositivePrefix(prefix: String!)",
      "desc": "Affixes: Sets the string to prepend to positive numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPositiveSuffix(suffix: String!)",
      "desc": "Affixes: Sets the string to append to positive numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingIncrement(increment: BigDecimal!)",
      "desc": "[icu] Rounding and Digit Limits: Sets an increment, or interval, to which numbers are rounded."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingIncrement(increment: BigDecimal!)",
      "desc": "[icu] Rounding and Digit Limits: Overload of  ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingIncrement(increment: Double)",
      "desc": "[icu] Rounding and Digit Limits: Overload of  ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingMode(roundingMode: Int)",
      "desc": "Rounding and Digit Limits: Sets the RoundingMode used to round numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setScientificNotation(useScientific: Boolean)",
      "desc": "[icu] Scientific Notation: Sets whether this formatter should print in scientific (exponential) notation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSecondaryGroupingSize(width: Int)",
      "desc": "[icu] Grouping: Sets the secondary grouping size (distance between grouping separators after the first separator) used when formatting large numbers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSignificantDigitsUsed(useSignificantDigits: Boolean)",
      "desc": "[icu] Rounding and Digit Limits: Sets whether significant digits are to be used in rounding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toLocalizedPattern()",
      "desc": "Calls toPattern and converts the string to localized notation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toPattern()",
      "desc": "Serializes this formatter object to a decimal format pattern string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the default value of toString() with extra DecimalFormat-specific information appended to the end of the string."
    },
    {
      "type": "inherited-constants",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "ACCOUNTINGCURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "CURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CASHCURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "FRACTION_FIELD"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "INTEGERSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "INTEGER_FIELD"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "ISOCURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "NUMBERSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PERCENTSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PLURALCURRENCYSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "SCIENTIFICSTYLE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "STANDARDCURRENCYSTYLE"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat"
    },
    {
      "type": "inherited-methods",
      "from": "StringBuffer!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: Any!, toAppendTo: StringBuffer!, pos: FieldPosition!)"
    },
    {
      "type": "inherited-methods",
      "from": "BigInteger"
    },
    {
      "type": "inherited-methods",
      "from": "BigDecimal"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: Double)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: BigInteger!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: BigDecimal!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(number: BigDecimal!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "format(currAmt: CurrencyAmount!)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<Locale!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getAvailableLocales()"
    },
    {
      "type": "inherited-methods",
      "from": "DisplayContext!"
    },
    {
      "type": "inherited-methods",
      "from": "getContext(type: DisplayContext.Type!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrencyInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(style: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(inLocale: Locale!, style: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(desiredLocale: ULocale!, choice: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getIntegerInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getNumberInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getPattern(forLocale: ULocale!, choice: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getPercentInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getScientificInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "FORMAT"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getScientificInstance(inLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "NumberFormat!"
    },
    {
      "type": "inherited-methods",
      "from": "getScientificInstance(inLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "Number!"
    },
    {
      "type": "inherited-methods",
      "from": "parse(text: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Any!"
    },
    {
      "type": "inherited-methods",
      "from": "parseObject(source: String!, parsePosition: ParsePosition!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setContext(context: DisplayContext!)"
    }
  ]
}