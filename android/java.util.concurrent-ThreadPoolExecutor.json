{
  "path": "java.util.concurrent",
  "name": "ThreadPoolExecutor",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(corePoolSize: Int, maximumPoolSize: Int, keepAliveTime: Long, unit: TimeUnit!, workQueue: BlockingQueue<Runnable!>!)\n            Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory and rejected execution handler."
    },
    {
      "type": "ctor",
      "ctor": "<init>(corePoolSize: Int, maximumPoolSize: Int, keepAliveTime: Long, unit: TimeUnit!, workQueue: BlockingQueue<Runnable!>!, threadFactory: ThreadFactory!)\n            Creates a new ThreadPoolExecutor with the given initial parameters and default rejected execution handler."
    },
    {
      "type": "ctor",
      "ctor": "<init>(corePoolSize: Int, maximumPoolSize: Int, keepAliveTime: Long, unit: TimeUnit!, workQueue: BlockingQueue<Runnable!>!, handler: RejectedExecutionHandler!)\n            Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory."
    },
    {
      "type": "ctor",
      "ctor": "<init>(corePoolSize: Int, maximumPoolSize: Int, keepAliveTime: Long, unit: TimeUnit!, workQueue: BlockingQueue<Runnable!>!, threadFactory: ThreadFactory!, handler: RejectedExecutionHandler!)\n            Creates a new ThreadPoolExecutor with the given initial parameters."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "allowCoreThreadTimeOut(value: Boolean)",
      "desc": "Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "allowsCoreThreadTimeOut()",
      "desc": "Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "awaitTermination(timeout: Long, unit: TimeUnit!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "execute(command: Runnable!)",
      "desc": "Executes the given task sometime in the future."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getActiveCount()",
      "desc": "Returns the approximate number of threads that are actively executing tasks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getCompletedTaskCount()",
      "desc": "Returns the approximate total number of tasks that have completed execution."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getCorePoolSize()",
      "desc": "Returns the core number of threads."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getKeepAliveTime(unit: TimeUnit!)",
      "desc": "Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLargestPoolSize()",
      "desc": "Returns the largest number of threads that have ever simultaneously been in the pool."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumPoolSize()",
      "desc": "Returns the maximum allowed number of threads."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPoolSize()",
      "desc": "Returns the current number of threads in the pool."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BlockingQueue",
      "code": "getQueue()",
      "desc": "Returns the task queue used by this executor.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "RejectedExecutionHandler",
      "code": "getRejectedExecutionHandler()",
      "desc": "Returns the current handler for unexecutable tasks.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTaskCount()",
      "desc": "Returns the approximate total number of tasks that have ever been scheduled for execution."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ThreadFactory",
      "code": "getThreadFactory()",
      "desc": "Returns the thread factory used to create new threads.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isShutdown()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTerminated()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTerminating()",
      "desc": "Returns true if this executor is in the process of terminating after shutdown or shutdownNow but has not completely terminated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "prestartAllCoreThreads()",
      "desc": "Starts all core threads, causing them to idly wait for work."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "prestartCoreThread()",
      "desc": "Starts a core thread, causing it to idly wait for work."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "purge()",
      "desc": "Tries to remove from the work queue all Future tasks that have been cancelled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(task: Runnable!)",
      "desc": "Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCorePoolSize(corePoolSize: Int)",
      "desc": "Sets the core number of threads."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setKeepAliveTime(time: Long, unit: TimeUnit!)",
      "desc": "Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumPoolSize(maximumPoolSize: Int)",
      "desc": "Sets the maximum allowed number of threads."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRejectedExecutionHandler(handler: RejectedExecutionHandler!)",
      "desc": "Sets a new handler for unexecutable tasks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setThreadFactory(threadFactory: ThreadFactory!)",
      "desc": "Sets the thread factory used to create new threads."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "shutdown()",
      "desc": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "shutdownNow()",
      "desc": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "afterExecute(r: Runnable!, t: Throwable!)",
      "desc": "Method invoked upon completion of execution of the given Runnable."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "beforeExecute(t: Thread!, r: Runnable!)",
      "desc": "Method invoked prior to executing the given Runnable in the given thread."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": "Invokes shutdown when this executor is no longer referenced and it has no threads."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "terminated()",
      "desc": "Method invoked when the Executor has terminated."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "AbortPolicy",
      "desc": "A handler for rejected tasks that throws a RejectedExecutionException."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "CallerRunsPolicy",
      "desc": "A handler for rejected tasks that runs the rejected task directly in the calling thread of the execute method, unless the executor has been shut down, in which case the task is discarded."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "DiscardOldestPolicy",
      "desc": "A handler for rejected tasks that discards the oldest unhandled request and then retries execute, unless the executor is shut down, in which case the task is discarded."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "DiscardPolicy",
      "desc": "A handler for rejected tasks that silently discards the rejected task."
    },
    {
      "type": "inherited-methods",
      "from": "ExecutorService"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "awaitTermination(timeout: Long, unit: TimeUnit!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isShutdown()"
    },
    {
      "type": "inherited-methods",
      "from": "true"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isTerminated()"
    },
    {
      "type": "inherited-methods",
      "from": "true"
    },
    {
      "type": "inherited-methods",
      "from": "isTerminated"
    },
    {
      "type": "inherited-methods",
      "from": "true"
    },
    {
      "type": "inherited-methods",
      "from": "shutdown"
    },
    {
      "type": "inherited-methods",
      "from": "shutdownNow"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "shutdown()"
    },
    {
      "type": "inherited-methods",
      "from": "awaitTermination"
    },
    {
      "type": "inherited-methods",
      "from": "MutableList<Runnable!>!"
    },
    {
      "type": "inherited-methods",
      "from": "shutdownNow()"
    },
    {
      "type": "inherited-methods",
      "from": "awaitTermination"
    },
    {
      "type": "inherited-methods",
      "from": "Thread#interrupt"
    },
    {
      "type": "inherited-methods",
      "from": "Executor"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "execute(command: Runnable!)"
    },
    {
      "type": "inherited-methods",
      "from": "Executor"
    },
    {
      "type": "inherited-methods",
      "from": "AbstractExecutorService"
    },
    {
      "type": "inherited-methods",
      "from": "MutableList<Future<T>!>!"
    },
    {
      "type": "inherited-methods",
      "from": "invokeAll(tasks: MutableCollection<out Callable<T>!>!)"
    },
    {
      "type": "inherited-methods",
      "from": "MutableList<Future<T>!>!"
    },
    {
      "type": "inherited-methods",
      "from": "invokeAll(tasks: MutableCollection<out Callable<T>!>!, timeout: Long, unit: TimeUnit!)"
    },
    {
      "type": "inherited-methods",
      "from": "T"
    },
    {
      "type": "inherited-methods",
      "from": "invokeAny(tasks: MutableCollection<out Callable<T>!>!)"
    },
    {
      "type": "inherited-methods",
      "from": "T"
    },
    {
      "type": "inherited-methods",
      "from": "invokeAny(tasks: MutableCollection<out Callable<T>!>!, timeout: Long, unit: TimeUnit!)"
    },
    {
      "type": "inherited-methods",
      "from": "RunnableFuture<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "newTaskFor(runnable: Runnable!, value: T)"
    },
    {
      "type": "inherited-methods",
      "from": "RunnableFuture"
    },
    {
      "type": "inherited-methods",
      "from": "RunnableFuture<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "newTaskFor(callable: Callable<T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "RunnableFuture"
    },
    {
      "type": "inherited-methods",
      "from": "Future<*>!"
    },
    {
      "type": "inherited-methods",
      "from": "submit(task: Runnable!)"
    },
    {
      "type": "inherited-methods",
      "from": "Future<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "submit(task: Runnable!, result: T)"
    },
    {
      "type": "inherited-methods",
      "from": "Future<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "submit(task: Callable<T>!)"
    }
  ]
}