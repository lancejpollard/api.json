{
  "path": "android.test",
  "name": "MoreAsserts",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertAssignableFrom(expected: Class<*>!, actual: Any!)",
      "desc": "Asserts that the class expected is assignable from the object actual."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertAssignableFrom(expected: Class<*>!, actual: Class<*>!)",
      "desc": "Asserts that class expected is assignable from the class actual."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MatchResult",
      "code": "assertContainsRegex(message: String!, expectedRegex: String!, actual: String!)",
      "desc": "Asserts that expectedRegex matches any substring of actual and fails with message if it does not.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MatchResult",
      "code": "assertContainsRegex(expectedRegex: String!, actual: String!)",
      "desc": "Variant of assertContainsRegex(java.lang.String,java.lang.String,java.lang.String) using a generic message.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertContentsInAnyOrder(message: String!, actual: MutableIterable<*>!, vararg expected: Any!)",
      "desc": "Asserts that actual contains precisely the elements expected, but in any order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertContentsInAnyOrder(actual: MutableIterable<*>!, vararg expected: Any!)",
      "desc": "Variant of assertContentsInAnyOrder(String, Iterable, Object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertContentsInOrder(message: String!, actual: MutableIterable<*>!, vararg expected: Any!)",
      "desc": "Asserts that actual contains precisely the elements expected, and in the same order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertContentsInOrder(actual: MutableIterable<*>!, vararg expected: Any!)",
      "desc": "Variant of assertContentsInOrder(String, Iterable, Object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEmpty(message: String!, iterable: MutableIterable<*>!)",
      "desc": "Asserts that iterable is empty."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEmpty(iterable: MutableIterable<*>!)",
      "desc": "Variant of assertEmpty(java.lang.String,java.lang.Iterable) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEmpty(message: String!, map: MutableMap<*, *>!)",
      "desc": "Asserts that map is empty."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEmpty(map: MutableMap<*, *>!)",
      "desc": "Variant of assertEmpty(java.lang.String,java.util.Map) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(message: String!, expected: ByteArray!, actual: ByteArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(expected: ByteArray!, actual: ByteArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(message: String!, expected: IntArray!, actual: IntArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(expected: IntArray!, actual: IntArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(message: String!, expected: DoubleArray!, actual: DoubleArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(expected: DoubleArray!, actual: DoubleArray!)",
      "desc": "Asserts that array actual is the same size and every element equals those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(message: String!, expected: Array<Any!>!, actual: Array<Any!>!)",
      "desc": "Asserts that array actual is the same size and every element is the same as those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(expected: Array<Any!>!, actual: Array<Any!>!)",
      "desc": "Asserts that array actual is the same size and every element is the same as those in array expected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(message: String!, expected: MutableSet<*>!, actual: MutableSet<*>!)",
      "desc": "Asserts that two sets contain the same elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertEquals(expected: MutableSet<*>!, actual: MutableSet<*>!)",
      "desc": "Asserts that two sets contain the same elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MatchResult",
      "code": "assertMatchesRegex(message: String!, expectedRegex: String!, actual: String!)",
      "desc": "Asserts that expectedRegex exactly matches actual and fails with message if it does not.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MatchResult",
      "code": "assertMatchesRegex(expectedRegex: String!, actual: String!)",
      "desc": "Variant of assertMatchesRegex(java.lang.String,java.lang.String,java.lang.String) using a generic message.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotContainsRegex(message: String!, expectedRegex: String!, actual: String!)",
      "desc": "Asserts that expectedRegex does not match any substring of actual, and fails with message if it does."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotContainsRegex(expectedRegex: String!, actual: String!)",
      "desc": "Variant of assertNotContainsRegex(java.lang.String,java.lang.String,java.lang.String) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEmpty(message: String!, iterable: MutableIterable<*>!)",
      "desc": "Asserts that iterable is not empty."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEmpty(iterable: MutableIterable<*>!)",
      "desc": "Variant of assertNotEmpty(String, Iterable) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEmpty(message: String!, map: MutableMap<*, *>!)",
      "desc": "Asserts that map is not empty."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEmpty(map: MutableMap<*, *>!)",
      "desc": "Variant of assertNotEmpty(java.lang.String,java.util.Map) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEqual(message: String!, unexpected: Any!, actual: Any!)",
      "desc": "Asserts that actual is not equal unexpected, according to both == and Object#equals."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotEqual(unexpected: Any!, actual: Any!)",
      "desc": "Variant of assertNotEqual(java.lang.String,java.lang.Object,java.lang.Object) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotMatchesRegex(message: String!, expectedRegex: String!, actual: String!)",
      "desc": "Asserts that expectedRegex does not exactly match actual, and fails with message if it does."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "assertNotMatchesRegex(expectedRegex: String!, actual: String!)",
      "desc": "Variant of assertNotMatchesRegex(java.lang.String,java.lang.String,java.lang.String) using a generic message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "checkEqualsAndHashCodeMethods(message: String!, lhs: Any!, rhs: Any!, expectedResult: Boolean)",
      "desc": "Utility for testing equals() and hashCode() results at once."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "checkEqualsAndHashCodeMethods(lhs: Any!, rhs: Any!, expectedResult: Boolean)",
      "desc": "Variant of checkEqualsAndHashCodeMethods(String,Object,Object,boolean...)} using a generic message."
    }
  ]
}