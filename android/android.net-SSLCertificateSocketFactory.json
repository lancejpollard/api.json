{
  "path": "android.net",
  "name": "SSLCertificateSocketFactory",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(handshakeTimeoutMillis: Int)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket(k: Socket!, host: String!, port: Int, close: Boolean)",
      "desc": "Returns a socket layered over an existing socket connected to the named host, at the given port.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket()",
      "desc": "Creates a new socket which is not connected to any remote host.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket(addr: InetAddress!, port: Int, localAddr: InetAddress!, localPort: Int)",
      "desc": "Creates a socket and connect it to the specified remote address on the specified remote port.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket(addr: InetAddress!, port: Int)",
      "desc": "Creates a socket and connects it to the specified port number at the specified address.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket(host: String!, port: Int, localAddr: InetAddress!, localPort: Int)",
      "desc": "Creates a socket and connects it to the specified remote host on the specified remote port.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "createSocket(host: String!, port: Int)",
      "desc": "Creates a socket and connects it to the specified remote host at the specified remote port.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SocketFactory",
      "code": "getDefault(handshakeTimeoutMillis: Int)",
      "desc": "Returns a new socket factory instance with an optional handshake timeout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLSocketFactory",
      "code": "getDefault(handshakeTimeoutMillis: Int, cache: SSLSessionCache!)",
      "desc": "Returns a new socket factory instance with an optional handshake timeout and SSL session cache.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getDefaultCipherSuites()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLSocketFactory",
      "code": "getInsecure(handshakeTimeoutMillis: Int, cache: SSLSessionCache!)",
      "desc": "Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "getNpnSelectedProtocol(socket: Socket!)",
      "desc": "Returns the Next Protocol Negotiation (NPN) protocol selected by client and server, or null if no protocol was negotiated.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getSupportedCipherSuites()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHostname(socket: Socket!, hostName: String!)",
      "desc": "Turns on Server Name Indication (SNI) on a given socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setKeyManagers(keyManagers: Array<KeyManager!>!)",
      "desc": "Sets the KeyManagers to be used for connections made by this factory."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNpnProtocols(npnProtocols: Array<ByteArray!>!)",
      "desc": "Sets the Next Protocol Negotiation (NPN) protocols that this peer is interested in."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTrustManagers(trustManager: Array<TrustManager!>!)",
      "desc": "Sets the TrustManagers to be used for connections made by this factory."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUseSessionTickets(socket: Socket!, useSessionTickets: Boolean)",
      "desc": "Enables session ticket support on the given socket."
    },
    {
      "type": "inherited-methods",
      "from": "SocketFactory"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "createSocket()"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "createSocket(host: String!, port: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "port"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "createSocket(host: String!, port: Int, localHost: InetAddress!, localPort: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "port"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "createSocket(host: InetAddress!, port: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "port"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "createSocket(address: InetAddress!, port: Int, localAddress: InetAddress!, localPort: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "port"
    },
    {
      "type": "inherited-methods",
      "from": "SSLSocketFactory"
    },
    {
      "type": "inherited-methods",
      "from": "SocketFactory!"
    },
    {
      "type": "inherited-methods",
      "from": "getDefault()"
    },
    {
      "type": "inherited-methods",
      "from": "SSLContext.getDefault().getSocketFactory()"
    }
  ]
}