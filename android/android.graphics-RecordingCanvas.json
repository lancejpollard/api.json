{
  "path": "android.graphics",
  "name": "RecordingCanvas",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "disableZ()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawARGB(a: Int, r: Int, g: Int, b: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawArc(left: Float, top: Float, right: Float, bottom: Float, startAngle: Float, sweepAngle: Float, useCenter: Boolean, paint: Paint)",
      "desc": "Draw the specified arc, which will be scaled to fit inside the specified oval."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawArc(oval: RectF, startAngle: Float, sweepAngle: Float, useCenter: Boolean, paint: Paint)",
      "desc": "Draw the specified arc, which will be scaled to fit inside the specified oval."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(bitmap: Bitmap, left: Float, top: Float, paint: Paint?)",
      "desc": "Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(bitmap: Bitmap, matrix: Matrix, paint: Paint?)",
      "desc": "Draw the bitmap using the specified matrix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(bitmap: Bitmap, src: Rect?, dst: Rect, paint: Paint?)",
      "desc": "Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(bitmap: Bitmap, src: Rect?, dst: RectF, paint: Paint?)",
      "desc": "Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(colors: IntArray, offset: Int, stride: Int, x: Float, y: Float, width: Int, height: Int, hasAlpha: Boolean, paint: Paint?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmap(colors: IntArray, offset: Int, stride: Int, x: Int, y: Int, width: Int, height: Int, hasAlpha: Boolean, paint: Paint?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawBitmapMesh(bitmap: Bitmap, meshWidth: Int, meshHeight: Int, verts: FloatArray, vertOffset: Int, colors: IntArray?, colorOffset: Int, paint: Paint?)",
      "desc": "Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawCircle(cx: Float, cy: Float, radius: Float, paint: Paint)",
      "desc": "Draw the specified circle using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawColor(color: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawColor(color: Int, mode: PorterDuff.Mode)",
      "desc": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawColor(color: Int, mode: BlendMode)",
      "desc": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawColor(color: Long, mode: BlendMode)",
      "desc": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawDoubleRoundRect(outer: RectF, outerRx: Float, outerRy: Float, inner: RectF, innerRx: Float, innerRy: Float, paint: Paint)",
      "desc": "Draws a double rounded rectangle using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawDoubleRoundRect(outer: RectF, outerRadii: FloatArray, inner: RectF, innerRadii: FloatArray, paint: Paint)",
      "desc": "Draws a double rounded rectangle using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawLine(startX: Float, startY: Float, stopX: Float, stopY: Float, paint: Paint)",
      "desc": "Draw a line segment with the specified start and stop x,y coordinates, using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawLines(pts: FloatArray, offset: Int, count: Int, paint: Paint)",
      "desc": "Draw a series of lines."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawLines(pts: FloatArray, paint: Paint)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawOval(left: Float, top: Float, right: Float, bottom: Float, paint: Paint)",
      "desc": "Draw the specified oval using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawOval(oval: RectF, paint: Paint)",
      "desc": "Draw the specified oval using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPaint(paint: Paint)",
      "desc": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPatch(patch: NinePatch, dst: Rect, paint: Paint?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPatch(patch: NinePatch, dst: RectF, paint: Paint?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPath(path: Path, paint: Paint)",
      "desc": "Draw the specified path using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPicture(picture: Picture)",
      "desc": "Save the canvas state, draw the picture, and restore the canvas state."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPicture(picture: Picture, dst: Rect)",
      "desc": "Draw the picture, stretched to fit into the dst rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPicture(picture: Picture, dst: RectF)",
      "desc": "Draw the picture, stretched to fit into the dst rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPoint(x: Float, y: Float, paint: Paint)",
      "desc": "Helper for drawPoints() for drawing a single point."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPoints(pts: FloatArray!, offset: Int, count: Int, paint: Paint)",
      "desc": "Draw a series of points."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPoints(pts: FloatArray, paint: Paint)",
      "desc": "Helper for drawPoints() that assumes you want to draw the entire array"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPosText(text: CharArray, index: Int, count: Int, pos: FloatArray, paint: Paint)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawPosText(text: String, pos: FloatArray, paint: Paint)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRGB(r: Int, g: Int, b: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRect(left: Float, top: Float, right: Float, bottom: Float, paint: Paint)",
      "desc": "Draw the specified Rect using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRect(r: Rect, paint: Paint)",
      "desc": "Draw the specified Rect using the specified Paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRect(rect: RectF, paint: Paint)",
      "desc": "Draw the specified Rect using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRenderNode(renderNode: RenderNode)",
      "desc": "Draws the specified display list onto this canvas."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRoundRect(left: Float, top: Float, right: Float, bottom: Float, rx: Float, ry: Float, paint: Paint)",
      "desc": "Draw the specified round-rect using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawRoundRect(rect: RectF, rx: Float, ry: Float, paint: Paint)",
      "desc": "Draw the specified round-rect using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawText(text: CharArray, index: Int, count: Int, x: Float, y: Float, paint: Paint)",
      "desc": "Draw the text, with origin at (x,y), using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawText(text: CharSequence, start: Int, end: Int, x: Float, y: Float, paint: Paint)",
      "desc": "Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawText(text: String, x: Float, y: Float, paint: Paint)",
      "desc": "Draw the text, with origin at (x,y), using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawText(text: String, start: Int, end: Int, x: Float, y: Float, paint: Paint)",
      "desc": "Draw the text, with origin at (x,y), using the specified paint."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawTextOnPath(text: CharArray, index: Int, count: Int, path: Path, hOffset: Float, vOffset: Float, paint: Paint)",
      "desc": "Draw the text, with origin at (x,y), using the specified paint, along the specified path."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawTextOnPath(text: String, path: Path, hOffset: Float, vOffset: Float, paint: Paint)",
      "desc": "Draw the text, with origin at (x,y), using the specified paint, along the specified path."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawTextRun(text: CharArray, index: Int, count: Int, contextIndex: Int, contextCount: Int, x: Float, y: Float, isRtl: Boolean, paint: Paint)",
      "desc": "Draw a run of text, all in a single direction, with optional context for complex text shaping."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawTextRun(text: CharSequence, start: Int, end: Int, contextStart: Int, contextEnd: Int, x: Float, y: Float, isRtl: Boolean, paint: Paint)",
      "desc": "Draw a run of text, all in a single direction, with optional context for complex text shaping."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawTextRun(measuredText: MeasuredText, start: Int, end: Int, contextStart: Int, contextEnd: Int, x: Float, y: Float, isRtl: Boolean, paint: Paint)",
      "desc": "Draw a run of text, all in a single direction, with optional context for complex text shaping."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "drawVertices(mode: Canvas.VertexMode, vertexCount: Int, verts: FloatArray, vertOffset: Int, texs: FloatArray?, texOffset: Int, colors: IntArray?, colorOffset: Int, indices: ShortArray?, indexOffset: Int, indexCount: Int, paint: Paint)",
      "desc": "Draw the array of vertices, interpreted as triangles (based on mode)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "enableZ()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMaximumBitmapHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMaximumBitmapWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isHardwareAccelerated()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isOpaque()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setBitmap(bitmap: Bitmap?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDensity(density: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Canvas"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "ALL_SAVE_FLAG"
    },
    {
      "type": "inherited-constants",
      "from": "saveLayer()"
    },
    {
      "type": "inherited-constants",
      "from": "saveLayerAlpha()"
    },
    {
      "type": "inherited-methods",
      "from": "Canvas"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipOutPath(path: Path)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipOutRect(rect: RectF)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipOutRect(rect: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipOutRect(left: Float, top: Float, right: Float, bottom: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipOutRect(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipPath(path: Path, op: Region.Op)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipPath(path: Path)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(rect: RectF, op: Region.Op)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(rect: Rect, op: Region.Op)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(rect: RectF)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(rect: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(left: Float, top: Float, right: Float, bottom: Float, op: Region.Op)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(left: Float, top: Float, right: Float, bottom: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "clipRect(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "concat(matrix: Matrix?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "drawColor(color: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "getClipBounds(bounds: Rect?)"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "getClipBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getDensity()"
    },
    {
      "type": "inherited-methods",
      "from": "Bitmap#DENSITY_NONE"
    },
    {
      "type": "inherited-methods",
      "from": "DrawFilter?"
    },
    {
      "type": "inherited-methods",
      "from": "getDrawFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "getMatrix(ctm: Matrix)"
    },
    {
      "type": "inherited-methods",
      "from": "Matrix"
    },
    {
      "type": "inherited-methods",
      "from": "getMatrix()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getSaveCount()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(rect: RectF, type: Canvas.EdgeType)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(rect: RectF)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(path: Path, type: Canvas.EdgeType)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(path: Path)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(left: Float, top: Float, right: Float, bottom: Float, type: Canvas.EdgeType)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "quickReject(left: Float, top: Float, right: Float, bottom: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "restore()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "restoreToCount(saveCount: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "rotate(degrees: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "rotate(degrees: Float, px: Float, py: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "save()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(bounds: RectF?, paint: Paint?, saveFlags: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "hardware layer"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getAlpha()"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getXfermode()"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getColorFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "saveFlags"
    },
    {
      "type": "inherited-methods",
      "from": "ALL_SAVE_FLAG"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(bounds: RectF?, paint: Paint?)"
    },
    {
      "type": "inherited-methods",
      "from": "hardware layer"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getAlpha()"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getXfermode()"
    },
    {
      "type": "inherited-methods",
      "from": "Paint#getColorFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(left: Float, top: Float, right: Float, bottom: Float, paint: Paint?, saveFlags: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "saveFlags"
    },
    {
      "type": "inherited-methods",
      "from": "ALL_SAVE_FLAG"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(left: Float, top: Float, right: Float, bottom: Float, paint: Paint?)"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(android.graphics.RectF,android.graphics.Paint)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayerAlpha(bounds: RectF?, alpha: Int, saveFlags: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "hardware layer"
    },
    {
      "type": "inherited-methods",
      "from": "alpha"
    },
    {
      "type": "inherited-methods",
      "from": "saveFlags"
    },
    {
      "type": "inherited-methods",
      "from": "ALL_SAVE_FLAG"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayerAlpha(bounds: RectF?, alpha: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayer(android.graphics.RectF,android.graphics.Paint)"
    },
    {
      "type": "inherited-methods",
      "from": "alpha"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayerAlpha(left: Float, top: Float, right: Float, bottom: Float, alpha: Int, saveFlags: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "saveFlags"
    },
    {
      "type": "inherited-methods",
      "from": "ALL_SAVE_FLAG"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayerAlpha(left: Float, top: Float, right: Float, bottom: Float, alpha: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "saveLayerAlpha(android.graphics.RectF,int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "scale(sx: Float, sy: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "scale(sx: Float, sy: Float, px: Float, py: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setDrawFilter(filter: DrawFilter?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setMatrix(matrix: Matrix?)"
    },
    {
      "type": "inherited-methods",
      "from": "concat(android.graphics.Matrix)"
    },
    {
      "type": "inherited-methods",
      "from": "scale(float,float)"
    },
    {
      "type": "inherited-methods",
      "from": "translate(float,float)"
    },
    {
      "type": "inherited-methods",
      "from": "rotate(float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "skew(sx: Float, sy: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "translate(dx: Float, dy: Float)"
    }
  ]
}