{
  "path": "android.text",
  "name": "SpannableStringBuilder",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a new SpannableStringBuilder with empty contents"
    },
    {
      "type": "ctor",
      "ctor": "<init>(text: CharSequence!)\n            Create a new SpannableStringBuilder containing a copy of the specified text, including its spans if any."
    },
    {
      "type": "ctor",
      "ctor": "<init>(text: CharSequence!, start: Int, end: Int)\n            Create a new SpannableStringBuilder containing a copy of the specified slice of the specified text, including its spans if any."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "append(text: CharSequence?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "append(text: CharSequence!, what: Any!, flags: Int)",
      "desc": "Appends the character sequence text and spans what over the appended part.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "append(text: CharSequence?, start: Int, end: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "append(text: Char)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearSpans()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "delete(start: Int, end: Int)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "get(where: Int)",
      "desc": "Return the char at the specified offset within the buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getChars(start: Int, end: Int, dest: CharArray!, destoff: Int)",
      "desc": "Copy the specified range of chars from this buffer into the specified array, beginning at the specified offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getFilters()",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanEnd(what: Any!)",
      "desc": "Return the buffer offset of the end of the specified markup object, or -1 if it is not attached to this buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanFlags(what: Any!)",
      "desc": "Return the flags of the end of the specified markup object, or 0 if it is not attached to this buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSpanStart(what: Any!)",
      "desc": "Return the buffer offset of the beginning of the specified markup object, or -1 if it is not attached to this buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getSpans(queryStart: Int, queryEnd: Int, kind: Class<T>?)",
      "desc": "Return an array of the spans of the specified type that overlap the specified range of the buffer.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextRunCursor(contextStart: Int, contextEnd: Int, dir: Int, offset: Int, cursorOpt: Int, p: Paint!)",
      "desc": "Returns the next cursor position in the run."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTextWatcherDepth()",
      "desc": "Returns the depth of TextWatcher callbacks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "insert(where: Int, tb: CharSequence!, start: Int, end: Int)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "insert(where: Int, tb: CharSequence!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextSpanTransition(start: Int, limit: Int, kind: Class<Any!>!)",
      "desc": "Return the next offset after start but less than or equal to limit where a span of the specified type begins or ends."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeSpan(what: Any!)",
      "desc": "Remove the specified markup object from the buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "replace(start: Int, end: Int, tb: CharSequence!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "replace(start: Int, end: Int, tb: CharSequence!, tbstart: Int, tbend: Int)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilters(filters: Array<InputFilter!>!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSpan(what: Any!, start: Int, end: Int, flags: Int)",
      "desc": "Mark the specified range of text with the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "subSequence(startIndex: Int, endIndex: Int)",
      "desc": "Return a new CharSequence containing a copy of the specified range of this buffer, including the overlapping spans."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Return a String containing a copy of the chars in this buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SpannableStringBuilder",
      "code": "valueOf(source: CharSequence!)",
      "desc": "",
      "symbol": "!"
    }
  ]
}