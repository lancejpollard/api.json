{
  "path": "javax.crypto",
  "name": "Cipher",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DECRYPT_MODE",
      "desc": "Constant used to initialize cipher to decryption mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ENCRYPT_MODE",
      "desc": "Constant used to initialize cipher to encryption mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PRIVATE_KEY",
      "desc": "Constant used to indicate the to-be-unwrapped key is a \"private key\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PUBLIC_KEY",
      "desc": "Constant used to indicate the to-be-unwrapped key is a \"public key\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SECRET_KEY",
      "desc": "Constant used to indicate the to-be-unwrapped key is a \"secret key\"."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "UNWRAP_MODE",
      "desc": "Constant used to initialize cipher to key-unwrapping mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "WRAP_MODE",
      "desc": "Constant used to initialize cipher to key-wrapping mode."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "doFinal()",
      "desc": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "doFinal(output: ByteArray!, outputOffset: Int)",
      "desc": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "doFinal(input: ByteArray!)",
      "desc": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "doFinal(input: ByteArray!, inputOffset: Int, inputLen: Int)",
      "desc": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "doFinal(input: ByteArray!, inputOffset: Int, inputLen: Int, output: ByteArray!)",
      "desc": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "doFinal(input: ByteArray!, inputOffset: Int, inputLen: Int, output: ByteArray!, outputOffset: Int)",
      "desc": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "doFinal(input: ByteBuffer!, output: ByteBuffer!)",
      "desc": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getAlgorithm()",
      "desc": "Returns the algorithm name of this Cipher object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getBlockSize()",
      "desc": "Returns the block size (in bytes)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ExemptionMechanism",
      "code": "getExemptionMechanism()",
      "desc": "Returns the exemption mechanism object used with this cipher.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getIV()",
      "desc": "Returns the initialization vector (IV) in a new buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Cipher",
      "code": "getInstance(transformation: String!)",
      "desc": "Returns a Cipher object that implements the specified transformation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Cipher",
      "code": "getInstance(transformation: String!, provider: String!)",
      "desc": "Returns a Cipher object that implements the specified transformation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Cipher",
      "code": "getInstance(transformation: String!, provider: Provider!)",
      "desc": "Returns a Cipher object that implements the specified transformation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMaxAllowedKeyLength(transformation: String!)",
      "desc": "Returns the maximum key length for the specified transformation according to the installed JCE jurisdiction policy files."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "AlgorithmParameterSpec",
      "code": "getMaxAllowedParameterSpec(transformation: String!)",
      "desc": "Returns an AlgorithmParameterSpec object which contains the maximum cipher parameter value according to the jurisdiction policy file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getOutputSize(inputLen: Int)",
      "desc": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AlgorithmParameters",
      "code": "getParameters()",
      "desc": "Returns the parameters used with this cipher.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Provider",
      "code": "getProvider()",
      "desc": "Returns the provider of this Cipher object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!)",
      "desc": "Initializes this cipher with a key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!, random: SecureRandom!)",
      "desc": "Initializes this cipher with a key and a source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!, params: AlgorithmParameterSpec!)",
      "desc": "Initializes this cipher with a key and a set of algorithm parameters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!, params: AlgorithmParameterSpec!, random: SecureRandom!)",
      "desc": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!, params: AlgorithmParameters!)",
      "desc": "Initializes this cipher with a key and a set of algorithm parameters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, key: Key!, params: AlgorithmParameters!, random: SecureRandom!)",
      "desc": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, certificate: Certificate!)",
      "desc": "Initializes this cipher with the public key from the given certificate."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "init(opmode: Int, certificate: Certificate!, random: SecureRandom!)",
      "desc": "Initializes this cipher with the public key from the given certificate and a source of randomness."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Key",
      "code": "unwrap(wrappedKey: ByteArray!, wrappedKeyAlgorithm: String!, wrappedKeyType: Int)",
      "desc": "Unwrap a previously wrapped key.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "update(input: ByteArray!)",
      "desc": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "update(input: ByteArray!, inputOffset: Int, inputLen: Int)",
      "desc": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "update(input: ByteArray!, inputOffset: Int, inputLen: Int, output: ByteArray!)",
      "desc": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "update(input: ByteArray!, inputOffset: Int, inputLen: Int, output: ByteArray!, outputOffset: Int)",
      "desc": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "update(input: ByteBuffer!, output: ByteBuffer!)",
      "desc": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "updateAAD(src: ByteArray!)",
      "desc": "Continues a multi-part update of the Additional Authentication Data (AAD)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "updateAAD(src: ByteArray!, offset: Int, len: Int)",
      "desc": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "updateAAD(src: ByteBuffer!)",
      "desc": "Continues a multi-part update of the Additional Authentication Data (AAD)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "wrap(key: Key!)",
      "desc": "Wrap a key.",
      "symbol": "!"
    }
  ]
}