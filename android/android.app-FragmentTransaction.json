{
  "path": "android.app",
  "name": "FragmentTransaction",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_ENTER_MASK",
      "desc": "Bit mask that is set for all enter transitions."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_EXIT_MASK",
      "desc": "Bit mask that is set for all exit transitions."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_FRAGMENT_CLOSE",
      "desc": "Fragment is being removed from the stack"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_FRAGMENT_FADE",
      "desc": "Fragment should simply fade in or out; that is, no strong navigation associated with it except that it is appearing or disappearing for some reason."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_FRAGMENT_OPEN",
      "desc": "Fragment is being added onto the stack"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_NONE",
      "desc": "No animation for transition."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRANSIT_UNSET",
      "desc": "Not set up for a transition."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "add(fragment: Fragment!, tag: String!)",
      "desc": "Calls add(int,android.app.Fragment,java.lang.String) with a 0 containerViewId.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "add(containerViewId: Int, fragment: Fragment!)",
      "desc": "Calls add(int,android.app.Fragment,java.lang.String) with a null tag.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "add(containerViewId: Int, fragment: Fragment!, tag: String!)",
      "desc": "Add a fragment to the activity state.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "addSharedElement(sharedElement: View!, name: String!)",
      "desc": "Used with to map a View from a removed or hidden Fragment to a View from a shown or added Fragment.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "addToBackStack(name: String?)",
      "desc": "Add this transaction to the back stack.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "attach(fragment: Fragment!)",
      "desc": "Re-attach a fragment after it had previously been detached from the UI with detach(android.app.Fragment).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "commit()",
      "desc": "Schedules a commit of this transaction."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "commitAllowingStateLoss()",
      "desc": "Like commit but allows the commit to be executed after an activity's state is saved."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "commitNow()",
      "desc": "Commits this transaction synchronously."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "commitNowAllowingStateLoss()",
      "desc": "Like commitNow but allows the commit to be executed after an activity's state is saved."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "detach(fragment: Fragment!)",
      "desc": "Detach the given fragment from the UI.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "disallowAddToBackStack()",
      "desc": "Disallow calls to addToBackStack(java.lang.String).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "hide(fragment: Fragment!)",
      "desc": "Hides an existing fragment.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isAddToBackStackAllowed()",
      "desc": "Returns true if this FragmentTransaction is allowed to be added to the back stack."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "remove(fragment: Fragment!)",
      "desc": "Remove an existing fragment.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "replace(containerViewId: Int, fragment: Fragment!)",
      "desc": "Calls replace(int,android.app.Fragment,java.lang.String) with a null tag.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "replace(containerViewId: Int, fragment: Fragment!, tag: String!)",
      "desc": "Replace an existing fragment that was added to a container.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "runOnCommit(runnable: Runnable!)",
      "desc": "Add a Runnable to this transaction that will be run after this transaction has been committed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setBreadCrumbShortTitle(res: Int)",
      "desc": "Set the short title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setBreadCrumbShortTitle(text: CharSequence!)",
      "desc": "Like setBreadCrumbShortTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setBreadCrumbTitle(res: Int)",
      "desc": "Set the full title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setBreadCrumbTitle(text: CharSequence!)",
      "desc": "Like setBreadCrumbTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setCustomAnimations(enter: Int, exit: Int)",
      "desc": "Set specific animation resources to run for the fragments that are entering and exiting in this transaction.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setCustomAnimations(enter: Int, exit: Int, popEnter: Int, popExit: Int)",
      "desc": "Set specific animation resources to run for the fragments that are entering and exiting in this transaction.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setPrimaryNavigationFragment(fragment: Fragment!)",
      "desc": "Set a currently active fragment in this FragmentManager as the primary navigation fragment.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setReorderingAllowed(reorderingAllowed: Boolean)",
      "desc": "Sets whether or not to allow optimizing operations within and across transactions.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setTransition(transit: Int)",
      "desc": "Select a standard transition animation for this transaction.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "setTransitionStyle(styleRes: Int)",
      "desc": "Set a custom style resource that will be used for resolving transit animations.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FragmentTransaction",
      "code": "show(fragment: Fragment!)",
      "desc": "Shows a previously hidden fragment.",
      "symbol": "!"
    }
  ]
}