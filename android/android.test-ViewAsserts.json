{
  "path": "android.test",
  "name": "ViewAsserts",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertBaselineAligned(first: View!, second: View!)",
      "desc": "Assert that two views are aligned on their baseline, that is that their baselines are on the same y location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertBottomAligned(first: View!, second: View!)",
      "desc": "Assert that two views are bottom aligned, that is that their bottom edges are on the same y location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertBottomAligned(first: View!, second: View!, margin: Int)",
      "desc": "Assert that two views are bottom aligned, that is that their bottom edges are on the same y location, with respect to the specified margin."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertGroupContains(parent: ViewGroup!, child: View!)",
      "desc": "Assert that the specified group contains a specific child once and only once."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertGroupIntegrity(parent: ViewGroup!)",
      "desc": "Assert the specified group's integrity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertGroupNotContains(parent: ViewGroup!, child: View!)",
      "desc": "Assert that the specified group does not contain a specific child."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertHasScreenCoordinates(origin: View!, view: View!, x: Int, y: Int)",
      "desc": "Assert that a view has a particular x and y position on the visible screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertHorizontalCenterAligned(reference: View!, test: View!)",
      "desc": "Assert that the test view is horizontally center aligned with respect to the reference view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertLeftAligned(first: View!, second: View!)",
      "desc": "Assert that two views are left aligned, that is that their left edges are on the same x location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertLeftAligned(first: View!, second: View!, margin: Int)",
      "desc": "Assert that two views are left aligned, that is that their left edges are on the same x location, with respect to the specified margin."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertOffScreenAbove(origin: View!, view: View!)",
      "desc": "Assert that view is above the visible screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertOffScreenBelow(origin: View!, view: View!)",
      "desc": "Assert that view is below the visible screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertOnScreen(origin: View!, view: View!)",
      "desc": "Assert that view is on the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertRightAligned(first: View!, second: View!)",
      "desc": "Assert that two views are right aligned, that is that their right edges are on the same x location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertRightAligned(first: View!, second: View!, margin: Int)",
      "desc": "Assert that two views are right aligned, that is that their right edges are on the same x location, with respect to the specified margin."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertTopAligned(first: View!, second: View!)",
      "desc": "Assert that two views are top aligned, that is that their top edges are on the same y location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertTopAligned(first: View!, second: View!, margin: Int)",
      "desc": "Assert that two views are top aligned, that is that their top edges are on the same y location, with respect to the specified margin."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "assertVerticalCenterAligned(reference: View!, test: View!)",
      "desc": "Assert that the test view is vertically center aligned with respect to the reference view."
    }
  ]
}