{
  "path": "org.json",
  "name": "JSONTokener",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(in: String!)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "back()",
      "desc": "Unreads the most recent character of input."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "dehexchar(hex: Char)",
      "desc": "Returns the integer [0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "more()",
      "desc": "Returns true until the input has been exhausted."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "next()",
      "desc": "Returns the next available character, or the null character '\\0' if all input has been exhausted."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "next(c: Char)",
      "desc": "Returns the next available character if it equals c."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "next(length: Int)",
      "desc": "Returns the next length characters of the input.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "nextClean()",
      "desc": "Returns the next character that is not whitespace and does not belong to a comment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "nextString(quote: Char)",
      "desc": "Returns the string up to but not including quote, unescaping any character escape sequences encountered along the way.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "nextTo(excluded: String!)",
      "desc": "Returns the String#trim string holding the characters up to but not including the first of:",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "nextTo(excluded: Char)",
      "desc": "Equivalent to nextTo(String.valueOf(excluded)).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "nextValue()",
      "desc": "Returns the next value from the input.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "skipPast(thru: String!)",
      "desc": "Advances past all input up to and including the next occurrence of thru."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "skipTo(to: Char)",
      "desc": "Advances past all input up to but not including the next occurrence of to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "JSONException",
      "code": "syntaxError(message: String!)",
      "desc": "Returns an exception containing the given message plus the current position and the entire input string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the current position and the entire input string."
    }
  ]
}