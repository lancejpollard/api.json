{
  "path": "android.renderscript",
  "name": "ScriptIntrinsicColorMatrix",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "ScriptIntrinsicColorMatrix",
      "code": "create(rs: RenderScript!, e: Element!)",
      "desc": "Create an intrinsic for applying a color matrix to an allocation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "ScriptIntrinsicColorMatrix",
      "code": "create(rs: RenderScript!)",
      "desc": "Create an intrinsic for applying a color matrix to an allocation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "forEach(ain: Allocation!, aout: Allocation!)",
      "desc": "Invoke the kernel and apply the matrix to each cell of input Allocation and copy to the output Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "forEach(ain: Allocation!, aout: Allocation!, opt: Script.LaunchOptions!)",
      "desc": "Invoke the kernel and apply the matrix to each cell of input Allocation and copy to the output Allocation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Script.KernelID",
      "code": "getKernelID()",
      "desc": "Get a KernelID for this intrinsic kernel.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAdd(f: Float4!)",
      "desc": "Set the value to be added after the color matrix has been applied."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAdd(r: Float, g: Float, b: Float, a: Float)",
      "desc": "Set the value to be added after the color matrix has been applied."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setColorMatrix(m: Matrix4f!)",
      "desc": "Set the color matrix which will be applied to each cell of the image."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setColorMatrix(m: Matrix3f!)",
      "desc": "Set the color matrix which will be applied to each cell of the image."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setGreyscale()",
      "desc": "Set a color matrix to convert from RGB to luminance."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRGBtoYUV()",
      "desc": "Set the matrix to convert from RGB to YUV with a direct copy of the 4th channel."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setYUVtoRGB()",
      "desc": "Set the matrix to convert from YUV to RGB with a direct copy of the 4th channel."
    }
  ]
}