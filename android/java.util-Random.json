{
  "path": "java.util",
  "name": "Random",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new random number generator."
    },
    {
      "type": "ctor",
      "ctor": "<init>(seed: Long)\n            Creates a new random number generator using a single long seed."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles()",
      "desc": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(streamSize: Long, randomNumberOrigin: Double, randomNumberBound: Double)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(randomNumberOrigin: Double, randomNumberBound: Double)",
      "desc": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom int values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints()",
      "desc": "Returns an effectively unlimited stream of pseudorandom int values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(streamSize: Long, randomNumberOrigin: Int, randomNumberBound: Int)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(randomNumberOrigin: Int, randomNumberBound: Int)",
      "desc": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom long values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs()",
      "desc": "Returns an effectively unlimited stream of pseudorandom long values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(streamSize: Long, randomNumberOrigin: Long, randomNumberBound: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(randomNumberOrigin: Long, randomNumberBound: Long)",
      "desc": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "nextBoolean()",
      "desc": "Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "nextBytes(bytes: ByteArray!)",
      "desc": "Generates random bytes and places them into a user-supplied byte array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextDouble()",
      "desc": "Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "nextFloat()",
      "desc": "Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextGaussian()",
      "desc": "Returns the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextInt()",
      "desc": "Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextInt(bound: Int)",
      "desc": "Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "nextLong()",
      "desc": "Returns the next pseudorandom, uniformly distributed  value from this random number generator's sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSeed(seed: Long)",
      "desc": "Sets the seed of this random number generator using a single long seed."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "next(bits: Int)",
      "desc": "Generates the next pseudorandom number."
    }
  ]
}