{
  "path": "android.graphics",
  "name": "Bitmap",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DENSITY_NONE",
      "desc": "Indicates that the bitmap was created for an unknown pixel density."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "compress(format: Bitmap.CompressFormat!, quality: Int, stream: OutputStream!)",
      "desc": "Write a compressed version of the bitmap to the specified outputstream."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap",
      "code": "copy(config: Bitmap.Config!, isMutable: Boolean)",
      "desc": "Tries to make a new bitmap based on the dimensions of this bitmap, setting the new bitmap's config to the one specified, and then copying this bitmap's pixels into the new bitmap.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "copyPixelsFromBuffer(src: Buffer!)",
      "desc": "Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "copyPixelsToBuffer(dst: Buffer!)",
      "desc": "Copy the bitmap's pixels into the specified buffer (allocated by the caller)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(src: Bitmap)",
      "desc": "Returns a bitmap from the source bitmap.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(source: Bitmap, x: Int, y: Int, width: Int, height: Int)",
      "desc": "Returns a bitmap from the specified subset of the source bitmap.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(source: Bitmap, x: Int, y: Int, width: Int, height: Int, m: Matrix?, filter: Boolean)",
      "desc": "Returns a bitmap from subset of the source bitmap, transformed by the optional matrix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(display: DisplayMetrics?, width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(width: Int, height: Int, config: Bitmap.Config, hasAlpha: Boolean)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(width: Int, height: Int, config: Bitmap.Config, hasAlpha: Boolean, colorSpace: ColorSpace)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(display: DisplayMetrics?, width: Int, height: Int, config: Bitmap.Config, hasAlpha: Boolean)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(display: DisplayMetrics?, width: Int, height: Int, config: Bitmap.Config, hasAlpha: Boolean, colorSpace: ColorSpace)",
      "desc": "Returns a mutable bitmap with the specified width and height.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(colors: IntArray, offset: Int, stride: Int, width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(display: DisplayMetrics, colors: IntArray, offset: Int, stride: Int, width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(colors: IntArray, width: Int, height: Int, config: Bitmap.Config!)",
      "desc": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(display: DisplayMetrics?, colors: IntArray, width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(source: Picture)",
      "desc": "Creates a Bitmap from the given Picture source of recorded drawing commands."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createBitmap(source: Picture, width: Int, height: Int, config: Bitmap.Config)",
      "desc": "Creates a Bitmap from the given Picture source of recorded drawing commands."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "createScaledBitmap(src: Bitmap, dstWidth: Int, dstHeight: Int, filter: Boolean)",
      "desc": "Creates a new bitmap, scaled from an existing bitmap, when possible.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "No special parcel contents."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "eraseColor(c: Int)",
      "desc": "Fills the bitmap's pixels with the specified Color."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "eraseColor(color: Long)",
      "desc": "Fills the bitmap's pixels with the specified ColorLong."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap",
      "code": "extractAlpha()",
      "desc": "Returns a new bitmap that captures the alpha values of the original.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap",
      "code": "extractAlpha(paint: Paint!, offsetXY: IntArray!)",
      "desc": "Returns a new bitmap that captures the alpha values of the original.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getAllocationByteCount()",
      "desc": "Returns the size of the allocated memory used to store this bitmap's pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getByteCount()",
      "desc": "Returns the minimum number of bytes that can be used to store this bitmap's pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Color",
      "code": "getColor(x: Int, y: Int)",
      "desc": "Returns the Color at the specified location."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ColorSpace",
      "code": "getColorSpace()",
      "desc": "Returns the color space associated with this bitmap.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bitmap.Config",
      "code": "getConfig()",
      "desc": "If the bitmap's internal config is in one of the public formats, return that config, otherwise return null.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDensity()",
      "desc": "Returns the density for this bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getGenerationId()",
      "desc": "Returns the generation ID of this bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": "Returns the bitmap's height"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getNinePatchChunk()",
      "desc": "Returns an optional array of private data, used by the UI system for some bitmaps.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getPixel(x: Int, y: Int)",
      "desc": "Returns the Color at the specified location."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getPixels(pixels: IntArray!, offset: Int, stride: Int, x: Int, y: Int, width: Int, height: Int)",
      "desc": "Returns in pixels[] a copy of the data in the bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getRowBytes()",
      "desc": "Return the number of bytes between rows in the bitmap's pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledHeight(canvas: Canvas!)",
      "desc": "Convenience for calling getScaledHeight(int) with the target density of the given Canvas."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledHeight(metrics: DisplayMetrics!)",
      "desc": "Convenience for calling getScaledHeight(int) with the target density of the given DisplayMetrics."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledHeight(targetDensity: Int)",
      "desc": "Convenience method that returns the height of this bitmap divided by the density scale factor."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledWidth(canvas: Canvas!)",
      "desc": "Convenience for calling getScaledWidth(int) with the target density of the given Canvas."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledWidth(metrics: DisplayMetrics!)",
      "desc": "Convenience for calling getScaledWidth(int) with the target density of the given DisplayMetrics."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getScaledWidth(targetDensity: Int)",
      "desc": "Convenience method that returns the width of this bitmap divided by the density scale factor."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": "Returns the bitmap's width"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasAlpha()",
      "desc": "Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasMipMap()",
      "desc": "Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isMutable()",
      "desc": "Returns true if the bitmap is marked as mutable (i.e. can be drawn into)"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isPremultiplied()",
      "desc": "Indicates whether pixels stored in this bitmaps are stored pre-multiplied."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isRecycled()",
      "desc": "Returns true if this bitmap has been recycled."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "prepareToDraw()",
      "desc": "Builds caches associated with the bitmap that are used for drawing it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "reconfigure(width: Int, height: Int, config: Bitmap.Config!)",
      "desc": "Modifies the bitmap to have a specified width, height, and Config, without affecting the underlying allocation backing the bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "recycle()",
      "desc": "Free the native object associated with this bitmap, and clear the reference to the pixel data."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "sameAs(other: Bitmap!)",
      "desc": "Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setColorSpace(colorSpace: ColorSpace)",
      "desc": "Modifies the bitmap to have the specified ColorSpace, without affecting the underlying allocation backing the bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setConfig(config: Bitmap.Config!)",
      "desc": "Convenience method for calling reconfigure(int,int,android.graphics.Bitmap.Config) with the current height and width."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDensity(density: Int)",
      "desc": "Specifies the density for this bitmap."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setHasAlpha(hasAlpha: Boolean)",
      "desc": "Tell the bitmap if all of the pixels are known to be opaque (false) or if some of the pixels may contain non-opaque alpha values (true)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setHasMipMap(hasMipMap: Boolean)",
      "desc": "Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setHeight(height: Int)",
      "desc": "Convenience method for calling reconfigure(int,int,android.graphics.Bitmap.Config) with the current width and config."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPixel(x: Int, y: Int, color: Int)",
      "desc": "Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPixels(pixels: IntArray!, offset: Int, stride: Int, x: Int, y: Int, width: Int, height: Int)",
      "desc": "Replace pixels in the bitmap with the colors in the array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPremultiplied(premultiplied: Boolean)",
      "desc": "Sets whether the bitmap should treat its data as pre-multiplied."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setWidth(width: Int)",
      "desc": "Convenience method for calling reconfigure(int,int,android.graphics.Bitmap.Config) with the current height and config."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Bitmap",
      "code": "wrapHardwareBuffer(hardwareBuffer: HardwareBuffer, colorSpace: ColorSpace?)",
      "desc": "Create a hardware bitmap backed by a HardwareBuffer.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(p: Parcel!, flags: Int)",
      "desc": "Write the bitmap and its pixels to the parcel."
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "CompressFormat",
      "desc": "Specifies the known formats a bitmap can be compressed into"
    },
    {
      "type": "nested-classes",
      "code": "Config",
      "desc": "Possible bitmap configurations."
    }
  ]
}