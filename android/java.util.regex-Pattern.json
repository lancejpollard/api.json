{
  "path": "java.util.regex",
  "name": "Pattern",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CANON_EQ",
      "desc": "Enables canonical equivalence."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CASE_INSENSITIVE",
      "desc": "Enables case-insensitive matching."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "COMMENTS",
      "desc": "Permits whitespace and comments in pattern."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DOTALL",
      "desc": "Enables dotall mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LITERAL",
      "desc": "Enables literal parsing of the pattern."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MULTILINE",
      "desc": "Enables multiline mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "UNICODE_CASE",
      "desc": "Enables Unicode-aware case folding."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "UNICODE_CHARACTER_CLASS",
      "desc": "Enables the Unicode version of Predefined character classes and POSIX character classes as defined by Unicode Technical Standard #18: Unicode Regular Expression Annex C: Compatibility Properties."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "UNIX_LINES",
      "desc": "Enables Unix lines mode."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Predicate",
      "code": "asPredicate()",
      "desc": "Creates a predicate which can be used to match a string.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Pattern",
      "code": "compile(regex: String)",
      "desc": "Compiles the given regular expression into a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Pattern",
      "code": "compile(regex: String, flags: Int)",
      "desc": "Compiles the given regular expression into a pattern with the given flags."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "flags()",
      "desc": "Returns this pattern's match flags."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Matcher",
      "code": "matcher(input: CharSequence)",
      "desc": "Creates a matcher that will match the given input against this pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "matches(regex: String, input: CharSequence)",
      "desc": "Compiles the given regular expression and attempts to match the given input against it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "pattern()",
      "desc": "Returns the regular expression from which this pattern was compiled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "quote(s: String)",
      "desc": "Returns a literal pattern String for the specified String."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "split(input: CharSequence, limit: Int)",
      "desc": "Splits the given input sequence around matches of this pattern.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "split(input: CharSequence)",
      "desc": "Splits the given input sequence around matches of this pattern.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Stream",
      "code": "splitAsStream(input: CharSequence)",
      "desc": "Creates a stream from the given input sequence around matches of this pattern.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the string representation of this pattern."
    }
  ]
}