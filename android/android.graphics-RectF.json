{
  "path": "android.graphics",
  "name": "RectF",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a new empty RectF."
    },
    {
      "type": "ctor",
      "ctor": "<init>(left: Float, top: Float, right: Float, bottom: Float)\n            Create a new rectangle with the specified coordinates."
    },
    {
      "type": "ctor",
      "ctor": "<init>(r: RectF?)\n            Create a new rectangle, initialized with the values in the specified rectangle (which is left unmodified)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(r: Rect?)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "centerX()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "centerY()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(x: Float, y: Float)",
      "desc": "Returns true if (x,y) is inside the rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(left: Float, top: Float, right: Float, bottom: Float)",
      "desc": "Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(r: RectF)",
      "desc": "Returns true iff the specified rectangle r is inside or equal to this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Parcelable interface methods"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "height()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inset(dx: Float, dy: Float)",
      "desc": "Inset the rectangle by (dx,dy)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "intersect(left: Float, top: Float, right: Float, bottom: Float)",
      "desc": "If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "intersect(r: RectF)",
      "desc": "If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "intersects(left: Float, top: Float, right: Float, bottom: Float)",
      "desc": "Returns true if this rectangle intersects the specified rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "intersects(a: RectF, b: RectF)",
      "desc": "Returns true iff the two specified rectangles intersect."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Returns true if the rectangle is empty (left >= right or top >= bottom)"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "offset(dx: Float, dy: Float)",
      "desc": "Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "offsetTo(newLeft: Float, newTop: Float)",
      "desc": "Offset the rectangle to a specific (left, top) position, keeping its width and height the same."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "readFromParcel(in: Parcel)",
      "desc": "Set the rectangle's coordinates from the data stored in the specified parcel."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "round(dst: Rect)",
      "desc": "Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "roundOut(dst: Rect)",
      "desc": "Set the dst integer Rect by rounding \"out\" this rectangle, choosing the floor of top and left, and the ceiling of right and bottom."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(left: Float, top: Float, right: Float, bottom: Float)",
      "desc": "Set the rectangle's coordinates to the specified values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(src: RectF)",
      "desc": "Copy the coordinates from src into this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(src: Rect)",
      "desc": "Copy the coordinates from src into this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEmpty()",
      "desc": "Set the rectangle to (0,0,0,0)"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setIntersect(a: RectF, b: RectF)",
      "desc": "If rectangles a and b intersect, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort()",
      "desc": "Swap top/bottom or left/right if there are flipped (i.e. left > right and/or top > bottom)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toShortString()",
      "desc": "Return a string representation of the rectangle in a compact form."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "union(left: Float, top: Float, right: Float, bottom: Float)",
      "desc": "Update this Rect to enclose itself and the specified rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "union(r: RectF)",
      "desc": "Update this Rect to enclose itself and the specified rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "union(x: Float, y: Float)",
      "desc": "Update this Rect to enclose itself and the [x,y] coordinate."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "width()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(out: Parcel!, flags: Int)",
      "desc": "Write this rectangle to the specified parcel."
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}