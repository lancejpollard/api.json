{
  "path": "android.view.accessibility",
  "name": "AccessibilityNodeProvider",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HOST_VIEW_ID",
      "desc": "The virtual id for the hosting View."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addExtraDataToAccessibilityNodeInfo(virtualViewId: Int, info: AccessibilityNodeInfo!, extraDataKey: String!, arguments: Bundle!)",
      "desc": "Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "createAccessibilityNodeInfo(virtualViewId: Int)",
      "desc": "Returns an AccessibilityNodeInfo representing a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "findAccessibilityNodeInfosByText(text: String!, virtualViewId: Int)",
      "desc": "Finds AccessibilityNodeInfos by text.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AccessibilityNodeInfo",
      "code": "findFocus(focus: Int)",
      "desc": "Find the virtual view, such as a descendant of the host View, that has the specified focus type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "performAction(virtualViewId: Int, action: Int, arguments: Bundle!)",
      "desc": "Performs an accessibility action on a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID."
    }
  ]
}