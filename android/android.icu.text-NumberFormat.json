{
  "path": "android.icu.text",
  "name": "NumberFormat",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ACCOUNTINGCURRENCYSTYLE",
      "desc": "[icu] Constant to specify currency style of format which uses currency symbol to represent currency for accounting, for example: \"($3.00), instead of \"-$3."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CASHCURRENCYSTYLE",
      "desc": "[icu] Constant to specify currency cash style of format which uses currency ISO code to represent currency, for example: \"NT$3\" instead of \"NT$3."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURRENCYSTYLE",
      "desc": "[icu] Constant to specify general currency style of format."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FRACTION_FIELD",
      "desc": "Field constant used to construct a FieldPosition object."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INTEGERSTYLE",
      "desc": "[icu] Constant to specify a integer number style format."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INTEGER_FIELD",
      "desc": "Field constant used to construct a FieldPosition object."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ISOCURRENCYSTYLE",
      "desc": "[icu] Constant to specify currency style of format which uses currency ISO code to represent currency, for example: \"USD3."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NUMBERSTYLE",
      "desc": "[icu] Constant to specify normal number style of format."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PERCENTSTYLE",
      "desc": "[icu] Constant to specify a style of format to display percent."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PLURALCURRENCYSTYLE",
      "desc": "[icu] Constant to specify currency style of format which uses currency long name with plural format to represent currency, for example, \"3."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SCIENTIFICSTYLE",
      "desc": "[icu] Constant to specify a style of format to display scientific number."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "STANDARDCURRENCYSTYLE",
      "desc": "[icu] Constant to specify currency style of format which uses currency symbol to represent currency, for example \"$3."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Empty constructor."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Overrides clone."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Overrides equals."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(number: Any!, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "Formats a number and appends the resulting text to the given string buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: Double)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: Long)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: BigInteger!)",
      "desc": "[icu] Convenience method to format a BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: BigDecimal!)",
      "desc": "Convenience method to format a BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(number: BigDecimal!)",
      "desc": "[icu] Convenience method to format an ICU BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(currAmt: CurrencyAmount!)",
      "desc": "[icu] Convenience method to format a CurrencyAmount.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: Double, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: Long, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "Specialization of format.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: BigInteger!, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "[icu] Formats a BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: BigDecimal!, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "[icu] Formats a BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuffer",
      "code": "format(number: BigDecimal!, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "[icu] Formats an ICU BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "StringBuffer",
      "code": "format(currAmt: CurrencyAmount!, toAppendTo: StringBuffer!, pos: FieldPosition!)",
      "desc": "[icu] Formats a CurrencyAmount.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getAvailableLocales()",
      "desc": "Returns the list of Locales for which NumberFormats are available.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DisplayContext",
      "code": "getContext(type: DisplayContext.Type!)",
      "desc": "[icu] Get the formatter's DisplayContext value for the specified DisplayContext.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency",
      "code": "getCurrency()",
      "desc": "Returns the Currency object used to display currency amounts.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getCurrencyInstance()",
      "desc": "Returns a currency format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getCurrencyInstance(inLocale: Locale!)",
      "desc": "Returns a currency format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getCurrencyInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns a currency format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getInstance()",
      "desc": "Returns the default number format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getInstance(inLocale: Locale!)",
      "desc": "Returns the default number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns the default number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getInstance(style: Int)",
      "desc": "[icu] Returns a specific style number format for default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getInstance(inLocale: Locale!, style: Int)",
      "desc": "[icu] Returns a specific style number format for a specific locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getInstance(desiredLocale: ULocale!, choice: Int)",
      "desc": "Returns a specific style number format for a specific locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getIntegerInstance()",
      "desc": "Returns an integer number format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getIntegerInstance(inLocale: Locale!)",
      "desc": "Returns an integer number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getIntegerInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns an integer number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumFractionDigits()",
      "desc": "Returns the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaximumIntegerDigits()",
      "desc": "Returns the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumFractionDigits()",
      "desc": "Returns the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMinimumIntegerDigits()",
      "desc": "Returns the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getNumberInstance()",
      "desc": "Returns a general-purpose number format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getNumberInstance(inLocale: Locale!)",
      "desc": "Returns a general-purpose number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getNumberInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns a general-purpose number format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getPercentInstance()",
      "desc": "Returns a percentage format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getPercentInstance(inLocale: Locale!)",
      "desc": "Returns a percentage format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getPercentInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns a percentage format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRoundingMode()",
      "desc": "Returns the rounding mode used in this NumberFormat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "NumberFormat",
      "code": "getScientificInstance()",
      "desc": "[icu] Returns a scientific format for the current default FORMAT locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getScientificInstance(inLocale: Locale!)",
      "desc": "[icu] Returns a scientific format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NumberFormat",
      "code": "getScientificInstance(inLocale: ULocale!)",
      "desc": "[icu] Returns a scientific format for the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code value for the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isGroupingUsed()",
      "desc": "Returns true if grouping is used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseIntegerOnly()",
      "desc": "Returns true if this format will parse numbers as integers only."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isParseStrict()",
      "desc": "[icu] Returns whether strict parsing is in effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Number",
      "code": "parse(text: String!, parsePosition: ParsePosition!)",
      "desc": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Number",
      "code": "parse(text: String!)",
      "desc": "Parses text from the beginning of the given string to produce a number.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CurrencyAmount",
      "code": "parseCurrency(text: CharSequence!, pos: ParsePosition!)",
      "desc": "Parses text from the given string as a CurrencyAmount.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "parseObject(source: String!, parsePosition: ParsePosition!)",
      "desc": "Parses text from a string to produce a number.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContext(context: DisplayContext!)",
      "desc": "[icu] Set a particular DisplayContext value in the formatter, such as CAPITALIZATION_FOR_STANDALONE."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrency(theCurrency: Currency!)",
      "desc": "Sets the Currency object used to display currency amounts."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingUsed(newValue: Boolean)",
      "desc": "Sets whether or not grouping will be used in this format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumFractionDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaximumIntegerDigits(newValue: Int)",
      "desc": "Sets the maximum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumFractionDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinimumIntegerDigits(newValue: Int)",
      "desc": "Sets the minimum number of digits allowed in the integer portion of a number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseIntegerOnly(value: Boolean)",
      "desc": "Sets whether to ignore the fraction part of a number when parsing (defaults to false)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParseStrict(value: Boolean)",
      "desc": "[icu] Sets whether strict parsing is in effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRoundingMode(roundingMode: Int)",
      "desc": "Set the rounding mode used in this NumberFormat."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "String",
      "code": "getPattern(forLocale: ULocale!, choice: Int)",
      "desc": "Returns the pattern for the provided locale and choice.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Field",
      "desc": "The instances of this inner class are used as attribute keys and values in AttributedCharacterIterator that NumberFormat."
    }
  ]
}