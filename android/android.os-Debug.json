{
  "path": "android.os",
  "name": "Debug",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SHOW_CLASSLOADER",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SHOW_FULL_DETAIL",
      "desc": "Flags for printLoadedClasses()."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SHOW_INITIALIZED",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TRACE_COUNT_ALLOCS",
      "desc": "Flags for startMethodTracing()."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "attachJvmtiAgent(library: String, options: String?, classLoader: ClassLoader?)",
      "desc": "Attach a library as a jvmti agent to the current runtime, with the given classloader determining the library search path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "changeDebugPort(port: Int)",
      "desc": "Change the JDWP port."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "dumpHprofData(fileName: String!)",
      "desc": "Dump \"hprof\" data to the specified file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "dumpService(name: String!, fd: FileDescriptor!, args: Array<String!>!)",
      "desc": "Get a debugging dump of a system service by name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "enableEmulatorTraceOutput()",
      "desc": "Enable \"emulator traces\", in which information about the current method is made available to the \"emulator -trace\" feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBinderDeathObjectCount()",
      "desc": "Returns the number of death notification links to Binder objects that exist in the current process."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBinderLocalObjectCount()",
      "desc": "Returns the number of active local Binder objects that exist in the current process."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBinderProxyObjectCount()",
      "desc": "Returns the number of references to remote proxy Binder objects that exist in the current process."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBinderReceivedTransactions()",
      "desc": "Returns the number of received transactions from the binder driver."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getBinderSentTransactions()",
      "desc": "Returns the number of sent transactions from this process."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalAllocCount()",
      "desc": "Returns the global count of objects allocated by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalAllocSize()",
      "desc": "Returns the global size, in bytes, of objects allocated by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalClassInitCount()",
      "desc": "Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalClassInitTime()",
      "desc": "Returns the time spent successfully initializing classes between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalExternalAllocCount()",
      "desc": "This method exists for compatibility and always returns 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalExternalAllocSize()",
      "desc": "This method exists for compatibility and always returns 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalExternalFreedCount()",
      "desc": "This method exists for compatibility and always returns 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalExternalFreedSize()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalFreedCount()",
      "desc": "Returns the global count of objects freed by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalFreedSize()",
      "desc": "Returns the global size, in bytes, of objects freed by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getGlobalGcInvocationCount()",
      "desc": "Returns the number of non-concurrent GC invocations between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getLoadedClassCount()",
      "desc": "Get the number of loaded classes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "getMemoryInfo(memoryInfo: Debug.MemoryInfo!)",
      "desc": "Retrieves information about this processes memory usages."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "getNativeHeapAllocatedSize()",
      "desc": "Returns the amount of allocated memory in the native heap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "getNativeHeapFreeSize()",
      "desc": "Returns the amount of free memory in the native heap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "getNativeHeapSize()",
      "desc": "Returns the size of the native heap."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "getPss()",
      "desc": "Retrieves the PSS memory used by the process as given by the smaps."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getRuntimeStat(statName: String!)",
      "desc": "Returns the value of a particular runtime statistic or null if no such runtime statistic exists.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MutableMap",
      "code": "getRuntimeStats()",
      "desc": "Returns a map of the names/values of the runtime statistics that getRuntimeStat(java.lang.String) supports.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getThreadAllocCount()",
      "desc": "Returns the thread-local count of objects allocated by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getThreadAllocSize()",
      "desc": "Returns the thread-local size of objects allocated by the runtime between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getThreadExternalAllocCount()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getThreadExternalAllocSize()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getThreadGcInvocationCount()",
      "desc": "Returns the number of thread-local non-concurrent GC invocations between a start and stop."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isDebuggerConnected()",
      "desc": "Determine if a debugger is currently attached."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "printLoadedClasses(flags: Int)",
      "desc": "Dump a list of all currently loaded class to the log file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetAllCounts()",
      "desc": "Clears all the global and thread-local memory allocation counters."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalAllocCount()",
      "desc": "Clears the global count of objects allocated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalAllocSize()",
      "desc": "Clears the global size of objects allocated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalClassInitCount()",
      "desc": "Clears the count of classes initialized."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalClassInitTime()",
      "desc": "Clears the count of time spent initializing classes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalExternalAllocCount()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalExternalAllocSize()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalExternalFreedCount()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalExternalFreedSize()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalFreedCount()",
      "desc": "Clears the global count of objects freed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalFreedSize()",
      "desc": "Clears the global size of objects freed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetGlobalGcInvocationCount()",
      "desc": "Clears the count of non-concurrent GC invocations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetThreadAllocCount()",
      "desc": "Clears the thread-local count of objects allocated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetThreadAllocSize()",
      "desc": "Clears the thread-local count of objects allocated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetThreadExternalAllocCount()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetThreadExternalAllocSize()",
      "desc": "This method exists for compatibility and has no effect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "resetThreadGcInvocationCount()",
      "desc": "Clears the thread-local count of non-concurrent GC invocations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "setAllocationLimit(limit: Int)",
      "desc": "Establish an object allocation limit in the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "setGlobalAllocationLimit(limit: Int)",
      "desc": "Establish a global object allocation limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startAllocCounting()",
      "desc": "Start counting the number and aggregate size of memory allocations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startMethodTracing()",
      "desc": "Start method tracing with default log name and buffer size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startMethodTracing(tracePath: String!)",
      "desc": "Start method tracing, specifying the trace log file path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startMethodTracing(tracePath: String!, bufferSize: Int)",
      "desc": "Start method tracing, specifying the trace log file name and the buffer size."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startMethodTracing(tracePath: String!, bufferSize: Int, flags: Int)",
      "desc": "Start method tracing, specifying the trace log file name, the buffer size, and flags."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startMethodTracingSampling(tracePath: String!, bufferSize: Int, intervalUs: Int)",
      "desc": "Start sampling-based method tracing, specifying the trace log file name, the buffer size, and the sampling interval."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "startNativeTracing()",
      "desc": "Enable qemu tracing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "stopAllocCounting()",
      "desc": "Stop counting the number and aggregate size of memory allocations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "stopMethodTracing()",
      "desc": "Stop method tracing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "stopNativeTracing()",
      "desc": "Stop qemu tracing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "threadCpuTimeNanos()",
      "desc": "Get an indication of thread CPU usage."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Unit",
      "code": "waitForDebugger()",
      "desc": "Wait until a debugger attaches."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "waitingForDebugger()",
      "desc": "Returns \"true\" if one or more threads is waiting for a debugger to attach."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "InstructionCount",
      "desc": "API for gathering and querying instruction counts."
    },
    {
      "type": "nested-classes",
      "code": "MemoryInfo",
      "desc": "This class is used to retrieved various statistics about the memory mappings for this process."
    }
  ]
}