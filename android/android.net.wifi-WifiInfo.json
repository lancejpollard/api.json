{
  "path": "android.net.wifi",
  "name": "WifiInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "FREQUENCY_UNITS",
      "desc": "Frequency in MHz"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "LINK_SPEED_UNITS",
      "desc": "The unit in which links speeds are expressed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LINK_SPEED_UNKNOWN",
      "desc": "Constant for unknown link speed."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Implement the Parcelable interface {@hide}"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getBSSID()",
      "desc": "Return the basic service set identifier (BSSID) of the current access point.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "NetworkInfo.DetailedState",
      "code": "getDetailedStateOf(suppState: SupplicantState!)",
      "desc": "Map a supplicant state into a fine-grained network connectivity state.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getFrequency()",
      "desc": "Returns the current frequency in FREQUENCY_UNITS."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getHiddenSSID()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIpAddress()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLinkSpeed()",
      "desc": "Returns the current link speed in LINK_SPEED_UNITS."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getMacAddress()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxSupportedRxLinkSpeedMbps()",
      "desc": "Returns the maximum supported receive link speed in Mbps"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxSupportedTxLinkSpeedMbps()",
      "desc": "Returns the maximum supported transmit link speed in Mbps"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNetworkId()",
      "desc": "Each configured network has a unique small integer ID, used to identify the network."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPasspointFqdn()",
      "desc": "Returns the Fully Qualified Domain Name of the network if it is a Passpoint network.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPasspointProviderFriendlyName()",
      "desc": "Returns the Provider Friendly Name of the network if it is a Passpoint network.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRssi()",
      "desc": "Returns the received signal strength indicator of the current 802."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRxLinkSpeedMbps()",
      "desc": "Returns the current receive link speed in Mbps."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getSSID()",
      "desc": "Returns the service set identifier (SSID) of the current 802.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SupplicantState",
      "code": "getSupplicantState()",
      "desc": "Return the detailed state of the supplicant's negotiation with an access point, in the form of a SupplicantState object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTxLinkSpeedMbps()",
      "desc": "Returns the current transmit link speed in Mbps."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWifiStandard()",
      "desc": "Get connection Wi-Fi standard"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": "Implement the Parcelable interface {@hide}"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Builder",
      "desc": "Builder for WifiInfo"
    }
  ]
}