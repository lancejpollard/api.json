{
  "path": "android.media.midi",
  "name": "MidiDeviceInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_BLUETOOTH_DEVICE",
      "desc": "Bundle key for the device's corresponding Bluetooth device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_MANUFACTURER",
      "desc": "Bundle key for the device's manufacturer name property."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_NAME",
      "desc": "Bundle key for the device's user visible name property."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_PRODUCT",
      "desc": "Bundle key for the device's product name property."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_SERIAL_NUMBER",
      "desc": "Bundle key for the device's serial number property."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_USB_DEVICE",
      "desc": "Bundle key for the device's corresponding USB device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PROPERTY_VERSION",
      "desc": "Bundle key for the device's version property."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_BLUETOOTH",
      "desc": "Constant representing Bluetooth MIDI devices for getType"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_USB",
      "desc": "Constant representing USB MIDI devices for getType"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_VIRTUAL",
      "desc": "Constant representing virtual (software based) MIDI devices for getType"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getId()",
      "desc": "Returns the ID of the device."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getInputPortCount()",
      "desc": "Returns the device's number of input ports."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getOutputPortCount()",
      "desc": "Returns the device's number of output ports."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getPorts()",
      "desc": "Returns information about the device's ports.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "getProperties()",
      "desc": "Returns the android.os.Bundle containing the device's properties.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getType()",
      "desc": "Returns the type of the device."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isPrivate()",
      "desc": "Returns true if the device is private."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "PortInfo",
      "desc": "Contains information about an input or output port."
    }
  ]
}