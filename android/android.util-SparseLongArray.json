{
  "path": "android.util",
  "name": "SparseLongArray",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new SparseLongArray containing no mappings."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int)\n            Creates a new SparseLongArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "append(key: Int, value: Long)",
      "desc": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Removes all key-value mappings from this SparseIntArray."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SparseLongArray",
      "code": "clone()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "delete(key: Int)",
      "desc": "Removes the mapping from the specified key, if there was any."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "get(key: Int)",
      "desc": "Gets the long mapped from the specified key, or 0 if no such mapping has been made."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "get(key: Int, valueIfKeyNotFound: Long)",
      "desc": "Gets the long mapped from the specified key, or the specified value if no such mapping has been made."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "indexOfKey(key: Int)",
      "desc": "Returns the index for which keyAt would return the specified key, or a negative number if the specified key is not mapped."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "indexOfValue(value: Long)",
      "desc": "Returns an index for which valueAt would return the specified key, or a negative number if no keys map to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "keyAt(index: Int)",
      "desc": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseLongArray stores."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "put(key: Int, value: Long)",
      "desc": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeAt(index: Int)",
      "desc": "Removes the mapping at the given index."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "size()",
      "desc": "Returns the number of key-value mappings that this SparseIntArray currently stores."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "valueAt(index: Int)",
      "desc": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseLongArray stores."
    }
  ]
}