{
  "path": "android.os",
  "name": "Bundle",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a new, empty Bundle."
    },
    {
      "type": "ctor",
      "ctor": "<init>(loader: ClassLoader!)\n            Constructs a new, empty Bundle that uses a specific ClassLoader for instantiating Parcelable and Serializable objects."
    },
    {
      "type": "ctor",
      "ctor": "<init>(capacity: Int)\n            Constructs a new, empty Bundle sized to hold the given number of elements."
    },
    {
      "type": "ctor",
      "ctor": "<init>(b: Bundle!)\n            Constructs a Bundle containing a copy of the mappings from the given Bundle."
    },
    {
      "type": "ctor",
      "ctor": "<init>(b: PersistableBundle!)\n            Constructs a Bundle containing a copy of the mappings from the given PersistableBundle."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Removes all elements from the mapping of this Bundle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Clones the current Bundle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "deepCopy()",
      "desc": "Make a deep copy of the given bundle.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Report the nature of this Parcelable's contents"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IBinder",
      "code": "getBinder(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "getBundle(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "getByte(key: String!)",
      "desc": "Returns the value associated with the given key, or (byte) 0 if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "getByte(key: String!, defaultValue: Byte)",
      "desc": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getByteArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Char",
      "code": "getChar(key: String!)",
      "desc": "Returns the value associated with the given key, or (char) 0 if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Char",
      "code": "getChar(key: String!, defaultValue: Char)",
      "desc": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharArray",
      "code": "getCharArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "getCharSequence(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "getCharSequence(key: String?, defaultValue: CharSequence!)",
      "desc": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associatd with the given key.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getCharSequenceArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "getCharSequenceArrayList(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ClassLoader",
      "code": "getClassLoader()",
      "desc": "Return the ClassLoader currently associated with this Bundle.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getFloat(key: String!)",
      "desc": "Returns the value associated with the given key, or 0."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getFloat(key: String!, defaultValue: Float)",
      "desc": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FloatArray",
      "code": "getFloatArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "getIntegerArrayList(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "getParcelable(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getParcelableArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "getParcelableArrayList(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Serializable",
      "code": "getSerializable(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Short",
      "code": "getShort(key: String!)",
      "desc": "Returns the value associated with the given key, or (short) 0 if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Short",
      "code": "getShort(key: String!, defaultValue: Short)",
      "desc": "Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ShortArray",
      "code": "getShortArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Size",
      "code": "getSize(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SizeF",
      "code": "getSizeF(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SparseArray",
      "code": "getSparseParcelableArray(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ArrayList",
      "code": "getStringArrayList(key: String?)",
      "desc": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasFileDescriptors()",
      "desc": "Reports whether the bundle contains any parcelled file descriptors."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putAll(bundle: Bundle!)",
      "desc": "Inserts all mappings from the given Bundle into this Bundle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putBinder(key: String?, value: IBinder?)",
      "desc": "Inserts an IBinder value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putBundle(key: String?, value: Bundle?)",
      "desc": "Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putByte(key: String?, value: Byte)",
      "desc": "Inserts a byte value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putByteArray(key: String?, value: ByteArray?)",
      "desc": "Inserts a byte array value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putChar(key: String?, value: Char)",
      "desc": "Inserts a char value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putCharArray(key: String?, value: CharArray?)",
      "desc": "Inserts a char array value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putCharSequence(key: String?, value: CharSequence?)",
      "desc": "Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putCharSequenceArray(key: String?, value: Array<CharSequence!>?)",
      "desc": "Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putCharSequenceArrayList(key: String?, value: ArrayList<CharSequence!>?)",
      "desc": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key. Either key or value may be null."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putFloat(key: String?, value: Float)",
      "desc": "Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putFloatArray(key: String?, value: FloatArray?)",
      "desc": "Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putIntegerArrayList(key: String?, value: ArrayList<Int!>?)",
      "desc": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key. Either key or value may be null."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putParcelable(key: String?, value: Parcelable?)",
      "desc": "Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putParcelableArray(key: String?, value: Array<Parcelable!>?)",
      "desc": "Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putParcelableArrayList(key: String?, value: ArrayList<out Parcelable!>?)",
      "desc": "Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putSerializable(key: String?, value: Serializable?)",
      "desc": "Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putShort(key: String?, value: Short)",
      "desc": "Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putShortArray(key: String?, value: ShortArray?)",
      "desc": "Inserts a short array value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putSize(key: String?, value: Size?)",
      "desc": "Inserts a Size value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putSizeF(key: String?, value: SizeF?)",
      "desc": "Inserts a SizeF value into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putSparseParcelableArray(key: String?, value: SparseArray<out Parcelable!>?)",
      "desc": "Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "putStringArrayList(key: String?, value: ArrayList<String!>?)",
      "desc": "Inserts an ArrayList value into the mapping of this Bundle, replacing any existing value for the given key. Either key or value may be null."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "readFromParcel(parcel: Parcel!)",
      "desc": "Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "remove(key: String!)",
      "desc": "Removes any entry with the given key from the mapping of this Bundle."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setClassLoader(loader: ClassLoader!)",
      "desc": "Changes the ClassLoader this Bundle uses when instantiating objects."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flags: Int)",
      "desc": "Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection."
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "inherited-methods",
      "from": "BaseBundle"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Any?"
    },
    {
      "type": "inherited-methods",
      "from": "get(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "getBoolean(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "getBoolean(key: String!, defaultValue: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "BooleanArray?"
    },
    {
      "type": "inherited-methods",
      "from": "getBooleanArray(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "Double"
    },
    {
      "type": "inherited-methods",
      "from": "getDouble(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Double"
    },
    {
      "type": "inherited-methods",
      "from": "getDouble(key: String!, defaultValue: Double)"
    },
    {
      "type": "inherited-methods",
      "from": "DoubleArray?"
    },
    {
      "type": "inherited-methods",
      "from": "getDoubleArray(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getInt(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getInt(key: String!, defaultValue: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "IntArray?"
    },
    {
      "type": "inherited-methods",
      "from": "getIntArray(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "getLong(key: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Long"
    },
    {
      "type": "inherited-methods",
      "from": "getLong(key: String!, defaultValue: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "LongArray?"
    },
    {
      "type": "inherited-methods",
      "from": "getLongArray(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "String?"
    },
    {
      "type": "inherited-methods",
      "from": "getString(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getString(key: String?, defaultValue: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<String!>?"
    },
    {
      "type": "inherited-methods",
      "from": "getStringArray(key: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isEmpty()"
    },
    {
      "type": "inherited-methods",
      "from": "MutableSet<String!>!"
    },
    {
      "type": "inherited-methods",
      "from": "keySet()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putAll(bundle: PersistableBundle!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putBoolean(key: String?, value: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putBooleanArray(key: String?, value: BooleanArray?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putDouble(key: String?, value: Double)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putDoubleArray(key: String?, value: DoubleArray?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putInt(key: String?, value: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putIntArray(key: String?, value: IntArray?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putLong(key: String?, value: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putLongArray(key: String?, value: LongArray?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putString(key: String?, value: String?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putStringArray(key: String?, value: Array<String!>?)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "size()"
    }
  ]
}