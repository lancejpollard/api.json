{
  "path": "java.util.concurrent.locks",
  "name": "ReentrantReadWriteLock",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new ReentrantReadWriteLock with default (nonfair) ordering properties."
    },
    {
      "type": "ctor",
      "ctor": "<init>(fair: Boolean)\n            Creates a new ReentrantReadWriteLock with the given fairness policy."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getQueueLength()",
      "desc": "Returns an estimate of the number of threads waiting to acquire either the read or write lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getReadHoldCount()",
      "desc": "Queries the number of reentrant read holds on this lock by the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getReadLockCount()",
      "desc": "Queries the number of read locks held for this lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWaitQueueLength(condition: Condition!)",
      "desc": "Returns an estimate of the number of threads waiting on the given condition associated with the write lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWriteHoldCount()",
      "desc": "Queries the number of reentrant write holds on this lock by the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedThread(thread: Thread!)",
      "desc": "Queries whether the given thread is waiting to acquire either the read or write lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasQueuedThreads()",
      "desc": "Queries whether any threads are waiting to acquire the read or write lock."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasWaiters(condition: Condition!)",
      "desc": "Queries whether any threads are waiting on the given condition associated with the write lock."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFair()",
      "desc": "Returns true if this lock has fairness set true."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isWriteLocked()",
      "desc": "Queries if the write lock is held by any thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isWriteLockedByCurrentThread()",
      "desc": "Queries if the write lock is held by the current thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ReentrantReadWriteLock.ReadLock",
      "code": "readLock()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this lock, as well as its lock state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ReentrantReadWriteLock.WriteLock",
      "code": "writeLock()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Thread",
      "code": "getOwner()",
      "desc": "Returns the thread that currently owns the write lock, or null if not owned.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getQueuedReaderThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire the read lock.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getQueuedThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire either the read or write lock.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getQueuedWriterThreads()",
      "desc": "Returns a collection containing threads that may be waiting to acquire the write lock.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "MutableCollection",
      "code": "getWaitingThreads(condition: Condition!)",
      "desc": "Returns a collection containing those threads that may be waiting on the given condition associated with the write lock.",
      "symbol": "<"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "ReadLock",
      "desc": "The lock returned by method ReentrantReadWriteLock#readLock."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "WriteLock",
      "desc": "The lock returned by method ReentrantReadWriteLock#writeLock."
    }
  ]
}