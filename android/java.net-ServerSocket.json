{
  "path": "java.net",
  "name": "ServerSocket",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates an unbound server socket."
    },
    {
      "type": "ctor",
      "ctor": "<init>(port: Int)\n            Creates a server socket, bound to the specified port."
    },
    {
      "type": "ctor",
      "ctor": "<init>(port: Int, backlog: Int)\n            Creates a server socket and binds it to the specified local port number, with the specified backlog."
    },
    {
      "type": "ctor",
      "ctor": "<init>(port: Int, backlog: Int, bindAddr: InetAddress!)\n            Create a server with the specified port, listen backlog, and local IP address to bind to."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Socket",
      "code": "accept()",
      "desc": "Listens for a connection to be made to this socket and accepts it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "bind(endpoint: SocketAddress!)",
      "desc": "Binds the ServerSocket to a specific address (IP address and port number)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "bind(endpoint: SocketAddress!, backlog: Int)",
      "desc": "Binds the ServerSocket to a specific address (IP address and port number)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ServerSocketChannel",
      "code": "getChannel()",
      "desc": "Returns the unique java.nio.channels.ServerSocketChannel object associated with this socket, if any.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InetAddress",
      "code": "getInetAddress()",
      "desc": "Returns the local address of this server socket.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLocalPort()",
      "desc": "Returns the port number on which this socket is listening."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SocketAddress",
      "code": "getLocalSocketAddress()",
      "desc": "Returns the address of the endpoint this socket is bound to.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getReceiveBufferSize()",
      "desc": "Gets the value of the SocketOptions#SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getReuseAddress()",
      "desc": "Tests if SocketOptions#SO_REUSEADDR is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSoTimeout()",
      "desc": "Retrieve setting for SocketOptions#SO_TIMEOUT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isBound()",
      "desc": "Returns the binding state of the ServerSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClosed()",
      "desc": "Returns the closed state of the ServerSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPerformancePreferences(connectionTime: Int, latency: Int, bandwidth: Int)",
      "desc": "Sets performance preferences for this ServerSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReceiveBufferSize(size: Int)",
      "desc": "Sets a default proposed value for the SocketOptions#SO_RCVBUF option for sockets accepted from this ServerSocket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReuseAddress(on: Boolean)",
      "desc": "Enable/disable the SocketOptions#SO_REUSEADDR socket option."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSoTimeout(timeout: Int)",
      "desc": "Enable/disable SocketOptions#SO_TIMEOUT with the specified timeout, in milliseconds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSocketFactory(fac: SocketImplFactory!)",
      "desc": "Sets the server socket implementation factory for the application."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the implementation address and implementation port of this socket as a String."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Unit",
      "code": "implAccept(s: Socket!)",
      "desc": "Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket."
    }
  ]
}