{
  "path": "java.util.concurrent.atomic",
  "name": "AtomicLong",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(initialValue: Long)\n            Creates a new AtomicLong with the given initial value."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new AtomicLong with initial value 0."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "accumulateAndGet(x: Long, accumulatorFunction: LongBinaryOperator!)",
      "desc": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "addAndGet(delta: Long)",
      "desc": "Atomically adds the given value to the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "compareAndSet(expect: Long, update: Long)",
      "desc": "Atomically sets the value to the given updated value if the current value == the expected value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "decrementAndGet()",
      "desc": "Atomically decrements by one the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "get()",
      "desc": "Gets the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndAccumulate(x: Long, accumulatorFunction: LongBinaryOperator!)",
      "desc": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndAdd(delta: Long)",
      "desc": "Atomically adds the given value to the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndDecrement()",
      "desc": "Atomically decrements by one the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndIncrement()",
      "desc": "Atomically increments by one the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndSet(newValue: Long)",
      "desc": "Atomically sets to the given value and returns the old value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getAndUpdate(updateFunction: LongUnaryOperator!)",
      "desc": "Atomically updates the current value with the results of applying the given function, returning the previous value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "incrementAndGet()",
      "desc": "Atomically increments by one the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "lazySet(newValue: Long)",
      "desc": "Eventually sets to the given value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "set(newValue: Long)",
      "desc": "Sets to the given value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "toDouble()",
      "desc": "Returns the value of this AtomicLong as a double after a widening primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "toFloat()",
      "desc": "Returns the value of this AtomicLong as a float after a widening primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "toInt()",
      "desc": "Returns the value of this AtomicLong as an int after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "toLong()",
      "desc": "Returns the value of this AtomicLong as a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the String representation of the current value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "updateAndGet(updateFunction: LongUnaryOperator!)",
      "desc": "Atomically updates the current value with the results of applying the given function, returning the updated value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "weakCompareAndSet(expect: Long, update: Long)",
      "desc": "Atomically sets the value to the given updated value if the current value == the expected value."
    }
  ]
}