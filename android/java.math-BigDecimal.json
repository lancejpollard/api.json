{
  "path": "java.math",
  "name": "BigDecimal",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_CEILING",
      "desc": "Rounding mode to round towards positive infinity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_DOWN",
      "desc": "Rounding mode where the values are rounded towards zero."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_FLOOR",
      "desc": "Rounding mode to round towards negative infinity."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_DOWN",
      "desc": "Rounding mode where values are rounded towards the nearest neighbor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_EVEN",
      "desc": "Rounding mode where values are rounded towards the nearest neighbor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_UP",
      "desc": "Rounding mode where values are rounded towards the nearest neighbor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_UNNECESSARY",
      "desc": "Rounding mode where the rounding operations throws an ArithmeticException for the case that rounding is necessary, i."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_UP",
      "desc": "Rounding mode where positive values are rounded towards positive infinity and negative values towards negative infinity."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: CharArray!, offset: Int, len: Int)\n            Constructs a new BigDecimal instance from a string representation given as a character array."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: CharArray!, offset: Int, len: Int, mc: MathContext!)\n            Constructs a new BigDecimal instance from a string representation given as a character array."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: CharArray!)\n            Constructs a new BigDecimal instance from a string representation given as a character array."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: CharArray!, mc: MathContext!)\n            Constructs a new BigDecimal instance from a string representation given as a character array."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: String!)\n            Constructs a new BigDecimal instance from a string representation."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: String!, mc: MathContext!)\n            Constructs a new BigDecimal instance from a string representation."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Double)\n            Constructs a new BigDecimal instance from the 64bit double val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Double, mc: MathContext!)\n            Constructs a new BigDecimal instance from the 64bit double val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: BigInteger!)\n            Constructs a new BigDecimal instance from the given big integer val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: BigInteger!, mc: MathContext!)\n            Constructs a new BigDecimal instance from the given big integer val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(unscaledVal: BigInteger!, scale: Int)\n            Constructs a new BigDecimal instance from a given unscaled value unscaledVal and a given scale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(unscaledVal: BigInteger!, scale: Int, mc: MathContext!)\n            Constructs a new BigDecimal instance from a given unscaled value unscaledVal and a given scale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Int)\n            Constructs a new BigDecimal instance from the given int val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Int, mc: MathContext!)\n            Constructs a new BigDecimal instance from the given int val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Long)\n            Constructs a new BigDecimal instance from the given long val."
    },
    {
      "type": "ctor",
      "ctor": "<init>(val: Long, mc: MathContext!)\n            Constructs a new BigDecimal instance from the given long val."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "abs()",
      "desc": "Returns a BigDecimal whose value is the absolute value of this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "abs(mc: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the absolute value of this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "add(augend: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is this + augend.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "add(augend: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this + augend.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Byte",
      "code": "byteValueExact()",
      "desc": "Returns this BigDecimal as a byte value if it has no fractional part and if its value fits to the byte range ([-128..127])."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compareTo(other: BigDecimal!)",
      "desc": "Compares this BigDecimal with val."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!, scale: Int, roundingMode: Int)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!, scale: Int, roundingMode: RoundingMode!)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!, roundingMode: Int)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!, roundingMode: RoundingMode!)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(divisor: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "divideAndRemainder(divisor: BigDecimal!)",
      "desc": "Returns a BigDecimal array which contains the integral part of this / divisor at index 0 and the remainder this % divisor at index 1.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "divideAndRemainder(divisor: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a BigDecimal array which contains the integral part of this / divisor at index 0 and the remainder this % divisor at index 1.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divideToIntegralValue(divisor: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is the integral part of this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divideToIntegralValue(divisor: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is the integral part of this / divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Returns true if x is a BigDecimal instance and if this instance is equal to this big decimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code for this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "intValueExact()",
      "desc": "Returns this BigDecimal as a int value if it has no fractional part and if its value fits to the int range ([-231."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "longValueExact()",
      "desc": "Returns this BigDecimal as a long value if it has no fractional part and if its value fits to the int range ([-263."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "max(val: BigDecimal!)",
      "desc": "Returns the maximum of this BigDecimal and val.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "min(val: BigDecimal!)",
      "desc": "Returns the minimum of this BigDecimal and val.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "movePointLeft(n: Int)",
      "desc": "Returns a new BigDecimal instance where the decimal point has been moved n places to the left.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "movePointRight(n: Int)",
      "desc": "Returns a new BigDecimal instance where the decimal point has been moved n places to the right.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "multiply(multiplicand: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is this * multiplicand.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "multiply(multiplicand: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this * multiplicand.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "negate()",
      "desc": "Returns a new BigDecimal whose value is the -this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "negate(mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is the -this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "plus()",
      "desc": "Returns a new BigDecimal whose value is +this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "plus(mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is +this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "pow(n: Int)",
      "desc": "Returns a new BigDecimal whose value is this<sup>n</sup>.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "pow(n: Int, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this<sup>n</sup>.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "precision()",
      "desc": "Returns the precision of this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "remainder(divisor: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is this % divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "remainder(divisor: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this % divisor.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "round(mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this, rounded according to the passed context mc.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "scale()",
      "desc": "Returns the scale of this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "scaleByPowerOfTen(n: Int)",
      "desc": "Returns a new BigDecimal whose value is this * 10<sup>n</sup>.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "setScale(newScale: Int, roundingMode: RoundingMode!)",
      "desc": "Returns a new BigDecimal instance with the specified scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "setScale(newScale: Int, roundingMode: Int)",
      "desc": "Returns a new BigDecimal instance with the specified scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "setScale(newScale: Int)",
      "desc": "Returns a new BigDecimal instance with the specified scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Short",
      "code": "shortValueExact()",
      "desc": "Returns this BigDecimal as a short value if it has no fractional part and if its value fits to the short range ([-215."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "signum()",
      "desc": "Returns the sign of this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "stripTrailingZeros()",
      "desc": "Returns a new BigDecimal instance with the same value as this but with a unscaled value where the trailing zeros have been removed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "subtract(subtrahend: BigDecimal!)",
      "desc": "Returns a new BigDecimal whose value is this - subtrahend.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "subtract(subtrahend: BigDecimal!, mc: MathContext!)",
      "desc": "Returns a new BigDecimal whose value is this - subtrahend.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "toBigInteger()",
      "desc": "Returns this BigDecimal as a big integer instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "toBigIntegerExact()",
      "desc": "Returns this BigDecimal as a big integer instance if it has no fractional part.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "toDouble()",
      "desc": "Returns this BigDecimal as a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toEngineeringString()",
      "desc": "Returns a string representation of this BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "toFloat()",
      "desc": "Returns this BigDecimal as a float value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "toInt()",
      "desc": "Returns this BigDecimal as an int value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "toLong()",
      "desc": "Returns this BigDecimal as an long value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toPlainString()",
      "desc": "Returns a string representation of this BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a canonical string representation of this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "ulp()",
      "desc": "Returns the unit in the last place (ULP) of this BigDecimal instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "unscaledValue()",
      "desc": "Returns the unscaled value (mantissa) of this BigDecimal instance as a BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(unscaledVal: Long, scale: Int)",
      "desc": "Returns a new BigDecimal instance whose value is equal to unscaledVal * 10<sup>-scale</sup>).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(unscaledVal: Long)",
      "desc": "Returns a new BigDecimal instance whose value is equal to unscaledVal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(val: Double)",
      "desc": "Returns a new BigDecimal instance whose value is equal to val.",
      "symbol": "!"
    }
  ]
}