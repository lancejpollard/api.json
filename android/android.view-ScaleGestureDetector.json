{
  "path": "android.view",
  "name": "ScaleGestureDetector",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, listener: ScaleGestureDetector.OnScaleGestureListener!)\n            Creates a ScaleGestureDetector with the supplied listener."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, listener: ScaleGestureDetector.OnScaleGestureListener!, handler: Handler!)\n            Creates a ScaleGestureDetector with the supplied listener."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCurrentSpan()",
      "desc": "Return the average distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCurrentSpanX()",
      "desc": "Return the average X distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCurrentSpanY()",
      "desc": "Return the average Y distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getEventTime()",
      "desc": "Return the event time of the current event being processed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getFocusX()",
      "desc": "Get the X coordinate of the current gesture's focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getFocusY()",
      "desc": "Get the Y coordinate of the current gesture's focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPreviousSpan()",
      "desc": "Return the previous average distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPreviousSpanX()",
      "desc": "Return the previous average X distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPreviousSpanY()",
      "desc": "Return the previous average Y distance between each of the pointers forming the gesture in progress through the focal point."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getScaleFactor()",
      "desc": "Return the scaling factor from the previous scale event to the current event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTimeDelta()",
      "desc": "Return the time difference in milliseconds between the previous accepted scaling event and the current scaling event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInProgress()",
      "desc": "Returns true if a scale gesture is in progress."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isQuickScaleEnabled()",
      "desc": "Return whether the quick scale gesture, in which the user performs a double tap followed by a swipe, should perform scaling."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStylusScaleEnabled()",
      "desc": "Return whether the stylus scale gesture, in which the user uses a stylus and presses the button, should perform scaling."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onTouchEvent(event: MotionEvent!)",
      "desc": "Accepts MotionEvents and dispatches events to a OnScaleGestureListener when appropriate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setQuickScaleEnabled(scales: Boolean)",
      "desc": "Set whether the associated OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStylusScaleEnabled(scales: Boolean)",
      "desc": "Sets whether the associates OnScaleGestureListener should receive onScale callbacks when the user uses a stylus and presses the button."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnScaleGestureListener",
      "desc": "The listener for receiving notifications when gestures occur."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "SimpleOnScaleGestureListener",
      "desc": "A convenience class to extend when you only want to listen for a subset of scaling-related events."
    }
  ]
}