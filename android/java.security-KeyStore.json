{
  "path": "java.security",
  "name": "KeyStore",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Enumeration",
      "code": "aliases()",
      "desc": "Lists all the alias names of this keystore.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "containsAlias(alias: String!)",
      "desc": "Checks if the given alias exists in this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "deleteEntry(alias: String!)",
      "desc": "Deletes the entry identified by the given alias from this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "entryInstanceOf(alias: String!, entryClass: Class<out KeyStore.Entry!>!)",
      "desc": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Certificate",
      "code": "getCertificate(alias: String!)",
      "desc": "Returns the certificate associated with the given alias.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getCertificateAlias(cert: Certificate!)",
      "desc": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getCertificateChain(alias: String!)",
      "desc": "Returns the certificate chain associated with the given alias.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Date",
      "code": "getCreationDate(alias: String!)",
      "desc": "Returns the creation date of the entry identified by the given alias.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getDefaultType()",
      "desc": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "KeyStore.Entry",
      "code": "getEntry(alias: String!, protParam: KeyStore.ProtectionParameter!)",
      "desc": "Gets a keystore Entry for the specified alias with the specified protection parameter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyStore",
      "code": "getInstance(type: String!)",
      "desc": "Returns a keystore object of the specified type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyStore",
      "code": "getInstance(type: String!, provider: String!)",
      "desc": "Returns a keystore object of the specified type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyStore",
      "code": "getInstance(type: String!, provider: Provider!)",
      "desc": "Returns a keystore object of the specified type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Key",
      "code": "getKey(alias: String!, password: CharArray!)",
      "desc": "Returns the key associated with the given alias, using the given password to recover it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Provider",
      "code": "getProvider()",
      "desc": "Returns the provider of this keystore.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getType()",
      "desc": "Returns the type of this keystore.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isCertificateEntry(alias: String!)",
      "desc": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isKeyEntry(alias: String!)",
      "desc": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "load(stream: InputStream!, password: CharArray!)",
      "desc": "Loads this KeyStore from the given input stream."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "load(param: KeyStore.LoadStoreParameter!)",
      "desc": "Loads this keystore using the given LoadStoreParameter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCertificateEntry(alias: String!, cert: Certificate!)",
      "desc": "Assigns the given trusted certificate to the given alias."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setEntry(alias: String!, entry: KeyStore.Entry!, protParam: KeyStore.ProtectionParameter!)",
      "desc": "Saves a keystore Entry under the specified alias."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setKeyEntry(alias: String!, key: Key!, password: CharArray!, chain: Array<Certificate!>!)",
      "desc": "Assigns the given key to the given alias, protecting it with the given password."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setKeyEntry(alias: String!, key: ByteArray!, chain: Array<Certificate!>!)",
      "desc": "Assigns the given key (that has already been protected) to the given alias."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "size()",
      "desc": "Retrieves the number of entries in this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "store(stream: OutputStream!, password: CharArray!)",
      "desc": "Stores this keystore to the given output stream, and protects its integrity with the given password."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "store(param: KeyStore.LoadStoreParameter!)",
      "desc": "Stores this keystore using the given LoadStoreParameter."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Builder",
      "desc": "A description of a to-be-instantiated KeyStore object."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "CallbackHandlerProtection",
      "desc": "A ProtectionParameter encapsulating a CallbackHandler."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Entry",
      "desc": "A marker interface for KeyStore entry types."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "LoadStoreParameter",
      "desc": "A marker interface for KeyStore load and store parameters."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "PasswordProtection",
      "desc": "A password-based implementation of ProtectionParameter."
    },
    {
      "type": "nested-classes",
      "code": "PrivateKeyEntry",
      "desc": "A KeyStore entry that holds a PrivateKey and corresponding certificate chain."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ProtectionParameter",
      "desc": "A marker interface for keystore protection parameters."
    },
    {
      "type": "nested-classes",
      "code": "SecretKeyEntry",
      "desc": "A KeyStore entry that holds a SecretKey."
    },
    {
      "type": "nested-classes",
      "code": "TrustedCertificateEntry",
      "desc": "A KeyStore entry that holds a trusted Certificate."
    }
  ]
}