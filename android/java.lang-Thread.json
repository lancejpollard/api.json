{
  "path": "java.lang",
  "name": "Thread",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_PRIORITY",
      "desc": "The maximum priority that a thread can have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_PRIORITY",
      "desc": "The minimum priority that a thread can have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NORM_PRIORITY",
      "desc": "The default priority that is assigned to a thread."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(target: Runnable?)\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(group: ThreadGroup?, target: Runnable?)\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(name: String)\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(group: ThreadGroup?, name: String)\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(target: Runnable?, name: String)\n            Allocates a new Thread object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(group: ThreadGroup?, target: Runnable?, name: String)\n            Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group."
    },
    {
      "type": "ctor",
      "ctor": "<init>(group: ThreadGroup?, target: Runnable?, name: String, stackSize: Long)\n            Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "activeCount()",
      "desc": "Returns an estimate of the number of active threads in the current thread's thread group and its subgroups."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "checkAccess()",
      "desc": "Determines if the currently running thread has permission to modify this thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "countStackFrames()",
      "desc": "Counts the number of stack frames in this thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Thread",
      "code": "currentThread()",
      "desc": "Returns a reference to the currently executing thread object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "destroy()",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dumpStack()",
      "desc": "Prints a stack trace of the current thread to the standard error stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "enumerate(tarray: Array<Thread!>!)",
      "desc": "Copies into the specified array every active thread in the current thread's thread group and its subgroups."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableMap",
      "code": "getAllStackTraces()",
      "desc": "Returns a map of stack traces for all live threads.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ClassLoader",
      "code": "getContextClassLoader()",
      "desc": "Returns the context ClassLoader for this Thread.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Thread.UncaughtExceptionHandler",
      "code": "getDefaultUncaughtExceptionHandler()",
      "desc": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getId()",
      "desc": "Returns the identifier of this Thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns this thread's name."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getPriority()",
      "desc": "Returns this thread's priority."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getStackTrace()",
      "desc": "Returns an array of stack trace elements representing the stack dump of this thread.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Thread.State",
      "code": "getState()",
      "desc": "Returns the state of this thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ThreadGroup",
      "code": "getThreadGroup()",
      "desc": "Returns the thread group to which this thread belongs.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Thread.UncaughtExceptionHandler",
      "code": "getUncaughtExceptionHandler()",
      "desc": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "holdsLock(obj: Any)",
      "desc": "Returns true if and only if the current thread holds the monitor lock on the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "interrupt()",
      "desc": "Interrupts this thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "interrupted()",
      "desc": "Tests whether the current thread has been interrupted."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAlive()",
      "desc": "Tests if this thread is alive."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isDaemon()",
      "desc": "Tests if this thread is a daemon thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInterrupted()",
      "desc": "Tests whether this thread has been interrupted."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "join(millis: Long)",
      "desc": "Waits at most millis milliseconds for this thread to die."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "join(millis: Long, nanos: Int)",
      "desc": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "join()",
      "desc": "Waits for this thread to die."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "resume()",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "run()",
      "desc": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContextClassLoader(cl: ClassLoader?)",
      "desc": "Sets the context ClassLoader for this Thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDaemon(on: Boolean)",
      "desc": "Marks this thread as either a daemon thread or a user thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDefaultUncaughtExceptionHandler(eh: Thread.UncaughtExceptionHandler?)",
      "desc": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setName(name: String)",
      "desc": "Changes the name of this thread to be equal to the argument name."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPriority(newPriority: Int)",
      "desc": "Changes the priority of this thread."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUncaughtExceptionHandler(eh: Thread.UncaughtExceptionHandler?)",
      "desc": "Set the handler invoked when this thread abruptly terminates due to an uncaught exception."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sleep(millis: Long)",
      "desc": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sleep(millis: Long, nanos: Int)",
      "desc": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "start()",
      "desc": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "stop()",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "stop(obj: Throwable?)",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "suspend()",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of this thread, including the thread's name, priority, and thread group."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "yield()",
      "desc": "A hint to the scheduler that the current thread is willing to yield its current use of a processor."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "State",
      "desc": "A thread state."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "UncaughtExceptionHandler",
      "desc": "Interface for handlers invoked when a Thread abruptly terminates due to an uncaught exception."
    }
  ]
}