{
  "path": "android.icu.text",
  "name": "UnicodeSetSpanner",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(source: UnicodeSet!)\n            Create a spanner from a UnicodeSet."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "countIn(sequence: CharSequence!)",
      "desc": "Returns the number of matching characters found in a character sequence, counting by CountMethod."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "countIn(sequence: CharSequence!, countMethod: UnicodeSetSpanner.CountMethod!)",
      "desc": "Returns the number of matching characters found in a character sequence, using SpanCondition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "countIn(sequence: CharSequence!, countMethod: UnicodeSetSpanner.CountMethod!, spanCondition: UnicodeSet.SpanCondition!)",
      "desc": "Returns the number of matching characters found in a character sequence."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "deleteFrom(sequence: CharSequence!)",
      "desc": "Delete all the matching spans in sequence, using SpanCondition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "deleteFrom(sequence: CharSequence!, spanCondition: UnicodeSet.SpanCondition!)",
      "desc": "Delete all matching spans in sequence, according to the spanCondition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Indicates whether some other object is \"equal to\" this one."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "UnicodeSet",
      "code": "getUnicodeSet()",
      "desc": "Returns the UnicodeSet used for processing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code value for the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "replaceFrom(sequence: CharSequence!, replacement: CharSequence!)",
      "desc": "Replace all matching spans in sequence by the replacement, counting by CountMethod.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "replaceFrom(sequence: CharSequence!, replacement: CharSequence!, countMethod: UnicodeSetSpanner.CountMethod!)",
      "desc": "Replace all matching spans in sequence by replacement, according to the CountMethod, using SpanCondition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "replaceFrom(sequence: CharSequence!, replacement: CharSequence!, countMethod: UnicodeSetSpanner.CountMethod!, spanCondition: UnicodeSet.SpanCondition!)",
      "desc": "Replace all matching spans in sequence by replacement, according to the countMethod and spanCondition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "trim(sequence: CharSequence!)",
      "desc": "Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start and end of the string, using TrimOption.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "trim(sequence: CharSequence!, trimOption: UnicodeSetSpanner.TrimOption!)",
      "desc": "Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start or end of the string, using the trimOption and SpanCondition.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "trim(sequence: CharSequence!, trimOption: UnicodeSetSpanner.TrimOption!, spanCondition: UnicodeSet.SpanCondition!)",
      "desc": "Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start or end of the string, depending on the trimOption and spanCondition.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "CountMethod",
      "desc": "Options for replaceFrom and countIn to control how to treat each matched span."
    },
    {
      "type": "nested-classes",
      "code": "TrimOption",
      "desc": "Options for the trim() method"
    }
  ]
}