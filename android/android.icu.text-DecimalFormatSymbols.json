{
  "path": "android.icu.text",
  "name": "DecimalFormatSymbols",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURRENCY_SPC_CURRENCY_MATCH",
      "desc": "[icu] Indicates the currency match pattern used in getPatternForCurrencySpacing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURRENCY_SPC_INSERT",
      "desc": "[icu] Indicates the insertion value used in getPatternForCurrencySpacing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CURRENCY_SPC_SURROUNDING_MATCH",
      "desc": "[icu] Indicates the surrounding match pattern used in  ."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a DecimalFormatSymbols object for the default FORMAT locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(locale: Locale!)\n            Creates a DecimalFormatSymbols object for the given locale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(locale: ULocale!)\n            [icu] Creates a DecimalFormatSymbols object for the given locale."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Creates and returns a copy of this object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Indicates whether some other object is \"equal to\" this one."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "forNumberingSystem(locale: Locale!, ns: NumberingSystem!)",
      "desc": "[icu] Returns a DecimalFormatSymbols instance for the given locale with digits and symbols corresponding to the given NumberingSystem.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "forNumberingSystem(locale: ULocale!, ns: NumberingSystem!)",
      "desc": "[icu] Returns a DecimalFormatSymbols instance for the given locale with digits and symbols corresponding to the given NumberingSystem.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getAvailableLocales()",
      "desc": "Returns an array of all locales for which the getInstance methods of this class can return localized instances.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Currency",
      "code": "getCurrency()",
      "desc": "Returns the currency symbol, for DecimalFormatSymbols#getCurrency() API compatibility only.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getCurrencySymbol()",
      "desc": "Returns the string denoting the local currency.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getDecimalSeparator()",
      "desc": "Returns the character used for decimal sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getDecimalSeparatorString()",
      "desc": "[icu] Returns the string used for decimal sign.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getDigit()",
      "desc": "Returns the character used for a digit in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getDigitStrings()",
      "desc": "[icu] Returns the array of strings used as digits, in order from 0 through 9",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharArray",
      "code": "getDigits()",
      "desc": "Returns the array of characters used as digits, in order from 0 through 9",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getExponentMultiplicationSign()",
      "desc": "Returns the multiplication sign",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getExponentSeparator()",
      "desc": "[icu] Returns the string used to separate the mantissa from the exponent.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getGroupingSeparator()",
      "desc": "Returns the character used for grouping separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getGroupingSeparatorString()",
      "desc": "[icu] Returns the string used for grouping separator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getInfinity()",
      "desc": "Returns the String used to represent infinity.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "getInstance()",
      "desc": "Returns a DecimalFormatSymbols instance for the default locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "getInstance(locale: Locale!)",
      "desc": "Returns a DecimalFormatSymbols instance for the given locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DecimalFormatSymbols",
      "code": "getInstance(locale: ULocale!)",
      "desc": "Returns a DecimalFormatSymbols instance for the given locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getInternationalCurrencySymbol()",
      "desc": "Returns the international string denoting the local currency.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Locale",
      "code": "getLocale()",
      "desc": "Returns the locale for which this object was constructed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMinusSign()",
      "desc": "Returns the character used to represent minus sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getMinusSignString()",
      "desc": "[icu] Returns the string used to represent minus sign.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMonetaryDecimalSeparator()",
      "desc": "Returns the monetary decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getMonetaryDecimalSeparatorString()",
      "desc": "[icu] Returns the monetary decimal separator string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMonetaryGroupingSeparator()",
      "desc": "[icu] Returns the monetary grouping separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getMonetaryGroupingSeparatorString()",
      "desc": "[icu] Returns the monetary grouping separator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getNaN()",
      "desc": "Returns the String used to represent NaN.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPadEscape()",
      "desc": "[icu] Returns the character used to pad numbers out to a specified width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPatternForCurrencySpacing(itemType: Int, beforeCurrency: Boolean)",
      "desc": "[icu] Returns the desired currency spacing value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPatternSeparator()",
      "desc": "Returns the character used to separate positive and negative subpatterns in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPerMill()",
      "desc": "Returns the character used for mille percent sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPerMillString()",
      "desc": "[icu] Returns the string used for permille sign.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPercent()",
      "desc": "Returns the character used for percent sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPercentString()",
      "desc": "[icu] Returns the string used for percent sign.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getPlusSign()",
      "desc": "[icu] Returns the localized plus sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPlusSignString()",
      "desc": "[icu] Returns the string used to represent plus sign.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getSignificantDigit()",
      "desc": "Returns the character used to represent a significant digit in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ULocale",
      "code": "getULocale()",
      "desc": "Returns the locale for which this object was constructed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getZeroDigit()",
      "desc": "Returns the character used for zero."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code value for the object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrency(currency: Currency!)",
      "desc": "Sets the currency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCurrencySymbol(currency: String!)",
      "desc": "Sets the string denoting the local currency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalSeparator(decimalSeparator: Char)",
      "desc": "Sets the character used for decimal sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecimalSeparatorString(decimalSeparatorString: String!)",
      "desc": "[icu] Sets the string used for decimal sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDigit(digit: Char)",
      "desc": "Sets the character used for a digit in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDigitStrings(digitStrings: Array<String!>!)",
      "desc": "[icu] Sets the array of strings used as digits, in order from 0 through 9"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExponentMultiplicationSign(exponentMultiplicationSign: String!)",
      "desc": "Sets the multiplication sign"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExponentSeparator(exp: String!)",
      "desc": "[icu] Sets the string used to separate the mantissa from the exponent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingSeparator(groupingSeparator: Char)",
      "desc": "Sets the character used for grouping separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGroupingSeparatorString(groupingSeparatorString: String!)",
      "desc": "[icu] Sets the string used for grouping separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInfinity(infinity: String!)",
      "desc": "Sets the String used to represent infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInternationalCurrencySymbol(currency: String!)",
      "desc": "Sets the international string denoting the local currency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinusSign(minusSign: Char)",
      "desc": "Sets the character used to represent minus sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinusSignString(minusSignString: String!)",
      "desc": "[icu] Sets the string used to represent minus sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMonetaryDecimalSeparator(sep: Char)",
      "desc": "Sets the monetary decimal separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMonetaryDecimalSeparatorString(sep: String!)",
      "desc": "[icu] Sets the monetary decimal separator string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMonetaryGroupingSeparator(sep: Char)",
      "desc": "[icu] Sets the monetary grouping separator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMonetaryGroupingSeparatorString(sep: String!)",
      "desc": "[icu] Sets the monetary grouping separator string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNaN(NaN: String!)",
      "desc": "Sets the String used to represent NaN."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPadEscape(c: Char)",
      "desc": "[icu] Sets the character used to pad numbers out to a specified width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPatternForCurrencySpacing(itemType: Int, beforeCurrency: Boolean, pattern: String!)",
      "desc": "[icu] Sets the indicated currency spacing pattern or value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPatternSeparator(patternSeparator: Char)",
      "desc": "Sets the character used to separate positive and negative subpatterns in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPerMill(perMill: Char)",
      "desc": "Sets the character used for mille percent sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPerMillString(perMillString: String!)",
      "desc": "[icu] Sets the string used for permille sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPercent(percent: Char)",
      "desc": "Sets the character used for percent sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPercentString(percentString: String!)",
      "desc": "[icu] Sets the string used for percent sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPlusSign(plus: Char)",
      "desc": "[icu] Sets the localized plus sign."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPlusSignString(plusSignString: String!)",
      "desc": "[icu] Sets the localized plus sign string."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSignificantDigit(sigDigit: Char)",
      "desc": "Sets the character used to represent a significant digit in a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setZeroDigit(zeroDigit: Char)",
      "desc": "Sets the character used for zero."
    }
  ]
}