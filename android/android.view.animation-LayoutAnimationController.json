{
  "path": "android.view.animation",
  "name": "LayoutAnimationController",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ORDER_NORMAL",
      "desc": "Distributes the animation delays in the order in which view were added to their view group."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ORDER_RANDOM",
      "desc": "Randomly distributes the animation delays."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ORDER_REVERSE",
      "desc": "Distributes the animation delays in the reverse order in which view were added to their view group."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!)\n            Creates a new layout animation controller from external resources."
    },
    {
      "type": "ctor",
      "ctor": "<init>(animation: Animation!)\n            Creates a new layout animation controller with a delay of 50% and the specified animation."
    },
    {
      "type": "ctor",
      "ctor": "<init>(animation: Animation!, delay: Float)\n            Creates a new layout animation controller with the specified delay and the specified animation."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Animation",
      "code": "getAnimation()",
      "desc": "Returns the animation applied to each child of the view group on which this controller is set.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Animation",
      "code": "getAnimationForView(view: View!)",
      "desc": "Returns the animation to be applied to the specified view.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getDelay()",
      "desc": "Returns the delay by which the children's animation are offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Interpolator",
      "code": "getInterpolator()",
      "desc": "Returns the interpolator used to interpolate the delays between the children.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOrder()",
      "desc": "Returns the order used to compute the delay of each child's animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDone()",
      "desc": "Indicates whether the layout animation is over or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimation(context: Context!, resourceID: Int)",
      "desc": "Sets the animation to be run on each child of the view group on which this layout animation controller is ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimation(animation: Animation!)",
      "desc": "Sets the animation to be run on each child of the view group on which this layout animation controller is ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDelay(delay: Float)",
      "desc": "Sets the delay, as a fraction of the animation duration, by which the children's animations are offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInterpolator(context: Context!, resourceID: Int)",
      "desc": "Sets the interpolator used to interpolate the delays between the children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInterpolator(interpolator: Interpolator!)",
      "desc": "Sets the interpolator used to interpolate the delays between the children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOrder(order: Int)",
      "desc": "Sets the order used to compute the delay of each child's animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "start()",
      "desc": "Starts the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "willOverlap()",
      "desc": "Indicates whether two children's animations will overlap."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Long",
      "code": "getDelayForView(view: View!)",
      "desc": "Returns the amount of milliseconds by which the specified view's animation must be delayed or offset."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTransformedIndex(params: LayoutAnimationController.AnimationParameters!)",
      "desc": "Transforms the index stored in android.view.animation.LayoutAnimationController.AnimationParameters by the order returned by getOrder()."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "AnimationParameters",
      "desc": "The set of parameters that has to be attached to each view contained in the view group animated by the layout animation controller."
    }
  ]
}