{
  "path": "android.graphics.drawable",
  "name": "Icon",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_ADAPTIVE_BITMAP",
      "desc": "An icon that was created using Icon#createWithAdaptiveBitmap."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_BITMAP",
      "desc": "An icon that was created using Icon#createWithBitmap(Bitmap)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_DATA",
      "desc": "An icon that was created using Icon#createWithData(byte[], int, int)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_RESOURCE",
      "desc": "An icon that was created using Icon#createWithResource."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_URI",
      "desc": "An icon that was created using Icon#createWithContentUri or Icon#createWithFilePath(String)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TYPE_URI_ADAPTIVE_BITMAP",
      "desc": "An icon that was created using Icon#createWithAdaptiveBitmapContentUri."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithAdaptiveBitmap(bits: Bitmap!)",
      "desc": "Create an Icon pointing to a bitmap in memory that follows the icon design guideline defined by AdaptiveIconDrawable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithAdaptiveBitmapContentUri(uri: String)",
      "desc": "Create an Icon pointing to an image file specified by URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithAdaptiveBitmapContentUri(uri: Uri)",
      "desc": "Create an Icon pointing to an image file specified by URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithBitmap(bits: Bitmap!)",
      "desc": "Create an Icon pointing to a bitmap in memory.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithContentUri(uri: String!)",
      "desc": "Create an Icon pointing to an image file specified by URI.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithContentUri(uri: Uri!)",
      "desc": "Create an Icon pointing to an image file specified by URI.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithData(data: ByteArray!, offset: Int, length: Int)",
      "desc": "Create an Icon pointing to a compressed bitmap stored in a byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithFilePath(path: String!)",
      "desc": "Create an Icon pointing to an image file specified by path.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithResource(context: Context!, resId: Int)",
      "desc": "Create an Icon pointing to a drawable resource.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Icon",
      "code": "createWithResource(resPackage: String!, resId: Int)",
      "desc": "Create an Icon pointing to a drawable resource.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Parcelable interface"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getResId()",
      "desc": "Gets the resource used to create this icon."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getResPackage()",
      "desc": "Gets the package used to create this icon."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getType()",
      "desc": "Gets the type of the icon provided."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Uri",
      "code": "getUri()",
      "desc": "Gets the uri used to create this icon."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Drawable",
      "code": "loadDrawable(context: Context!)",
      "desc": "Returns a Drawable that can be used to draw the image inside this Icon, constructing it if necessary.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "loadDrawableAsync(context: Context!, andThen: Message!)",
      "desc": "Invokes loadDrawable(android.content.Context) on the given Handler and then sends andThen to the same Handler when finished."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "loadDrawableAsync(context: Context!, listener: Icon.OnDrawableLoadedListener!, handler: Handler!)",
      "desc": "Invokes loadDrawable(android.content.Context) on a background thread and notifies the  OnDrawableLoadedListener#onDrawableLoaded  on the handler when finished."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Icon",
      "code": "setTint(tint: Int)",
      "desc": "Store a color to use whenever this Icon is drawn.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Icon",
      "code": "setTintBlendMode(mode: BlendMode)",
      "desc": "Store a blending mode to use whenever this Icon is drawn."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Icon",
      "code": "setTintList(tintList: ColorStateList!)",
      "desc": "Store a color to use whenever this Icon is drawn.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Icon",
      "code": "setTintMode(mode: PorterDuff.Mode)",
      "desc": "Store a blending mode to use whenever this Icon is drawn."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDrawableLoadedListener",
      "desc": "Implement this interface to receive a callback when loadDrawableAsync is finished and your Drawable is ready."
    }
  ]
}