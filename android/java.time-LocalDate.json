{
  "path": "java.time",
  "name": "LocalDate",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Temporal",
      "code": "adjustInto(temporal: Temporal!)",
      "desc": "Adjusts the specified temporal object to have the same date as this object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atStartOfDay()",
      "desc": "Combines this date with the time of midnight to create a LocalDateTime at the start of this date.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZonedDateTime",
      "code": "atStartOfDay(zone: ZoneId!)",
      "desc": "Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atTime(time: LocalTime!)",
      "desc": "Combines this date with a time to create a LocalDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atTime(hour: Int, minute: Int)",
      "desc": "Combines this date with a time to create a LocalDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atTime(hour: Int, minute: Int, second: Int)",
      "desc": "Combines this date with a time to create a LocalDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atTime(hour: Int, minute: Int, second: Int, nanoOfSecond: Int)",
      "desc": "Combines this date with a time to create a LocalDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "OffsetDateTime",
      "code": "atTime(time: OffsetTime!)",
      "desc": "Combines this date with an offset time to create an OffsetDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: ChronoLocalDate!)",
      "desc": "Compares this date to another date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Checks if this date is equal to another date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(formatter: DateTimeFormatter!)",
      "desc": "Formats this date using the specified formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "from(temporal: TemporalAccessor!)",
      "desc": "Obtains an instance of LocalDate from a temporal object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "get(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this date as an int."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IsoChronology",
      "code": "getChronology()",
      "desc": "Gets the chronology of this date, which is the ISO calendar system.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDayOfMonth()",
      "desc": "Gets the day-of-month field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DayOfWeek",
      "code": "getDayOfWeek()",
      "desc": "Gets the day-of-week field, which is an enum DayOfWeek.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDayOfYear()",
      "desc": "Gets the day-of-year field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Era",
      "code": "getEra()",
      "desc": "Gets the era applicable at this date.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getLong(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this date as a long."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Month",
      "code": "getMonth()",
      "desc": "Gets the month-of-year field using the Month enum.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMonthValue()",
      "desc": "Gets the month-of-year field from 1 to 12."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getYear()",
      "desc": "Gets the year field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "A hash code for this date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAfter(other: ChronoLocalDate!)",
      "desc": "Checks if this date is after the specified date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isBefore(other: ChronoLocalDate!)",
      "desc": "Checks if this date is before the specified date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEqual(other: ChronoLocalDate!)",
      "desc": "Checks if this date is equal to the specified date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isLeapYear()",
      "desc": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(field: TemporalField!)",
      "desc": "Checks if the specified field is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(unit: TemporalUnit!)",
      "desc": "Checks if the specified unit is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lengthOfMonth()",
      "desc": "Returns the length of the month represented by this date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "lengthOfYear()",
      "desc": "Returns the length of the year represented by this date."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minus(amountToSubtract: TemporalAmount!)",
      "desc": "Returns a copy of this date with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minus(amountToSubtract: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this date with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minusDays(daysToSubtract: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of days subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minusMonths(monthsToSubtract: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of months subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minusWeeks(weeksToSubtract: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of weeks subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "minusYears(yearsToSubtract: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of years subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "now()",
      "desc": "Obtains the current date from the system clock in the default time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "now(zone: ZoneId!)",
      "desc": "Obtains the current date from the system clock in the specified time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "now(clock: Clock!)",
      "desc": "Obtains the current date from the specified clock.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "of(year: Int, month: Month!, dayOfMonth: Int)",
      "desc": "Obtains an instance of LocalDate from a year, month and day.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "of(year: Int, month: Int, dayOfMonth: Int)",
      "desc": "Obtains an instance of LocalDate from a year, month and day.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "ofEpochDay(epochDay: Long)",
      "desc": "Obtains an instance of LocalDate from the epoch day count.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "ofYearDay(year: Int, dayOfYear: Int)",
      "desc": "Obtains an instance of LocalDate from a year and day-of-year.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "parse(text: CharSequence!)",
      "desc": "Obtains an instance of LocalDate from a text string such as 2007-12-03.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalDate",
      "code": "parse(text: CharSequence!, formatter: DateTimeFormatter!)",
      "desc": "Obtains an instance of LocalDate from a text string using a specific formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plus(amountToAdd: TemporalAmount!)",
      "desc": "Returns a copy of this date with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plus(amountToAdd: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this date with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plusDays(daysToAdd: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of days added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plusMonths(monthsToAdd: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of months added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plusWeeks(weeksToAdd: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of weeks added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "plusYears(yearsToAdd: Long)",
      "desc": "Returns a copy of this LocalDate with the specified number of years added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "R",
      "code": "query(query: TemporalQuery<R>!)",
      "desc": "Queries this date using the specified query."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ValueRange",
      "code": "range(field: TemporalField!)",
      "desc": "Gets the range of valid values for the specified field.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "toEpochDay()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Outputs this date as a String, such as 2007-12-03."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "until(endExclusive: Temporal!, unit: TemporalUnit!)",
      "desc": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Period",
      "code": "until(endDateExclusive: ChronoLocalDate!)",
      "desc": "Calculates the period between this date and another date as a Period.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "with(adjuster: TemporalAdjuster!)",
      "desc": "Returns an adjusted copy of this date.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "with(field: TemporalField!, newValue: Long)",
      "desc": "Returns a copy of this date with the specified field set to a new value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "withDayOfMonth(dayOfMonth: Int)",
      "desc": "Returns a copy of this LocalDate with the day-of-month altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "withDayOfYear(dayOfYear: Int)",
      "desc": "Returns a copy of this LocalDate with the day-of-year altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "withMonth(month: Int)",
      "desc": "Returns a copy of this LocalDate with the month-of-year altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDate",
      "code": "withYear(year: Int)",
      "desc": "Returns a copy of this LocalDate with the year altered.",
      "symbol": "!"
    }
  ]
}