{
  "path": "java.util",
  "name": "Scanner",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(source: Readable!)\n            Constructs a new Scanner that produces values scanned from the specified source."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: InputStream!)\n            Constructs a new Scanner that produces values scanned from the specified input stream."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: InputStream!, charsetName: String!)\n            Constructs a new Scanner that produces values scanned from the specified input stream."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: File!)\n            Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: File!, charsetName: String!)\n            Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: Path!)\n            Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: Path!, charsetName: String!)\n            Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: String!)\n            Constructs a new Scanner that produces values scanned from the specified string."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: ReadableByteChannel!)\n            Constructs a new Scanner that produces values scanned from the specified channel."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: ReadableByteChannel!, charsetName: String!)\n            Constructs a new Scanner that produces values scanned from the specified channel."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this scanner."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Pattern",
      "code": "delimiter()",
      "desc": "Returns the Pattern this Scanner is currently using to match delimiters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "findInLine(pattern: String!)",
      "desc": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "findInLine(pattern: Pattern!)",
      "desc": "Attempts to find the next occurrence of the specified pattern ignoring delimiters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "findWithinHorizon(pattern: String!, horizon: Int)",
      "desc": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "findWithinHorizon(pattern: Pattern!, horizon: Int)",
      "desc": "Attempts to find the next occurrence of the specified pattern.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNext()",
      "desc": "Returns true if this scanner has another token in its input."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNext(pattern: String!)",
      "desc": "Returns true if the next token matches the pattern constructed from the specified string."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNext(pattern: Pattern!)",
      "desc": "Returns true if the next complete token matches the specified pattern."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextBigDecimal()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the nextBigDecimal method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextBigInteger()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the nextBigInteger method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextBigInteger(radix: Int)",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the nextBigInteger method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextBoolean()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string \"true|false\"."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextByte()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextByte method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextByte(radix: Int)",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextByte method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextDouble()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a double value using the nextDouble method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextFloat()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a float value using the nextFloat method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextInt()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextInt method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextInt(radix: Int)",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextInt method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextLine()",
      "desc": "Returns true if there is another line in the input of this scanner."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextLong()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextLong method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextLong(radix: Int)",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextLong method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextShort()",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextShort method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasNextShort(radix: Int)",
      "desc": "Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextShort method."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IOException",
      "code": "ioException()",
      "desc": "Returns the IOException last thrown by this Scanner's underlying Readable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Locale",
      "code": "locale()",
      "desc": "Returns this scanner's locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MatchResult",
      "code": "match()",
      "desc": "Returns the match result of the last scanning operation performed by this scanner.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "next()",
      "desc": "Finds and returns the next complete token from this scanner.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "next(pattern: String!)",
      "desc": "Returns the next token if it matches the pattern constructed from the specified string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "next(pattern: Pattern!)",
      "desc": "Returns the next token if it matches the specified pattern.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "BigDecimal",
      "code": "nextBigDecimal()",
      "desc": "Scans the next token of the input as a  BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "BigInteger",
      "code": "nextBigInteger()",
      "desc": "Scans the next token of the input as a  BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "BigInteger",
      "code": "nextBigInteger(radix: Int)",
      "desc": "Scans the next token of the input as a  BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "nextBoolean()",
      "desc": "Scans the next token of the input into a boolean value and returns that value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "nextByte()",
      "desc": "Scans the next token of the input as a byte."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "nextByte(radix: Int)",
      "desc": "Scans the next token of the input as a byte."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "nextDouble()",
      "desc": "Scans the next token of the input as a double."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "nextFloat()",
      "desc": "Scans the next token of the input as a float."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "nextInt()",
      "desc": "Scans the next token of the input as an int."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "nextInt(radix: Int)",
      "desc": "Scans the next token of the input as an int."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "nextLine()",
      "desc": "Advances this scanner past the current line and returns the input that was skipped.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "nextLong()",
      "desc": "Scans the next token of the input as a long."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "nextLong(radix: Int)",
      "desc": "Scans the next token of the input as a long."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Short",
      "code": "nextShort()",
      "desc": "Scans the next token of the input as a short."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Short",
      "code": "nextShort(radix: Int)",
      "desc": "Scans the next token of the input as a short."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "radix()",
      "desc": "Returns this scanner's default radix."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "remove()",
      "desc": "The remove operation is not supported by this implementation of Iterator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "reset()",
      "desc": "Resets this scanner.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "skip(pattern: Pattern!)",
      "desc": "Skips input that matches the specified pattern, ignoring delimiters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "skip(pattern: String!)",
      "desc": "Skips input that matches a pattern constructed from the specified string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the string representation of this Scanner."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "useDelimiter(pattern: Pattern!)",
      "desc": "Sets this scanner's delimiting pattern to the specified pattern.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "useDelimiter(pattern: String!)",
      "desc": "Sets this scanner's delimiting pattern to a pattern constructed from the specified String.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "useLocale(locale: Locale!)",
      "desc": "Sets this scanner's locale to the specified locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Scanner",
      "code": "useRadix(radix: Int)",
      "desc": "Sets this scanner's default radix to the specified radix.",
      "symbol": "!"
    }
  ]
}