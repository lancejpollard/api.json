{
  "path": "java.util",
  "name": "LinkedHashMap",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int, loadFactor: Float)\n            Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and load factor."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int)\n            Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and a default load factor (0.75)."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs an empty insertion-ordered LinkedHashMap instance with the default initial capacity (16) and load factor (0.75)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(m: MutableMap<out K, out V>!)\n            Constructs an insertion-ordered LinkedHashMap instance with the same mappings as the specified map."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int, loadFactor: Float, accessOrder: Boolean)\n            Constructs an empty LinkedHashMap instance with the specified initial capacity, load factor and ordering mode."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Removes all of the mappings from this map."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsValue(value: V)",
      "desc": "Returns true if this map maps one or more keys to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(action: BiConsumer<in K, in V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "get(key: K)",
      "desc": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "getOrDefault(key: K, defaultValue: V)",
      "desc": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "replaceAll(function: BiFunction<in K, in V, out V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeEldestEntry(eldest: MutableEntry<K, V>!)",
      "desc": "Returns true if this map should remove its eldest entry."
    },
    {
      "type": "inherited-methods",
      "from": "HashMap"
    },
    {
      "type": "inherited-methods",
      "from": "Any"
    },
    {
      "type": "inherited-methods",
      "from": "clone()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "compute(key: K, remappingFunction: BiFunction<in K, in V?, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfAbsent(key: K, mappingFunction: Function<in K, out V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfPresent(key: K, remappingFunction: BiFunction<in K, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isEmpty()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "merge(key: K, value: V, remappingFunction: BiFunction<in V, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "put(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putAll(from: Map<out K, V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "putIfAbsent(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, oldValue: V, newValue: V)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "AbstractMap"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "Object#hashCode"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    },
    {
      "type": "inherited-methods",
      "from": "String#valueOf(Object)"
    }
  ]
}