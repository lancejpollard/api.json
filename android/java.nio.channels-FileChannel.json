{
  "path": "java.nio.channels",
  "name": "FileChannel",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "force(metaData: Boolean)",
      "desc": "Forces any updates to this channel's file to be written to the storage device that contains it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileLock",
      "code": "lock(position: Long, size: Long, shared: Boolean)",
      "desc": "Acquires a lock on the given region of this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FileLock",
      "code": "lock()",
      "desc": "Acquires an exclusive lock on this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "MappedByteBuffer",
      "code": "map(mode: FileChannel.MapMode!, position: Long, size: Long)",
      "desc": "Maps a region of this channel's file directly into memory.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FileChannel",
      "code": "open(path: Path!, options: MutableSet<out OpenOption!>!, vararg attrs: FileAttribute<*>!)",
      "desc": "Opens or creates a file, returning a file channel to access the file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FileChannel",
      "code": "open(path: Path!, vararg options: OpenOption!)",
      "desc": "Opens or creates a file, returning a file channel to access the file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "position()",
      "desc": "Returns this channel's file position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileChannel",
      "code": "position(newPosition: Long)",
      "desc": "Sets this channel's file position.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "read(dst: ByteBuffer!)",
      "desc": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "read(dsts: Array<ByteBuffer!>!, offset: Int, length: Int)",
      "desc": "Reads a sequence of bytes from this channel into a subsequence of the given buffers."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "read(dsts: Array<ByteBuffer!>!)",
      "desc": "Reads a sequence of bytes from this channel into the given buffers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "read(dst: ByteBuffer!, position: Long)",
      "desc": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "size()",
      "desc": "Returns the current size of this channel's file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "transferFrom(src: ReadableByteChannel!, position: Long, count: Long)",
      "desc": "Transfers bytes into this channel's file from the given readable byte channel."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "transferTo(position: Long, count: Long, target: WritableByteChannel!)",
      "desc": "Transfers bytes from this channel's file to the given writable byte channel."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileChannel",
      "code": "truncate(size: Long)",
      "desc": "Truncates this channel's file to the given size.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileLock",
      "code": "tryLock(position: Long, size: Long, shared: Boolean)",
      "desc": "Attempts to acquire a lock on the given region of this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "FileLock",
      "code": "tryLock()",
      "desc": "Attempts to acquire an exclusive lock on this channel's file.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "write(src: ByteBuffer!)",
      "desc": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Long",
      "code": "write(srcs: Array<ByteBuffer!>!, offset: Int, length: Int)",
      "desc": "Writes a sequence of bytes to this channel from a subsequence of the given buffers."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "write(srcs: Array<ByteBuffer!>!)",
      "desc": "Writes a sequence of bytes to this channel from the given buffers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "write(src: ByteBuffer!, position: Long)",
      "desc": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "MapMode",
      "desc": "A typesafe enumeration for file-mapping modes."
    },
    {
      "type": "inherited-methods",
      "from": "AbstractInterruptibleChannel"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "begin()"
    },
    {
      "type": "inherited-methods",
      "from": "end"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "close()"
    },
    {
      "type": "inherited-methods",
      "from": "implCloseChannel"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "end(completed: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "begin"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "implCloseChannel()"
    },
    {
      "type": "inherited-methods",
      "from": "close"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isOpen()"
    }
  ]
}