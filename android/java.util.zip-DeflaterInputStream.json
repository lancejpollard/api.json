{
  "path": "java.util.zip",
  "name": "DeflaterInputStream",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(in: InputStream!)\n            Creates a new input stream with a default compressor and buffer size."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: InputStream!, defl: Deflater!)\n            Creates a new input stream with the specified compressor and a default buffer size."
    },
    {
      "type": "ctor",
      "ctor": "<init>(in: InputStream!, defl: Deflater!, bufLen: Int)\n            Creates a new input stream with the specified compressor and buffer size."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "available()",
      "desc": "Returns 0 after EOF has been reached, otherwise always return 1."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this input stream and its underlying input stream, discarding any pending uncompressed data."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "mark(limit: Int)",
      "desc": "This operation is not supported."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "markSupported()",
      "desc": "Always returns false because this input stream does not support the mark() and reset() methods."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read()",
      "desc": "Reads a single byte of compressed data from the input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read(b: ByteArray!, off: Int, len: Int)",
      "desc": "Reads compressed data into a byte array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "This operation is not supported."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "skip(n: Long)",
      "desc": "Skips over and discards data from the input stream."
    },
    {
      "type": "inherited-methods",
      "from": "FilterInputStream"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "read(b: ByteArray!)"
    },
    {
      "type": "inherited-methods",
      "from": "byte.length"
    },
    {
      "type": "inherited-methods",
      "from": "read(b, 0, b.length)"
    },
    {
      "type": "inherited-methods",
      "from": "in.read(b)"
    },
    {
      "type": "inherited-methods",
      "from": "FilterInputStream"
    }
  ]
}