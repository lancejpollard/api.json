{
  "path": "javax.crypto",
  "name": "KeyAgreementSpi",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "Key",
      "code": "engineDoPhase(key: Key!, lastPhase: Boolean)",
      "desc": "Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "ByteArray",
      "code": "engineGenerateSecret()",
      "desc": "Generates the shared secret and returns it in a new buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "engineGenerateSecret(sharedSecret: ByteArray!, offset: Int)",
      "desc": "Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "SecretKey",
      "code": "engineGenerateSecret(algorithm: String!)",
      "desc": "Creates the shared secret and returns it as a secret key object of the requested algorithm type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineInit(key: Key!, random: SecureRandom!)",
      "desc": "Initializes this key agreement with the given key and source of randomness."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineInit(key: Key!, params: AlgorithmParameterSpec!, random: SecureRandom!)",
      "desc": "Initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
    }
  ]
}