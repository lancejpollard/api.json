{
  "path": "java.time.format",
  "name": "DateTimeFormatter",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(temporal: TemporalAccessor!)",
      "desc": "Formats a date-time object using this formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "formatTo(temporal: TemporalAccessor!, appendable: Appendable!)",
      "desc": "Formats a date-time object to an Appendable using this formatter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Chronology",
      "code": "getChronology()",
      "desc": "Gets the overriding chronology to be used during formatting.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DecimalStyle",
      "code": "getDecimalStyle()",
      "desc": "Gets the DecimalStyle to be used during formatting.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Locale",
      "code": "getLocale()",
      "desc": "Gets the locale to be used during formatting.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableSet",
      "code": "getResolverFields()",
      "desc": "Gets the resolver fields to use during parsing.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ResolverStyle",
      "code": "getResolverStyle()",
      "desc": "Gets the resolver style to use during parsing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZoneId",
      "code": "getZone()",
      "desc": "Gets the overriding zone to be used during formatting.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofLocalizedDate(dateStyle: FormatStyle!)",
      "desc": "Returns a locale specific date format for the ISO chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofLocalizedDateTime(dateTimeStyle: FormatStyle!)",
      "desc": "Returns a locale specific date-time formatter for the ISO chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofLocalizedDateTime(dateStyle: FormatStyle!, timeStyle: FormatStyle!)",
      "desc": "Returns a locale specific date and time format for the ISO chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofLocalizedTime(timeStyle: FormatStyle!)",
      "desc": "Returns a locale specific time format for the ISO chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofPattern(pattern: String!)",
      "desc": "Creates a formatter using the specified pattern.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "DateTimeFormatter",
      "code": "ofPattern(pattern: String!, locale: Locale!)",
      "desc": "Creates a formatter using the specified pattern and locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TemporalAccessor",
      "code": "parse(text: CharSequence!)",
      "desc": "Fully parses the text producing a temporal object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TemporalAccessor",
      "code": "parse(text: CharSequence!, position: ParsePosition!)",
      "desc": "Parses the text using this formatter, providing control over the text position.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "parse(text: CharSequence!, query: TemporalQuery<T>!)",
      "desc": "Fully parses the text producing an object of the specified type."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TemporalAccessor",
      "code": "parseBest(text: CharSequence!, vararg queries: TemporalQuery<*>!)",
      "desc": "Fully parses the text producing an object of one of the specified types.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TemporalAccessor",
      "code": "parseUnresolved(text: CharSequence!, position: ParsePosition!)",
      "desc": "Parses the text using this formatter, without resolving the result, intended for advanced use cases.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "TemporalQuery",
      "code": "parsedExcessDays()",
      "desc": "A query that provides access to the excess days that were parsed.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "TemporalQuery",
      "code": "parsedLeapSecond()",
      "desc": "A query that provides access to whether a leap-second was parsed.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Format",
      "code": "toFormat()",
      "desc": "Returns this formatter as a java.text.Format instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Format",
      "code": "toFormat(parseQuery: TemporalQuery<*>!)",
      "desc": "Returns this formatter as a java.text.Format instance that will parse using the specified query.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a description of the underlying formatters."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withChronology(chrono: Chronology!)",
      "desc": "Returns a copy of this formatter with a new override chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withDecimalStyle(decimalStyle: DecimalStyle!)",
      "desc": "Returns a copy of this formatter with a new DecimalStyle.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withLocale(locale: Locale!)",
      "desc": "Returns a copy of this formatter with a new locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withResolverFields(vararg resolverFields: TemporalField!)",
      "desc": "Returns a copy of this formatter with a new set of resolver fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withResolverFields(resolverFields: MutableSet<TemporalField!>!)",
      "desc": "Returns a copy of this formatter with a new set of resolver fields.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withResolverStyle(resolverStyle: ResolverStyle!)",
      "desc": "Returns a copy of this formatter with a new resolver style.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "withZone(zone: ZoneId!)",
      "desc": "Returns a copy of this formatter with a new override zone.",
      "symbol": "!"
    }
  ]
}