{
  "path": "android.icu.math",
  "name": "BigDecimal",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_CEILING",
      "desc": "Rounding mode to round to a more positive number."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_DOWN",
      "desc": "Rounding mode to round towards zero."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_FLOOR",
      "desc": "Rounding mode to round to a more negative number."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_DOWN",
      "desc": "Rounding mode to round to nearest neighbor, where an equidistant value is rounded down."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_EVEN",
      "desc": "Rounding mode to round to nearest neighbor, where an equidistant value is rounded to the nearest even neighbor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_HALF_UP",
      "desc": "Rounding mode to round to nearest neighbor, where an equidistant value is rounded up."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_UNNECESSARY",
      "desc": "Rounding mode to assert that no rounding is necessary."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ROUND_UP",
      "desc": "Rounding mode to round away from zero."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bd: BigDecimal!)\n            Constructs a BigDecimal object from a java.math.BigDecimal."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bi: BigInteger!)\n            Constructs a BigDecimal object from a BigInteger, with scale 0."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bi: BigInteger!, scale: Int)\n            Constructs a BigDecimal object from a BigInteger and a scale."
    },
    {
      "type": "ctor",
      "ctor": "<init>(inchars: CharArray!)\n            Constructs a BigDecimal object from an array of characters."
    },
    {
      "type": "ctor",
      "ctor": "<init>(inchars: CharArray!, offset: Int, length: Int)\n            Constructs a BigDecimal object from an array of characters."
    },
    {
      "type": "ctor",
      "ctor": "<init>(num: Double)\n            Constructs a BigDecimal object directly from a double."
    },
    {
      "type": "ctor",
      "ctor": "<init>(num: Int)\n            Constructs a BigDecimal object directly from a int."
    },
    {
      "type": "ctor",
      "ctor": "<init>(num: Long)\n            Constructs a BigDecimal object directly from a long."
    },
    {
      "type": "ctor",
      "ctor": "<init>(string: String!)\n            Constructs a BigDecimal object from a String."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "abs()",
      "desc": "Returns a plain BigDecimal whose value is the absolute value of this BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "abs(set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the absolute value of this BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "add(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is this+rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "add(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is this+rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Byte",
      "code": "byteValueExact()",
      "desc": "Converts this BigDecimal to a byte."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compareTo(other: BigDecimal!)",
      "desc": "Compares this BigDecimal to another, using unlimited precision."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compareTo(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Compares this BigDecimal to another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(rhs: BigDecimal!, round: Int)",
      "desc": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a rounding mode.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(rhs: BigDecimal!, scale: Int, round: Int)",
      "desc": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a given scale and rounding mode.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divide(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is this/rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divideInteger(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is the integer part of this/rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "divideInteger(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the integer part of this/rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares this BigDecimal with rhs for equality."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "format(before: Int, after: Int)",
      "desc": "Returns the String representation of this BigDecimal, modified by layout parameters.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "format(before: Int, after: Int, explaces: Int, exdigits: Int, exformint: Int, exround: Int)",
      "desc": "Returns the String representation of this BigDecimal, modified by layout parameters and allowing exponential notation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns the hashcode for this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "intValueExact()",
      "desc": "Converts this BigDecimal to an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "longValueExact()",
      "desc": "Converts this BigDecimal to a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "max(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is the maximum of this and rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "max(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the maximum of this and rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "min(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is the minimum of this and rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "min(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the minimum of this and rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "movePointLeft(n: Int)",
      "desc": "Returns a plain BigDecimal whose decimal point has been moved to the left by a specified number of positions.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "movePointRight(n: Int)",
      "desc": "Returns a plain BigDecimal whose decimal point has been moved to the right by a specified number of positions.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "multiply(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is this*rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "multiply(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is this*rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "negate()",
      "desc": "Returns a plain BigDecimal whose value is -this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "negate(set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is -this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "plus()",
      "desc": "Returns a plain BigDecimal whose value is +this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "plus(set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is +this.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "pow(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is this**rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "pow(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is this**rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "remainder(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is the remainder of this/rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "remainder(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is the remainder of this/rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "scale()",
      "desc": "Returns the scale of this BigDecimal."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "setScale(scale: Int)",
      "desc": "Returns a plain BigDecimal with a given scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "setScale(scale: Int, round: Int)",
      "desc": "Returns a plain BigDecimal with a given scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Short",
      "code": "shortValueExact()",
      "desc": "Converts this BigDecimal to a short."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "signum()",
      "desc": "Returns the sign of this BigDecimal, as an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "subtract(rhs: BigDecimal!)",
      "desc": "Returns a plain BigDecimal whose value is this-rhs, using fixed point arithmetic.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "subtract(rhs: BigDecimal!, set: MathContext!)",
      "desc": "Returns a BigDecimal whose value is this-rhs.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "toBigDecimal()",
      "desc": "Converts this BigDecimal to a java.math.BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "toBigInteger()",
      "desc": "Converts this BigDecimal to a java.math.BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "toBigIntegerExact()",
      "desc": "Converts this BigDecimal to a java.math.BigInteger.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharArray",
      "code": "toCharArray()",
      "desc": "Returns the BigDecimal as a character array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "toDouble()",
      "desc": "Converts this BigDecimal to a double."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "toFloat()",
      "desc": "Converts this BigDecimal to a float."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "toInt()",
      "desc": "Converts this BigDecimal to an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "toLong()",
      "desc": "Converts this BigDecimal to a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns the BigDecimal as a String."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "unscaledValue()",
      "desc": "Returns the number as a BigInteger after removing the scale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(dub: Double)",
      "desc": "Translates a double to a BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(lint: Long)",
      "desc": "Translates a long to a BigDecimal.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigDecimal",
      "code": "valueOf(lint: Long, scale: Int)",
      "desc": "Translates a long to a BigDecimal with a given scale.",
      "symbol": "!"
    }
  ]
}