{
  "path": "javax.net.ssl",
  "name": "SSLServerSocket",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getEnableSessionCreation()",
      "desc": "Returns true if new SSL sessions may be established by the sockets which are created from this server socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getEnabledCipherSuites()",
      "desc": "Returns the list of cipher suites which are currently enabled for use by newly accepted connections.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getEnabledProtocols()",
      "desc": "Returns the names of the protocols which are currently enabled for use by the newly accepted connections.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getNeedClientAuth()",
      "desc": "Returns true if client authentication will be required on newly accepted server-mode SSLSockets."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLParameters",
      "code": "getSSLParameters()",
      "desc": "Returns the SSLParameters in effect for newly accepted connections.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getSupportedCipherSuites()",
      "desc": "Returns the names of the cipher suites which could be enabled for use on an SSL connection.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getSupportedProtocols()",
      "desc": "Returns the names of the protocols which could be enabled for use.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getUseClientMode()",
      "desc": "Returns true if accepted connections will be in SSL client mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getWantClientAuth()",
      "desc": "Returns true if client authentication will be requested on newly accepted server-mode connections."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnableSessionCreation(flag: Boolean)",
      "desc": "Controls whether new SSL sessions may be established by the sockets which are created from this server socket."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnabledCipherSuites(suites: Array<String!>!)",
      "desc": "Sets the cipher suites enabled for use by accepted connections."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnabledProtocols(protocols: Array<String!>!)",
      "desc": "Controls which particular protocols are enabled for use by accepted connections."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setNeedClientAuth(need: Boolean)",
      "desc": "Controls whether accepted server-mode SSLSockets will be initially configured to require client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSSLParameters(params: SSLParameters!)",
      "desc": "Applies SSLParameters to newly accepted connections."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setUseClientMode(mode: Boolean)",
      "desc": "Controls whether accepted connections are in the (default) SSL server mode, or the SSL client mode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setWantClientAuth(want: Boolean)",
      "desc": "Controls whether accepted server-mode SSLSockets will be initially configured to request client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "Socket!"
    },
    {
      "type": "inherited-methods",
      "from": "accept()"
    },
    {
      "type": "inherited-methods",
      "from": "s"
    },
    {
      "type": "inherited-methods",
      "from": "checkAccept"
    },
    {
      "type": "inherited-methods",
      "from": "s.getInetAddress().getHostAddress()"
    },
    {
      "type": "inherited-methods",
      "from": "s.getPort()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "bind(endpoint: SocketAddress!)"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "bind(endpoint: SocketAddress!, backlog: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "backlog"
    },
    {
      "type": "inherited-methods",
      "from": "0"
    },
    {
      "type": "inherited-methods",
      "from": "0"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "close()"
    },
    {
      "type": "inherited-methods",
      "from": "accept()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketException"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocketChannel!"
    },
    {
      "type": "inherited-methods",
      "from": "getChannel()"
    },
    {
      "type": "inherited-methods",
      "from": "java.nio.channels.ServerSocketChannel"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "InetAddress!"
    },
    {
      "type": "inherited-methods",
      "from": "getInetAddress()"
    },
    {
      "type": "inherited-methods",
      "from": "closed"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "-1"
    },
    {
      "type": "inherited-methods",
      "from": "InetAddress#getLoopbackAddress"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLocalPort()"
    },
    {
      "type": "inherited-methods",
      "from": "closed"
    },
    {
      "type": "inherited-methods",
      "from": "SocketAddress!"
    },
    {
      "type": "inherited-methods",
      "from": "getLocalSocketAddress()"
    },
    {
      "type": "inherited-methods",
      "from": "closed"
    },
    {
      "type": "inherited-methods",
      "from": "checkConnect"
    },
    {
      "type": "inherited-methods",
      "from": "-1"
    },
    {
      "type": "inherited-methods",
      "from": "SocketAddress"
    },
    {
      "type": "inherited-methods",
      "from": "InetAddress#getLoopbackAddress"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getReceiveBufferSize()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_RCVBUF"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "Socket#getReceiveBufferSize()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "getReuseAddress()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getSoTimeout()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_TIMEOUT"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "implAccept(s: Socket!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isBound()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isClosed()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setPerformancePreferences(connectionTime: Int, latency: Int, bandwidth: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "(1, 0, 0)"
    },
    {
      "type": "inherited-methods",
      "from": "(0, 1, 2)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setReceiveBufferSize(size: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_RCVBUF"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "Socket#getReceiveBufferSize()"
    },
    {
      "type": "inherited-methods",
      "from": "accept()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_RCVBUF"
    },
    {
      "type": "inherited-methods",
      "from": "Socket#setReceiveBufferSize(int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setReuseAddress(on: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "TIME_WAIT"
    },
    {
      "type": "inherited-methods",
      "from": "2MSL"
    },
    {
      "type": "inherited-methods",
      "from": "SocketAddress"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "bind(java.net.SocketAddress)"
    },
    {
      "type": "inherited-methods",
      "from": "ServerSocket"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "getReuseAddress()"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_REUSEADDR"
    },
    {
      "type": "inherited-methods",
      "from": "isBound()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setSoTimeout(timeout: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "SocketOptions#SO_TIMEOUT"
    },
    {
      "type": "inherited-methods",
      "from": "> 0"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setSocketFactory(fac: SocketImplFactory!)"
    },
    {
      "type": "inherited-methods",
      "from": "createSocketImpl"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "checkSetFactory"
    }
  ]
}