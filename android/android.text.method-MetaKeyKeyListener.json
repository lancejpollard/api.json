{
  "path": "android.text.method",
  "name": "MetaKeyKeyListener",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_ALT_LOCKED",
      "desc": "Flag that indicates that the ALT key is locked."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_ALT_ON",
      "desc": "Flag that indicates that the ALT key is on."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_CAP_LOCKED",
      "desc": "Flag that indicates that the SHIFT key is locked in CAPS mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_SHIFT_ON",
      "desc": "Flag that indicates that the SHIFT key is on."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_SYM_LOCKED",
      "desc": "Flag that indicates that the SYM key is locked."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "META_SYM_ON",
      "desc": "Flag that indicates that the SYM key is on."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "adjustMetaAfterKeypress(content: Spannable!)",
      "desc": "Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "adjustMetaAfterKeypress(state: Long)",
      "desc": "Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearMetaKeyState(view: View!, content: Editable!, states: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "clearMetaKeyState(state: Long, which: Int)",
      "desc": "Clears the state of the specified meta key if it is locked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearMetaKeyState(content: Editable!, states: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(text: CharSequence!)",
      "desc": "Gets the state of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(text: CharSequence!, event: KeyEvent!)",
      "desc": "Gets the state of the meta keys for a specific key event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(text: CharSequence!, meta: Int)",
      "desc": "Gets the state of a particular meta key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(text: CharSequence!, meta: Int, event: KeyEvent!)",
      "desc": "Gets the state of a particular meta key to use with a particular key event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(state: Long)",
      "desc": "Gets the state of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getMetaState(state: Long, meta: Int)",
      "desc": "Gets the state of a particular meta key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "handleKeyDown(state: Long, keyCode: Int, event: KeyEvent!)",
      "desc": "Handles presses of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "handleKeyUp(state: Long, keyCode: Int, event: KeyEvent!)",
      "desc": "Handles release of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isMetaTracker(text: CharSequence!, what: Any!)",
      "desc": "Returns true if this object is one that this class would use to keep track of any meta state in the specified text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSelectingMetaTracker(text: CharSequence!, what: Any!)",
      "desc": "Returns true if this object is one that this class would use to keep track of the selecting meta state in the specified text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyDown(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)",
      "desc": "Handles presses of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onKeyUp(view: View!, content: Editable!, keyCode: Int, event: KeyEvent!)",
      "desc": "Handles release of the meta keys."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "resetLockedMeta(state: Long)",
      "desc": "Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resetMetaState(text: Spannable!)",
      "desc": "Resets all meta state to inactive."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "resetLockedMeta(content: Spannable!)",
      "desc": "Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key."
    }
  ]
}