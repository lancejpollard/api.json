{
  "path": "android.content",
  "name": "Context",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACCESSIBILITY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.accessibility.AccessibilityManager for giving the user feedback for UI events through the registered event listeners."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACCOUNT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.accounts.AccountManager for receiving intents at a time of your choosing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ACTIVITY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.ActivityManager for interacting with the global system state."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ALARM_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.AlarmManager for receiving intents at a time of your choosing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "APPWIDGET_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.appwidget.AppWidgetManager for accessing AppWidgets."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "APP_OPS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.AppOpsManager for tracking application operations on the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "AUDIO_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.media.AudioManager for handling management of volume, ringer modes and audio routing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "BATTERY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.BatteryManager for managing battery state."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_ABOVE_CLIENT",
      "desc": "Flag for bindService: indicates that the client application binding to this service considers the service to be more important than the app itself."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_ADJUST_WITH_ACTIVITY",
      "desc": "Flag for bindService: If binding from an activity, allow the target service's process importance to be raised based on whether the activity is visible to the user, regardless whether another flag is used to reduce the amount that the client process's overall importance is used to impact it."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_ALLOW_OOM_MANAGEMENT",
      "desc": "Flag for bindService: allow the process hosting the bound service to go through its normal memory management."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_AUTO_CREATE",
      "desc": "Flag for bindService: automatically create the service as long as the binding exists."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_DEBUG_UNBIND",
      "desc": "Flag for bindService: include debugging help for mismatched calls to unbind."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_EXTERNAL_SERVICE",
      "desc": "Flag for bindService: The service being bound is an isolated, external service."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_IMPORTANT",
      "desc": "Flag for bindService: this service is very important to the client, so should be brought to the foreground process level when the client is."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_INCLUDE_CAPABILITIES",
      "desc": "Flag for bindService: If binding from an app that has specific capabilities due to its foreground state such as an activity or foreground service, then this flag will allow the bound app to get the same capabilities, as long as it has the required permissions as well."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_NOT_FOREGROUND",
      "desc": "Flag for bindService: don't allow this binding to raise the target service's process to the foreground scheduling priority."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_NOT_PERCEPTIBLE",
      "desc": "Flag for bindService: If binding from an app that is visible or user-perceptible, lower the target service's importance to below the perceptible level."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BIND_WAIVE_PRIORITY",
      "desc": "Flag for bindService: don't impact the scheduling or memory management priority of the target service's hosting process."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "BIOMETRIC_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.biometrics.BiometricManager for handling biometric and PIN/pattern/password authentication."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "BLOB_STORE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for contributing and accessing data blobs from the blob store maintained by the system."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "BLUETOOTH_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.bluetooth.BluetoothManager for using Bluetooth."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CAMERA_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.camera2.CameraManager for interacting with camera devices."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CAPTIONING_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.accessibility.CaptioningManager for obtaining captioning properties and listening for changes in captioning preferences."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CARRIER_CONFIG_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.telephony.CarrierConfigManager for reading carrier configuration values."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CLIPBOARD_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.content.ClipboardManager for accessing and modifying the contents of the global clipboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "COMPANION_DEVICE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.companion.CompanionDeviceManager for managing companion devices"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CONNECTIVITY_DIAGNOSTICS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for performing network connectivity diagnostics as well as receiving network connectivity information from the system."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CONNECTIVITY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for handling management of network connections."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CONSUMER_IR_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.ConsumerIrManager for transmitting infrared signals from the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CONTEXT_IGNORE_SECURITY",
      "desc": "Flag for use with createPackageContext: ignore any security restrictions on the Context being requested, allowing it to always be loaded."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CONTEXT_INCLUDE_CODE",
      "desc": "Flag for use with createPackageContext: include the application code with the context."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CONTEXT_RESTRICTED",
      "desc": "Flag for use with createPackageContext: a restricted context may disable specific features."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "CROSS_PROFILE_APPS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.content.pm.CrossProfileApps for cross profile operations."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "DEVICE_POLICY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.admin.DevicePolicyManager for working with global device policy management."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "DISPLAY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.display.DisplayManager for interacting with display devices."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "DOWNLOAD_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.DownloadManager for requesting HTTP downloads."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "DROPBOX_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.DropBoxManager instance for recording diagnostic logs."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EUICC_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.telephony.euicc.EuiccManager to manage the device eUICC (embedded SIM)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "FILE_INTEGRITY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve an android.security.FileIntegrityManager."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "FINGERPRINT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.fingerprint.FingerprintManager for handling management of fingerprints."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "HARDWARE_PROPERTIES_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.HardwarePropertiesManager for accessing the hardware properties service."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "INPUT_METHOD_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.inputmethod.InputMethodManager for accessing input methods."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "INPUT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.hardware.input.InputManager for interacting with input devices."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "IPSEC_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.net.IpSecManager for encrypting Sockets or Networks with IPSec."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "JOB_SCHEDULER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a instance for managing occasional background tasks."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "KEYGUARD_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.KeyguardManager for controlling keyguard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "LAUNCHER_APPS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.content.pm.LauncherApps for querying and monitoring launchable apps across profiles of a user."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "LAYOUT_INFLATER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.LayoutInflater for inflating layout resources in this context."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "LOCATION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for controlling location updates."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MEDIA_PROJECTION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a instance for managing media projection sessions."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MEDIA_ROUTER_SERVICE",
      "desc": "Use with getSystemService to retrieve a android.media.MediaRouter for controlling and managing routing of media."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MEDIA_SESSION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.media.session.MediaSessionManager for managing media Sessions."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIDI_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.media.midi.MidiManager for accessing the MIDI service."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_APPEND",
      "desc": "File creation mode: for use with openFileOutput, if the file already exists then write data to the end of the existing file instead of erasing it."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_ENABLE_WRITE_AHEAD_LOGGING",
      "desc": "Database open flag: when set, the database is opened with write-ahead logging enabled by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_MULTI_PROCESS",
      "desc": "SharedPreference loading flag: when set, the file on disk will be checked for modification even if the shared preferences instance is already loaded in this process."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_NO_LOCALIZED_COLLATORS",
      "desc": "Database open flag: when set, the database is opened without support for localized collators."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_PRIVATE",
      "desc": "File creation mode: the default mode, where the created file can only be accessed by the calling application (or all applications sharing the same user ID)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_WORLD_READABLE",
      "desc": "File creation mode: allow all other applications to have read access to the created file."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODE_WORLD_WRITEABLE",
      "desc": "File creation mode: allow all other applications to have write access to the created file."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "NETWORK_STATS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for querying network usage stats."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "NFC_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.nfc.NfcManager for using NFC."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "NOTIFICATION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.NotificationManager for informing the user of background events."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "NSD_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for handling management of network service discovery"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "POWER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.PowerManager for controlling power management, including \"wake locks,\" which let you keep the device on while you're running long tasks."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "PRINT_SERVICE",
      "desc": "android.print.PrintManager for printing and managing printers and print tasks."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RECEIVER_VISIBLE_TO_INSTANT_APPS",
      "desc": "Flag for registerReceiver: The receiver can receive broadcasts from Instant Apps."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "RESTRICTIONS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.content.RestrictionsManager for retrieving application restrictions and requesting permissions for restricted operations."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "ROLE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.role.RoleManager for managing roles."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "SEARCH_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for handling searches."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "SENSOR_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for accessing sensors."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "SHORTCUT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.content.pm.ShortcutManager for accessing the launcher shortcut service."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "STORAGE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for accessing system storage functions."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "STORAGE_STATS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for accessing system storage statistics."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "SYSTEM_HEALTH_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.health.SystemHealthManager for accessing system health (battery, power, memory, etc) metrics."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TELECOM_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.telecom.TelecomManager to manage telecom-related features of the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TELEPHONY_IMS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve an android.telephony.ims.ImsManager."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TELEPHONY_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.telephony.TelephonyManager for handling management the telephony features of the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TELEPHONY_SUBSCRIPTION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.telephony.SubscriptionManager for handling management the telephony subscriptions of the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TEXT_CLASSIFICATION_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a TextClassificationManager for text classification services."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TEXT_SERVICES_MANAGER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.textservice.TextServicesManager for accessing text services."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "TV_INPUT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.media.tv.TvInputManager for interacting with TV inputs on the device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "UI_MODE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.app.UiModeManager for controlling UI modes."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "USAGE_STATS_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for querying device usage stats."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "USB_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for access to USB devices (as a USB host) and for controlling this device's behavior as a USB device."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "USER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.os.UserManager for managing users on devices that support multiple users."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "VIBRATOR_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for interacting with the vibration hardware."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "VPN_MANAGEMENT_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.net.VpnManager to manage profiles for the platform built-in VPN."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WALLPAPER_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a com."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_AWARE_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.net.wifi.aware.WifiAwareManager for handling management of Wi-Fi Aware."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for handling management of Wi-Fi peer-to-peer connections."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_RTT_RANGING_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for ranging devices with wifi."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a for handling management of Wi-Fi access."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WINDOW_SERVICE",
      "desc": "Use with getSystemService(java.lang.String) to retrieve a android.view.WindowManager for accessing the system's window manager."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "bindIsolatedService(service: Intent, flags: Int, instanceName: String, executor: Executor, conn: ServiceConnection)",
      "desc": "Variation of bindService that, in the specific case of isolated services, allows the caller to generate multiple instances of a service from a single component declaration."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "bindService(service: Intent!, conn: ServiceConnection, flags: Int)",
      "desc": "Connect to an application service, creating it if needed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "bindService(service: Intent, flags: Int, executor: Executor, conn: ServiceConnection)",
      "desc": "Same as bindService(android.content.Intent,android.content.ServiceConnection,int) with executor to control ServiceConnection callbacks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "bindServiceAsUser(service: Intent, conn: ServiceConnection, flags: Int, user: UserHandle)",
      "desc": "Binds to a service in the given user in the same manner as bindService(android.content.Intent,android.content.ServiceConnection,int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkCallingOrSelfPermission(permission: String)",
      "desc": "Determine whether the calling process of an IPC or you have been granted a particular permission."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkCallingOrSelfUriPermission(uri: Uri!, modeFlags: Int)",
      "desc": "Determine whether the calling process of an IPC or you has been granted permission to access a specific URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkCallingPermission(permission: String)",
      "desc": "Determine whether the calling process of an IPC you are handling has been granted a particular permission."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkCallingUriPermission(uri: Uri!, modeFlags: Int)",
      "desc": "Determine whether the calling process and user ID has been granted permission to access a specific URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkPermission(permission: String, pid: Int, uid: Int)",
      "desc": "Determine whether the given permission is allowed for a particular process and user ID running in the system."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkSelfPermission(permission: String)",
      "desc": "Determine whether you have been granted a particular permission."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkUriPermission(uri: Uri!, pid: Int, uid: Int, modeFlags: Int)",
      "desc": "Determine whether a particular process and user ID has been granted permission to access a specific URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "checkUriPermission(uri: Uri?, readPermission: String?, writePermission: String?, pid: Int, uid: Int, modeFlags: Int)",
      "desc": "Check both a Uri and normal permission."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "clearWallpaper()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Context",
      "code": "createAttributionContext(attributionTag: String?)",
      "desc": "Return a new Context object for the current Context but attribute to a different tag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "createConfigurationContext(overrideConfiguration: Configuration)",
      "desc": "Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "createContextForSplit(splitName: String!)",
      "desc": "Return a new Context object for the given split name.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "createDeviceProtectedStorageContext()",
      "desc": "Return a new Context object for the current Context but whose storage APIs are backed by device-protected storage.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "createDisplayContext(display: Display)",
      "desc": "Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "createPackageContext(packageName: String!, flags: Int)",
      "desc": "Return a new Context object for the given application name.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Context",
      "code": "createWindowContext(type: Int, options: Bundle?)",
      "desc": "Creates a Context for a non-activity window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "databaseList()",
      "desc": "Returns an array of strings naming the private databases associated with this Context's application package.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "deleteDatabase(name: String!)",
      "desc": "Delete an existing private SQLiteDatabase associated with this Context's application package."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "deleteFile(name: String!)",
      "desc": "Delete the given private file associated with this Context's application package."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "deleteSharedPreferences(name: String!)",
      "desc": "Delete an existing shared preferences file."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceCallingOrSelfPermission(permission: String, message: String?)",
      "desc": "If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceCallingOrSelfUriPermission(uri: Uri!, modeFlags: Int, message: String!)",
      "desc": "If the calling process of an IPC or you has not been granted permission to access a specific URI, throw SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceCallingPermission(permission: String, message: String?)",
      "desc": "If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceCallingUriPermission(uri: Uri!, modeFlags: Int, message: String!)",
      "desc": "If the calling process and user ID has not been granted permission to access a specific URI, throw SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforcePermission(permission: String, pid: Int, uid: Int, message: String?)",
      "desc": "If the given permission is not allowed for a particular process and user ID running in the system, throw a SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceUriPermission(uri: Uri!, pid: Int, uid: Int, modeFlags: Int, message: String!)",
      "desc": "If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "enforceUriPermission(uri: Uri?, readPermission: String?, writePermission: String?, pid: Int, uid: Int, modeFlags: Int, message: String?)",
      "desc": "Enforce both a Uri and normal permission."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "fileList()",
      "desc": "Returns an array of strings naming the private files associated with this Context's application package.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Context",
      "code": "getApplicationContext()",
      "desc": "Return the context of the single, global Application object of the current process.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ApplicationInfo",
      "code": "getApplicationInfo()",
      "desc": "Return the full application info for this context's package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "AssetManager",
      "code": "getAssets()",
      "desc": "Returns an AssetManager instance for the application's package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getAttributionTag()",
      "desc": "Attribution can be used in complex apps to logically separate parts of the app.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getCacheDir()",
      "desc": "Returns the absolute path to the application specific cache directory on the filesystem.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ClassLoader",
      "code": "getClassLoader()",
      "desc": "Return a class loader you can use to retrieve classes in this package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getCodeCacheDir()",
      "desc": "Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getColor(id: Int)",
      "desc": "Returns a color associated with a particular resource ID and styled for the current theme."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ColorStateList",
      "code": "getColorStateList(id: Int)",
      "desc": "Returns a color state list associated with a particular resource ID and styled for the current theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ContentResolver",
      "code": "getContentResolver()",
      "desc": "Return a ContentResolver instance for your application's package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getDataDir()",
      "desc": "Returns the absolute path to the directory on the filesystem where all private files belonging to this app are stored.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getDatabasePath(name: String!)",
      "desc": "Returns the absolute path on the filesystem where a database created with openOrCreateDatabase is stored.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getDir(name: String!, mode: Int)",
      "desc": "Retrieve, creating if needed, a new directory in which the application can place its own custom data files.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Display",
      "code": "getDisplay()",
      "desc": "Get the display this context is associated with.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Drawable",
      "code": "getDrawable(id: Int)",
      "desc": "Returns a drawable object associated with a particular resource ID and styled for the current theme.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getExternalCacheDir()",
      "desc": "Returns absolute path to application-specific directory on the primary shared/external storage device where the application can place cache files it owns.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getExternalCacheDirs()",
      "desc": "Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place cache files it owns.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getExternalFilesDir(type: String?)",
      "desc": "Returns the absolute path to the directory on the primary shared/external storage device where the application can place persistent files it owns.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getExternalFilesDirs(type: String!)",
      "desc": "Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place persistent files it owns.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getExternalMediaDirs()",
      "desc": "Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place media files.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getFileStreamPath(name: String!)",
      "desc": "Returns the absolute path on the filesystem where a file created with openFileOutput is stored.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getFilesDir()",
      "desc": "Returns the absolute path to the directory on the filesystem where files created with openFileOutput are stored.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Executor",
      "code": "getMainExecutor()",
      "desc": "Return an Executor that will run enqueued tasks on the main thread associated with this context.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Looper",
      "code": "getMainLooper()",
      "desc": "Return the Looper for the main thread of the current process.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getNoBackupFilesDir()",
      "desc": "Returns the absolute path to the directory on the filesystem similar to getFilesDir().",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "File",
      "code": "getObbDir()",
      "desc": "Return the primary shared/external storage directory where this application's OBB files (if there are any) can be found.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getObbDirs()",
      "desc": "Returns absolute paths to application-specific directories on all shared/external storage devices where the application's OBB files (if there are any) can be found.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getOpPackageName()",
      "desc": "Return the package name that should be used for android.app.AppOpsManager calls from this context, so that app ops manager's uid verification will work with the name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "getPackageCodePath()",
      "desc": "Return the full path to this context's primary Android package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "PackageManager",
      "code": "getPackageManager()",
      "desc": "Return PackageManager instance to find global package information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "getPackageName()",
      "desc": "Return the name of this application's package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "getPackageResourcePath()",
      "desc": "Return the full path to this context's primary Android package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Resources",
      "code": "getResources()",
      "desc": "Returns a Resources instance for the application's package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SharedPreferences",
      "code": "getSharedPreferences(name: String!, mode: Int)",
      "desc": "Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getString(resId: Int)",
      "desc": "Returns a localized string from the application's package's default string table."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getString(resId: Int, vararg formatArgs: Any!)",
      "desc": "Returns a localized formatted string from the application's package's default string table, substituting the format arguments as defined in java.util.Formatter and java.lang.String#format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Any",
      "code": "getSystemService(name: String)",
      "desc": "Return the handle to a system-level service by name.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "getSystemService(serviceClass: Class<T>)",
      "desc": "Return the handle to a system-level service by class."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "getSystemServiceName(serviceClass: Class<*>)",
      "desc": "Gets the name of the system-level service that is represented by the specified class.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "getText(resId: Int)",
      "desc": "Return a localized, styled CharSequence from the application's package's default string table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Resources.Theme",
      "code": "getTheme()",
      "desc": "Return the Theme object associated with this Context.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Drawable",
      "code": "getWallpaper()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getWallpaperDesiredMinimumHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getWallpaperDesiredMinimumWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "grantUriPermission(toPackage: String!, uri: Uri!, modeFlags: Int)",
      "desc": "Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isDeviceProtectedStorage()",
      "desc": "Indicates if the storage APIs of this Context are backed by device-protected storage."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isRestricted()",
      "desc": "Indicates whether this Context is restricted."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "moveDatabaseFrom(sourceContext: Context!, name: String!)",
      "desc": "Move an existing database file from the given source storage context to this context."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "moveSharedPreferencesFrom(sourceContext: Context!, name: String!)",
      "desc": "Move an existing shared preferences file from the given source storage context to this context."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TypedArray",
      "code": "obtainStyledAttributes(attrs: IntArray)",
      "desc": "Retrieve styled attribute information in this Context's theme."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TypedArray",
      "code": "obtainStyledAttributes(resid: Int, attrs: IntArray)",
      "desc": "Retrieve styled attribute information in this Context's theme."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TypedArray",
      "code": "obtainStyledAttributes(set: AttributeSet?, attrs: IntArray)",
      "desc": "Retrieve styled attribute information in this Context's theme."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TypedArray",
      "code": "obtainStyledAttributes(set: AttributeSet?, attrs: IntArray, defStyleAttr: Int, defStyleRes: Int)",
      "desc": "Retrieve styled attribute information in this Context's theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileInputStream",
      "code": "openFileInput(name: String!)",
      "desc": "Open a private file associated with this Context's application package for reading.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "FileOutputStream",
      "code": "openFileOutput(name: String!, mode: Int)",
      "desc": "Open a private file associated with this Context's application package for writing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SQLiteDatabase",
      "code": "openOrCreateDatabase(name: String!, mode: Int, factory: SQLiteDatabase.CursorFactory!)",
      "desc": "Open a new private SQLiteDatabase associated with this Context's application package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SQLiteDatabase",
      "code": "openOrCreateDatabase(name: String!, mode: Int, factory: SQLiteDatabase.CursorFactory!, errorHandler: DatabaseErrorHandler?)",
      "desc": "Open a new private SQLiteDatabase associated with this Context's application package.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Drawable",
      "code": "peekWallpaper()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "registerComponentCallbacks(callback: ComponentCallbacks!)",
      "desc": "Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Intent",
      "code": "registerReceiver(receiver: BroadcastReceiver?, filter: IntentFilter!)",
      "desc": "Register a BroadcastReceiver to be run in the main activity thread.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Intent",
      "code": "registerReceiver(receiver: BroadcastReceiver?, filter: IntentFilter!, flags: Int)",
      "desc": "Register to receive intent broadcasts, with the receiver optionally being exposed to Instant Apps.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Intent",
      "code": "registerReceiver(receiver: BroadcastReceiver!, filter: IntentFilter!, broadcastPermission: String?, scheduler: Handler?)",
      "desc": "Register to receive intent broadcasts, to run in the context of scheduler.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Intent",
      "code": "registerReceiver(receiver: BroadcastReceiver!, filter: IntentFilter!, broadcastPermission: String?, scheduler: Handler?, flags: Int)",
      "desc": "Register to receive intent broadcasts, to run in the context of scheduler.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "removeStickyBroadcast(intent: Intent!)",
      "desc": "Remove the data previously sent with sendStickyBroadcast, so that it is as if the sticky broadcast had never happened."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "removeStickyBroadcastAsUser(intent: Intent!, user: UserHandle!)",
      "desc": "Version of removeStickyBroadcast(android.content.Intent) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "revokeUriPermission(uri: Uri!, modeFlags: Int)",
      "desc": "Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission or any other mechanism."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "revokeUriPermission(toPackage: String!, uri: Uri!, modeFlags: Int)",
      "desc": "Remove permissions to access a particular content provider Uri that were previously added with grantUriPermission for a specific target package."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendBroadcast(intent: Intent!)",
      "desc": "Broadcast the given intent to all interested BroadcastReceivers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendBroadcast(intent: Intent!, receiverPermission: String?)",
      "desc": "Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendBroadcastAsUser(intent: Intent!, user: UserHandle!)",
      "desc": "Version of sendBroadcast(android.content.Intent) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendBroadcastAsUser(intent: Intent!, user: UserHandle!, receiverPermission: String?)",
      "desc": "Version of sendBroadcast(android.content.Intent,java.lang.String) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sendBroadcastWithMultiplePermissions(intent: Intent, receiverPermissions: Array<String!>)",
      "desc": "Broadcast the given intent to all interested BroadcastReceivers, allowing an array of required permissions to be enforced."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendOrderedBroadcast(intent: Intent!, receiverPermission: String?)",
      "desc": "Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendOrderedBroadcast(intent: Intent, receiverPermission: String?, resultReceiver: BroadcastReceiver?, scheduler: Handler?, initialCode: Int, initialData: String?, initialExtras: Bundle?)",
      "desc": "Version of sendBroadcast(android.content.Intent) that allows you to receive data back from the broadcast."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sendOrderedBroadcast(intent: Intent, receiverPermission: String?, receiverAppOp: String?, resultReceiver: BroadcastReceiver?, scheduler: Handler?, initialCode: Int, initialData: String?, initialExtras: Bundle?)",
      "desc": "Version of sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle) that allows you to specify the App Op to enforce restrictions on which receivers the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendOrderedBroadcastAsUser(intent: Intent!, user: UserHandle!, receiverPermission: String?, resultReceiver: BroadcastReceiver!, scheduler: Handler?, initialCode: Int, initialData: String?, initialExtras: Bundle?)",
      "desc": "Version of sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendStickyBroadcast(intent: Intent!)",
      "desc": "Perform a sendBroadcast(android.content.Intent) that is \"sticky,\" meaning the Intent you are sending stays around after the broadcast is complete, so that others can quickly retrieve that data through the return value of registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendStickyBroadcastAsUser(intent: Intent!, user: UserHandle!)",
      "desc": "Version of sendStickyBroadcast(android.content.Intent) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendStickyOrderedBroadcast(intent: Intent!, resultReceiver: BroadcastReceiver!, scheduler: Handler?, initialCode: Int, initialData: String?, initialExtras: Bundle?)",
      "desc": "Version of sendStickyBroadcast that allows you to receive data back from the broadcast."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "sendStickyOrderedBroadcastAsUser(intent: Intent!, user: UserHandle!, resultReceiver: BroadcastReceiver!, scheduler: Handler?, initialCode: Int, initialData: String?, initialExtras: Bundle?)",
      "desc": "Version of sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle) that allows you to specify the user the broadcast will be sent to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTheme(resid: Int)",
      "desc": "Set the base theme for this context."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setWallpaper(bitmap: Bitmap!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setWallpaper(data: InputStream!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startActivities(intents: Array<Intent!>!)",
      "desc": "Same as startActivities(android.content.Intent[],android.os.Bundle) with no options specified."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startActivities(intents: Array<Intent!>!, options: Bundle!)",
      "desc": "Launch multiple new activities."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startActivity(intent: Intent!)",
      "desc": "Same as startActivity(android.content.Intent,android.os.Bundle) with no options specified."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startActivity(intent: Intent!, options: Bundle?)",
      "desc": "Launch a new activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ComponentName",
      "code": "startForegroundService(service: Intent!)",
      "desc": "Similar to startService(android.content.Intent), but with an implicit promise that the Service will call  startForeground(int, android.app.Notification) once it begins running.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "startInstrumentation(className: ComponentName, profileFile: String?, arguments: Bundle?)",
      "desc": "Start executing an android.app.Instrumentation class."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startIntentSender(intent: IntentSender!, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int)",
      "desc": "Same as startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle) with no options specified."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "startIntentSender(intent: IntentSender!, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int, options: Bundle?)",
      "desc": "Like startActivity(android.content.Intent,android.os.Bundle), but taking a IntentSender to start."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ComponentName",
      "code": "startService(service: Intent!)",
      "desc": "Request that a given application service be started.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "stopService(service: Intent!)",
      "desc": "Request that a given application service be stopped."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "unbindService(conn: ServiceConnection)",
      "desc": "Disconnect from an application service."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterComponentCallbacks(callback: ComponentCallbacks!)",
      "desc": "Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(android.content.ComponentCallbacks)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "unregisterReceiver(receiver: BroadcastReceiver!)",
      "desc": "Unregister a previously registered BroadcastReceiver."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "updateServiceGroup(conn: ServiceConnection, group: Int, importance: Int)",
      "desc": "For a service previously bound with bindService or a related method, change how the system manages that service's process in relation to other processes."
    }
  ]
}