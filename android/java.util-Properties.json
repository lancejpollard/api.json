{
  "path": "java.util",
  "name": "Properties",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates an empty property list with no default values."
    },
    {
      "type": "ctor",
      "ctor": "<init>(defaults: Properties!)\n            Creates an empty property list with the specified defaults."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getProperty(key: String!)",
      "desc": "Searches for the property with the specified key in this property list.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getProperty(key: String!, defaultValue: String!)",
      "desc": "Searches for the property with the specified key in this property list.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "list(out: PrintStream!)",
      "desc": "Prints this property list out to the specified output stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "list(out: PrintWriter!)",
      "desc": "Prints this property list out to the specified output stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "load(reader: Reader!)",
      "desc": "Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "load(inStream: InputStream!)",
      "desc": "Reads a property list (key and element pairs) from the input byte stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "loadFromXML(in: InputStream!)",
      "desc": "Loads all of the properties represented by the XML document on the specified input stream into this properties table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "propertyNames()",
      "desc": "Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "save(out: OutputStream!, comments: String!)",
      "desc": "Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "setProperty(key: String!, value: String!)",
      "desc": "Calls the Hashtable method put.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "store(writer: Writer!, comments: String!)",
      "desc": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the load(Reader) method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "store(out: OutputStream!, comments: String!)",
      "desc": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the load(InputStream) method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "storeToXML(os: OutputStream!, comment: String!)",
      "desc": "Emits an XML document representing all of the properties contained in this table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "storeToXML(os: OutputStream!, comment: String!, encoding: String!)",
      "desc": "Emits an XML document representing all of the properties contained in this table, using the specified encoding."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "stringPropertyNames()",
      "desc": "Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.",
      "symbol": "<"
    },
    {
      "type": "inherited-methods",
      "from": "Hashtable"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clear()"
    },
    {
      "type": "inherited-methods",
      "from": "Any"
    },
    {
      "type": "inherited-methods",
      "from": "clone()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "compute(key: K, remappingFunction: BiFunction<in K, in V?, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfAbsent(key: K, mappingFunction: Function<in K, out V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "computeIfPresent(key: K, remappingFunction: BiFunction<in K, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "contains(value: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey"
    },
    {
      "type": "inherited-methods",
      "from": "containsValue"
    },
    {
      "type": "inherited-methods",
      "from": "Map"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsKey(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsValue(value: V)"
    },
    {
      "type": "inherited-methods",
      "from": ""
    },
    {
      "type": "inherited-methods",
      "from": "Map"
    },
    {
      "type": "inherited-methods",
      "from": "Enumeration<V>!"
    },
    {
      "type": "inherited-methods",
      "from": "elements()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(other: Any?)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "forEach(action: BiConsumer<in K, in V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "get(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "k"
    },
    {
      "type": "inherited-methods",
      "from": "v"
    },
    {
      "type": "inherited-methods",
      "from": "(key.equals(k))"
    },
    {
      "type": "inherited-methods",
      "from": "v"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "V"
    },
    {
      "type": "inherited-methods",
      "from": "getOrDefault(key: K, defaultValue: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "hashCode()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isEmpty()"
    },
    {
      "type": "inherited-methods",
      "from": "Enumeration<K>!"
    },
    {
      "type": "inherited-methods",
      "from": "keys()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "merge(key: K, value: V, remappingFunction: BiFunction<in V, in V, out V?>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "put(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "key"
    },
    {
      "type": "inherited-methods",
      "from": "value"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "get"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "putAll(from: Map<out K, V>)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "putIfAbsent(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "rehash()"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "remove(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, oldValue: V, newValue: V)"
    },
    {
      "type": "inherited-methods",
      "from": "V?"
    },
    {
      "type": "inherited-methods",
      "from": "replace(key: K, value: V)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "replaceAll(function: BiFunction<in K, in V, out V>)"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    }
  ]
}