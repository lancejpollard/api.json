{
  "path": "java.net",
  "name": "DatagramPacket",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, offset: Int, length: Int)\n            Constructs a DatagramPacket for receiving packets of length length, specifying an offset into the buffer."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, length: Int)\n            Constructs a DatagramPacket for receiving packets of length length."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, offset: Int, length: Int, address: InetAddress!, port: Int)\n            Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, offset: Int, length: Int, address: SocketAddress!)\n            Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, length: Int, address: InetAddress!, port: Int)\n            Constructs a datagram packet for sending packets of length length to the specified port number on the specified host."
    },
    {
      "type": "ctor",
      "ctor": "<init>(buf: ByteArray!, length: Int, address: SocketAddress!)\n            Constructs a datagram packet for sending packets of length length to the specified port number on the specified host."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "InetAddress",
      "code": "getAddress()",
      "desc": "Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "getData()",
      "desc": "Returns the data buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLength()",
      "desc": "Returns the length of the data to be sent or the length of the data received."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getOffset()",
      "desc": "Returns the offset of the data to be sent or the offset of the data received."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getPort()",
      "desc": "Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "SocketAddress",
      "code": "getSocketAddress()",
      "desc": "Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAddress(iaddr: InetAddress!)",
      "desc": "Sets the IP address of the machine to which this datagram is being sent."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setData(buf: ByteArray!, offset: Int, length: Int)",
      "desc": "Set the data buffer for this packet."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setData(buf: ByteArray!)",
      "desc": "Set the data buffer for this packet."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setLength(length: Int)",
      "desc": "Set the length for this packet."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPort(iport: Int)",
      "desc": "Sets the port number on the remote host to which this datagram is being sent."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setSocketAddress(address: SocketAddress!)",
      "desc": "Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent."
    }
  ]
}