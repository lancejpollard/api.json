{
  "path": "java.util.logging",
  "name": "StreamHandler",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a StreamHandler, with no current output stream."
    },
    {
      "type": "ctor",
      "ctor": "<init>(out: OutputStream!, formatter: Formatter!)\n            Create a StreamHandler with a given Formatter and output stream."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Close the current output stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "flush()",
      "desc": "Flush any buffered messages."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLoggable(record: LogRecord!)",
      "desc": "Check if this Handler would actually log a given LogRecord."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "publish(record: LogRecord!)",
      "desc": "Format and publish a LogRecord."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEncoding(encoding: String!)",
      "desc": "Set (or change) the character encoding used by this Handler."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOutputStream(out: OutputStream!)",
      "desc": "Change the output stream."
    },
    {
      "type": "inherited-methods",
      "from": "Handler"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getEncoding()"
    },
    {
      "type": "inherited-methods",
      "from": "ErrorManager!"
    },
    {
      "type": "inherited-methods",
      "from": "getErrorManager()"
    },
    {
      "type": "inherited-methods",
      "from": "Filter!"
    },
    {
      "type": "inherited-methods",
      "from": "getFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "Formatter!"
    },
    {
      "type": "inherited-methods",
      "from": "getFormatter()"
    },
    {
      "type": "inherited-methods",
      "from": "Level!"
    },
    {
      "type": "inherited-methods",
      "from": "getLevel()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "reportError(msg: String!, ex: Exception!, code: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setErrorManager(em: ErrorManager!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setFilter(newFilter: Filter!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setFormatter(newFormatter: Formatter!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setLevel(newLevel: Level!)"
    }
  ]
}