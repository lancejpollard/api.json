{
  "path": "android.content.res",
  "name": "ColorStateList",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(states: Array<IntArray!>!, colors: IntArray!)\n            Creates a ColorStateList that returns the specified mapping from states to colors."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "createFromXml(r: Resources!, parser: XmlPullParser!)",
      "desc": "Creates a ColorStateList from an XML document."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "createFromXml(r: Resources, parser: XmlPullParser, theme: Resources.Theme?)",
      "desc": "Creates a ColorStateList from an XML document using given a set of Resources and a Theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getChangingConfigurations()",
      "desc": "Returns a mask of the configuration parameters for which this color state list may change, requiring that it be re-created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getColorForState(stateSet: IntArray?, defaultColor: Int)",
      "desc": "Return the color associated with the given set of android.view.View states."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDefaultColor()",
      "desc": "Return the default color in this ColorStateList."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isOpaque()",
      "desc": "Indicates whether this color state list is opaque, which means that every color returned from getColorForState(int[],int) has an alpha value of 255."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStateful()",
      "desc": "Indicates whether this color state list contains at least one state spec and the first spec is not empty (e.g. match-all)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "valueOf(color: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "withAlpha(alpha: Int)",
      "desc": "Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}