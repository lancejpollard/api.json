{
  "path": "java.security",
  "name": "KeyStoreSpi",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Enumeration",
      "code": "engineAliases()",
      "desc": "Lists all the alias names of this keystore.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "engineContainsAlias(alias: String!)",
      "desc": "Checks if the given alias exists in this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineDeleteEntry(alias: String!)",
      "desc": "Deletes the entry identified by the given alias from this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "engineEntryInstanceOf(alias: String!, entryClass: Class<out KeyStore.Entry!>!)",
      "desc": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Certificate",
      "code": "engineGetCertificate(alias: String!)",
      "desc": "Returns the certificate associated with the given alias.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "engineGetCertificateAlias(cert: Certificate!)",
      "desc": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "engineGetCertificateChain(alias: String!)",
      "desc": "Returns the certificate chain associated with the given alias.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Date",
      "code": "engineGetCreationDate(alias: String!)",
      "desc": "Returns the creation date of the entry identified by the given alias.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyStore.Entry",
      "code": "engineGetEntry(alias: String!, protParam: KeyStore.ProtectionParameter!)",
      "desc": "Gets a KeyStore.Entry for the specified alias with the specified protection parameter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Key",
      "code": "engineGetKey(alias: String!, password: CharArray!)",
      "desc": "Returns the key associated with the given alias, using the given password to recover it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "engineIsCertificateEntry(alias: String!)",
      "desc": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "engineIsKeyEntry(alias: String!)",
      "desc": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineLoad(stream: InputStream!, password: CharArray!)",
      "desc": "Loads the keystore from the given input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "engineLoad(param: KeyStore.LoadStoreParameter!)",
      "desc": "Loads the keystore using the given KeyStore.LoadStoreParameter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineSetCertificateEntry(alias: String!, cert: Certificate!)",
      "desc": "Assigns the given certificate to the given alias."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "engineSetEntry(alias: String!, entry: KeyStore.Entry!, protParam: KeyStore.ProtectionParameter!)",
      "desc": "Saves a KeyStore.Entry under the specified alias."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineSetKeyEntry(alias: String!, key: Key!, password: CharArray!, chain: Array<Certificate!>!)",
      "desc": "Assigns the given key to the given alias, protecting it with the given password."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineSetKeyEntry(alias: String!, key: ByteArray!, chain: Array<Certificate!>!)",
      "desc": "Assigns the given key (that has already been protected) to the given alias."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "engineSize()",
      "desc": "Retrieves the number of entries in this keystore."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "engineStore(stream: OutputStream!, password: CharArray!)",
      "desc": "Stores this keystore to the given output stream, and protects its integrity with the given password."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "engineStore(param: KeyStore.LoadStoreParameter!)",
      "desc": "Stores this keystore using the given KeyStore.LoadStoreParmeter."
    }
  ]
}