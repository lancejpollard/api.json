{
  "path": "android.app",
  "name": "AutomaticZenRule",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(name: String!, owner: ComponentName!, conditionId: Uri!, interruptionFilter: Int, enabled: Boolean)\n            Creates an automatic zen rule."
    },
    {
      "type": "ctor",
      "ctor": "<init>(name: String, owner: ComponentName?, configurationActivity: ComponentName?, conditionId: Uri, policy: ZenPolicy?, interruptionFilter: Int, enabled: Boolean)\n            Creates an automatic zen rule."
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: Parcel!)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Uri",
      "code": "getConditionId()",
      "desc": "Returns the representation of the state that causes this rule to become active.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ComponentName",
      "code": "getConfigurationActivity()",
      "desc": "Returns the ComponentName of the activity that shows configuration options for this rule.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getCreationTime()",
      "desc": "Returns the time this rule was created, represented as milliseconds since the epoch."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getInterruptionFilter()",
      "desc": "Returns the interruption filter that is applied when this rule is active."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getName()",
      "desc": "Returns the name of this rule.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ComponentName",
      "code": "getOwner()",
      "desc": "Returns the ComponentName of the condition provider service that owns this rule.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ZenPolicy",
      "code": "getZenPolicy()",
      "desc": "Gets the zen policy.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isEnabled()",
      "desc": "Returns whether this rule is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setConditionId(conditionId: Uri!)",
      "desc": "Sets the representation of the state that causes this rule to become active."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setConfigurationActivity(componentName: ComponentName?)",
      "desc": "Sets the configuration activity - an activity that handles NotificationManager#ACTION_AUTOMATIC_ZEN_RULE that shows the user more information about this rule and/or allows them to configure it."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setEnabled(enabled: Boolean)",
      "desc": "Enables this rule."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setInterruptionFilter(interruptionFilter: Int)",
      "desc": "Sets the interruption filter that is applied when this rule is active."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setName(name: String!)",
      "desc": "Sets the name of this rule."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setZenPolicy(zenPolicy: ZenPolicy!)",
      "desc": "Sets the zen policy."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}