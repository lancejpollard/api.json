{
  "path": "java.time.format",
  "name": "DateTimeFormatterBuilder",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs a new instance of the builder."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "append(formatter: DateTimeFormatter!)",
      "desc": "Appends all the elements of a formatter to the builder.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendChronologyId()",
      "desc": "Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendChronologyText(textStyle: TextStyle!)",
      "desc": "Appends the chronology name to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendFraction(field: TemporalField!, minWidth: Int, maxWidth: Int, decimalPoint: Boolean)",
      "desc": "Appends the fractional value of a date-time field to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendInstant()",
      "desc": "Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendInstant(fractionalDigits: Int)",
      "desc": "Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendLiteral(literal: Char)",
      "desc": "Appends a character literal to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendLiteral(literal: String!)",
      "desc": "Appends a string literal to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendLocalized(dateStyle: FormatStyle!, timeStyle: FormatStyle!)",
      "desc": "Appends a localized date-time pattern to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendLocalizedOffset(style: TextStyle!)",
      "desc": "Appends the localized zone offset, such as 'GMT+01:00', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendOffset(pattern: String!, noOffsetText: String!)",
      "desc": "Appends the zone offset, such as '+01:00', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendOffsetId()",
      "desc": "Appends the zone offset, such as '+01:00', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendOptional(formatter: DateTimeFormatter!)",
      "desc": "Appends a formatter to the builder which will optionally format/parse.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendPattern(pattern: String!)",
      "desc": "Appends the elements defined by the specified pattern to the builder.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendText(field: TemporalField!)",
      "desc": "Appends the text of a date-time field to the formatter using the full text style.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendText(field: TemporalField!, textStyle: TextStyle!)",
      "desc": "Appends the text of a date-time field to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendText(field: TemporalField!, textLookup: MutableMap<Long!, String!>!)",
      "desc": "Appends the text of a date-time field to the formatter using the specified map to supply the text.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendValue(field: TemporalField!)",
      "desc": "Appends the value of a date-time field to the formatter using a normal output style.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendValue(field: TemporalField!, width: Int)",
      "desc": "Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendValue(field: TemporalField!, minWidth: Int, maxWidth: Int, signStyle: SignStyle!)",
      "desc": "Appends the value of a date-time field to the formatter providing full control over formatting.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendValueReduced(field: TemporalField!, width: Int, maxWidth: Int, baseValue: Int)",
      "desc": "Appends the reduced value of a date-time field to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendValueReduced(field: TemporalField!, width: Int, maxWidth: Int, baseDate: ChronoLocalDate!)",
      "desc": "Appends the reduced value of a date-time field to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendZoneId()",
      "desc": "Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendZoneOrOffsetId()",
      "desc": "Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendZoneRegionId()",
      "desc": "Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a ZoneOffset.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendZoneText(textStyle: TextStyle!)",
      "desc": "Appends the time-zone name, such as 'British Summer Time', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "appendZoneText(textStyle: TextStyle!, preferredZones: MutableSet<ZoneId!>!)",
      "desc": "Appends the time-zone name, such as 'British Summer Time', to the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "getLocalizedDateTimePattern(dateStyle: FormatStyle!, timeStyle: FormatStyle!, chrono: Chronology!, locale: Locale!)",
      "desc": "Gets the formatting pattern for date and time styles for a locale and chronology.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "optionalEnd()",
      "desc": "Ends an optional section.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "optionalStart()",
      "desc": "Mark the start of an optional section.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "padNext(padWidth: Int)",
      "desc": "Causes the next added printer/parser to pad to a fixed width using a space.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "padNext(padWidth: Int, padChar: Char)",
      "desc": "Causes the next added printer/parser to pad to a fixed width.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "parseCaseInsensitive()",
      "desc": "Changes the parse style to be case insensitive for the remainder of the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "parseCaseSensitive()",
      "desc": "Changes the parse style to be case sensitive for the remainder of the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "parseDefaulting(field: TemporalField!, value: Long)",
      "desc": "Appends a default value for a field to the formatter for use in parsing.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "parseLenient()",
      "desc": "Changes the parse style to be lenient for the remainder of the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatterBuilder",
      "code": "parseStrict()",
      "desc": "Changes the parse style to be strict for the remainder of the formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "toFormatter()",
      "desc": "Completes this builder by creating the DateTimeFormatter using the default locale.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "DateTimeFormatter",
      "code": "toFormatter(locale: Locale!)",
      "desc": "Completes this builder by creating the DateTimeFormatter using the specified locale.",
      "symbol": "!"
    }
  ]
}