{
  "path": "java.util.logging",
  "name": "Logger",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "GLOBAL_LOGGER_NAME",
      "desc": "GLOBAL_LOGGER_NAME is a name for the global logger."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addHandler(handler: Handler)",
      "desc": "Add a log Handler to receive logging messages."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "config(msg: String?)",
      "desc": "Log a CONFIG message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "config(msgSupplier: Supplier<String!>)",
      "desc": "Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "entering(sourceClass: String?, sourceMethod: String?)",
      "desc": "Log a method entry."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "entering(sourceClass: String?, sourceMethod: String?, param1: Any?)",
      "desc": "Log a method entry, with one parameter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "entering(sourceClass: String?, sourceMethod: String?, params: Array<Any!>?)",
      "desc": "Log a method entry, with an array of parameters."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "exiting(sourceClass: String?, sourceMethod: String?)",
      "desc": "Log a method return."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "exiting(sourceClass: String?, sourceMethod: String?, result: Any?)",
      "desc": "Log a method return, with result object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fine(msg: String?)",
      "desc": "Log a FINE message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fine(msgSupplier: Supplier<String!>)",
      "desc": "Log a FINE message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finer(msg: String?)",
      "desc": "Log a FINER message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finer(msgSupplier: Supplier<String!>)",
      "desc": "Log a FINER message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finest(msg: String?)",
      "desc": "Log a FINEST message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finest(msgSupplier: Supplier<String!>)",
      "desc": "Log a FINEST message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Logger",
      "code": "getAnonymousLogger()",
      "desc": "Create an anonymous Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Logger",
      "code": "getAnonymousLogger(resourceBundleName: String?)",
      "desc": "Create an anonymous Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Filter",
      "code": "getFilter()",
      "desc": "Get the current filter for this Logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Logger",
      "code": "getGlobal()",
      "desc": "Return global logger object with the name Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getHandlers()",
      "desc": "Get the Handlers associated with this logger.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Level",
      "code": "getLevel()",
      "desc": "Get the log Level that has been specified for this Logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Logger",
      "code": "getLogger(name: String)",
      "desc": "Find or create a logger for a named subsystem."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Logger",
      "code": "getLogger(name: String, resourceBundleName: String?)",
      "desc": "Find or create a logger for a named subsystem."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getName()",
      "desc": "Get the name for this logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Logger",
      "code": "getParent()",
      "desc": "Return the parent for this Logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ResourceBundle",
      "code": "getResourceBundle()",
      "desc": "Retrieve the localization resource bundle for this logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getResourceBundleName()",
      "desc": "Retrieve the localization resource bundle name for this logger.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getUseParentHandlers()",
      "desc": "Discover whether or not this logger is sending its output to its parent logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "info(msg: String?)",
      "desc": "Log an INFO message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "info(msgSupplier: Supplier<String!>)",
      "desc": "Log a INFO message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLoggable(level: Level)",
      "desc": "Check if a message of the given level would actually be logged by this logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(record: LogRecord)",
      "desc": "Log a LogRecord."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, msg: String?)",
      "desc": "Log a message, with no arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, msgSupplier: Supplier<String!>)",
      "desc": "Log a message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, msg: String?, param1: Any?)",
      "desc": "Log a message, with one object parameter."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, msg: String?, params: Array<Any!>?)",
      "desc": "Log a message, with an array of object arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, msg: String?, thrown: Throwable?)",
      "desc": "Log a message, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "log(level: Level, thrown: Throwable?, msgSupplier: Supplier<String!>)",
      "desc": "Log a lazily constructed message, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, msg: String?)",
      "desc": "Log a message, specifying source class and method, with no arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, msgSupplier: Supplier<String!>)",
      "desc": "Log a lazily constructed message, specifying source class and method, with no arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, msg: String?, param1: Any?)",
      "desc": "Log a message, specifying source class and method, with a single object parameter to the log message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, msg: String?, params: Array<Any!>?)",
      "desc": "Log a message, specifying source class and method, with an array of object arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, msg: String?, thrown: Throwable?)",
      "desc": "Log a message, specifying source class and method, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logp(level: Level, sourceClass: String?, sourceMethod: String?, thrown: Throwable?, msgSupplier: Supplier<String!>)",
      "desc": "Log a lazily constructed message, specifying source class and method, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundleName: String?, msg: String?)",
      "desc": "Log a message, specifying source class, method, and resource bundle name with no arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundleName: String?, msg: String?, param1: Any?)",
      "desc": "Log a message, specifying source class, method, and resource bundle name, with a single object parameter to the log message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundleName: String?, msg: String?, params: Array<Any!>?)",
      "desc": "Log a message, specifying source class, method, and resource bundle name, with an array of object arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundle: ResourceBundle?, msg: String?, vararg params: Any!)",
      "desc": "Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundleName: String?, msg: String?, thrown: Throwable?)",
      "desc": "Log a message, specifying source class, method, and resource bundle name, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "logrb(level: Level, sourceClass: String?, sourceMethod: String?, bundle: ResourceBundle?, msg: String?, thrown: Throwable?)",
      "desc": "Log a message, specifying source class, method, and resource bundle, with associated Throwable information."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeHandler(handler: Handler?)",
      "desc": "Remove a log Handler."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFilter(newFilter: Filter?)",
      "desc": "Set a filter to control output on this Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLevel(newLevel: Level?)",
      "desc": "Set the log level specifying which message levels will be logged by this logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParent(parent: Logger)",
      "desc": "Set the parent for this Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setResourceBundle(bundle: ResourceBundle)",
      "desc": "Sets a resource bundle on this logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUseParentHandlers(useParentHandlers: Boolean)",
      "desc": "Specify whether or not this logger should send its output to its parent Logger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "severe(msg: String?)",
      "desc": "Log a SEVERE message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "severe(msgSupplier: Supplier<String!>)",
      "desc": "Log a SEVERE message, which is only to be constructed if the logging level is such that the message will actually be logged."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "throwing(sourceClass: String?, sourceMethod: String?, thrown: Throwable?)",
      "desc": "Log throwing an exception."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "warning(msg: String?)",
      "desc": "Log a WARNING message."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "warning(msgSupplier: Supplier<String!>)",
      "desc": "Log a WARNING message, which is only to be constructed if the logging level is such that the message will actually be logged."
    }
  ]
}