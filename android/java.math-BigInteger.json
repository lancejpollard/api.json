{
  "path": "java.math",
  "name": "BigInteger",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(numBits: Int, random: Random)\n            Constructs a random non-negative BigInteger instance in the range [0, pow(2, numBits)-1]."
    },
    {
      "type": "ctor",
      "ctor": "<init>(bitLength: Int, certainty: Int, random: Random)\n            Constructs a random BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: String)\n            Constructs a new BigInteger by parsing value."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: String, radix: Int)\n            Constructs a new BigInteger instance by parsing value."
    },
    {
      "type": "ctor",
      "ctor": "<init>(signum: Int, magnitude: ByteArray!)\n            Constructs a new BigInteger instance with the given sign and magnitude."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: ByteArray!)\n            Constructs a new BigInteger from the given two's complement representation."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "abs()",
      "desc": "Returns a BigInteger whose value is the absolute value of this."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "add(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this + value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "and(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this & value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "andNot(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this & ~value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "bitCount()",
      "desc": "Returns the number of bits in the two's complement representation of this which differ from the sign bit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "bitLength()",
      "desc": "Returns the length of the value's two's complement representation without leading zeros for positive numbers / without leading ones for negative values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "clearBit(n: Int)",
      "desc": "Returns a BigInteger which has the same binary representation as this but with the bit at position n cleared."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "compareTo(other: BigInteger)",
      "desc": "Compares this BigInteger with value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "divide(divisor: BigInteger)",
      "desc": "Returns a BigInteger whose value is this / divisor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "divideAndRemainder(divisor: BigInteger)",
      "desc": "Returns a two element BigInteger array containing this / divisor at index 0 and this % divisor at index 1.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "flipBit(n: Int)",
      "desc": "Returns a BigInteger which has the same binary representation as this but with the bit at position n flipped."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "gcd(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is greatest common divisor of this and value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLowestSetBit()",
      "desc": "Returns the position of the lowest set bit in the two's complement representation of this BigInteger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isProbablePrime(certainty: Int)",
      "desc": "Tests whether this BigInteger is probably prime."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "max(value: BigInteger)",
      "desc": "Returns the maximum of this BigInteger and value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "min(value: BigInteger)",
      "desc": "Returns the minimum of this BigInteger and value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "mod(m: BigInteger)",
      "desc": "Returns a BigInteger whose value is this mod m."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "modInverse(m: BigInteger)",
      "desc": "Returns a BigInteger whose value is 1/this mod m."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "modPow(exponent: BigInteger, modulus: BigInteger)",
      "desc": "Returns a BigInteger whose value is pow(this, exponent) mod modulus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "multiply(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this * value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "negate()",
      "desc": "Returns a BigInteger whose value is the -this."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "nextProbablePrime()",
      "desc": "Returns the smallest integer x > this which is probably prime as a BigInteger instance."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "not()",
      "desc": "Returns a BigInteger whose value is ~this."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "or(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this | value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "pow(exp: Int)",
      "desc": "Returns a BigInteger whose value is pow(this, exp)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "probablePrime(bitLength: Int, random: Random)",
      "desc": "Returns a random positive BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "remainder(divisor: BigInteger)",
      "desc": "Returns a BigInteger whose value is this % divisor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "setBit(n: Int)",
      "desc": "Returns a BigInteger which has the same binary representation as this but with the bit at position n set."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "shiftLeft(n: Int)",
      "desc": "Returns a BigInteger whose value is this << n."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "shiftRight(n: Int)",
      "desc": "Returns a BigInteger whose value is this >> n."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "signum()",
      "desc": "Returns the sign of this BigInteger."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "subtract(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this - value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "testBit(n: Int)",
      "desc": "Tests whether the bit at position n in this is set."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "toByteArray()",
      "desc": "Returns the two's complement representation of this BigInteger in a byte array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "toDouble()",
      "desc": "Returns this BigInteger as a double."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "toFloat()",
      "desc": "Returns this BigInteger as a float."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "toInt()",
      "desc": "Returns this BigInteger as an int value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "toLong()",
      "desc": "Returns this BigInteger as a long value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of this BigInteger in decimal form."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(radix: Int)",
      "desc": "Returns a string containing a string representation of this BigInteger with base radix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "valueOf(value: Long)",
      "desc": "Returns a BigInteger whose value is equal to value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "xor(value: BigInteger)",
      "desc": "Returns a BigInteger whose value is this ^ value."
    }
  ]
}