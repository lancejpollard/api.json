{
  "path": "java.util.concurrent",
  "name": "SynchronousQueue",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a SynchronousQueue with nonfair access policy."
    },
    {
      "type": "ctor",
      "ctor": "<init>(fair: Boolean)\n            Creates a SynchronousQueue with the specified fairness policy."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Does nothing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(element: E?)",
      "desc": "Always returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsAll(elements: Collection<E>)",
      "desc": "Returns false unless the given collection is empty."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "drainTo(c: MutableCollection<in E>!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "drainTo(c: MutableCollection<in E>!, maxElements: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Always returns true."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableIterator",
      "code": "iterator()",
      "desc": "Returns an empty iterator in which hasNext always returns false.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "offer(e: E, timeout: Long, unit: TimeUnit!)",
      "desc": "Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "offer(e: E)",
      "desc": "Inserts the specified element into this queue, if another thread is waiting to receive it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "peek()",
      "desc": "Always returns null.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "poll(timeout: Long, unit: TimeUnit!)",
      "desc": "Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "poll()",
      "desc": "Retrieves and removes the head of this queue, if another thread is currently making an element available.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "put(e: E)",
      "desc": "Adds the specified element to this queue, waiting if necessary for another thread to receive it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "remainingCapacity()",
      "desc": "Always returns zero."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(element: E?)",
      "desc": "Always returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "removeAll(elements: Collection<E>)",
      "desc": "Always returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "retainAll(elements: Collection<E>)",
      "desc": "Always returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator",
      "code": "spliterator()",
      "desc": "Returns an empty spliterator in which calls to java.util.Spliterator#trySplit() always return null.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "E",
      "code": "take()",
      "desc": "Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "toArray()",
      "desc": "Returns a zero-length array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "toArray(a: Array<T>)",
      "desc": "Sets the zeroth element of the specified array to null (if the array has non-zero length) and returns it.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Always returns \"[]\"."
    },
    {
      "type": "inherited-methods",
      "from": "AbstractQueue"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "add(element: E)"
    },
    {
      "type": "inherited-methods",
      "from": "true"
    },
    {
      "type": "inherited-methods",
      "from": "IllegalStateException"
    },
    {
      "type": "inherited-methods",
      "from": "true"
    },
    {
      "type": "inherited-methods",
      "from": "offer"
    },
    {
      "type": "inherited-methods",
      "from": "IllegalStateException"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "addAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "IllegalArgumentException"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "E"
    },
    {
      "type": "inherited-methods",
      "from": "element()"
    },
    {
      "type": "inherited-methods",
      "from": "peek"
    },
    {
      "type": "inherited-methods",
      "from": "peek"
    },
    {
      "type": "inherited-methods",
      "from": "E"
    },
    {
      "type": "inherited-methods",
      "from": "remove()"
    },
    {
      "type": "inherited-methods",
      "from": "poll"
    },
    {
      "type": "inherited-methods",
      "from": "poll"
    },
    {
      "type": "inherited-methods",
      "from": "AbstractCollection"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "contains(element: E?)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "containsAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isEmpty()"
    },
    {
      "type": "inherited-methods",
      "from": "MutableIterator<E>"
    },
    {
      "type": "inherited-methods",
      "from": "iterator()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "remove(element: E?)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "removeAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "retainAll(elements: Collection<E>)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<Any!>"
    },
    {
      "type": "inherited-methods",
      "from": "toArray()"
    },
    {
      "type": "inherited-methods",
      "from": "0"
    },
    {
      "type": "inherited-methods",
      "from": "size"
    },
    {
      "type": "inherited-methods",
      "from": "Array<T>"
    },
    {
      "type": "inherited-methods",
      "from": "toArray(a: Array<T>)"
    },
    {
      "type": "inherited-methods",
      "from": "toArray()"
    },
    {
      "type": "inherited-methods",
      "from": "0"
    },
    {
      "type": "inherited-methods",
      "from": "size"
    },
    {
      "type": "inherited-methods",
      "from": "String"
    },
    {
      "type": "inherited-methods",
      "from": "toString()"
    },
    {
      "type": "inherited-methods",
      "from": "String#valueOf(Object)"
    },
    {
      "type": "inherited-methods",
      "from": "Queue"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "offer(e: E)"
    },
    {
      "type": "inherited-methods",
      "from": "add"
    },
    {
      "type": "inherited-methods",
      "from": "E?"
    },
    {
      "type": "inherited-methods",
      "from": "peek()"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "E?"
    },
    {
      "type": "inherited-methods",
      "from": "poll()"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    }
  ]
}