{
  "path": "android.os",
  "name": "Message",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructor (but the preferred way to get a Message is to call Message.obtain())."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "copyFrom(o: Message!)",
      "desc": "Make this message like o."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Runnable",
      "code": "getCallback()",
      "desc": "Retrieve callback object that will execute when this message is handled.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "getData()",
      "desc": "Obtains a Bundle of arbitrary data associated with this event, lazily creating it if necessary.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Handler",
      "code": "getTarget()",
      "desc": "Retrieve the Handler implementation that will receive this message.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getWhen()",
      "desc": "Return the targeted delivery time of this message, in milliseconds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAsynchronous()",
      "desc": "Returns true if the message is asynchronous, meaning that it is not subject to Looper synchronization barriers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain()",
      "desc": "Return a new Message instance from the global pool.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(orig: Message!)",
      "desc": "Same as obtain(), but copies the values of an existing message (including its target) into the new one.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!)",
      "desc": "Same as obtain(), but sets the value for the target member on the Message returned.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!, callback: Runnable!)",
      "desc": "Same as obtain(android.os.Handler), but assigns a callback Runnable on the Message that is returned.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!, what: Int)",
      "desc": "Same as obtain(), but sets the values for both target and what members on the Message.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!, what: Int, obj: Any!)",
      "desc": "Same as obtain(), but sets the values of the target, what, and obj members.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!, what: Int, arg1: Int, arg2: Int)",
      "desc": "Same as obtain(), but sets the values of the target, what, arg1, and arg2 members.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Message",
      "code": "obtain(h: Handler!, what: Int, arg1: Int, arg2: Int, obj: Any!)",
      "desc": "Same as obtain(), but sets the values of the target, what, arg1, arg2, and obj members.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Bundle",
      "code": "peekData()",
      "desc": "Like getData(), but does not lazily create the Bundle.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "recycle()",
      "desc": "Return a Message instance to the global pool."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "sendToTarget()",
      "desc": "Sends this Message to the Handler specified by getTarget."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAsynchronous(async: Boolean)",
      "desc": "Sets whether the message is asynchronous, meaning that it is not subject to Looper synchronization barriers."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setData(data: Bundle!)",
      "desc": "Sets a Bundle of arbitrary data values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setTarget(target: Handler!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}