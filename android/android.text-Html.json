{
  "path": "android.text",
  "name": "Html",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_MODE_COMPACT",
      "desc": "Flags for fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler): Separate block-level elements with line breaks (single newline character) in between."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_MODE_LEGACY",
      "desc": "Flags for fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler): Separate block-level elements with blank lines (two newline characters) in between."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_OPTION_USE_CSS_COLORS",
      "desc": "Flag indicating that CSS color values should be used instead of those defined in Color."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE",
      "desc": "Flag indicating that texts inside <blockquote> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_DIV",
      "desc": "Flag indicating that texts inside <div> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_HEADING",
      "desc": "Flag indicating that texts inside <h1>~<h6> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_LIST",
      "desc": "Flag indicating that texts inside <ul> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM",
      "desc": "Flag indicating that texts inside <li> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH",
      "desc": "Flag indicating that texts inside <p> elements will be separated from other texts with one newline character by default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TO_HTML_PARAGRAPH_LINES_CONSECUTIVE",
      "desc": "Option for toHtml(android.text.Spanned,int): Wrap consecutive lines of text delimited by '\\n' inside <p> elements."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TO_HTML_PARAGRAPH_LINES_INDIVIDUAL",
      "desc": "Option for toHtml(android.text.Spanned,int): Wrap each line of text delimited by '\\n' inside a <p> or a <li> element."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "escapeHtml(text: CharSequence!)",
      "desc": "Returns an HTML escaped representation of the given plain text.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spanned",
      "code": "fromHtml(source: String!)",
      "desc": "Returns displayable styled text from the provided HTML string with the legacy flags FROM_HTML_MODE_LEGACY.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spanned",
      "code": "fromHtml(source: String!, flags: Int)",
      "desc": "Returns displayable styled text from the provided HTML string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spanned",
      "code": "fromHtml(source: String!, imageGetter: Html.ImageGetter!, tagHandler: Html.TagHandler!)",
      "desc": "Returns displayable styled text from the provided HTML string with the legacy flags FROM_HTML_MODE_LEGACY.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spanned",
      "code": "fromHtml(source: String!, flags: Int, imageGetter: Html.ImageGetter!, tagHandler: Html.TagHandler!)",
      "desc": "Returns displayable styled text from the provided HTML string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toHtml(text: Spanned!)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toHtml(text: Spanned!, option: Int)",
      "desc": "Returns an HTML representation of the provided Spanned text.",
      "symbol": "!"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ImageGetter",
      "desc": "Retrieves images for HTML <img> tags."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "TagHandler",
      "desc": "Is notified when HTML tags are encountered that the parser does not know how to interpret."
    }
  ]
}