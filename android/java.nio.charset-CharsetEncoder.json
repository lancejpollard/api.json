{
  "path": "java.nio.charset",
  "name": "CharsetEncoder",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "averageBytesPerChar()",
      "desc": "Returns the average number of bytes that will be produced for each character of input."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canEncode(c: Char)",
      "desc": "Tells whether or not this encoder can encode the given character."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canEncode(cs: CharSequence!)",
      "desc": "Tells whether or not this encoder can encode the given character sequence."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Charset",
      "code": "charset()",
      "desc": "Returns the charset that created this encoder.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CoderResult",
      "code": "encode(in: CharBuffer!, out: ByteBuffer!, endOfInput: Boolean)",
      "desc": "Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteBuffer",
      "code": "encode(in: CharBuffer!)",
      "desc": "Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CoderResult",
      "code": "flush(out: ByteBuffer!)",
      "desc": "Flushes this encoder.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLegalReplacement(repl: ByteArray!)",
      "desc": "Tells whether or not the given byte array is a legal replacement value for this encoder."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CodingErrorAction",
      "code": "malformedInputAction()",
      "desc": "Returns this encoder's current action for malformed-input errors.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "maxBytesPerChar()",
      "desc": "Returns the maximum number of bytes that will be produced for each character of input."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharsetEncoder",
      "code": "onMalformedInput(newAction: CodingErrorAction!)",
      "desc": "Changes this encoder's action for malformed-input errors.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharsetEncoder",
      "code": "onUnmappableCharacter(newAction: CodingErrorAction!)",
      "desc": "Changes this encoder's action for unmappable-character errors.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharsetEncoder",
      "code": "replaceWith(newReplacement: ByteArray!)",
      "desc": "Changes this encoder's replacement value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ByteArray",
      "code": "replacement()",
      "desc": "Returns this encoder's replacement value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharsetEncoder",
      "code": "reset()",
      "desc": "Resets this encoder, clearing any internal state.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CodingErrorAction",
      "code": "unmappableCharacterAction()",
      "desc": "Returns this encoder's current action for unmappable-character errors.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "CoderResult",
      "code": "encodeLoop(in: CharBuffer!, out: ByteBuffer!)",
      "desc": "Encodes one or more characters into one or more bytes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "CoderResult",
      "code": "implFlush(out: ByteBuffer!)",
      "desc": "Flushes this encoder.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "implOnMalformedInput(newAction: CodingErrorAction!)",
      "desc": "Reports a change to this encoder's malformed-input action."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "implOnUnmappableCharacter(newAction: CodingErrorAction!)",
      "desc": "Reports a change to this encoder's unmappable-character action."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "implReplaceWith(newReplacement: ByteArray!)",
      "desc": "Reports a change to this encoder's replacement value."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "implReset()",
      "desc": "Resets this encoder, clearing any charset-specific internal state."
    }
  ]
}