{
  "path": "java.security.cert",
  "name": "PKIXParameters",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(trustAnchors: MutableSet<TrustAnchor!>!)\n            Creates an instance of PKIXParameters with the specified Set of most-trusted CAs."
    },
    {
      "type": "ctor",
      "ctor": "<init>(keystore: KeyStore!)\n            Creates an instance of PKIXParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addCertPathChecker(checker: PKIXCertPathChecker!)",
      "desc": "Adds a PKIXCertPathChecker to the list of certification path checkers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addCertStore(store: CertStore!)",
      "desc": "Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Makes a copy of this PKIXParameters object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getCertPathCheckers()",
      "desc": "Returns the List of certification path checkers.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getCertStores()",
      "desc": "Returns an immutable List of CertStores that are used to find certificates and CRLs.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Date",
      "code": "getDate()",
      "desc": "Returns the time for which the validity of the certification path should be determined.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "getInitialPolicies()",
      "desc": "Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getPolicyQualifiersRejected()",
      "desc": "Gets the PolicyQualifiersRejected flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getSigProvider()",
      "desc": "Returns the signature provider's name, or null if not set.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CertSelector",
      "code": "getTargetCertConstraints()",
      "desc": "Returns the required constraints on the target certificate.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableSet",
      "code": "getTrustAnchors()",
      "desc": "Returns an immutable Set of the most-trusted CAs.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAnyPolicyInhibited()",
      "desc": "Checks whether the any policy OID should be processed if it is included in a certificate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isExplicitPolicyRequired()",
      "desc": "Checks if explicit policy is required."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPolicyMappingInhibited()",
      "desc": "Checks if policy mapping is inhibited."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isRevocationEnabled()",
      "desc": "Checks the RevocationEnabled flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnyPolicyInhibited(val: Boolean)",
      "desc": "Sets state to determine if the any policy OID should be processed if it is included in a certificate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCertPathCheckers(checkers: MutableList<PKIXCertPathChecker!>!)",
      "desc": "Sets a List of additional certification path checkers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCertStores(stores: MutableList<CertStore!>!)",
      "desc": "Sets the list of CertStores to be used in finding certificates and CRLs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDate(date: Date!)",
      "desc": "Sets the time for which the validity of the certification path should be determined."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExplicitPolicyRequired(val: Boolean)",
      "desc": "Sets the ExplicitPolicyRequired flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInitialPolicies(initialPolicies: MutableSet<String!>!)",
      "desc": "Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPolicyMappingInhibited(val: Boolean)",
      "desc": "Sets the PolicyMappingInhibited flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPolicyQualifiersRejected(qualifiersRejected: Boolean)",
      "desc": "Sets the PolicyQualifiersRejected flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRevocationEnabled(val: Boolean)",
      "desc": "Sets the RevocationEnabled flag."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSigProvider(sigProvider: String!)",
      "desc": "Sets the signature provider's name."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTargetCertConstraints(selector: CertSelector!)",
      "desc": "Sets the required constraints on the target certificate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTrustAnchors(trustAnchors: MutableSet<TrustAnchor!>!)",
      "desc": "Sets the Set of most-trusted CAs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a formatted string describing the parameters."
    }
  ]
}