{
  "path": "java.lang.reflect",
  "name": "Proxy",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InvocationHandler",
      "code": "getInvocationHandler(proxy: Any)",
      "desc": "Returns the invocation handler for the specified proxy instance."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Class",
      "code": "getProxyClass(loader: ClassLoader?, vararg interfaces: Class<*>!)",
      "desc": "Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isProxyClass(cl: Class<*>)",
      "desc": "Returns true if and only if the specified class was dynamically generated to be a proxy class using the getProxyClass method or the newProxyInstance method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "newProxyInstance(loader: ClassLoader?, interfaces: Array<Class<*>!>, h: InvocationHandler)",
      "desc": "Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler."
    }
  ]
}