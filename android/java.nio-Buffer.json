{
  "path": "java.nio",
  "name": "Buffer",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Any",
      "code": "array()",
      "desc": "Returns the array that backs this buffer  (optional operation).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "arrayOffset()",
      "desc": "Returns the offset within this buffer's backing array of the first element of the buffer  (optional operation)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "capacity()",
      "desc": "Returns this buffer's capacity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "clear()",
      "desc": "Clears this buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "flip()",
      "desc": "Flips this buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "hasArray()",
      "desc": "Tells whether or not this buffer is backed by an accessible array."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasRemaining()",
      "desc": "Tells whether there are any elements between the current position and the limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isDirect()",
      "desc": "Tells whether or not this buffer is direct."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isReadOnly()",
      "desc": "Tells whether or not this buffer is read-only."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "limit()",
      "desc": "Returns this buffer's limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "limit(newLimit: Int)",
      "desc": "Sets this buffer's limit.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "mark()",
      "desc": "Sets this buffer's mark at its position.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "position()",
      "desc": "Returns this buffer's position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "position(newPosition: Int)",
      "desc": "Sets this buffer's position.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "remaining()",
      "desc": "Returns the number of elements between the current position and the limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "reset()",
      "desc": "Resets this buffer's position to the previously-marked position.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Buffer",
      "code": "rewind()",
      "desc": "Rewinds this buffer.",
      "symbol": "!"
    }
  ]
}