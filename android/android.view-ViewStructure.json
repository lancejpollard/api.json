{
  "path": "android.view",
  "name": "ViewStructure",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "addChildCount(num: Int)",
      "desc": "Add to this view's child count."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "asyncCommit()",
      "desc": "Call when done populating a ViewStructure returned by asyncNewChild."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ViewStructure",
      "code": "asyncNewChild(index: Int)",
      "desc": "Like newChild, but allows the caller to asynchronously populate the returned child.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "AutofillId",
      "code": "getAutofillId()",
      "desc": "Gets the AutofillId associated with this node.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getChildCount()",
      "desc": "Return the child count as set by setChildCount."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Bundle",
      "code": "getExtras()",
      "desc": "Get extra data associated with this view structure; the returned Bundle is mutable, allowing you to view and modify its contents.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "CharSequence",
      "code": "getHint()",
      "desc": "Retrieve the last hint set by setHint.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "CharSequence",
      "code": "getText()",
      "desc": "Retrieve the last setText(java.lang.CharSequence).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getTextSelectionEnd()",
      "desc": "Retrieve the last selection end set by setText(java.lang.CharSequence,int,int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getTextSelectionStart()",
      "desc": "Retrieve the last selection start set by setText(java.lang.CharSequence,int,int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "hasExtras()",
      "desc": "Returns true if getExtras has been used to create extra content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ViewStructure",
      "code": "newChild(index: Int)",
      "desc": "Create a new child ViewStructure in this view, putting into the list of children at index.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "ViewStructure.HtmlInfo.Builder",
      "code": "newHtmlInfoBuilder(tagName: String)",
      "desc": "Creates a new HtmlInfo.Builder for the given HTML tag.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAccessibilityFocused(state: Boolean)",
      "desc": "Set the accessibility focused state of this view, as per View#isAccessibilityFocused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setActivated(state: Boolean)",
      "desc": "Set the activated state of this view, as per View#isActivated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAlpha(alpha: Float)",
      "desc": "Set an alpha transformation that is applied to this view, as per View#getAlpha."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillHints(hint: Array<String!>?)",
      "desc": "Sets the a hints that helps the autofill service to select the appropriate data to fill the view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillId(id: AutofillId)",
      "desc": "Sets the AutofillId associated with this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillId(parentId: AutofillId, virtualId: Int)",
      "desc": "Sets the AutofillId for this virtual node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillOptions(options: Array<CharSequence!>!)",
      "desc": "Sets the options that can be used to autofill this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillType(type: Int)",
      "desc": "Sets the View#getAutofillType() that can be used to autofill this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setAutofillValue(value: AutofillValue!)",
      "desc": "Sets the AutofillValue representing the current value of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setCheckable(state: Boolean)",
      "desc": "Set the checkable state of this view, such as whether it implements the android.widget.Checkable interface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setChecked(state: Boolean)",
      "desc": "Set the checked state of this view, such as Checkable.isChecked()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setChildCount(num: Int)",
      "desc": "Set the number of children of this view, which defines the range of indices you can use with newChild and asyncNewChild."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setClassName(className: String!)",
      "desc": "Set the class name of the view, as per View#getAccessibilityClassName."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setClickable(state: Boolean)",
      "desc": "Set the clickable state of this view, as per View#isClickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setContentDescription(contentDescription: CharSequence!)",
      "desc": "Set the content description of the view, as per View#getContentDescription."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setContextClickable(state: Boolean)",
      "desc": "Set the context clickable state of this view, as per View#isContextClickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setDataIsSensitive(sensitive: Boolean)",
      "desc": "Sets whether the data on this node is sensitive; if it is, then its content (text, autofill value, etc..) is striped before calls to"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setDimens(left: Int, top: Int, scrollX: Int, scrollY: Int, width: Int, height: Int)",
      "desc": "Set the basic dimensions of this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setElevation(elevation: Float)",
      "desc": "Set the visual elevation (shadow) of the view, as per View#getZ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnabled(state: Boolean)",
      "desc": "Set the enabled state of this view, as per View#isEnabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFocusable(state: Boolean)",
      "desc": "Set the focusable state of this view, as per View#isFocusable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFocused(state: Boolean)",
      "desc": "Set the focused state of this view, as per View#isFocused."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setHint(hint: CharSequence!)",
      "desc": "Set optional hint text associated with this view; this is for example the text that is shown by an EditText when it is empty to indicate to the user the kind of text to input."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHintIdEntry(entryName: String)",
      "desc": "Sets the identifier used to set the hint associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setHtmlInfo(htmlInfo: ViewStructure.HtmlInfo)",
      "desc": "Sets the HTML properties of this node when it represents an HTML element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setId(id: Int, packageName: String!, typeName: String!, entryName: String!)",
      "desc": "Set the identifier for this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setImportantForAutofill(mode: Int)",
      "desc": "Sets the View#setImportantForAutofill(int) of the view associated with this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setInputType(inputType: Int)",
      "desc": "Sets the android.text.InputType bits of this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setLocaleList(localeList: LocaleList!)",
      "desc": "Sets the the list of locales associated with this node."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setLongClickable(state: Boolean)",
      "desc": "Set the long clickable state of this view, as per View#isLongClickable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaxTextEms(maxEms: Int)",
      "desc": "Sets the maximum width in ems of the text associated with this view, when supported."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMaxTextLength(maxLength: Int)",
      "desc": "Sets the maximum length of the text associated with this view, when supported."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMinTextEms(minEms: Int)",
      "desc": "Sets the minimum width in ems of the text associated with this view, when supported."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setOpaque(opaque: Boolean)",
      "desc": "Set the opaque state of this view, as per View#isOpaque."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setSelected(state: Boolean)",
      "desc": "Set the selected state of this view, as per View#isSelected."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setText(text: CharSequence!)",
      "desc": "Set the text that is associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setText(text: CharSequence!, selectionStart: Int, selectionEnd: Int)",
      "desc": "Like setText(java.lang.CharSequence) but with an active selection extending from selectionStart through selectionEnd."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTextIdEntry(entryName: String)",
      "desc": "Sets the identifier used to set the text associated with this view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTextLines(charOffsets: IntArray!, baselines: IntArray!)",
      "desc": "Set line information for test that was previously supplied through setText(java.lang.CharSequence)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTextStyle(size: Float, fgColor: Int, bgColor: Int, style: Int)",
      "desc": "Explicitly set default global style information for text that was previously set with setText."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTransformation(matrix: Matrix!)",
      "desc": "Set the transformation matrix associated with this view, as per View#getMatrix, or null if there is none."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setVisibility(visibility: Int)",
      "desc": "Set the visibility state of this view, as per View#getVisibility."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setWebDomain(domain: String?)",
      "desc": "Sets the Web domain represented by this node."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "HtmlInfo",
      "desc": "Simplified representation of the HTML properties of a node that represents an HTML element."
    }
  ]
}