{
  "path": "java.time",
  "name": "LocalTime",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Temporal",
      "code": "adjustInto(temporal: Temporal!)",
      "desc": "Adjusts the specified temporal object to have the same time as this object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalDateTime",
      "code": "atDate(date: LocalDate!)",
      "desc": "Combines this time with a date to create a LocalDateTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "OffsetTime",
      "code": "atOffset(offset: ZoneOffset!)",
      "desc": "Combines this time with an offset to create an OffsetTime.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: LocalTime!)",
      "desc": "Compares this time to another time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Checks if this time is equal to another time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "format(formatter: DateTimeFormatter!)",
      "desc": "Formats this time using the specified formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "from(temporal: TemporalAccessor!)",
      "desc": "Obtains an instance of LocalTime from a temporal object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "get(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this time as an int."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHour()",
      "desc": "Gets the hour-of-day field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getLong(field: TemporalField!)",
      "desc": "Gets the value of the specified field from this time as a long."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMinute()",
      "desc": "Gets the minute-of-hour field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getNano()",
      "desc": "Gets the nano-of-second field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getSecond()",
      "desc": "Gets the second-of-minute field."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "A hash code for this time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAfter(other: LocalTime!)",
      "desc": "Checks if this time is after the specified time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isBefore(other: LocalTime!)",
      "desc": "Checks if this time is before the specified time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(field: TemporalField!)",
      "desc": "Checks if the specified field is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isSupported(unit: TemporalUnit!)",
      "desc": "Checks if the specified unit is supported."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minus(amountToSubtract: TemporalAmount!)",
      "desc": "Returns a copy of this time with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minus(amountToSubtract: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this time with the specified amount subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minusHours(hoursToSubtract: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of hours subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minusMinutes(minutesToSubtract: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of minutes subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minusNanos(nanosToSubtract: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of nanoseconds subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "minusSeconds(secondsToSubtract: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of seconds subtracted.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "now()",
      "desc": "Obtains the current time from the system clock in the default time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "now(zone: ZoneId!)",
      "desc": "Obtains the current time from the system clock in the specified time-zone.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "now(clock: Clock!)",
      "desc": "Obtains the current time from the specified clock.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "of(hour: Int, minute: Int)",
      "desc": "Obtains an instance of LocalTime from an hour and minute.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "of(hour: Int, minute: Int, second: Int)",
      "desc": "Obtains an instance of LocalTime from an hour, minute and second.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "of(hour: Int, minute: Int, second: Int, nanoOfSecond: Int)",
      "desc": "Obtains an instance of LocalTime from an hour, minute, second and nanosecond.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "ofNanoOfDay(nanoOfDay: Long)",
      "desc": "Obtains an instance of LocalTime from a nanos-of-day value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "ofSecondOfDay(secondOfDay: Long)",
      "desc": "Obtains an instance of LocalTime from a second-of-day value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "parse(text: CharSequence!)",
      "desc": "Obtains an instance of LocalTime from a text string such as 10:15.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "LocalTime",
      "code": "parse(text: CharSequence!, formatter: DateTimeFormatter!)",
      "desc": "Obtains an instance of LocalTime from a text string using a specific formatter.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plus(amountToAdd: TemporalAmount!)",
      "desc": "Returns a copy of this time with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plus(amountToAdd: Long, unit: TemporalUnit!)",
      "desc": "Returns a copy of this time with the specified amount added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plusHours(hoursToAdd: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of hours added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plusMinutes(minutesToAdd: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of minutes added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plusNanos(nanosToAdd: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of nanoseconds added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "plusSeconds(secondstoAdd: Long)",
      "desc": "Returns a copy of this LocalTime with the specified number of seconds added.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "R",
      "code": "query(query: TemporalQuery<R>!)",
      "desc": "Queries this time using the specified query."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ValueRange",
      "code": "range(field: TemporalField!)",
      "desc": "Gets the range of valid values for the specified field.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "toNanoOfDay()",
      "desc": "Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "toSecondOfDay()",
      "desc": "Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Outputs this time as a String, such as 10:15."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "truncatedTo(unit: TemporalUnit!)",
      "desc": "Returns a copy of this LocalTime with the time truncated.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "until(endExclusive: Temporal!, unit: TemporalUnit!)",
      "desc": "Calculates the amount of time until another time in terms of the specified unit."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "with(adjuster: TemporalAdjuster!)",
      "desc": "Returns an adjusted copy of this time.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "with(field: TemporalField!, newValue: Long)",
      "desc": "Returns a copy of this time with the specified field set to a new value.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "withHour(hour: Int)",
      "desc": "Returns a copy of this LocalTime with the hour-of-day altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "withMinute(minute: Int)",
      "desc": "Returns a copy of this LocalTime with the minute-of-hour altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "withNano(nanoOfSecond: Int)",
      "desc": "Returns a copy of this LocalTime with the nano-of-second altered.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "LocalTime",
      "code": "withSecond(second: Int)",
      "desc": "Returns a copy of this LocalTime with the second-of-minute altered.",
      "symbol": "!"
    }
  ]
}