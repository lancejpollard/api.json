{
  "path": "android.text",
  "name": "Layout",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BREAK_STRATEGY_BALANCED",
      "desc": "Value for break strategy indicating balanced line breaking."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BREAK_STRATEGY_HIGH_QUALITY",
      "desc": "Value for break strategy indicating high quality line breaking, including automatic hyphenation and doing whole-paragraph optimization of line breaks."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BREAK_STRATEGY_SIMPLE",
      "desc": "Value for break strategy indicating simple line breaking."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "DEFAULT_LINESPACING_ADDITION",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "DEFAULT_LINESPACING_MULTIPLIER",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DIR_LEFT_TO_RIGHT",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DIR_RIGHT_TO_LEFT",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HYPHENATION_FREQUENCY_FULL",
      "desc": "Value for hyphenation frequency indicating the full amount of automatic hyphenation, typical in typography."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HYPHENATION_FREQUENCY_NONE",
      "desc": "Value for hyphenation frequency indicating no automatic hyphenation."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "HYPHENATION_FREQUENCY_NORMAL",
      "desc": "Value for hyphenation frequency indicating a light amount of automatic hyphenation, which is a conservative default."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "JUSTIFICATION_MODE_INTER_WORD",
      "desc": "Value for justification mode indicating the text is justified by stretching word spacing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "JUSTIFICATION_MODE_NONE",
      "desc": "Value for justification mode indicating no justification."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(c: Canvas!)",
      "desc": "Draw this Layout on the specified Canvas."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(canvas: Canvas!, highlight: Path!, highlightPaint: Paint!, cursorOffsetVertical: Int)",
      "desc": "Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Layout.Alignment",
      "code": "getAlignment()",
      "desc": "Return the base alignment of this layout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getBottomPadding()",
      "desc": "Returns the number of extra pixels of descent padding in the bottom line of the Layout."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getCursorPath(point: Int, dest: Path!, editingBuffer: CharSequence!)",
      "desc": "Fills in the specified Path with a representation of a cursor at the specified offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getDesiredWidth(source: CharSequence!, paint: TextPaint!)",
      "desc": "Return how wide a layout must be in order to display the specified text with one line per paragraph."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getDesiredWidth(source: CharSequence!, start: Int, end: Int, paint: TextPaint!)",
      "desc": "Return how wide a layout must be in order to display the specified text slice with one line per paragraph."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getEllipsisCount(line: Int)",
      "desc": "Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getEllipsisStart(line: Int)",
      "desc": "Return the offset of the first character to be ellipsized away, relative to the start of the line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEllipsizedWidth()",
      "desc": "Return the width to which this Layout is ellipsizing, or getWidth if it is not doing anything special."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": "Return the total height of this layout."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLineAscent(line: Int)",
      "desc": "Get the ascent of the text on the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLineBaseline(line: Int)",
      "desc": "Return the vertical position of the baseline of the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLineBottom(line: Int)",
      "desc": "Return the vertical position of the bottom of the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineBounds(line: Int, bounds: Rect!)",
      "desc": "Return the baseline for the specified line (0…getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getLineContainsTab(line: Int)",
      "desc": "Returns whether the specified line contains one or more characters that need to be handled specially, like tabs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getLineCount()",
      "desc": "Return the number of lines of text in this layout."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getLineDescent(line: Int)",
      "desc": "Return the descent of the specified line(0…getLineCount() - 1)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Layout.Directions",
      "code": "getLineDirections(line: Int)",
      "desc": "Returns the directional run information for the specified line.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLineEnd(line: Int)",
      "desc": "Return the text offset after the last character on the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineForOffset(offset: Int)",
      "desc": "Get the line number on which the specified text offset appears."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineForVertical(vertical: Int)",
      "desc": "Get the line number corresponding to the specified vertical position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineLeft(line: Int)",
      "desc": "Get the leftmost position that should be exposed for horizontal scrolling on the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineMax(line: Int)",
      "desc": "Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineRight(line: Int)",
      "desc": "Get the rightmost position that should be exposed for horizontal scrolling on the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getLineStart(line: Int)",
      "desc": "Return the text offset of the beginning of the specified line ( 0…getLineCount())."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getLineTop(line: Int)",
      "desc": "Return the vertical position of the top of the specified line (0…getLineCount())."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineVisibleEnd(line: Int)",
      "desc": "Return the text offset after the last visible character (so whitespace is not counted) on the specified line."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineWidth(line: Int)",
      "desc": "Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOffsetForHorizontal(line: Int, horiz: Float)",
      "desc": "Get the character offset on the specified line whose position is closest to the specified horizontal position."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOffsetToLeftOf(offset: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOffsetToRightOf(offset: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TextPaint",
      "code": "getPaint()",
      "desc": "Return the base Paint properties for this layout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Layout.Alignment",
      "code": "getParagraphAlignment(line: Int)",
      "desc": "Get the alignment of the specified paragraph, taking into account markup attached to it.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getParagraphDirection(line: Int)",
      "desc": "Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getParagraphLeft(line: Int)",
      "desc": "Get the left edge of the specified paragraph, inset by left margins."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getParagraphRight(line: Int)",
      "desc": "Get the right edge of the specified paragraph, inset by right margins."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getPrimaryHorizontal(offset: Int)",
      "desc": "Get the primary horizontal position for the specified text offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getSecondaryHorizontal(offset: Int)",
      "desc": "Get the secondary horizontal position for the specified text offset."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getSelectionPath(start: Int, end: Int, dest: Path!)",
      "desc": "Fills in the specified Path with a representation of a highlight between the specified offsets."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getSpacingAdd()",
      "desc": "Return the number of units of leading that are added to each line."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getSpacingMultiplier()",
      "desc": "Return what the text height is multiplied by to get the line height."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "getText()",
      "desc": "Return the text that is displayed by this Layout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getTopPadding()",
      "desc": "Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": "Return the width of this layout."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "increaseWidthTo(wid: Int)",
      "desc": "Increase the width of this layout to the specified width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isRtlCharAt(offset: Int)",
      "desc": "Returns true if the character at offset is right to left (RTL)."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Boolean",
      "code": "isSpanned()",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Alignment",
      "desc": ""
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Directions",
      "desc": "Stores information about bidirectional (left-to-right or right-to-left) text within the layout of a line."
    }
  ]
}