{
  "path": "java.util",
  "name": "Arrays",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "asList(vararg a: T)",
      "desc": "Returns a fixed-size list backed by the specified array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: LongArray, key: Long)",
      "desc": "Searches the specified array of longs for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: LongArray, fromIndex: Int, toIndex: Int, key: Long)",
      "desc": "Searches a range of the specified array of longs for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: IntArray, key: Int)",
      "desc": "Searches the specified array of ints for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: IntArray, fromIndex: Int, toIndex: Int, key: Int)",
      "desc": "Searches a range of the specified array of ints for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: ShortArray, key: Short)",
      "desc": "Searches the specified array of shorts for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: ShortArray, fromIndex: Int, toIndex: Int, key: Short)",
      "desc": "Searches a range of the specified array of shorts for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: CharArray, key: Char)",
      "desc": "Searches the specified array of chars for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: CharArray, fromIndex: Int, toIndex: Int, key: Char)",
      "desc": "Searches a range of the specified array of chars for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: ByteArray, key: Byte)",
      "desc": "Searches the specified array of bytes for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: ByteArray, fromIndex: Int, toIndex: Int, key: Byte)",
      "desc": "Searches a range of the specified array of bytes for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: DoubleArray, key: Double)",
      "desc": "Searches the specified array of doubles for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: DoubleArray, fromIndex: Int, toIndex: Int, key: Double)",
      "desc": "Searches a range of the specified array of doubles for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: FloatArray, key: Float)",
      "desc": "Searches the specified array of floats for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: FloatArray, fromIndex: Int, toIndex: Int, key: Float)",
      "desc": "Searches a range of the specified array of floats for the specified value using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: Array<Any!>, key: Any)",
      "desc": "Searches the specified array for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: Array<Any!>, fromIndex: Int, toIndex: Int, key: Any)",
      "desc": "Searches a range of the specified array for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: Array<T>, key: T, c: Comparator<in T>?)",
      "desc": "Searches the specified array for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "binarySearch(a: Array<T>, fromIndex: Int, toIndex: Int, key: T, c: Comparator<in T>?)",
      "desc": "Searches a range of the specified array for the specified object using the binary search algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "copyOf(original: Array<T>, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "copyOf(original: Array<U>, newLength: Int, newType: Class<out Array<T>!>)",
      "desc": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "copyOf(original: ByteArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ShortArray",
      "code": "copyOf(original: ShortArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "copyOf(original: IntArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongArray",
      "code": "copyOf(original: LongArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharArray",
      "code": "copyOf(original: CharArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FloatArray",
      "code": "copyOf(original: FloatArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleArray",
      "code": "copyOf(original: DoubleArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BooleanArray",
      "code": "copyOf(original: BooleanArray, newLength: Int)",
      "desc": "Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "copyOfRange(original: Array<T>, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "copyOfRange(original: Array<U>, from: Int, to: Int, newType: Class<out Array<T>!>)",
      "desc": "Copies the specified range of the specified array into a new array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "copyOfRange(original: ByteArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ShortArray",
      "code": "copyOfRange(original: ShortArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "copyOfRange(original: IntArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongArray",
      "code": "copyOfRange(original: LongArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharArray",
      "code": "copyOfRange(original: CharArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FloatArray",
      "code": "copyOfRange(original: FloatArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleArray",
      "code": "copyOfRange(original: DoubleArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BooleanArray",
      "code": "copyOfRange(original: BooleanArray, from: Int, to: Int)",
      "desc": "Copies the specified range of the specified array into a new array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "deepEquals(a1: Array<Any!>?, a2: Array<Any!>?)",
      "desc": "Returns true if the two specified arrays are deeply equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "deepHashCode(a: Array<Any!>?)",
      "desc": "Returns a hash code based on the \"deep contents\" of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "deepToString(a: Array<Any!>?)",
      "desc": "Returns a string representation of the \"deep contents\" of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: LongArray?, a2: LongArray?)",
      "desc": "Returns true if the two specified arrays of longs are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: IntArray?, a2: IntArray?)",
      "desc": "Returns true if the two specified arrays of ints are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: ShortArray?, a2: ShortArray?)",
      "desc": "Returns true if the two specified arrays of shorts are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: CharArray?, a2: CharArray?)",
      "desc": "Returns true if the two specified arrays of chars are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: ByteArray?, a2: ByteArray?)",
      "desc": "Returns true if the two specified arrays of bytes are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: BooleanArray?, a2: BooleanArray?)",
      "desc": "Returns true if the two specified arrays of booleans are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: DoubleArray?, a2: DoubleArray?)",
      "desc": "Returns true if the two specified arrays of doubles are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: FloatArray?, a2: FloatArray?)",
      "desc": "Returns true if the two specified arrays of floats are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(a: Array<Any!>?, a2: Array<Any!>?)",
      "desc": "Returns true if the two specified arrays of Objects are equal to one another."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: LongArray, val: Long)",
      "desc": "Assigns the specified long value to each element of the specified array of longs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: LongArray, fromIndex: Int, toIndex: Int, val: Long)",
      "desc": "Assigns the specified long value to each element of the specified range of the specified array of longs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: IntArray, val: Int)",
      "desc": "Assigns the specified int value to each element of the specified array of ints."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: IntArray, fromIndex: Int, toIndex: Int, val: Int)",
      "desc": "Assigns the specified int value to each element of the specified range of the specified array of ints."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: ShortArray, val: Short)",
      "desc": "Assigns the specified short value to each element of the specified array of shorts."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: ShortArray, fromIndex: Int, toIndex: Int, val: Short)",
      "desc": "Assigns the specified short value to each element of the specified range of the specified array of shorts."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: CharArray, val: Char)",
      "desc": "Assigns the specified char value to each element of the specified array of chars."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: CharArray, fromIndex: Int, toIndex: Int, val: Char)",
      "desc": "Assigns the specified char value to each element of the specified range of the specified array of chars."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: ByteArray, val: Byte)",
      "desc": "Assigns the specified byte value to each element of the specified array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: ByteArray, fromIndex: Int, toIndex: Int, val: Byte)",
      "desc": "Assigns the specified byte value to each element of the specified range of the specified array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: BooleanArray, val: Boolean)",
      "desc": "Assigns the specified boolean value to each element of the specified array of booleans."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: BooleanArray, fromIndex: Int, toIndex: Int, val: Boolean)",
      "desc": "Assigns the specified boolean value to each element of the specified range of the specified array of booleans."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: DoubleArray, val: Double)",
      "desc": "Assigns the specified double value to each element of the specified array of doubles."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: DoubleArray, fromIndex: Int, toIndex: Int, val: Double)",
      "desc": "Assigns the specified double value to each element of the specified range of the specified array of doubles."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: FloatArray, val: Float)",
      "desc": "Assigns the specified float value to each element of the specified array of floats."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: FloatArray, fromIndex: Int, toIndex: Int, val: Float)",
      "desc": "Assigns the specified float value to each element of the specified range of the specified array of floats."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: Array<Any!>, val: Any?)",
      "desc": "Assigns the specified Object reference to each element of the specified array of Objects."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fill(a: Array<Any!>, fromIndex: Int, toIndex: Int, val: Any?)",
      "desc": "Assigns the specified Object reference to each element of the specified range of the specified array of Objects."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: LongArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: IntArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: ShortArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: CharArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: ByteArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: BooleanArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: FloatArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: DoubleArray?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode(a: Array<Any!>?)",
      "desc": "Returns a hash code based on the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: Array<T>, op: BinaryOperator<T>)",
      "desc": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: Array<T>, fromIndex: Int, toIndex: Int, op: BinaryOperator<T>)",
      "desc": "Performs parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator) for the given subrange of the array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: LongArray, op: LongBinaryOperator)",
      "desc": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: LongArray, fromIndex: Int, toIndex: Int, op: LongBinaryOperator)",
      "desc": "Performs parallelPrefix(long[],java.util.function.LongBinaryOperator) for the given subrange of the array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: DoubleArray, op: DoubleBinaryOperator)",
      "desc": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: DoubleArray, fromIndex: Int, toIndex: Int, op: DoubleBinaryOperator)",
      "desc": "Performs parallelPrefix(double[],java.util.function.DoubleBinaryOperator) for the given subrange of the array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: IntArray, op: IntBinaryOperator)",
      "desc": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelPrefix(array: IntArray, fromIndex: Int, toIndex: Int, op: IntBinaryOperator)",
      "desc": "Performs parallelPrefix(int[],java.util.function.IntBinaryOperator) for the given subrange of the array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSetAll(array: Array<T>, generator: IntFunction<out T>)",
      "desc": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSetAll(array: IntArray, generator: IntUnaryOperator)",
      "desc": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSetAll(array: LongArray, generator: IntToLongFunction)",
      "desc": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSetAll(array: DoubleArray, generator: IntToDoubleFunction)",
      "desc": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: ByteArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: ByteArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: CharArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: CharArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: ShortArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: ShortArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: IntArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: IntArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: LongArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: LongArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: FloatArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: FloatArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: DoubleArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: DoubleArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: Array<T>)",
      "desc": "Sorts the specified array of objects into ascending order, according to the Comparable of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: Array<T>, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the specified array of objects into ascending order, according to the Comparable of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: Array<T>, cmp: Comparator<in T>?)",
      "desc": "Sorts the specified array of objects according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parallelSort(a: Array<T>, fromIndex: Int, toIndex: Int, cmp: Comparator<in T>?)",
      "desc": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAll(array: Array<T>, generator: IntFunction<out T>)",
      "desc": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAll(array: IntArray, generator: IntUnaryOperator)",
      "desc": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAll(array: LongArray, generator: IntToLongFunction)",
      "desc": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAll(array: DoubleArray, generator: IntToDoubleFunction)",
      "desc": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: IntArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: IntArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: LongArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: LongArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: ShortArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: ShortArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: CharArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: CharArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: ByteArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: ByteArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: FloatArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: FloatArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: DoubleArray)",
      "desc": "Sorts the specified array into ascending numerical order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: DoubleArray, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the array into ascending order."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: Array<Any!>)",
      "desc": "Sorts the specified array of objects into ascending order, according to the Comparable of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: Array<Any!>, fromIndex: Int, toIndex: Int)",
      "desc": "Sorts the specified range of the specified array of objects into ascending order, according to the Comparable of its elements."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: Array<T>, c: Comparator<in T>?)",
      "desc": "Sorts the specified array of objects according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "sort(a: Array<T>, fromIndex: Int, toIndex: Int, c: Comparator<in T>?)",
      "desc": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator",
      "code": "spliterator(array: Array<T>)",
      "desc": "Returns a Spliterator covering all of the specified array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator",
      "code": "spliterator(array: Array<T>, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a Spliterator covering the specified range of the specified array.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfInt",
      "code": "spliterator(array: IntArray)",
      "desc": "Returns a Spliterator.OfInt covering all of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfInt",
      "code": "spliterator(array: IntArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a Spliterator.OfInt covering the specified range of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfLong",
      "code": "spliterator(array: LongArray)",
      "desc": "Returns a Spliterator.OfLong covering all of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfLong",
      "code": "spliterator(array: LongArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a Spliterator.OfLong covering the specified range of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfDouble",
      "code": "spliterator(array: DoubleArray)",
      "desc": "Returns a Spliterator.OfDouble covering all of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Spliterator.OfDouble",
      "code": "spliterator(array: DoubleArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a Spliterator.OfDouble covering the specified range of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Stream",
      "code": "stream(array: Array<T>)",
      "desc": "Returns a sequential Stream with the specified array as its source.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Stream",
      "code": "stream(array: Array<T>, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a sequential Stream with the specified range of the specified array as its source.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "stream(array: IntArray)",
      "desc": "Returns a sequential IntStream with the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "stream(array: IntArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a sequential IntStream with the specified range of the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "stream(array: LongArray)",
      "desc": "Returns a sequential LongStream with the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "stream(array: LongArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a sequential LongStream with the specified range of the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "stream(array: DoubleArray)",
      "desc": "Returns a sequential DoubleStream with the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "stream(array: DoubleArray, startInclusive: Int, endExclusive: Int)",
      "desc": "Returns a sequential DoubleStream with the specified range of the specified array as its source."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: LongArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: IntArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: ShortArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: CharArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: ByteArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: BooleanArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: FloatArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: DoubleArray?)",
      "desc": "Returns a string representation of the contents of the specified array."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString(a: Array<Any!>?)",
      "desc": "Returns a string representation of the contents of the specified array."
    }
  ]
}