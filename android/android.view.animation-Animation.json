{
  "path": "android.view.animation",
  "name": "Animation",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ABSOLUTE",
      "desc": "The specified dimension is an absolute number of pixels."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INFINITE",
      "desc": "Repeat the animation indefinitely."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RELATIVE_TO_PARENT",
      "desc": "The specified dimension holds a float and should be multiplied by the height or width of the parent of the object being animated."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RELATIVE_TO_SELF",
      "desc": "The specified dimension holds a float and should be multiplied by the height or width of the object being animated."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RESTART",
      "desc": "When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation restarts from the beginning."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "REVERSE",
      "desc": "When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation plays backward (and then forward again)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "START_ON_FIRST_FRAME",
      "desc": "Can be used as the start time to indicate the start time should be the current time when getTransformation(long,android.view.animation.Transformation) is invoked for the first animation frame."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ZORDER_BOTTOM",
      "desc": "Requests that the content being animated be forced under all other content for the duration of the animation."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ZORDER_NORMAL",
      "desc": "Requests that the content being animated be kept in its current Z order."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ZORDER_TOP",
      "desc": "Requests that the content being animated be forced on top of all other content for the duration of the animation."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new animation with a duration of 0ms, the default interpolator, with fillBefore set to true and fillAfter set to false"
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!)\n            Creates a new animation whose parameters come from the specified context and attributes set."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "cancel()",
      "desc": "Cancel the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "computeDurationHint()",
      "desc": "Compute a hint at how long the entire animation may last, in milliseconds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBackgroundColor()",
      "desc": "Returns the background color behind the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getDetachWallpaper()",
      "desc": "Return value of setDetachWallpaper(boolean)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getDuration()",
      "desc": "How long this animation should last"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFillAfter()",
      "desc": "If fillAfter is true, this animation will apply its transformation after the end time of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFillBefore()",
      "desc": "If fillBefore is true, this animation will apply its transformation before the start time of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Interpolator",
      "code": "getInterpolator()",
      "desc": "Gets the acceleration curve type for this animation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRepeatCount()",
      "desc": "Defines how many times the animation should repeat."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getRepeatMode()",
      "desc": "Defines what this animation should do when it reaches the end."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getStartOffset()",
      "desc": "When this animation should start, relative to StartTime"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getStartTime()",
      "desc": "When this animation should start."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getTransformation(currentTime: Long, outTransformation: Transformation!)",
      "desc": "Gets the transformation to apply at a specified point in time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getTransformation(currentTime: Long, outTransformation: Transformation!, scale: Float)",
      "desc": "Gets the transformation to apply at a specified point in time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getZAdjustment()",
      "desc": "Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasEnded()",
      "desc": "Indicates whether this animation has ended or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasStarted()",
      "desc": "Indicates whether this animation has started or not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "initialize(width: Int, height: Int, parentWidth: Int, parentHeight: Int)",
      "desc": "Initialize this animation with the dimensions of the object being animated as well as the objects parents."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFillEnabled()",
      "desc": "If fillEnabled is true, this animation will apply the value of fillBefore."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isInitialized()",
      "desc": "Whether or not the animation has been initialized."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Reset the initialization state of this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "restrictDuration(durationMillis: Long)",
      "desc": "Ensure that the duration that this animation will run is not longer than durationMillis."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "scaleCurrentDuration(scale: Float)",
      "desc": "How much to scale the duration by."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimationListener(listener: Animation.AnimationListener!)",
      "desc": "Binds an animation listener to this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundColor(bg: Int)",
      "desc": "Set background behind animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDetachWallpaper(detachWallpaper: Boolean)",
      "desc": "If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDuration(durationMillis: Long)",
      "desc": "How long this animation should last."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFillAfter(fillAfter: Boolean)",
      "desc": "If fillAfter is true, the transformation that this animation performed will persist when it is finished."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFillBefore(fillBefore: Boolean)",
      "desc": "If fillBefore is true, this animation will apply its transformation before the start time of the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFillEnabled(fillEnabled: Boolean)",
      "desc": "If fillEnabled is true, the animation will apply the value of fillBefore."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInterpolator(context: Context!, resID: Int)",
      "desc": "Sets the acceleration curve for this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInterpolator(i: Interpolator!)",
      "desc": "Sets the acceleration curve for this animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRepeatCount(repeatCount: Int)",
      "desc": "Sets how many times the animation should be repeated."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setRepeatMode(repeatMode: Int)",
      "desc": "Defines what this animation should do when it reaches the end."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStartOffset(startOffset: Long)",
      "desc": "When this animation should start relative to the start time."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStartTime(startTimeMillis: Long)",
      "desc": "When this animation should start."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setZAdjustment(zAdjustment: Int)",
      "desc": "Set the Z ordering mode to use while running the animation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "start()",
      "desc": "Convenience method to start the animation the first time getTransformation(long,android.view.animation.Transformation) is invoked."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startNow()",
      "desc": "Convenience method to start the animation at the current time in milliseconds."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "willChangeBounds()",
      "desc": "Indicates whether or not this animation will affect the bounds of the animated view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "willChangeTransformationMatrix()",
      "desc": "Indicates whether or not this animation will affect the transformation matrix."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyTransformation(interpolatedTime: Float, t: Transformation!)",
      "desc": "Helper for getTransformation."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Animation",
      "code": "clone()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ensureInterpolator()",
      "desc": "Gurantees that this animation has an interpolator."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "getScaleFactor()",
      "desc": "The scale factor is set by the call to getTransformation."
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Float",
      "code": "resolveSize(type: Int, value: Float, size: Int, parentSize: Int)",
      "desc": "Convert the information in the description of a size to an actual dimension"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "AnimationListener",
      "desc": "An animation listener receives notifications from an animation."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Description",
      "desc": "Utility class to parse a string description of a size."
    }
  ]
}