{
  "path": "android.graphics.drawable",
  "name": "GradientDrawable",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LINE",
      "desc": "Shape is a line"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "LINEAR_GRADIENT",
      "desc": "Gradient is linear (default.)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "OVAL",
      "desc": "Shape is an ellipse"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RADIAL_GRADIENT",
      "desc": "Gradient is circular."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RECTANGLE",
      "desc": "Shape is a rectangle, possibly with rounded corners"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RING",
      "desc": "Shape is a ring."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SWEEP_GRADIENT",
      "desc": "Gradient is a sweep."
    },
    {
      "type": "ctor",
      "ctor": "<init>()"
    },
    {
      "type": "ctor",
      "ctor": "<init>(orientation: GradientDrawable.Orientation!, colors: IntArray!)\n            Create a new gradient drawable given an orientation and an array of colors for the gradient."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "applyTheme(t: Resources.Theme)",
      "desc": "Applies the specified theme to this Drawable and its children."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "canApplyTheme()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(canvas: Canvas)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAlpha()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getChangingConfigurations()",
      "desc": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorStateList",
      "code": "getColor()",
      "desc": "Returns the color state list used to fill the shape, or null if the shape is filled with a gradient or has no fill color.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ColorFilter",
      "code": "getColorFilter()",
      "desc": "Returns the current color filter, or null if none set.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntArray",
      "code": "getColors()",
      "desc": "Returns the colors used to draw the gradient, or null if the gradient is drawn using a single color or no colors.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable.ConstantState",
      "code": "getConstantState()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FloatArray",
      "code": "getCornerRadii()",
      "desc": "Returns the radii for each of the 4 corners.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getCornerRadius()",
      "desc": "Returns the radius for the corners of the gradient, that was previously set with setCornerRadius(float)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getGradientCenterX()",
      "desc": "Returns the X-position of the center of the gradient as a fraction of the width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getGradientCenterY()",
      "desc": "Returns the Y-position of the center of this gradient as a fraction of the height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getGradientRadius()",
      "desc": "Returns the radius of the gradient in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGradientType()",
      "desc": "Returns the type of gradient used by this drawable, one of LINEAR_GRADIENT, RADIAL_GRADIENT, or SWEEP_GRADIENT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getInnerRadius()",
      "desc": "Retrn the inner radius of the ring  This units of this value are pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getInnerRadiusRatio()",
      "desc": "Return the inner radius of the ring expressed as a ratio of the ring's width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getIntrinsicWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getOpacity()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Insets",
      "code": "getOpticalInsets()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "GradientDrawable.Orientation",
      "code": "getOrientation()",
      "desc": "Returns the orientation of the gradient defined in this drawable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getOutline(outline: Outline)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getPadding(padding: Rect)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getShape()",
      "desc": "Returns the type of shape used by this drawable, one of LINE, OVAL, RECTANGLE or RING."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getThickness()",
      "desc": "Return the thickness of the ring  This units of this value are pixels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getThicknessRatio()",
      "desc": "Return the thickness ratio of the ring expressed as a ratio of the ring's width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getUseLevel()",
      "desc": "Returns whether this drawable's level property will be used to scale the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)",
      "desc": "Inflate this Drawable from an XML resource optionally styled by a theme."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStateful()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "mutate()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAlpha(alpha: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColor(argb: Int)",
      "desc": "Changes this drawable to use a single color instead of a gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColor(colorStateList: ColorStateList?)",
      "desc": "Changes this drawable to use a single color state list instead of a gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColorFilter(colorFilter: ColorFilter?)",
      "desc": "Specify an optional color filter for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColors(colors: IntArray?)",
      "desc": "Sets the colors used to draw the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColors(colors: IntArray?, offsets: FloatArray?)",
      "desc": "Sets the colors and offsets used to draw the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCornerRadii(radii: FloatArray?)",
      "desc": "Specifies radii for each of the 4 corners."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCornerRadius(radius: Float)",
      "desc": "Specifies the radius for the corners of the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDither(dither: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGradientCenter(x: Float, y: Float)",
      "desc": "Sets the position of the center of the gradient as a fraction of the width and height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGradientRadius(gradientRadius: Float)",
      "desc": "Sets the radius of the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGradientType(gradient: Int)",
      "desc": "Sets the type of gradient used by this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInnerRadius(innerRadius: Int)",
      "desc": "Configure the inner radius of the ring."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInnerRadiusRatio(innerRadiusRatio: Float)",
      "desc": "Inner radius of the ring expressed as a ratio of the ring's width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOrientation(orientation: GradientDrawable.Orientation!)",
      "desc": "Sets the orientation of the gradient defined in this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPadding(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Configure the padding of the gradient shape"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setShape(shape: Int)",
      "desc": "Sets the type of shape used to draw the gradient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSize(width: Int, height: Int)",
      "desc": "Sets the size of the shape drawn by this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStroke(width: Int, color: Int)",
      "desc": "Set the stroke width and color for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStroke(width: Int, colorStateList: ColorStateList!)",
      "desc": "Set the stroke width and color state list for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStroke(width: Int, color: Int, dashWidth: Float, dashGap: Float)",
      "desc": "Set the stroke width and color for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStroke(width: Int, colorStateList: ColorStateList!, dashWidth: Float, dashGap: Float)",
      "desc": "Set the stroke width and color state list for the drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setThickness(thickness: Int)",
      "desc": "Configure the thickness of the ring."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setThicknessRatio(thicknessRatio: Float)",
      "desc": "Configure the thickness of the ring expressed as a ratio of the ring's width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintBlendMode(blendMode: BlendMode!)",
      "desc": "Specifies a tint blending mode for this drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTintList(tint: ColorStateList?)",
      "desc": "Specifies tint color for this drawable as a color state list."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUseLevel(useLevel: Boolean)",
      "desc": "Sets whether this drawable's level property will be used to scale the gradient."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "onBoundsChange(r: Rect!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onLevelChange(level: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "onStateChange(stateSet: IntArray!)",
      "desc": ""
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Orientation",
      "desc": "Controls how the gradient is oriented relative to the drawable's bounds"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "clearColorFilter()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "copyBounds(bounds: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "copyBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable?"
    },
    {
      "type": "inherited-methods",
      "from": "createFromPath(pathName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "createFromResourceStream(res: Resources!, value: TypedValue!, is: InputStream!, srcName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable?"
    },
    {
      "type": "inherited-methods",
      "from": "createFromResourceStream(res: Resources?, value: TypedValue?, is: InputStream?, srcName: String?, opts: BitmapFactory.Options?)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable!"
    },
    {
      "type": "inherited-methods",
      "from": "createFromStream(is: InputStream!, srcName: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXml(r: Resources, parser: XmlPullParser)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXml(r: Resources, parser: XmlPullParser, theme: Resources.Theme?)"
    },
    {
      "type": "inherited-methods",
      "from": "Theme"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet)"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "createFromXmlInner(r: Resources, parser: XmlPullParser, attrs: AttributeSet, theme: Resources.Theme?)"
    },
    {
      "type": "inherited-methods",
      "from": "Theme"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "getBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable.Callback?"
    },
    {
      "type": "inherited-methods",
      "from": "getCallback()"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Drawable"
    },
    {
      "type": "inherited-methods",
      "from": "getCurrent()"
    },
    {
      "type": "inherited-methods",
      "from": "Rect"
    },
    {
      "type": "inherited-methods",
      "from": "getDirtyBounds()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "getHotspotBounds(outRect: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "outRect"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLayoutDirection()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLevel()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMinimumHeight()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMinimumWidth()"
    },
    {
      "type": "inherited-methods",
      "from": "IntArray"
    },
    {
      "type": "inherited-methods",
      "from": "getState()"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_focused"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_selected"
    },
    {
      "type": "inherited-methods",
      "from": "Region?"
    },
    {
      "type": "inherited-methods",
      "from": "getTransparentRegion()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "inflate(r: Resources, parser: XmlPullParser, attrs: AttributeSet)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf()"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isAutoMirrored()"
    },
    {
      "type": "inherited-methods",
      "from": "android.util.LayoutDirection"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isFilterBitmap()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isProjected()"
    },
    {
      "type": "inherited-methods",
      "from": "android.graphics.RenderNode"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isVisible()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "jumpToCurrentState()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "onLayoutDirectionChanged(layoutDirection: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "resolveOpacity(op1: Int, op2: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "getOpacity"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "scheduleSelf(what: Runnable, when: Long)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setAutoMirrored(mirrored: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "android.util.LayoutDirection"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setBounds(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setBounds(bounds: Rect)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setCallback(cb: Drawable.Callback?)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setChangingConfigurations(configs: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(color: Int, mode: PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "PorterDuffColorFilter"
    },
    {
      "type": "inherited-methods",
      "from": "tint"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setFilterBitmap(filter: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setHotspot(x: Float, y: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setHotspotBounds(left: Int, top: Int, right: Int, bottom: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setLayoutDirection(layoutDirection: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setLevel(level: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setState(stateSet: IntArray)"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_focused"
    },
    {
      "type": "inherited-methods",
      "from": "android.R.attr#state_pressed"
    },
    {
      "type": "inherited-methods",
      "from": "invalidateSelf"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setTint(tintColor: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "null"
    },
    {
      "type": "inherited-methods",
      "from": "setTintList(android.content.res.ColorStateList)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setTintMode(tintMode: PorterDuff.Mode?)"
    },
    {
      "type": "inherited-methods",
      "from": "PorterDuff.Mode#SRC_IN"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(android.graphics.ColorFilter)"
    },
    {
      "type": "inherited-methods",
      "from": "setColorFilter(int,android.graphics.PorterDuff.Mode)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "setVisible(visible: Boolean, restart: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "unscheduleSelf(what: Runnable)"
    },
    {
      "type": "inherited-methods",
      "from": "Callback"
    }
  ]
}