{
  "path": "java.lang",
  "name": "Double",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BYTES",
      "desc": "The number of bytes used to represent a double value."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MAX_EXPONENT",
      "desc": "Maximum exponent a finite double variable may have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "MAX_VALUE",
      "desc": "A constant holding the largest positive finite value of type double, (2-2-52)·21023."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MIN_EXPONENT",
      "desc": "Minimum exponent a normalized double variable may have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "MIN_NORMAL",
      "desc": "A constant holding the smallest positive normal value of type double, 2-1022."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "MIN_VALUE",
      "desc": "A constant holding the smallest positive nonzero value of type double, 2-1074."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "NEGATIVE_INFINITY",
      "desc": "A constant holding the negative infinity of type double."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "NaN",
      "desc": "A constant holding a Not-a-Number (NaN) value of type double."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "POSITIVE_INFINITY",
      "desc": "A constant holding the positive infinity of type double."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SIZE",
      "desc": "The number of bits used to represent a double value."
    },
    {
      "type": "ctor",
      "ctor": "<init>(value: Double)\n            Constructs a newly allocated Double object that represents the primitive double argument."
    },
    {
      "type": "ctor",
      "ctor": "<init>(s: String)\n            Constructs a newly allocated Double object that represents the floating-point value of type double represented by the string."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "compare(d1: Double, d2: Double)",
      "desc": "Compares the two specified double values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compareTo(other: Double)",
      "desc": "Compares two Double objects numerically."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "doubleToLongBits(value: Double)",
      "desc": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "doubleToRawLongBits(value: Double)",
      "desc": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout, preserving Not-a-Number (NaN) values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares this object against the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code for this Double object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "hashCode(value: Double)",
      "desc": "Returns a hash code for a double value; compatible with Double.hashCode()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isFinite(d: Double)",
      "desc": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isInfinite()",
      "desc": "Returns true if this Double value is infinitely large in magnitude, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isInfinite(v: Double)",
      "desc": "Returns true if the specified number is infinitely large in magnitude, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isNaN()",
      "desc": "Returns true if this Double value is a Not-a-Number (NaN), false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isNaN(v: Double)",
      "desc": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "longBitsToDouble(bits: Long)",
      "desc": "Returns the double value corresponding to a given bit representation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "max(a: Double, b: Double)",
      "desc": "Returns the greater of two double values as if by calling Math#max(double, double)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "min(a: Double, b: Double)",
      "desc": "Returns the smaller of two double values as if by calling Math#min(double, double)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "parseDouble(s: String)",
      "desc": "Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "sum(a: Double, b: Double)",
      "desc": "Adds two double values together as per the + operator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Byte",
      "code": "toByte()",
      "desc": "Returns the value of this Double as a byte after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Double",
      "code": "toDouble()",
      "desc": "Returns the double value of this Double object."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "toFloat()",
      "desc": "Returns the value of this Double as a float after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toHexString(d: Double)",
      "desc": "Returns a hexadecimal string representation of the double argument."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "toInt()",
      "desc": "Returns the value of this Double as an int after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "toLong()",
      "desc": "Returns the value of this Double as a long after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Short",
      "code": "toShort()",
      "desc": "Returns the value of this Double as a short after a narrowing primitive conversion."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of this Double object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toString(d: Double)",
      "desc": "Returns a string representation of the double argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "valueOf(s: String)",
      "desc": "Returns a  object holding the  value represented by the argument string ."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "valueOf(d: Double)",
      "desc": "Returns a Double instance representing the specified double value."
    }
  ]
}