{
  "path": "android.icu.text",
  "name": "RuleBasedCollator",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(rules: String!)\n             Constructor that takes the argument rules for customization."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Clones the RuleBasedCollator"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "RuleBasedCollator",
      "code": "cloneAsThawed()",
      "desc": "Provides for the clone operation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "compare(source: String!, target: String!)",
      "desc": "Compares the source text String to the target text String according to the collation rules, strength and decomposition mode for this RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares the equality of two Collator objects."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Collator",
      "code": "freeze()",
      "desc": "Freezes the collator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CollationElementIterator",
      "code": "getCollationElementIterator(source: String!)",
      "desc": "Return a CollationElementIterator for the given String.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CollationElementIterator",
      "code": "getCollationElementIterator(source: CharacterIterator!)",
      "desc": "Return a CollationElementIterator for the given CharacterIterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CollationElementIterator",
      "code": "getCollationElementIterator(source: UCharacterIterator!)",
      "desc": "Return a CollationElementIterator for the given UCharacterIterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CollationKey",
      "code": "getCollationKey(source: String!)",
      "desc": "Get a Collation key for the argument String source from this RuleBasedCollator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getContractionsAndExpansions(contractions: UnicodeSet!, expansions: UnicodeSet!, addPrefixes: Boolean)",
      "desc": "Gets unicode sets containing contractions and/or expansions of a collator"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getDecomposition()",
      "desc": "Returns the decomposition mode of this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getMaxVariable()",
      "desc": "[icu] Returns the maximum reordering group whose characters are affected by the alternate handling behavior."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getNumericCollation()",
      "desc": "Method to retrieve the numeric collation value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "IntArray",
      "code": "getReorderCodes()",
      "desc": "Retrieves the reordering codes for this collator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getRules()",
      "desc": "Gets the collation tailoring rules for this RuleBasedCollator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getRules(fullrules: Boolean)",
      "desc": "Returns current rules.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getStrength()",
      "desc": "Returns this Collator's strength attribute."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "UnicodeSet",
      "code": "getTailoredSet()",
      "desc": "Get a UnicodeSet that contains all the characters and sequences tailored in this collator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "VersionInfo",
      "code": "getUCAVersion()",
      "desc": "Get the UCA version of this collator object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getVariableTop()",
      "desc": "[icu] Gets the variable top value of a Collator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "VersionInfo",
      "code": "getVersion()",
      "desc": "Get the version of this collator object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Generates a unique hash code for this RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isAlternateHandlingShifted()",
      "desc": "Checks if the alternate handling behavior is the UCA defined SHIFTED or NON_IGNORABLE."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isCaseLevel()",
      "desc": "Checks if case level is set to true."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFrenchCollation()",
      "desc": "Checks if French Collation is set to true."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isFrozen()",
      "desc": "Determines whether the object has been frozen or not."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isLowerCaseFirst()",
      "desc": "Return true if a lowercase character is sorted before the corresponding uppercase character."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUpperCaseFirst()",
      "desc": "Return true if an uppercase character is sorted before the corresponding lowercase character."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAlternateHandlingDefault()",
      "desc": "Sets the alternate handling mode to the initial mode set during construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setAlternateHandlingShifted(shifted: Boolean)",
      "desc": "Sets the alternate handling for QUATERNARY strength to be either shifted or non-ignorable."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCaseFirstDefault()",
      "desc": "Sets the case first mode to the initial mode set during construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCaseLevel(flag: Boolean)",
      "desc": "When case level is set to true, an additional weight is formed between the SECONDARY and TERTIARY weight, known as the case level."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCaseLevelDefault()",
      "desc": "Sets the case level mode to the initial mode set during construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDecomposition(decomposition: Int)",
      "desc": "Sets the decomposition mode of this Collator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setDecompositionDefault()",
      "desc": "Sets the decomposition mode to the initial mode set during construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setFrenchCollation(flag: Boolean)",
      "desc": "Sets the mode for the direction of SECONDARY weights to be used in French collation."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setFrenchCollationDefault()",
      "desc": "Sets the French collation mode to the initial mode set during construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setLowerCaseFirst(lowerfirst: Boolean)",
      "desc": "Sets the orders of lower cased characters to sort before upper cased characters, in strength TERTIARY."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "RuleBasedCollator",
      "code": "setMaxVariable(group: Int)",
      "desc": "[icu] Sets the variable top to the top of the specified reordering group.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setNumericCollation(flag: Boolean)",
      "desc": "[icu] When numeric collation is turned on, this Collator makes substrings of digits sort according to their numeric values."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setNumericCollationDefault()",
      "desc": "Method to set numeric collation to its default value."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setReorderCodes(vararg order: Int)",
      "desc": "Sets the reordering codes for this collator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setStrength(newStrength: Int)",
      "desc": "Sets this Collator's strength attribute."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setStrengthDefault()",
      "desc": "Sets the collation strength to the initial mode set during the construction of the RuleBasedCollator."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setUpperCaseFirst(upperfirst: Boolean)",
      "desc": "Sets whether uppercase characters sort before lowercase characters or vice versa, in strength TERTIARY."
    },
    {
      "type": "inherited-constants",
      "from": "Collator"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CANONICAL_DECOMPOSITION"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "FULL_DECOMPOSITION"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "IDENTICAL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "NO_DECOMPOSITION"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PRIMARY"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "QUATERNARY"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "SECONDARY"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "TERTIARY"
    },
    {
      "type": "inherited-methods",
      "from": "Collator"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "compare(source: Any!, target: Any!)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "equals(source: String!, target: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<Locale!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getAvailableLocales()"
    },
    {
      "type": "inherited-methods",
      "from": "Array<ULocale!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getAvailableULocales()"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getDisplayName(objectLocale: Locale!, displayLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getDisplayName(objectLocale: ULocale!, displayLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getDisplayName(objectLocale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "DISPLAY"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getDisplayName(objectLocale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "DISPLAY"
    },
    {
      "type": "inherited-methods",
      "from": "IntArray!"
    },
    {
      "type": "inherited-methods",
      "from": "getEquivalentReorderCodes(reorderCode: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "ULocale!"
    },
    {
      "type": "inherited-methods",
      "from": "getFunctionalEquivalent(keyword: String!, locID: ULocale!, isAvailable: BooleanArray!)"
    },
    {
      "type": "inherited-methods",
      "from": "ULocale!"
    },
    {
      "type": "inherited-methods",
      "from": "getFunctionalEquivalent(keyword: String!, locID: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "Collator!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance()"
    },
    {
      "type": "inherited-methods",
      "from": "Collator!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(locale: ULocale!)"
    },
    {
      "type": "inherited-methods",
      "from": "Collator!"
    },
    {
      "type": "inherited-methods",
      "from": "getInstance(locale: Locale!)"
    },
    {
      "type": "inherited-methods",
      "from": "ULocale"
    },
    {
      "type": "inherited-methods",
      "from": "Array<String!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getKeywordValues(keyword: String!)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<String!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getKeywordValuesForLocale(key: String!, locale: ULocale!, commonlyUsed: Boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Array<String!>!"
    },
    {
      "type": "inherited-methods",
      "from": "getKeywords()"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "reversed()"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(other: Comparator<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "compare(a, b) == 0"
    },
    {
      "type": "inherited-methods",
      "from": "other"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(keyExtractor: Function<in T, out U>!, keyComparator: Comparator<in U>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparing(keyExtractor: Function<in T, out U>!)"
    },
    {
      "type": "inherited-methods",
      "from": "Comparable"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingDouble(keyExtractor: ToDoubleFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "double"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingInt(keyExtractor: ToIntFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "int"
    },
    {
      "type": "inherited-methods",
      "from": "Comparator<T>!"
    },
    {
      "type": "inherited-methods",
      "from": "thenComparingLong(keyExtractor: ToLongFunction<in T>!)"
    },
    {
      "type": "inherited-methods",
      "from": "long"
    }
  ]
}