{
  "path": "android.icu.text",
  "name": "StringSearch",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, target: CharacterIterator!, collator: RuleBasedCollator!, breakiter: BreakIterator!)\n            Initializes the iterator to use the language-specific rules defined in the argument collator to search for argument pattern in the argument target text."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, target: CharacterIterator!, collator: RuleBasedCollator!)\n            Initializes the iterator to use the language-specific rules defined in the argument collator to search for argument pattern in the argument target text."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, target: CharacterIterator!, locale: Locale!)\n            Initializes the iterator to use the language-specific rules and break iterator rules defined in the argument locale to search for argument pattern in the argument target text."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, target: CharacterIterator!, locale: ULocale!)\n            Initializes the iterator to use the language-specific rules and break iterator rules defined in the argument locale to search for argument pattern in the argument target text."
    },
    {
      "type": "ctor",
      "ctor": "<init>(pattern: String!, target: String!)\n            Initializes the iterator to use the language-specific rules and break iterator rules defined in the default locale to search for argument pattern in the argument target text."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "RuleBasedCollator",
      "code": "getCollator()",
      "desc": "Gets the RuleBasedCollator used for the language rules.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getIndex()",
      "desc": "Return the current index in the text being searched."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getPattern()",
      "desc": "Returns the pattern for which StringSearch is searching for.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isCanonical()",
      "desc": "Determines whether canonical matches (option 1, as described in the class documentation) is set."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Resets the iteration."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCanonical(allowCanonical: Boolean)",
      "desc": "Set the canonical match mode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setCollator(collator: RuleBasedCollator!)",
      "desc": "Sets the RuleBasedCollator to be used for language-specific searching."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setIndex(position: Int)",
      "desc": "Sets the position in the target text at which the next search will start."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setPattern(pattern: String!)",
      "desc": "Set the pattern to search for."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setTarget(text: CharacterIterator!)",
      "desc": "Set the target text to be searched."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "handleNext(position: Int)",
      "desc": "Abstract method which subclasses override to provide the mechanism for finding the next match in the target text."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "handlePrevious(position: Int)",
      "desc": "Abstract method which subclasses override to provide the mechanism for finding the previous match in the target text."
    },
    {
      "type": "inherited-constants",
      "from": "SearchIterator"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "SearchIterator"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "first()"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex()"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "following(position: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex()"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "BreakIterator!"
    },
    {
      "type": "inherited-methods",
      "from": "getBreakIterator()"
    },
    {
      "type": "inherited-methods",
      "from": "setBreakIterator"
    },
    {
      "type": "inherited-methods",
      "from": "BreakIterator"
    },
    {
      "type": "inherited-methods",
      "from": "setBreakIterator"
    },
    {
      "type": "inherited-methods",
      "from": "SearchIterator.ElementComparisonType!"
    },
    {
      "type": "inherited-methods",
      "from": "getElementComparisonType()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMatchLength()"
    },
    {
      "type": "inherited-methods",
      "from": "first"
    },
    {
      "type": "inherited-methods",
      "from": "next"
    },
    {
      "type": "inherited-methods",
      "from": "previous"
    },
    {
      "type": "inherited-methods",
      "from": "last"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getMatchStart()"
    },
    {
      "type": "inherited-methods",
      "from": "first"
    },
    {
      "type": "inherited-methods",
      "from": "next"
    },
    {
      "type": "inherited-methods",
      "from": "previous"
    },
    {
      "type": "inherited-methods",
      "from": "last"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "getMatchLength"
    },
    {
      "type": "inherited-methods",
      "from": "String!"
    },
    {
      "type": "inherited-methods",
      "from": "getMatchedText()"
    },
    {
      "type": "inherited-methods",
      "from": "first"
    },
    {
      "type": "inherited-methods",
      "from": "next"
    },
    {
      "type": "inherited-methods",
      "from": "previous"
    },
    {
      "type": "inherited-methods",
      "from": "last"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "CharacterIterator!"
    },
    {
      "type": "inherited-methods",
      "from": "getTarget()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isOverlapping()"
    },
    {
      "type": "inherited-methods",
      "from": "setOverlapping(boolean)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "last()"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "next()"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "preceding(position: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "isOverlapping"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "previous()"
    },
    {
      "type": "inherited-methods",
      "from": "getIndex"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "DONE"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setBreakIterator(breakiter: BreakIterator!)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setElementComparisonType(type: SearchIterator.ElementComparisonType!)"
    },
    {
      "type": "inherited-methods",
      "from": "ElementComparisonType#STANDARD_ELEMENT_COMPARISON"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setMatchLength(length: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "setOverlapping(allowOverlap: Boolean)"
    }
  ]
}