{
  "path": "javax.net.ssl",
  "name": "SSLEngine",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "beginHandshake()",
      "desc": "Initiates handshaking (initial or renegotiation) on this SSLEngine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "closeInbound()",
      "desc": "Signals that no more inbound network data will be sent to this SSLEngine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "closeOutbound()",
      "desc": "Signals that no more outbound application data will be sent on this SSLEngine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getApplicationProtocol()",
      "desc": "Returns the most recent application protocol value negotiated for this connection.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Runnable",
      "code": "getDelegatedTask()",
      "desc": "Returns a delegated Runnable task for this SSLEngine.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getEnableSessionCreation()",
      "desc": "Returns true if new SSL sessions may be established by this engine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getEnabledCipherSuites()",
      "desc": "Returns the names of the SSL cipher suites which are currently enabled for use on this engine.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getEnabledProtocols()",
      "desc": "Returns the names of the protocol versions which are currently enabled for use with this SSLEngine.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getHandshakeApplicationProtocol()",
      "desc": "Returns the application protocol value negotiated on a SSL/TLS handshake currently in progress.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BiFunction",
      "code": "getHandshakeApplicationProtocolSelector()",
      "desc": "Retrieves the callback function that selects an application protocol value during a SSL/TLS handshake.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLSession",
      "code": "getHandshakeSession()",
      "desc": "Returns the SSLSession being constructed during a SSL/TLS handshake.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SSLEngineResult.HandshakeStatus",
      "code": "getHandshakeStatus()",
      "desc": "Returns the current handshake status for this SSLEngine.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getNeedClientAuth()",
      "desc": "Returns true if the engine will require client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getPeerHost()",
      "desc": "Returns the host name of the peer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getPeerPort()",
      "desc": "Returns the port number of the peer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLParameters",
      "code": "getSSLParameters()",
      "desc": "Returns the SSLParameters in effect for this SSLEngine.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SSLSession",
      "code": "getSession()",
      "desc": "Returns the SSLSession in use in this SSLEngine.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getSupportedCipherSuites()",
      "desc": "Returns the names of the cipher suites which could be enabled for use on this engine.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Array",
      "code": "getSupportedProtocols()",
      "desc": "Returns the names of the protocols which could be enabled for use with this SSLEngine.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getUseClientMode()",
      "desc": "Returns true if the engine is set to use client mode when handshaking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "getWantClientAuth()",
      "desc": "Returns true if the engine will request client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isInboundDone()",
      "desc": "Returns whether unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer) will accept any more inbound data messages."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isOutboundDone()",
      "desc": "Returns whether wrap(java.nio.ByteBuffer,java.nio.ByteBuffer) will produce any more outbound data messages."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnableSessionCreation(flag: Boolean)",
      "desc": "Controls whether new SSL sessions may be established by this engine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnabledCipherSuites(suites: Array<String!>!)",
      "desc": "Sets the cipher suites enabled for use on this engine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setEnabledProtocols(protocols: Array<String!>!)",
      "desc": "Set the protocol versions enabled for use on this engine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHandshakeApplicationProtocolSelector(selector: BiFunction<SSLEngine!, MutableList<String!>!, String!>!)",
      "desc": "Registers a callback function that selects an application protocol value for a SSL/TLS handshake."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setNeedClientAuth(need: Boolean)",
      "desc": "Configures the engine to require client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSSLParameters(params: SSLParameters!)",
      "desc": "Applies SSLParameters to this engine."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setUseClientMode(mode: Boolean)",
      "desc": "Configures the engine to use client (or server) mode when handshaking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setWantClientAuth(want: Boolean)",
      "desc": "Configures the engine to request client authentication."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLEngineResult",
      "code": "unwrap(src: ByteBuffer!, dst: ByteBuffer!)",
      "desc": "Attempts to decode SSL/TLS network data into a plaintext application data buffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLEngineResult",
      "code": "unwrap(src: ByteBuffer!, dsts: Array<ByteBuffer!>!)",
      "desc": "Attempts to decode SSL/TLS network data into a sequence of plaintext application data buffers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SSLEngineResult",
      "code": "unwrap(src: ByteBuffer!, dsts: Array<ByteBuffer!>!, offset: Int, length: Int)",
      "desc": "Attempts to decode SSL/TLS network data into a subsequence of plaintext application data buffers.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLEngineResult",
      "code": "wrap(src: ByteBuffer!, dst: ByteBuffer!)",
      "desc": "Attempts to encode a buffer of plaintext application data into SSL/TLS network data.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SSLEngineResult",
      "code": "wrap(srcs: Array<ByteBuffer!>!, dst: ByteBuffer!)",
      "desc": "Attempts to encode plaintext bytes from a sequence of data buffers into SSL/TLS network data.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "SSLEngineResult",
      "code": "wrap(srcs: Array<ByteBuffer!>!, offset: Int, length: Int, dst: ByteBuffer!)",
      "desc": "Attempts to encode plaintext bytes from a subsequence of data buffers into SSL/TLS network data.",
      "symbol": "!"
    }
  ]
}