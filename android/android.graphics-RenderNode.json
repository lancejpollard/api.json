{
  "path": "android.graphics",
  "name": "RenderNode",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(name: String?)\n            Creates a new RenderNode that can be used to record batches of drawing operations, and store / apply render properties when drawn."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "RecordingCanvas",
      "code": "beginRecording(width: Int, height: Int)",
      "desc": "Starts recording a display list for the render node."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "RecordingCanvas",
      "code": "beginRecording()",
      "desc": "Same as beginRecording(int,int) with the width & height set to the RenderNode's own width & height."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "computeApproximateMemoryUsage()",
      "desc": "Gets the approximate memory usage of the RenderNode for debug purposes."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "discardDisplayList()",
      "desc": "Reset native resources."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "endRecording()",
      "desc": "` Ends the recording for this display list."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getAlpha()",
      "desc": "Returns the translucency level of this display list."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getAmbientShadowColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getBottom()",
      "desc": "Gets the bottom position for the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getCameraDistance()",
      "desc": "Returns the distance in Z of the camera for this RenderNode"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getClipToBounds()",
      "desc": "Returns whether or not the RenderNode is clipping to its bounds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getClipToOutline()",
      "desc": "See setClipToOutline(boolean)"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getElevation()",
      "desc": "See setElevation(float)"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": "Gets the height of the RenderNode, which is the bottom - top."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getInverseMatrix(outMatrix: Matrix)",
      "desc": "Gets the current transform inverted."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getLeft()",
      "desc": "Gets the left position for the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "getMatrix(outMatrix: Matrix)",
      "desc": "Gets the current transform matrix"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getPivotX()",
      "desc": "Returns the pivot value for this display list on the X axis, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getPivotY()",
      "desc": "Returns the pivot value for this display list on the Y axis, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getRight()",
      "desc": "Gets the right position for the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getRotationX()",
      "desc": "Returns the rotation value for this display list around the X axis, in degrees."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getRotationY()",
      "desc": "Returns the rotation value for this display list around the Y axis, in degrees."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getRotationZ()",
      "desc": "Returns the rotation value for this display list around the Z axis, in degrees."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getScaleX()",
      "desc": "Returns the scale value for this display list on the X axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getScaleY()",
      "desc": "Returns the scale value for this display list on the Y axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getSpotShadowColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getTop()",
      "desc": "Gets the top position for the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getTranslationX()",
      "desc": "Returns the translation value for this display list on the X axis, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getTranslationY()",
      "desc": "Returns the translation value for this display list on the Y axis, in pixels."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Float",
      "code": "getTranslationZ()",
      "desc": "Returns the translation value for this display list on the Z axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Long",
      "code": "getUniqueId()",
      "desc": "Returns the unique ID that identifies this RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getUseCompositingLayer()",
      "desc": "Gets whether or not a compositing layer is forced to be used."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": "Gets the width of the RenderNode, which is the right - left."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasDisplayList()",
      "desc": "Returns whether the RenderNode has a display list."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasIdentityMatrix()",
      "desc": "Whether or not the RenderNode has an identity transform."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasOverlappingRendering()",
      "desc": "Indicates whether the content of this display list overlaps."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasShadow()",
      "desc": "Checks if the RenderNode has a shadow."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isForceDarkAllowed()",
      "desc": "See setForceDarkAllowed(boolean)"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isPivotExplicitlySet()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "offsetLeftAndRight(offset: Int)",
      "desc": "Offsets the left and right positions for the RenderNode"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "offsetTopAndBottom(offset: Int)",
      "desc": "Offsets the top and bottom values for the RenderNode"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "resetPivot()",
      "desc": "Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setAlpha(alpha: Float)",
      "desc": "Sets the translucency level for the display list."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setAmbientShadowColor(color: Int)",
      "desc": "Sets the color of the ambient shadow that is drawn when the RenderNode has a positive Z or elevation value and is drawn inside of a Canvas#enableZ() section."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setCameraDistance(distance: Float)",
      "desc": "Sets the distance along the Z axis (orthogonal to the X/Y plane on which RenderNodes are drawn) from the camera to this RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setClipRect(rect: Rect?)",
      "desc": "Sets an additional clip on the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setClipToBounds(clipToBounds: Boolean)",
      "desc": "Set whether the Render node should clip itself to its bounds."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setClipToOutline(clipToOutline: Boolean)",
      "desc": "Enables or disables clipping to the outline."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setElevation(lift: Float)",
      "desc": "Sets the base elevation of this RenderNode in pixels"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setForceDarkAllowed(allow: Boolean)",
      "desc": "Sets whether or not to allow force dark to apply to this RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setHasOverlappingRendering(hasOverlappingRendering: Boolean)",
      "desc": "Sets whether the display list renders content which overlaps."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setOutline(outline: Outline?)",
      "desc": "Sets the outline, defining the shape that casts a shadow, and the path to be clipped if setClipToOutline is set."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setPivotX(pivotX: Float)",
      "desc": "Sets the pivot value for the display list on the X axis"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setPivotY(pivotY: Float)",
      "desc": "Sets the pivot value for the display list on the Y axis"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setPosition(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Sets the position of the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setPosition(position: Rect)",
      "desc": "Sets the position of the RenderNode."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setProjectBackwards(shouldProject: Boolean)",
      "desc": "Sets whether the RenderNode should be drawn immediately after the closest ancestor RenderNode containing a projection receiver."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setProjectionReceiver(shouldRecieve: Boolean)",
      "desc": "Sets whether the RenderNode is a projection receiver."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setRotationX(rotationX: Float)",
      "desc": "Sets the rotation value for the display list around the X axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setRotationY(rotationY: Float)",
      "desc": "Sets the rotation value for the display list around the Y axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setRotationZ(rotation: Float)",
      "desc": "Sets the rotation value for the display list around the Z axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setScaleX(scaleX: Float)",
      "desc": "Sets the scale value for the display list on the X axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setScaleY(scaleY: Float)",
      "desc": "Sets the scale value for the display list on the Y axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setSpotShadowColor(color: Int)",
      "desc": "Sets the color of the spot shadow that is drawn when the RenderNode has a positive Z or elevation value and is drawn inside of a Canvas#enableZ() section."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setTranslationX(translationX: Float)",
      "desc": "Sets the translation value for the display list on the X axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setTranslationY(translationY: Float)",
      "desc": "Sets the translation value for the display list on the Y axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setTranslationZ(translationZ: Float)",
      "desc": "Sets the translation value for the display list on the Z axis."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "setUseCompositingLayer(forceToLayer: Boolean, paint: Paint?)",
      "desc": "Controls whether or not to force this RenderNode to render to an intermediate buffer."
    }
  ]
}