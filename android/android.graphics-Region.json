{
  "path": "android.graphics",
  "name": "Region",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create an empty region"
    },
    {
      "type": "ctor",
      "ctor": "<init>(region: Region)\n            Return a copy of the specified region"
    },
    {
      "type": "ctor",
      "ctor": "<init>(r: Rect)\n            Return a region set to the specified rectangle"
    },
    {
      "type": "ctor",
      "ctor": "<init>(left: Int, top: Int, right: Int, bottom: Int)\n            Return a region set to the specified rectangle"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(x: Int, y: Int)",
      "desc": "Return true if the region contains the specified point"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Path",
      "code": "getBoundaryPath()",
      "desc": "Return the boundary of the region as a new Path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getBoundaryPath(path: Path)",
      "desc": "Set the path to the boundary of the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Rect",
      "code": "getBounds()",
      "desc": "Return a new Rect set to the bounds of the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getBounds(r: Rect)",
      "desc": "Set the Rect to the bounds of the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isComplex()",
      "desc": "Return true if the region contains more than one rectangle"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Return true if this region is empty"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isRect()",
      "desc": "Return true if the region contains a single rectangle"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "op(r: Rect, op: Region.Op)",
      "desc": "Perform the specified Op on this region and the specified rect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "op(left: Int, top: Int, right: Int, bottom: Int, op: Region.Op)",
      "desc": "Perform the specified Op on this region and the specified rect."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "op(region: Region, op: Region.Op)",
      "desc": "Perform the specified Op on this region and the specified region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "op(rect: Rect, region: Region, op: Region.Op)",
      "desc": "Set this region to the result of performing the Op on the specified rect and region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "op(region1: Region, region2: Region, op: Region.Op)",
      "desc": "Set this region to the result of performing the Op on the specified regions."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "quickContains(r: Rect)",
      "desc": "Return true if the region is a single rectangle (not complex) and it contains the specified rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "quickContains(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Return true if the region is a single rectangle (not complex) and it contains the specified rectangle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "quickReject(r: Rect)",
      "desc": "Return true if the region is empty, or if the specified rectangle does not intersect the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "quickReject(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Return true if the region is empty, or if the specified rectangle does not intersect the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "quickReject(rgn: Region!)",
      "desc": "Return true if the region is empty, or if the specified region does not intersect the region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "set(region: Region)",
      "desc": "Set the region to the specified region."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "set(r: Rect)",
      "desc": "Set the region to the specified rectangle"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "set(left: Int, top: Int, right: Int, bottom: Int)",
      "desc": "Set the region to the specified rectangle"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEmpty()",
      "desc": "Set the region to the empty region"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "setPath(path: Path, clip: Region)",
      "desc": "Set the region to the area described by the path and clip."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "translate(dx: Int, dy: Int)",
      "desc": "Translate the region by [dx, dy]."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "translate(dx: Int, dy: Int, dst: Region!)",
      "desc": "Set the dst region to the result of translating this region by [dx, dy]."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "union(r: Rect)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(p: Parcel!, flags: Int)",
      "desc": "Write the region and its pixels to the parcel."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Op",
      "desc": ""
    }
  ]
}