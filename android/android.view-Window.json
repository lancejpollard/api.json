{
  "path": "android.view",
  "name": "Window",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DECOR_CAPTION_SHADE_AUTO",
      "desc": "Flag for letting the theme drive the color of the window caption controls."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DECOR_CAPTION_SHADE_DARK",
      "desc": "Flag for setting dark-color controls on the window caption."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DECOR_CAPTION_SHADE_LIGHT",
      "desc": "Flag for setting light-color controls on the window caption."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DEFAULT_FEATURES",
      "desc": "The default features enabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_ACTION_BAR",
      "desc": "Flag for enabling the Action Bar."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_ACTION_BAR_OVERLAY",
      "desc": "Flag for requesting an Action Bar that overlays window content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_ACTION_MODE_OVERLAY",
      "desc": "Flag for specifying the behavior of action modes when an Action Bar is not present."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_ACTIVITY_TRANSITIONS",
      "desc": "Enables Activities to run Activity Transitions either through sending or receiving ActivityOptions bundle created with android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity, * android.util.Pair[]) or android.app.ActivityOptions#makeSceneTransitionAnimation( * android.app.Activity, View, String)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_CONTENT_TRANSITIONS",
      "desc": "Flag for requesting that window content changes should be animated using a TransitionManager."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_CONTEXT_MENU",
      "desc": "Flag for the context menu."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_CUSTOM_TITLE",
      "desc": "Flag for custom title."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_INDETERMINATE_PROGRESS",
      "desc": "Flag for indeterminate progress."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_LEFT_ICON",
      "desc": "Flag for having an icon on the left side of the title bar"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_NO_TITLE",
      "desc": "Flag for the \"no title\" feature, turning off the title at the top of the screen."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_OPTIONS_PANEL",
      "desc": "Flag for the \"options panel\" feature."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_PROGRESS",
      "desc": "Flag for the progress indicator feature."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_RIGHT_ICON",
      "desc": "Flag for having an icon on the right side of the title bar"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEATURE_SWIPE_TO_DISMISS",
      "desc": "Flag for requesting a decoration-free window that is dismissed by swiping from the left."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ID_ANDROID_CONTENT",
      "desc": "The ID that the main layout in the XML layout file should have."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME",
      "desc": "The transitionName for the navigation bar background View when a custom background is used."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_END",
      "desc": "Ending value for the (primary) progress."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_INDETERMINATE_OFF",
      "desc": "Flag for setting the progress bar's indeterminate mode off."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_INDETERMINATE_ON",
      "desc": "Flag for setting the progress bar's indeterminate mode on."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_SECONDARY_END",
      "desc": "Highest possible value for the secondary progress."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_SECONDARY_START",
      "desc": "Lowest possible value for the secondary progress."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_START",
      "desc": "Starting value for the (primary) progress."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_VISIBILITY_OFF",
      "desc": "Flag for setting the progress bar's visibility to GONE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PROGRESS_VISIBILITY_ON",
      "desc": "Flag for setting the progress bar's visibility to VISIBLE."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "STATUS_BAR_BACKGROUND_TRANSITION_NAME",
      "desc": "The transitionName for the status bar background View when a custom background is used."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "addContentView(view: View!, params: ViewGroup.LayoutParams!)",
      "desc": "Variation on setContentView(android.view.View,android.view.ViewGroup.LayoutParams) to add an additional content view to the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addFlags(flags: Int)",
      "desc": "Convenience function to set the flag bits as specified in flags, as per setFlags."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "addOnFrameMetricsAvailableListener(listener: Window.OnFrameMetricsAvailableListener, handler: Handler!)",
      "desc": "Set an observer to collect frame stats for each frame rendered in this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearFlags(flags: Int)",
      "desc": "Convenience function to clear the flag bits as specified in flags, as per setFlags."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "closeAllPanels()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "closePanel(featureId: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "findViewById(id: Int)",
      "desc": "Finds a view that was identified by the android:id XML attribute that was processed in android.app.Activity#onCreate."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getAllowEnterTransitionOverlap()",
      "desc": "Returns how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getAllowReturnTransitionOverlap()",
      "desc": "Returns how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "WindowManager.LayoutParams",
      "code": "getAttributes()",
      "desc": "Retrieve the current window attributes associated with this panel.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Window.Callback",
      "code": "getCallback()",
      "desc": "Return the current Callback interface for this window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getColorMode()",
      "desc": "Returns the requested color mode of the window, one of ActivityInfo#COLOR_MODE_DEFAULT, ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT or ActivityInfo#COLOR_MODE_HDR."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Window",
      "code": "getContainer()",
      "desc": "Return the container for this Window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Scene",
      "code": "getContentScene()",
      "desc": "Retrieve the Scene representing this window's current content.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Context",
      "code": "getContext()",
      "desc": "Return the Context this window policy is running in, for retrieving resources and other information.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "View",
      "code": "getCurrentFocus()",
      "desc": "Return the view in this Window that currently has focus, or null if there are none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "View",
      "code": "getDecorView()",
      "desc": "Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDefaultFeatures(context: Context!)",
      "desc": "Return the feature bits set by default on a window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getEnterTransition()",
      "desc": "Returns the transition used to move Views into the initial scene.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getExitTransition()",
      "desc": "Returns the Transition that will be used to move Views out of the scene when starting a new Activity.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowInsetsController",
      "code": "getInsetsController()",
      "desc": "",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "LayoutInflater",
      "code": "getLayoutInflater()",
      "desc": "Quick access to the LayoutInflater instance that this Window retrieved from its Context."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MediaController",
      "code": "getMediaController()",
      "desc": "Gets the MediaController that was previously set.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getNavigationBarColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNavigationBarDividerColor()",
      "desc": "Retrieves the color of the navigation bar divider."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getReenterTransition()",
      "desc": "Returns the Transition that will be used to move Views in to the scene when returning from a previously-started Activity.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getReturnTransition()",
      "desc": "Returns the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to android.app.Activity#finishAfterTransition().",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getSharedElementEnterTransition()",
      "desc": "Returns the Transition that will be used for shared elements transferred into the content Scene.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getSharedElementExitTransition()",
      "desc": "Returns the Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getSharedElementReenterTransition()",
      "desc": "Returns the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getSharedElementReturnTransition()",
      "desc": "Returns the Transition that will be used for shared elements transferred back to a calling Activity.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getSharedElementsUseOverlay()",
      "desc": "Returns true when shared elements should use an Overlay during shared element transitions or false when they should animate as part of the normal View hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getStatusBarColor()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getSystemGestureExclusionRects()",
      "desc": "Retrieve the list of areas within this window's coordinate space where the system should not intercept touch or other pointing device gestures.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTransitionBackgroundFadeDuration()",
      "desc": "Returns the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "TransitionManager",
      "code": "getTransitionManager()",
      "desc": "Retrieve the TransitionManager responsible for for default transitions in this window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getVolumeControlStream()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WindowManager",
      "code": "getWindowManager()",
      "desc": "Return the window manager allowing this Window to display its own windows.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "TypedArray",
      "code": "getWindowStyle()",
      "desc": "Return the android.R.styleable#Window attributes from this window's theme.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "hasChildren()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasFeature(feature: Int)",
      "desc": "Query for the availability of a certain feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "injectInputEvent(event: InputEvent!)",
      "desc": "Inject an event to window locally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "invalidatePanelMenu(featureId: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isActive()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isFloating()",
      "desc": "Return whether this window is being displayed with a floating style (based on the android.R.attr#windowIsFloating attribute in the style/theme)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isNavigationBarContrastEnforced()",
      "desc": "Returns whether the system is ensuring that the navigation bar has enough contrast when a fully transparent background is requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isShortcutKey(keyCode: Int, event: KeyEvent!)",
      "desc": "Is a keypress one of the defined shortcut keys for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isStatusBarContrastEnforced()",
      "desc": "Returns whether the system is ensuring that the status bar has enough contrast when a fully transparent background is requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isWideColorGamut()",
      "desc": "Returns true if this window's color mode is ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT, the display has a wide color gamut and this device supports wide color gamut rendering."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "makeActive()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "onConfigurationChanged(newConfig: Configuration!)",
      "desc": "Should be called when the configuration is changed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "openPanel(featureId: Int, event: KeyEvent!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "View",
      "code": "peekDecorView()",
      "desc": "Retrieve the current decor view, but only if it has already been created; otherwise returns null.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "performContextMenuIdentifierAction(id: Int, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "performPanelIdentifierAction(featureId: Int, id: Int, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "performPanelShortcut(featureId: Int, keyCode: Int, event: KeyEvent!, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "removeOnFrameMetricsAvailableListener(listener: Window.OnFrameMetricsAvailableListener!)",
      "desc": "Remove observer and stop listening to frame stats for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "requestFeature(featureId: Int)",
      "desc": "Enable extended screen features."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "T",
      "code": "requireViewById(id: Int)",
      "desc": "Finds a view that was identified by the android:id XML attribute that was processed in android.app.Activity#onCreate, or throws an IllegalArgumentException if the ID is invalid, or there is no matching view in the hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "restoreHierarchyState(savedInstanceState: Bundle!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Bundle",
      "code": "saveHierarchyState()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAllowEnterTransitionOverlap(allow: Boolean)",
      "desc": "Controls how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAllowReturnTransitionOverlap(allow: Boolean)",
      "desc": "Controls how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAttributes(a: WindowManager.LayoutParams!)",
      "desc": "Specify custom window attributes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setBackgroundDrawable(drawable: Drawable!)",
      "desc": "Change the background of this window to a custom Drawable."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundDrawableResource(resId: Int)",
      "desc": "Change the background of this window to a Drawable resource."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCallback(callback: Window.Callback!)",
      "desc": "Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setChildDrawable(featureId: Int, drawable: Drawable!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setChildInt(featureId: Int, value: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClipToOutline(clipToOutline: Boolean)",
      "desc": "Sets whether window content should be clipped to the outline of the window background."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setColorMode(colorMode: Int)",
      "desc": "Sets the requested color mode of the window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContainer(container: Window!)",
      "desc": "Set the container for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setContentView(layoutResID: Int)",
      "desc": "Convenience for setContentView(android.view.View,android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setContentView(view: View!)",
      "desc": "Convenience for setContentView(android.view.View,android.view.ViewGroup.LayoutParams) set the screen content to an explicit view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setContentView(view: View!, params: ViewGroup.LayoutParams!)",
      "desc": "Set the screen content to an explicit view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setDecorCaptionShade(decorCaptionShade: Int)",
      "desc": "Set what color should the caption controls be."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDecorFitsSystemWindows(decorFitsSystemWindows: Boolean)",
      "desc": "Sets whether the decor view should fit root-level content views for WindowInsets."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDimAmount(amount: Float)",
      "desc": "Set the amount of dim behind the window when using WindowManager.LayoutParams#FLAG_DIM_BEHIND."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setElevation(elevation: Float)",
      "desc": "Sets the window elevation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEnterTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used to move Views into the initial scene."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExitTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used to move Views out of the scene when starting a new Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeatureDrawable(featureId: Int, drawable: Drawable!)",
      "desc": "Set an explicit Drawable value for feature of this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeatureDrawableAlpha(featureId: Int, alpha: Int)",
      "desc": "Set a custom alpha value for the given drawable feature, controlling how much the background is visible through it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeatureDrawableResource(featureId: Int, resId: Int)",
      "desc": "Set the value for a drawable feature of this window, from a resource identifier."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeatureDrawableUri(featureId: Int, uri: Uri!)",
      "desc": "Set the value for a drawable feature of this window, from a URI."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setFeatureInt(featureId: Int, value: Int)",
      "desc": "Set the integer value for a feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFlags(flags: Int, mask: Int)",
      "desc": "Set the flags of the window, as per the WindowManager.LayoutParams flags."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFormat(format: Int)",
      "desc": "Set the format of window, as per the PixelFormat types."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGravity(gravity: Int)",
      "desc": "Set the gravity of the window, as per the Gravity constants."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIcon(resId: Int)",
      "desc": "Set the primary icon for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLayout(width: Int, height: Int)",
      "desc": "Set the width and height layout parameters of the window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLocalFocus(hasFocus: Boolean, inTouchMode: Boolean)",
      "desc": "Set focus locally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLogo(resId: Int)",
      "desc": "Set the logo for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setMediaController(controller: MediaController!)",
      "desc": "Sets a MediaController to send media keys and volume changes to."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setNavigationBarColor(color: Int)",
      "desc": "Sets the color of the navigation bar to {@param color}."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNavigationBarContrastEnforced(enforceContrast: Boolean)",
      "desc": "Sets whether the system should ensure that the navigation bar has enough contrast when a fully transparent background is requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNavigationBarDividerColor(dividerColor: Int)",
      "desc": "Shows a thin line of the specified color between the navigation bar and the app content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPreferMinimalPostProcessing(isPreferred: Boolean)",
      "desc": "If isPreferred is true, this method requests that the connected display does minimal post processing when this window is visible on the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReenterTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used to move Views in to the scene when returning from a previously-started Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setResizingCaptionDrawable(drawable: Drawable!)",
      "desc": "Set the drawable that is drawn underneath the caption during the resizing."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setRestrictedCaptionAreaListener(listener: Window.OnRestrictedCaptionAreaChangedListener!)",
      "desc": "Set a callback for changes of area where caption will draw its content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setReturnTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to android.app.Activity#finishAfterTransition()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSharedElementEnterTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used for shared elements transferred into the content Scene."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSharedElementExitTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used for shared elements after starting a new Activity before the shared elements are transferred to the called Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSharedElementReenterTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSharedElementReturnTransition(transition: Transition!)",
      "desc": "Sets the Transition that will be used for shared elements transferred back to a calling Activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSharedElementsUseOverlay(sharedElementsUseOverlay: Boolean)",
      "desc": "Sets whether or not shared elements should use an Overlay during shared element transitions."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSoftInputMode(mode: Int)",
      "desc": "Specify an explicit soft input mode to use for the window, as per WindowManager.LayoutParams#softInputMode."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setStatusBarColor(color: Int)",
      "desc": "Sets the color of the status bar to color."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setStatusBarContrastEnforced(ensureContrast: Boolean)",
      "desc": "Sets whether the system should ensure that the status bar has enough contrast when a fully transparent background is requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSustainedPerformanceMode(enable: Boolean)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSystemGestureExclusionRects(rects: MutableList<Rect!>)",
      "desc": "Sets a list of areas within this window's coordinate space where the system should not intercept touch or other pointing device gestures."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTitle(title: CharSequence!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setTitleColor(textColor: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTransitionBackgroundFadeDuration(fadeDurationMillis: Long)",
      "desc": "Sets the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTransitionManager(tm: TransitionManager!)",
      "desc": "Set the TransitionManager to use for default transitions in this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setType(type: Int)",
      "desc": "Set the type of the window, as per the WindowManager."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUiOptions(uiOptions: Int)",
      "desc": "Set extra options that will influence the UI for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUiOptions(uiOptions: Int, mask: Int)",
      "desc": "Set extra options that will influence the UI for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setVolumeControlStream(streamType: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowAnimations(resId: Int)",
      "desc": "Specify custom animations to use for the window, as per WindowManager.LayoutParams#windowAnimations."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowManager(wm: WindowManager!, appToken: IBinder!, appName: String!)",
      "desc": "Set the window manager for use by this Window to, for example, display panels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowManager(wm: WindowManager!, appToken: IBinder!, appName: String!, hardwareAccelerated: Boolean)",
      "desc": "Set the window manager for use by this Window to, for example, display panels."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "superDispatchGenericMotionEvent(event: MotionEvent!)",
      "desc": "Used by custom windows, such as Dialog, to pass the generic motion event further down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "superDispatchKeyEvent(event: KeyEvent!)",
      "desc": "Used by custom windows, such as Dialog, to pass the key press event further down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "superDispatchKeyShortcutEvent(event: KeyEvent!)",
      "desc": "Used by custom windows, such as Dialog, to pass the key shortcut press event further down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "superDispatchTouchEvent(event: MotionEvent!)",
      "desc": "Used by custom windows, such as Dialog, to pass the touch screen event further down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "superDispatchTrackballEvent(event: MotionEvent!)",
      "desc": "Used by custom windows, such as Dialog, to pass the trackball event further down the view hierarchy."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "takeInputQueue(callback: InputQueue.Callback!)",
      "desc": "Take ownership of this window's InputQueue."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "takeKeyEvents(get: Boolean)",
      "desc": "Request that key events come to this activity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "takeSurface(callback: SurfaceHolder.Callback2!)",
      "desc": "Take ownership of this window's surface."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "togglePanel(featureId: Int, event: KeyEvent!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "getFeatures()",
      "desc": "Return the feature bits that are enabled."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "getForcedWindowFlags()",
      "desc": "Return the window flags that have been explicitly set by the client, so will not be modified by getDecorView."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Int",
      "code": "getLocalFeatures()",
      "desc": "Return the feature bits that are being implemented by this Window."
    },
    {
      "type": "method",
      "status": "protected",
      "identifier": "Boolean",
      "code": "hasSoftInputMode()",
      "desc": "Has the app specified their own soft input mode?"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "onActive()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDefaultWindowFormat(format: Int)",
      "desc": "Set the default format of window, as per the PixelFormat types."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "Callback",
      "desc": "API from a Window back to its caller."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnFrameMetricsAvailableListener",
      "desc": "Callback for clients that want frame timing information for each frame rendered by the Window."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnRestrictedCaptionAreaChangedListener",
      "desc": "Callback for clients that want to be aware of where caption draws content."
    }
  ]
}