{
  "path": "android.security.keystore",
  "name": "KeyProtection",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getBlockModes()",
      "desc": "Gets the set of block modes (e.g.,",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getDigests()",
      "desc": "Gets the set of digest algorithms (e.g.,",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getEncryptionPaddings()",
      "desc": "Gets the set of padding schemes (e.g.,",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Date",
      "code": "getKeyValidityForConsumptionEnd()",
      "desc": "Gets the time instant after which the key is no long valid for decryption and verification.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Date",
      "code": "getKeyValidityForOriginationEnd()",
      "desc": "Gets the time instant after which the key is no long valid for encryption and signing.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Date",
      "code": "getKeyValidityStart()",
      "desc": "Gets the time instant before which the key is not yet valid.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getPurposes()",
      "desc": "Gets the set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Array",
      "code": "getSignaturePaddings()",
      "desc": "Gets the set of padding schemes (e.g.,",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getUserAuthenticationType()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getUserAuthenticationValidityDurationSeconds()",
      "desc": "Gets the duration of time (seconds) for which this key is authorized to be used after the user is successfully authenticated."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isDigestsSpecified()",
      "desc": "Returns true if the set of digest algorithms with which the key can be used has been specified."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isInvalidatedByBiometricEnrollment()",
      "desc": "Returns true if the key is irreversibly invalidated when a new biometric is enrolled or all enrolled biometrics are removed."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isRandomizedEncryptionRequired()",
      "desc": "Returns true if encryption using this key must be sufficiently randomized to produce different ciphertexts for the same plaintext every time."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUnlockedDeviceRequired()",
      "desc": "Returns true if the screen must be unlocked for this key to be used for decryption or signing."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUserAuthenticationRequired()",
      "desc": "Returns true if the key is authorized to be used only if the user has been authenticated."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUserAuthenticationValidWhileOnBody()",
      "desc": "Returns true if the key will be de-authorized when the device is removed from the user's body."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUserConfirmationRequired()",
      "desc": "Returns true if the key is authorized to be used only for messages confirmed by the user."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isUserPresenceRequired()",
      "desc": "Returns true if the key is authorized to be used only if a test of user presence has been performed between the Signature.initSign() and Signature.sign() calls."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Builder",
      "desc": "Builder of KeyProtection instances."
    }
  ]
}