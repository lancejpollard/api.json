{
  "path": "android.graphics",
  "name": "PathMeasure",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "POSITION_MATRIX_FLAG",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "TANGENT_MATRIX_FLAG",
      "desc": ""
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create an empty PathMeasure object."
    },
    {
      "type": "ctor",
      "ctor": "<init>(path: Path!, forceClosed: Boolean)\n            Create a PathMeasure object associated with the specified path object (already created and specified)."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLength()",
      "desc": "Return the total length of the current contour, or 0 if no path is associated with this measure object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getMatrix(distance: Float, matrix: Matrix!, flags: Int)",
      "desc": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getPosTan(distance: Float, pos: FloatArray!, tan: FloatArray!)",
      "desc": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding position and tangent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getSegment(startD: Float, stopD: Float, dst: Path!, startWithMoveTo: Boolean)",
      "desc": "Given a start and stop distance, return in dst the intervening segment(s)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClosed()",
      "desc": "Return true if the current contour is closed()"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "nextContour()",
      "desc": "Move to the next contour in the path."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setPath(path: Path!, forceClosed: Boolean)",
      "desc": "Assign a new path, or null to have none."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    }
  ]
}