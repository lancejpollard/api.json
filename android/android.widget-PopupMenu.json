{
  "path": "android.widget",
  "name": "PopupMenu",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, anchor: View!)\n            Constructor to create a new popup menu with an anchor view."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, anchor: View!, gravity: Int)\n            Constructor to create a new popup menu with an anchor view and alignment gravity."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, anchor: View!, gravity: Int, popupStyleAttr: Int, popupStyleRes: Int)\n            Constructor a create a new popup menu with a specific style."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dismiss()",
      "desc": "Dismiss the menu popup."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View.OnTouchListener",
      "code": "getDragToOpenListener()",
      "desc": "Returns an OnTouchListener that can be added to the anchor view to implement drag-to-open behavior.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getGravity()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Menu",
      "code": "getMenu()",
      "desc": "Returns the Menu associated with this popup.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MenuInflater",
      "code": "getMenuInflater()",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "inflate(menuRes: Int)",
      "desc": "Inflate a menu resource into this PopupMenu."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setForceShowIcon(forceShowIcon: Boolean)",
      "desc": "Sets whether the popup menu's adapter is forced to show icons in the menu item views."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setGravity(gravity: Int)",
      "desc": "Sets the gravity used to align the popup window to its anchor view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDismissListener(listener: PopupMenu.OnDismissListener!)",
      "desc": "Sets a listener that will be notified when this menu is dismissed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnMenuItemClickListener(listener: PopupMenu.OnMenuItemClickListener!)",
      "desc": "Sets a listener that will be notified when the user selects an item from the menu."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "show()",
      "desc": "Show the menu popup anchored to the view specified during construction."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDismissListener",
      "desc": "Callback interface used to notify the application that the menu has closed."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnMenuItemClickListener",
      "desc": "Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners."
    }
  ]
}