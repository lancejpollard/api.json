{
  "path": "android.icu.text",
  "name": "Normalizer2",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuilder",
      "code": "append(first: StringBuilder!, second: CharSequence!)",
      "desc": "Appends the second string to the first string (merging them at the boundary) and returns the first string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "composePair(a: Int, b: Int)",
      "desc": "Performs pairwise composition of a & b and returns the composite if there is one."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getCombiningClass(c: Int)",
      "desc": "Gets the combining class of c."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "String",
      "code": "getDecomposition(c: Int)",
      "desc": "Gets the decomposition mapping of c.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getInstance(data: InputStream!, name: String!, mode: Normalizer2.Mode!)",
      "desc": "Returns a Normalizer2 instance which uses the specified data file (an ICU data file if data=null, or else custom binary data) and which composes or decomposes text according to the specified mode.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getNFCInstance()",
      "desc": "Returns a Normalizer2 instance for Unicode NFC normalization.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getNFDInstance()",
      "desc": "Returns a Normalizer2 instance for Unicode NFD normalization.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getNFKCCasefoldInstance()",
      "desc": "Returns a Normalizer2 instance for Unicode NFKC_Casefold normalization.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getNFKCInstance()",
      "desc": "Returns a Normalizer2 instance for Unicode NFKC normalization.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Normalizer2",
      "code": "getNFKDInstance()",
      "desc": "Returns a Normalizer2 instance for Unicode NFKD normalization.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getRawDecomposition(c: Int)",
      "desc": "Gets the raw decomposition mapping of c.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "hasBoundaryAfter(c: Int)",
      "desc": "Tests if the character always has a normalization boundary after it, regardless of context."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "hasBoundaryBefore(c: Int)",
      "desc": "Tests if the character always has a normalization boundary before it, regardless of context."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isInert(c: Int)",
      "desc": "Tests if the character is normalization-inert."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isNormalized(s: CharSequence!)",
      "desc": "Tests if the string is normalized."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "normalize(src: CharSequence!)",
      "desc": "Returns the normalized form of the source string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuilder",
      "code": "normalize(src: CharSequence!, dest: StringBuilder!)",
      "desc": "Writes the normalized form of the source string to the destination string (replacing its contents) and returns the destination string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Appendable",
      "code": "normalize(src: CharSequence!, dest: Appendable!)",
      "desc": "Writes the normalized form of the source string to the destination Appendable and returns the destination Appendable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "StringBuilder",
      "code": "normalizeSecondAndAppend(first: StringBuilder!, second: CharSequence!)",
      "desc": "Appends the normalized form of the second string to the first string (merging them at the boundary) and returns the first string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Normalizer.QuickCheckResult",
      "code": "quickCheck(s: CharSequence!)",
      "desc": "Tests if the string is normalized.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "spanQuickCheckYes(s: CharSequence!)",
      "desc": "Returns the end of the normalized substring of the input string."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "code": "Mode",
      "desc": "Constants for normalization modes."
    }
  ]
}