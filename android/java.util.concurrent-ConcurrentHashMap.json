{
  "path": "java.util.concurrent",
  "name": "ConcurrentHashMap",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new, empty map with the default initial table size (16)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int)\n            Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize."
    },
    {
      "type": "ctor",
      "ctor": "<init>(m: MutableMap<out K, out V>)\n            Creates a new map with the same mappings as the given map."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int, loadFactor: Float)\n            Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(initialCapacity: Int, loadFactor: Float, concurrencyLevel: Int)\n            Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), table density (loadFactor), and number of concurrently updating threads (concurrencyLevel)."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clear()",
      "desc": "Removes all of the mappings from this map."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "compute(key: K, remappingFunction: BiFunction<in K, in V?, out V?>)",
      "desc": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "computeIfAbsent(key: K, mappingFunction: Function<in K, out V>)",
      "desc": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "computeIfPresent(key: K, remappingFunction: BiFunction<in K, in V, out V?>)",
      "desc": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "contains(value: Any)",
      "desc": "Tests if some key maps into the specified value in this table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsKey(key: K)",
      "desc": "Tests if the specified object is a key in this table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsKey(key: K)",
      "desc": "Tests if the specified object is a key in this table."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsValue(value: V)",
      "desc": "Returns true if this map maps one or more keys to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "containsValue(value: V)",
      "desc": "Returns true if this map maps one or more keys to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "elements()",
      "desc": "Returns an enumeration of the values in this table.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares the specified object with this map for equality."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(action: BiConsumer<in K, in V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(parallelismThreshold: Long, action: BiConsumer<in K, in V>)",
      "desc": "Performs the given action for each (key, value)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEach(parallelismThreshold: Long, transformer: BiFunction<in K, in V, out U>, action: Consumer<in U>)",
      "desc": "Performs the given action for each non-null transformation of each (key, value)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachEntry(parallelismThreshold: Long, action: Consumer<in MutableEntry<K, V>!>)",
      "desc": "Performs the given action for each entry."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachEntry(parallelismThreshold: Long, transformer: Function<MutableEntry<K, V>!, out U>, action: Consumer<in U>)",
      "desc": "Performs the given action for each non-null transformation of each entry."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachKey(parallelismThreshold: Long, action: Consumer<in K>)",
      "desc": "Performs the given action for each key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachKey(parallelismThreshold: Long, transformer: Function<in K, out U>, action: Consumer<in U>)",
      "desc": "Performs the given action for each non-null transformation of each key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachValue(parallelismThreshold: Long, action: Consumer<in V>)",
      "desc": "Performs the given action for each value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "forEachValue(parallelismThreshold: Long, transformer: Function<in V, out U>, action: Consumer<in U>)",
      "desc": "Performs the given action for each non-null transformation of each value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "get(key: K)",
      "desc": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "get(key: K)",
      "desc": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "getOrDefault(key: K, defaultValue: V)",
      "desc": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns the hash code value for this Map, i."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isEmpty()",
      "desc": "Returns true if this map contains no key-value mappings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ConcurrentHashMap.KeySetView",
      "code": "keySet(mappedValue: V)",
      "desc": "Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e.,",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Enumeration",
      "code": "keys()",
      "desc": "Returns an enumeration of the keys in this table.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "mappingCount()",
      "desc": "Returns the number of mappings."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "merge(key: K, value: V, remappingFunction: BiFunction<in V, in V, out V?>)",
      "desc": "If the specified key is not already associated with a (non-null) value, associates it with the given value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ConcurrentHashMap.KeySetView",
      "code": "newKeySet()",
      "desc": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ConcurrentHashMap.KeySetView",
      "code": "newKeySet(initialCapacity: Int)",
      "desc": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "put(key: K, value: V)",
      "desc": "Maps the specified key to the specified value in this table.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "putAll(from: Map<out K, V>)",
      "desc": "Copies all of the mappings from the specified map to this one."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "putIfAbsent(key: K, value: V)",
      "desc": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "reduce(parallelismThreshold: Long, transformer: BiFunction<in K, in V, out U>, reducer: BiFunction<in U, in U, out U>)",
      "desc": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableEntry",
      "code": "reduceEntries(parallelismThreshold: Long, reducer: BiFunction<MutableEntry<K, V>!, MutableEntry<K, V>!, out MutableEntry<K, V>!>)",
      "desc": "Returns the result of accumulating all entries using the given reducer to combine values, or null if none.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "reduceEntries(parallelismThreshold: Long, transformer: Function<MutableEntry<K, V>!, out U>, reducer: BiFunction<in U, in U, out U>)",
      "desc": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "reduceEntriesToDouble(parallelismThreshold: Long, transformer: ToDoubleFunction<MutableEntry<K, V>!>, basis: Double, reducer: DoubleBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "reduceEntriesToInt(parallelismThreshold: Long, transformer: ToIntFunction<MutableEntry<K, V>!>, basis: Int, reducer: IntBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "reduceEntriesToLong(parallelismThreshold: Long, transformer: ToLongFunction<MutableEntry<K, V>!>, basis: Long, reducer: LongBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "K",
      "code": "reduceKeys(parallelismThreshold: Long, reducer: BiFunction<in K, in K, out K>)",
      "desc": "Returns the result of accumulating all keys using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "reduceKeys(parallelismThreshold: Long, transformer: Function<in K, out U>, reducer: BiFunction<in U, in U, out U>)",
      "desc": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "reduceKeysToDouble(parallelismThreshold: Long, transformer: ToDoubleFunction<in K>, basis: Double, reducer: DoubleBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "reduceKeysToInt(parallelismThreshold: Long, transformer: ToIntFunction<in K>, basis: Int, reducer: IntBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "reduceKeysToLong(parallelismThreshold: Long, transformer: ToLongFunction<in K>, basis: Long, reducer: LongBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "reduceToDouble(parallelismThreshold: Long, transformer: ToDoubleBiFunction<in K, in V>, basis: Double, reducer: DoubleBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "reduceToInt(parallelismThreshold: Long, transformer: ToIntBiFunction<in K, in V>, basis: Int, reducer: IntBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "reduceToLong(parallelismThreshold: Long, transformer: ToLongBiFunction<in K, in V>, basis: Long, reducer: LongBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "reduceValues(parallelismThreshold: Long, reducer: BiFunction<in V, in V, out V>)",
      "desc": "Returns the result of accumulating all values using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "reduceValues(parallelismThreshold: Long, transformer: Function<in V, out U>, reducer: BiFunction<in U, in U, out U>)",
      "desc": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "reduceValuesToDouble(parallelismThreshold: Long, transformer: ToDoubleFunction<in V>, basis: Double, reducer: DoubleBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "reduceValuesToInt(parallelismThreshold: Long, transformer: ToIntFunction<in V>, basis: Int, reducer: IntBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "reduceValuesToLong(parallelismThreshold: Long, transformer: ToLongFunction<in V>, basis: Long, reducer: LongBinaryOperator)",
      "desc": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "remove(key: K)",
      "desc": "Removes the key (and its corresponding value) from this map.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remove(key: K, value: V)",
      "desc": "Removes the entry for the specified key only if it is currently mapped to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "remove(key: K)",
      "desc": "Removes the key (and its corresponding value) from this map.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "replace(key: K, oldValue: V, newValue: V)",
      "desc": "Replaces the entry for the specified key only if currently mapped to the specified value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "replace(key: K, value: V)",
      "desc": "Replaces the entry for the specified key only if it is currently mapped to some value.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "replaceAll(function: BiFunction<in K, in V, out V>)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "search(parallelismThreshold: Long, searchFunction: BiFunction<in K, in V, out U>)",
      "desc": "Returns a non-null result from applying the given search function on each (key, value), or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "searchEntries(parallelismThreshold: Long, searchFunction: Function<MutableEntry<K, V>!, out U>)",
      "desc": "Returns a non-null result from applying the given search function on each entry, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "searchKeys(parallelismThreshold: Long, searchFunction: Function<in K, out U>)",
      "desc": "Returns a non-null result from applying the given search function on each key, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "U",
      "code": "searchValues(parallelismThreshold: Long, searchFunction: Function<in V, out U>)",
      "desc": "Returns a non-null result from applying the given search function on each value, or null if none.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string representation of this map."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "KeySetView",
      "desc": "A view of a ConcurrentHashMap as a Set of keys, in which additions may optionally be enabled by mapping to a common value."
    },
    {
      "type": "inherited-methods",
      "from": "AbstractMap"
    },
    {
      "type": "inherited-methods",
      "from": "Any"
    },
    {
      "type": "inherited-methods",
      "from": "clone()"
    }
  ]
}