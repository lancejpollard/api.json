{
  "path": "android.view",
  "name": "KeyCharacterMap",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ALPHA",
      "desc": "A keyboard with all the letters, and maybe some numbers."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BUILT_IN_KEYBOARD",
      "desc": "The id of the device's primary built in keyboard is always 0."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "COMBINING_ACCENT",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "COMBINING_ACCENT_MASK",
      "desc": "Mask the return value from get(int,int) with this value to get a printable representation of the accent character of a \"dead key."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FULL",
      "desc": "A full PC-style keyboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "HEX_INPUT",
      "desc": "This private-use character is used to trigger Unicode character input by hex digits."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODIFIER_BEHAVIOR_CHORDED",
      "desc": "Modifier keys may be chorded with character keys."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED",
      "desc": "Modifier keys may be chorded with character keys or they may toggle into latched or locked states when pressed independently."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NUMERIC",
      "desc": "A numeric (12-key) keyboard."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Char",
      "code": "PICKER_DIALOG_INPUT",
      "desc": "This private-use character is used to bring up a character picker for miscellaneous symbols."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "PREDICTIVE",
      "desc": "A keyboard with all the letters, but with more than one letter per key."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SPECIAL_FUNCTION",
      "desc": "A keyboard that is only used to control special functions rather than for typing."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "VIRTUAL_KEYBOARD",
      "desc": "The id of a generic virtual keyboard with a full layout that can be used to synthesize key events."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "deviceHasKey(keyCode: Int)",
      "desc": "Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BooleanArray",
      "code": "deviceHasKeys(keyCodes: IntArray!)",
      "desc": "Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "get(keyCode: Int, metaState: Int)",
      "desc": "Gets the Unicode character generated by the specified key and meta key state combination."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getDeadChar(accent: Int, c: Int)",
      "desc": "Get the character that is produced by combining the dead key producing accent with the key producing character c."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getDisplayLabel(keyCode: Int)",
      "desc": "Gets the primary character for this key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getEvents(chars: CharArray!)",
      "desc": "Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getKeyData(keyCode: Int, results: KeyCharacterMap.KeyData!)",
      "desc": "Get the character conversion data for a given key code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getKeyboardType()",
      "desc": "Gets the keyboard type."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMatch(keyCode: Int, chars: CharArray!)",
      "desc": "Gets the first character in the character array that can be generated by the specified key code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getMatch(keyCode: Int, chars: CharArray!, metaState: Int)",
      "desc": "Gets the first character in the character array that can be generated by the specified key code."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getModifierBehavior()",
      "desc": "Gets a constant that describes the behavior of this keyboard's modifier keys such as KeyEvent#KEYCODE_SHIFT_LEFT."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Char",
      "code": "getNumber(keyCode: Int)",
      "desc": "Gets the number or symbol associated with the key."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isPrintingKey(keyCode: Int)",
      "desc": "Returns true if the specified key produces a glyph."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "KeyCharacterMap",
      "code": "load(deviceId: Int)",
      "desc": "Loads the key character maps for the keyboard with the specified device id.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(out: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Unit",
      "code": "finalize()",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "KeyData",
      "desc": "Describes the character mappings associated with a key."
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "UnavailableException",
      "desc": "Thrown by KeyCharacterMap#load when a key character map could not be loaded."
    }
  ]
}