{
  "path": "android.net.wifi.p2p",
  "name": "WifiP2pManager",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "BUSY",
      "desc": "Passed with ActionListener#onFailure."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "ERROR",
      "desc": "Passed with ActionListener#onFailure."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_DISCOVERY_STATE",
      "desc": "The lookup key for an int that indicates whether p2p discovery has started or stopped."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_NETWORK_INFO",
      "desc": "The lookup key for a android.net.NetworkInfo object associated with the p2p network."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_P2P_DEVICE_LIST",
      "desc": "The lookup key for a android.net.wifi.p2p.WifiP2pDeviceList object representing the new peer list when WIFI_P2P_PEERS_CHANGED_ACTION broadcast is sent."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_WIFI_P2P_DEVICE",
      "desc": "The lookup key for a android.net.wifi.p2p.WifiP2pDevice object Retrieve with android.content.Intent#getParcelableExtra(String)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_WIFI_P2P_GROUP",
      "desc": "The lookup key for a android.net.wifi.p2p.WifiP2pGroup object associated with the p2p network."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_WIFI_P2P_INFO",
      "desc": "The lookup key for a android.net.wifi.p2p.WifiP2pInfo object Retrieve with android.content.Intent#getParcelableExtra(String)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "EXTRA_WIFI_STATE",
      "desc": "The lookup key for an int that indicates whether Wi-Fi p2p is enabled or disabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "NO_SERVICE_REQUESTS",
      "desc": "Passed with ActionListener#onFailure."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "P2P_UNSUPPORTED",
      "desc": "Passed with ActionListener#onFailure."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_CONNECTION_CHANGED_ACTION",
      "desc": "Broadcast intent action indicating that the state of Wi-Fi p2p connectivity has changed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_DISCOVERY_CHANGED_ACTION",
      "desc": "Broadcast intent action indicating that peer discovery has either started or stopped."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "WIFI_P2P_DISCOVERY_STARTED",
      "desc": "p2p discovery has started"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "WIFI_P2P_DISCOVERY_STOPPED",
      "desc": "p2p discovery has stopped"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_PEERS_CHANGED_ACTION",
      "desc": "Broadcast intent action indicating that the available peer list has changed."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_STATE_CHANGED_ACTION",
      "desc": "Broadcast intent action to indicate whether Wi-Fi p2p is enabled or disabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "WIFI_P2P_STATE_DISABLED",
      "desc": "Wi-Fi p2p is disabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "WIFI_P2P_STATE_ENABLED",
      "desc": "Wi-Fi p2p is enabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "WIFI_P2P_THIS_DEVICE_CHANGED_ACTION",
      "desc": "Broadcast intent action indicating that this device details have changed."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addLocalService(c: WifiP2pManager.Channel!, servInfo: WifiP2pServiceInfo!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Register a local service for service discovery."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "addServiceRequest(c: WifiP2pManager.Channel!, req: WifiP2pServiceRequest!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Add a service discovery request."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "cancelConnect(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Cancel any ongoing p2p group negotiation"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearLocalServices(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Clear all registered local services of service discovery."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "clearServiceRequests(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Clear all registered service discovery requests."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "connect(c: WifiP2pManager.Channel!, config: WifiP2pConfig!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Start a p2p connection to a device with the specified configuration."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "createGroup(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Create a p2p group with the current device as the group owner."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "createGroup(c: WifiP2pManager.Channel, config: WifiP2pConfig?, listener: WifiP2pManager.ActionListener?)",
      "desc": "Create a p2p group with the current device as the group owner."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "discoverPeers(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Initiate peer discovery."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "discoverServices(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Initiate service discovery."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "WifiP2pManager.Channel",
      "code": "initialize(srcContext: Context!, srcLooper: Looper!, listener: WifiP2pManager.ChannelListener!)",
      "desc": "Registers the application with the Wi-Fi framework.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeGroup(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Remove the current p2p group."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeLocalService(c: WifiP2pManager.Channel!, servInfo: WifiP2pServiceInfo!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Remove a registered local service added with addLocalService"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "removeServiceRequest(c: WifiP2pManager.Channel!, req: WifiP2pServiceRequest!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Remove a specified service discovery request added with addServiceRequest"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestConnectionInfo(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ConnectionInfoListener!)",
      "desc": "Request device connection info."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestDeviceInfo(c: WifiP2pManager.Channel, listener: WifiP2pManager.DeviceInfoListener)",
      "desc": "Request Device Info"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestDiscoveryState(c: WifiP2pManager.Channel, listener: WifiP2pManager.DiscoveryStateListener)",
      "desc": "Request p2p discovery state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestGroupInfo(c: WifiP2pManager.Channel!, listener: WifiP2pManager.GroupInfoListener!)",
      "desc": "Request p2p group info."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestNetworkInfo(c: WifiP2pManager.Channel, listener: WifiP2pManager.NetworkInfoListener)",
      "desc": "Request network info."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestP2pState(c: WifiP2pManager.Channel, listener: WifiP2pManager.P2pStateListener)",
      "desc": "Request p2p enabled state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "requestPeers(c: WifiP2pManager.Channel!, listener: WifiP2pManager.PeerListListener!)",
      "desc": "Request the current list of peers."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDnsSdResponseListeners(c: WifiP2pManager.Channel!, servListener: WifiP2pManager.DnsSdServiceResponseListener!, txtListener: WifiP2pManager.DnsSdTxtRecordListener!)",
      "desc": "Register a callback to be invoked on receiving Bonjour service discovery response."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setServiceResponseListener(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ServiceResponseListener!)",
      "desc": "Register a callback to be invoked on receiving service discovery response."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setUpnpServiceResponseListener(c: WifiP2pManager.Channel!, listener: WifiP2pManager.UpnpServiceResponseListener!)",
      "desc": "Register a callback to be invoked on receiving upnp service discovery response."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "stopPeerDiscovery(c: WifiP2pManager.Channel!, listener: WifiP2pManager.ActionListener!)",
      "desc": "Stop an ongoing peer discovery"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ActionListener",
      "desc": "Interface for callback invocation on an application action"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Channel",
      "desc": "A channel that connects the application to the Wifi p2p framework."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ChannelListener",
      "desc": "Interface for callback invocation when framework channel is lost"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ConnectionInfoListener",
      "desc": "Interface for callback invocation when connection info is available"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DeviceInfoListener",
      "desc": "Interface for callback invocation when android.net.wifi.p2p.WifiP2pDevice is available in response to requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DiscoveryStateListener",
      "desc": "Interface for callback invocation when p2p state is available in response to requestDiscoveryState."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DnsSdServiceResponseListener",
      "desc": "Interface for callback invocation when Bonjour service discovery response is received"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DnsSdTxtRecordListener",
      "desc": "Interface for callback invocation when Bonjour TXT record is available for a service"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "GroupInfoListener",
      "desc": "Interface for callback invocation when group info is available"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "NetworkInfoListener",
      "desc": "Interface for callback invocation when android.net.NetworkInfo is available in response to requestNetworkInfo."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "P2pStateListener",
      "desc": "Interface for callback invocation when p2p state is available in response to requestP2pState."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "PeerListListener",
      "desc": "Interface for callback invocation when peer list is available"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ServiceResponseListener",
      "desc": "Interface for callback invocation when service discovery response other than Upnp or Bonjour is received"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "UpnpServiceResponseListener",
      "desc": "Interface for callback invocation when upnp service discovery response is received"
    }
  ]
}