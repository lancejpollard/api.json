{
  "path": "android.accessibilityservice",
  "name": "AccessibilityServiceInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_CONTROL_MAGNIFICATION",
      "desc": "Capability: This accessibility service can control display magnification."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_PERFORM_GESTURES",
      "desc": "Capability: This accessibility service can perform gestures."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS",
      "desc": "Capability: This accessibility service can request to filter the key event stream."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES",
      "desc": "Capability: This accessibility service can capture gestures from the fingerprint sensor"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION",
      "desc": "Capability: This accessibility service can request touch exploration mode in which touched items are spoken aloud and the UI can be explored via gestures."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT",
      "desc": "Capability: This accessibility service can retrieve the active window content."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "CAPABILITY_CAN_TAKE_SCREENSHOT",
      "desc": "Capability: This accessibility service can take screenshot."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DEFAULT",
      "desc": "If an AccessibilityService is the default for a given type."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_ALL_MASK",
      "desc": "Mask for all feedback types."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_AUDIBLE",
      "desc": "Denotes audible (not spoken) feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_BRAILLE",
      "desc": "Denotes braille feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_GENERIC",
      "desc": "Denotes generic feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_HAPTIC",
      "desc": "Denotes haptic feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_SPOKEN",
      "desc": "Denotes spoken feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FEEDBACK_VISUAL",
      "desc": "Denotes visual feedback."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_ENABLE_ACCESSIBILITY_VOLUME",
      "desc": "This flag requests that all audio tracks system-wide with android.media.AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY be controlled by the android.media.AudioManager#STREAM_ACCESSIBILITY volume."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_INCLUDE_NOT_IMPORTANT_VIEWS",
      "desc": "If this flag is set the system will regard views that are not important for accessibility in addition to the ones that are important for accessibility."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REPORT_VIEW_IDS",
      "desc": "This flag requests that the AccessibilityNodeInfos obtained by an AccessibilityService contain the id of the source view."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_ACCESSIBILITY_BUTTON",
      "desc": "This flag indicates to the system that the accessibility service requests that an accessibility button be shown within the system's navigation area, if available."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY",
      "desc": ""
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_FILTER_KEY_EVENTS",
      "desc": "This flag requests from the system to filter key events."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_FINGERPRINT_GESTURES",
      "desc": "This flag requests that all fingerprint gestures be sent to the accessibility service."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_MULTI_FINGER_GESTURES",
      "desc": "This flag requests that when when FLAG_REQUEST_TOUCH_EXPLORATION_MODE is enabled, multi-finger gestures are also enabled."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK",
      "desc": "This flag requests that accessibility shortcut warning dialog has spoken feedback when dialog is shown."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_REQUEST_TOUCH_EXPLORATION_MODE",
      "desc": "This flag requests that the system gets into touch exploration mode."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_RETRIEVE_INTERACTIVE_WINDOWS",
      "desc": "This flag indicates to the system that the accessibility service wants to access content of all interactive windows."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "FLAG_SERVICE_HANDLES_DOUBLE_TAP",
      "desc": "This flag requests that when FLAG_REQUEST_TOUCH_EXPLORATION_MODE is enabled, double tap and double tap and hold gestures are dispatched to the service rather than being handled by the framework."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new instance."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "capabilityToString(capability: Int)",
      "desc": "Returns the string representation of a capability.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "feedbackTypeToString(feedbackType: Int)",
      "desc": "Returns the string representation of a feedback type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "flagToString(flag: Int)",
      "desc": "Returns the string representation of a flag.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getCanRetrieveWindowContent()",
      "desc": "Whether this service can retrieve the current window's content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getCapabilities()",
      "desc": "Returns the bit mask of capabilities this accessibility service has such as being able to retrieve the active window content, etc."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getDescription()",
      "desc": "Gets the non-localized description of the accessibility service.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getId()",
      "desc": "The accessibility service id.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getInteractiveUiTimeoutMillis()",
      "desc": "Get the recommended timeout for interactive controls."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNonInteractiveUiTimeoutMillis()",
      "desc": "Get the recommended timeout for non-interactive controls."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ResolveInfo",
      "code": "getResolveInfo()",
      "desc": "The service ResolveInfo.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getSettingsActivityName()",
      "desc": "The settings activity name.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "loadDescription(packageManager: PackageManager!)",
      "desc": "The localized description of the accessibility service.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "loadSummary(packageManager: PackageManager!)",
      "desc": "The localized summary of the accessibility service.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInteractiveUiTimeoutMillis(timeout: Int)",
      "desc": "Set the recommended time that interactive controls need to remain on the screen to support the user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNonInteractiveUiTimeoutMillis(timeout: Int)",
      "desc": "Set the recommended time that non-interactive controls need to remain on the screen to support the user."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(parcel: Parcel!, flagz: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}