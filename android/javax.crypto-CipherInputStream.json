{
  "path": "javax.crypto",
  "name": "CipherInputStream",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(is: InputStream!, c: Cipher!)\n            Constructs a CipherInputStream from an InputStream and a Cipher."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "available()",
      "desc": "Returns the number of bytes that can be read from this input stream without blocking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "close()",
      "desc": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "markSupported()",
      "desc": "Tests if this input stream supports the mark and reset methods, which it does not."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read()",
      "desc": "Reads the next byte of data from this input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read(b: ByteArray!)",
      "desc": "Reads up to b.length bytes of data from this input stream into an array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read(b: ByteArray!, off: Int, len: Int)",
      "desc": "Reads up to len bytes of data from this input stream into an array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "skip(n: Long)",
      "desc": "Skips n bytes of input from the bytes that can be read from this input stream without blocking."
    },
    {
      "type": "inherited-methods",
      "from": "FilterInputStream"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "mark(readlimit: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "reset"
    },
    {
      "type": "inherited-methods",
      "from": "readlimit"
    },
    {
      "type": "inherited-methods",
      "from": "in.mark(readlimit)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "reset()"
    },
    {
      "type": "inherited-methods",
      "from": "mark"
    },
    {
      "type": "inherited-methods",
      "from": "in.reset()"
    }
  ]
}