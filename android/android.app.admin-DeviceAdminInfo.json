{
  "path": "android.app.admin",
  "name": "DeviceAdminInfo",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_ENCRYPTED_STORAGE",
      "desc": "A type of policy that this device admin can use: require encryption of stored data."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_DISABLE_CAMERA",
      "desc": "A type of policy that this device admin can use: disables use of all device cameras."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_DISABLE_KEYGUARD_FEATURES",
      "desc": "A type of policy that this device admin can use: disables use of keyguard features."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_EXPIRE_PASSWORD",
      "desc": "A type of policy that this device admin can use: force the user to change their password after an administrator-defined time limit."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_FORCE_LOCK",
      "desc": "A type of policy that this device admin can use: able to force the device to lock viaDevicePolicyManager#lockNow or limit the maximum lock timeout for the device via DevicePolicyManager#setMaximumTimeToLock."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_LIMIT_PASSWORD",
      "desc": "A type of policy that this device admin can use: limit the passwords that the user can select, via DevicePolicyManager#setPasswordQuality and DevicePolicyManager#setPasswordMinimumLength."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_RESET_PASSWORD",
      "desc": "A type of policy that this device admin can use: able to reset the user's password via DevicePolicyManager#resetPassword."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_WATCH_LOGIN",
      "desc": "A type of policy that this device admin can use: able to watch login attempts from the user, via DeviceAdminReceiver#ACTION_PASSWORD_FAILED, DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED, and DevicePolicyManager#getCurrentFailedPasswordAttempts."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "USES_POLICY_WIPE_DATA",
      "desc": "A type of policy that this device admin can use: able to factory reset the device, erasing all of the user's data, via DevicePolicyManager#wipeData."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, resolveInfo: ResolveInfo!)\n            Constructor."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "dump(pw: Printer!, prefix: String!)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ActivityInfo",
      "code": "getActivityInfo()",
      "desc": "Return the raw information about the receiver implementing this device admin.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "ComponentName",
      "code": "getComponent()",
      "desc": "Return the component of the receiver that implements this device admin."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getPackageName()",
      "desc": "Return the .",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getReceiverName()",
      "desc": "Return the class name of the receiver component that implements this device admin.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "getTagForPolicy(policyIdent: Int)",
      "desc": "Return the XML tag name for the given policy identifier.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "isVisible()",
      "desc": "Returns whether this device admin would like to be visible to the user, even when it is not enabled."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "loadDescription(pm: PackageManager!)",
      "desc": "Load user-visible description associated with this device admin.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Drawable",
      "code": "loadIcon(pm: PackageManager!)",
      "desc": "Load the user-displayed icon for this device admin.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "CharSequence",
      "code": "loadLabel(pm: PackageManager!)",
      "desc": "Load the user-displayed label for this device admin.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "supportsTransferOwnership()",
      "desc": "Return true if this administrator can be a target in an ownership transfer."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "usesPolicy(policyIdent: Int)",
      "desc": "Return true if the device admin has requested that it be able to use the given policy control."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": "Used to package this object into a Parcel."
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}