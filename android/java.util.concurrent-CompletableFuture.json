{
  "path": "java.util.concurrent",
  "name": "CompletableFuture",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Creates a new incomplete CompletableFuture."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "acceptEither(other: CompletionStage<out T>!, action: Consumer<in T>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "acceptEitherAsync(other: CompletionStage<out T>!, action: Consumer<in T>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "acceptEitherAsync(other: CompletionStage<out T>!, action: Consumer<in T>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "allOf(vararg cfs: CompletableFuture<*>!)",
      "desc": "Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "anyOf(vararg cfs: CompletableFuture<*>!)",
      "desc": "Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "applyToEither(other: CompletionStage<out T>!, fn: Function<in T, U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "applyToEitherAsync(other: CompletionStage<out T>!, fn: Function<in T, U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "applyToEitherAsync(other: CompletionStage<out T>!, fn: Function<in T, U>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "cancel(mayInterruptIfRunning: Boolean)",
      "desc": "If not already completed, completes this CompletableFuture with a CancellationException."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "complete(value: T)",
      "desc": "If not already completed, sets the value returned by   and related methods to the given value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "completeExceptionally(ex: Throwable!)",
      "desc": "If not already completed, causes invocations of get() and related methods to throw the given exception."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "completedFuture(value: U)",
      "desc": "Returns a new CompletableFuture that is already completed with the given value.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "exceptionally(fn: Function<Throwable!, out T>!)",
      "desc": "Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "get()",
      "desc": "Waits if necessary for this future to complete, and then returns its result."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "get(timeout: Long, unit: TimeUnit!)",
      "desc": "Waits if necessary for at most the given time for this future to complete, and then returns its result, if available."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "getNow(valueIfAbsent: T)",
      "desc": "Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getNumberOfDependents()",
      "desc": "Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "handle(fn: BiFunction<in T, Throwable!, out U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "handleAsync(fn: BiFunction<in T, Throwable!, out U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "handleAsync(fn: BiFunction<in T, Throwable!, out U>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isCancelled()",
      "desc": "Returns true if this CompletableFuture was cancelled before it completed normally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isCompletedExceptionally()",
      "desc": "Returns true if this CompletableFuture completed exceptionally, in any way."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDone()",
      "desc": "Returns true if completed in any fashion: normally, exceptionally, or via cancellation."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "T",
      "code": "join()",
      "desc": "Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "obtrudeException(ex: Throwable!)",
      "desc": "Forcibly causes subsequent invocations of method get() and related methods to throw the given exception, whether or not already completed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "obtrudeValue(value: T)",
      "desc": "Forcibly sets or resets the value subsequently returned by method get() and related methods, whether or not already completed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterBoth(other: CompletionStage<*>!, action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterBothAsync(other: CompletionStage<*>!, action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterBothAsync(other: CompletionStage<*>!, action: Runnable!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterEither(other: CompletionStage<*>!, action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterEitherAsync(other: CompletionStage<*>!, action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAfterEitherAsync(other: CompletionStage<*>!, action: Runnable!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAsync(runnable: Runnable!)",
      "desc": "Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() after it runs the given action.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "runAsync(runnable: Runnable!, executor: Executor!)",
      "desc": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "supplyAsync(supplier: Supplier<U>!)",
      "desc": "Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() with the value obtained by calling the given Supplier.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "supplyAsync(supplier: Supplier<U>!, executor: Executor!)",
      "desc": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAccept(action: Consumer<in T>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAcceptAsync(action: Consumer<in T>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAcceptAsync(action: Consumer<in T>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAcceptBoth(other: CompletionStage<out U>!, action: BiConsumer<in T, in U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAcceptBothAsync(other: CompletionStage<out U>!, action: BiConsumer<in T, in U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenAcceptBothAsync(other: CompletionStage<out U>!, action: BiConsumer<in T, in U>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenApply(fn: Function<in T, out U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenApplyAsync(fn: Function<in T, out U>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenApplyAsync(fn: Function<in T, out U>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenCombine(other: CompletionStage<out U>!, fn: BiFunction<in T, in U, out V>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenCombineAsync(other: CompletionStage<out U>!, fn: BiFunction<in T, in U, out V>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenCombineAsync(other: CompletionStage<out U>!, fn: BiFunction<in T, in U, out V>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenCompose(fn: Function<in T, out CompletionStage<U>!>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenComposeAsync(fn: Function<in T, out CompletionStage<U>!>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenComposeAsync(fn: Function<in T, out CompletionStage<U>!>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenRun(action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenRunAsync(action: Runnable!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "thenRunAsync(action: Runnable!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "toCompletableFuture()",
      "desc": "Returns this CompletableFuture.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": "Returns a string identifying this CompletableFuture, as well as its completion state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "whenComplete(action: BiConsumer<in T, in Throwable!>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "whenCompleteAsync(action: BiConsumer<in T, in Throwable!>!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CompletableFuture",
      "code": "whenCompleteAsync(action: BiConsumer<in T, in Throwable!>!, executor: Executor!)",
      "desc": "",
      "symbol": "<"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "AsynchronousCompletionTask",
      "desc": "A marker interface identifying asynchronous tasks produced by async methods."
    }
  ]
}