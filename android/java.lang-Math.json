{
  "path": "java.lang",
  "name": "Math",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "E",
      "desc": "The double value that is closer than any other to e, the base of the natural logarithms."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Double",
      "code": "PI",
      "desc": "The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "IEEEremainder(f1: Double, f2: Double)",
      "desc": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "abs(a: Int)",
      "desc": "Returns the absolute value of an int value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "abs(a: Long)",
      "desc": "Returns the absolute value of a long value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "abs(a: Float)",
      "desc": "Returns the absolute value of a float value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "abs(a: Double)",
      "desc": "Returns the absolute value of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "acos(a: Double)",
      "desc": "Returns the arc cosine of a value; the returned angle is in the range 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "addExact(x: Int, y: Int)",
      "desc": "Returns the sum of its arguments, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "addExact(x: Long, y: Long)",
      "desc": "Returns the sum of its arguments, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "asin(a: Double)",
      "desc": "Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "atan(a: Double)",
      "desc": "Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "atan2(y: Double, x: Double)",
      "desc": "Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "cbrt(a: Double)",
      "desc": "Returns the cube root of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "ceil(a: Double)",
      "desc": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "copySign(magnitude: Double, sign: Double)",
      "desc": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "copySign(magnitude: Float, sign: Float)",
      "desc": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "cos(a: Double)",
      "desc": "Returns the trigonometric cosine of an angle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "cosh(x: Double)",
      "desc": "Returns the hyperbolic cosine of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "decrementExact(a: Int)",
      "desc": "Returns the argument decremented by one, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "decrementExact(a: Long)",
      "desc": "Returns the argument decremented by one, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "exp(a: Double)",
      "desc": "Returns Euler's number e raised to the power of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "expm1(x: Double)",
      "desc": "Returns ex -1."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "floor(a: Double)",
      "desc": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "floorDiv(x: Int, y: Int)",
      "desc": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "floorDiv(x: Long, y: Long)",
      "desc": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "floorMod(x: Int, y: Int)",
      "desc": "Returns the floor modulus of the int arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "floorMod(x: Long, y: Long)",
      "desc": "Returns the floor modulus of the long arguments."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getExponent(f: Float)",
      "desc": "Returns the unbiased exponent used in the representation of a float."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "getExponent(d: Double)",
      "desc": "Returns the unbiased exponent used in the representation of a double."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "hypot(x: Double, y: Double)",
      "desc": "Returns sqrt(x2 +y2) without intermediate overflow or underflow."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "incrementExact(a: Int)",
      "desc": "Returns the argument incremented by one, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "incrementExact(a: Long)",
      "desc": "Returns the argument incremented by one, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "log(a: Double)",
      "desc": "Returns the natural logarithm (base e) of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "log10(a: Double)",
      "desc": "Returns the base 10 logarithm of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "log1p(x: Double)",
      "desc": "Returns the natural logarithm of the sum of the argument and 1."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "max(a: Int, b: Int)",
      "desc": "Returns the greater of two int values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "max(a: Long, b: Long)",
      "desc": "Returns the greater of two long values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "max(a: Float, b: Float)",
      "desc": "Returns the greater of two float values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "max(a: Double, b: Double)",
      "desc": "Returns the greater of two double values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "min(a: Int, b: Int)",
      "desc": "Returns the smaller of two int values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "min(a: Long, b: Long)",
      "desc": "Returns the smaller of two long values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "min(a: Float, b: Float)",
      "desc": "Returns the smaller of two float values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "min(a: Double, b: Double)",
      "desc": "Returns the smaller of two double values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "multiplyExact(x: Int, y: Int)",
      "desc": "Returns the product of the arguments, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "multiplyExact(x: Long, y: Long)",
      "desc": "Returns the product of the arguments, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "negateExact(a: Int)",
      "desc": "Returns the negation of the argument, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "negateExact(a: Long)",
      "desc": "Returns the negation of the argument, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "nextAfter(start: Double, direction: Double)",
      "desc": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "nextAfter(start: Float, direction: Double)",
      "desc": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "nextDown(d: Double)",
      "desc": "Returns the floating-point value adjacent to d in the direction of negative infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "nextDown(f: Float)",
      "desc": "Returns the floating-point value adjacent to f in the direction of negative infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "nextUp(d: Double)",
      "desc": "Returns the floating-point value adjacent to d in the direction of positive infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "nextUp(f: Float)",
      "desc": "Returns the floating-point value adjacent to f in the direction of positive infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "pow(a: Double, b: Double)",
      "desc": "Returns the value of the first argument raised to the power of the second argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "random()",
      "desc": "Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "rint(a: Double)",
      "desc": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "round(a: Float)",
      "desc": "Returns the closest int to the argument, with ties rounding to positive infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "round(a: Double)",
      "desc": "Returns the closest long to the argument, with ties rounding to positive infinity."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "scalb(d: Double, scaleFactor: Int)",
      "desc": "Returns d × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "scalb(f: Float, scaleFactor: Int)",
      "desc": "Returns f × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "signum(d: Double)",
      "desc": "Returns the signum function of the argument; zero if the argument is zero, 1."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "signum(f: Float)",
      "desc": "Returns the signum function of the argument; zero if the argument is zero, 1."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "sin(a: Double)",
      "desc": "Returns the trigonometric sine of an angle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "sinh(x: Double)",
      "desc": "Returns the hyperbolic sine of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "sqrt(a: Double)",
      "desc": "Returns the correctly rounded positive square root of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "subtractExact(x: Int, y: Int)",
      "desc": "Returns the difference of the arguments, throwing an exception if the result overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Long",
      "code": "subtractExact(x: Long, y: Long)",
      "desc": "Returns the difference of the arguments, throwing an exception if the result overflows a long."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "tan(a: Double)",
      "desc": "Returns the trigonometric tangent of an angle."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "tanh(x: Double)",
      "desc": "Returns the hyperbolic tangent of a double value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "toDegrees(angrad: Double)",
      "desc": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "toIntExact(value: Long)",
      "desc": "Returns the value of the long argument; throwing an exception if the value overflows an int."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "toRadians(angdeg: Double)",
      "desc": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Double",
      "code": "ulp(d: Double)",
      "desc": "Returns the size of an ulp of the argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Float",
      "code": "ulp(f: Float)",
      "desc": "Returns the size of an ulp of the argument."
    }
  ]
}