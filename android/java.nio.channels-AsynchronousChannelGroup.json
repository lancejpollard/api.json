{
  "path": "java.nio.channels",
  "name": "AsynchronousChannelGroup",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "awaitTermination(timeout: Long, unit: TimeUnit!)",
      "desc": "Awaits termination of the group."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isShutdown()",
      "desc": "Tells whether or not this asynchronous channel group is shutdown."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Boolean",
      "code": "isTerminated()",
      "desc": "Tells whether or not this group has terminated."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "AsynchronousChannelProvider",
      "code": "provider()",
      "desc": "Returns the provider that created this channel group.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "shutdown()",
      "desc": "Initiates an orderly shutdown of the group."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "shutdownNow()",
      "desc": "Shuts down the group and closes all open channels in the group."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AsynchronousChannelGroup",
      "code": "withCachedThreadPool(executor: ExecutorService!, initialSize: Int)",
      "desc": "Creates an asynchronous channel group with a given thread pool that creates new threads as needed.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AsynchronousChannelGroup",
      "code": "withFixedThreadPool(nThreads: Int, threadFactory: ThreadFactory!)",
      "desc": "Creates an asynchronous channel group with a fixed thread pool.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AsynchronousChannelGroup",
      "code": "withThreadPool(executor: ExecutorService!)",
      "desc": "Creates an asynchronous channel group with a given thread pool.",
      "symbol": "!"
    }
  ]
}