{
  "path": "android.media",
  "name": "MediaRouter2",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getControllers()",
      "desc": "Gets the list of currently active RoutingController on which media can be played.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "MediaRouter2",
      "code": "getInstance(context: Context)",
      "desc": "Gets an instance of the media router associated with the context."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getRoutes()",
      "desc": "Gets the unmodifiable list of MediaRoute2Info currently known to the media router.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MediaRouter2.RoutingController",
      "code": "getSystemController()",
      "desc": "Gets a RoutingController which can control the routes provided by system."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "registerControllerCallback(executor: Executor, callback: MediaRouter2.ControllerCallback)",
      "desc": "Registers a ControllerCallback."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "registerRouteCallback(executor: Executor, routeCallback: MediaRouter2.RouteCallback, preference: RouteDiscoveryPreference)",
      "desc": "Registers a callback to discover routes and to receive events when they change."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "registerTransferCallback(executor: Executor, callback: MediaRouter2.TransferCallback)",
      "desc": "Registers a callback to get the result of transferTo(android.media.MediaRoute2Info)."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setOnGetControllerHintsListener(listener: MediaRouter2.OnGetControllerHintsListener?)",
      "desc": "Sets an OnGetControllerHintsListener to send hints when creating a RoutingController."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "stop()",
      "desc": "Stops the current media routing."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "transferTo(route: MediaRoute2Info)",
      "desc": "Transfers the current media to the given route."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "unregisterControllerCallback(callback: MediaRouter2.ControllerCallback)",
      "desc": "Unregisters a ControllerCallback."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "unregisterRouteCallback(routeCallback: MediaRouter2.RouteCallback)",
      "desc": "Unregisters the given callback."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "unregisterTransferCallback(callback: MediaRouter2.TransferCallback)",
      "desc": "Unregisters the given callback."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "ControllerCallback",
      "desc": "Callback for receiving RoutingController updates."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnGetControllerHintsListener",
      "desc": "A listener interface to send optional app-specific hints when creating a RoutingController."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "RouteCallback",
      "desc": "Callback for receiving events about media route discovery."
    },
    {
      "type": "nested-classes",
      "code": "RoutingController",
      "desc": "A class to control media routing session in media route provider."
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "TransferCallback",
      "desc": "Callback for receiving events on media transfer."
    }
  ]
}