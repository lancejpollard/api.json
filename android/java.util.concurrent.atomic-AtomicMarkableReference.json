{
  "path": "java.util.concurrent.atomic",
  "name": "AtomicMarkableReference",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(initialRef: V, initialMark: Boolean)\n            Creates a new AtomicMarkableReference with the given initial values."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "attemptMark(expectedReference: V, newMark: Boolean)",
      "desc": "Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "compareAndSet(expectedReference: V, newReference: V, expectedMark: Boolean, newMark: Boolean)",
      "desc": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "get(markHolder: BooleanArray!)",
      "desc": "Returns the current values of both the reference and the mark."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "V",
      "code": "getReference()",
      "desc": "Returns the current value of the reference."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isMarked()",
      "desc": "Returns the current value of the mark."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "set(newReference: V, newMark: Boolean)",
      "desc": "Unconditionally sets the value of both the reference and mark."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "weakCompareAndSet(expectedReference: V, newReference: V, expectedMark: Boolean, newMark: Boolean)",
      "desc": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark."
    }
  ]
}