{
  "path": "android.hardware",
  "name": "SensorManager",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_MINUS_X",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_MINUS_Y",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_MINUS_Z",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_X",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_Y",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "AXIS_Z",
      "desc": "see remapCoordinateSystem"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DATA_X",
      "desc": "Index of the X value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DATA_Y",
      "desc": "Index of the Y value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DATA_Z",
      "desc": "Index of the Z value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_DEATH_STAR_I",
      "desc": "Gravity (estimate) on the first Death Star in Empire units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_EARTH",
      "desc": "Earth's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_JUPITER",
      "desc": "Jupiter's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_MARS",
      "desc": "Mars' gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_MERCURY",
      "desc": "Mercury's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_MOON",
      "desc": "The Moon's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_NEPTUNE",
      "desc": "Neptune's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_PLUTO",
      "desc": "Pluto's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_SATURN",
      "desc": "Saturn's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_SUN",
      "desc": "Sun's gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_THE_ISLAND",
      "desc": "Gravity on the island"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_URANUS",
      "desc": "Uranus' gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "GRAVITY_VENUS",
      "desc": "Venus' gravity in SI units (m/s^2)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_CLOUDY",
      "desc": "luminance under a cloudy sky in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_FULLMOON",
      "desc": "luminance at night with full moon in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_NO_MOON",
      "desc": "luminance at night with no moon in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_OVERCAST",
      "desc": "luminance under an overcast sky in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_SHADE",
      "desc": "luminance in shade in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_SUNLIGHT",
      "desc": "luminance of sunlight in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_SUNLIGHT_MAX",
      "desc": "Maximum luminance of sunlight in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "LIGHT_SUNRISE",
      "desc": "luminance at sunrise in lux"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "MAGNETIC_FIELD_EARTH_MAX",
      "desc": "Maximum magnetic field on Earth's surface"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "MAGNETIC_FIELD_EARTH_MIN",
      "desc": "Minimum magnetic field on Earth's surface"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "PRESSURE_STANDARD_ATMOSPHERE",
      "desc": "Standard atmosphere, or average sea-level pressure in hPa (millibar)"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RAW_DATA_INDEX",
      "desc": "Offset to the untransformed values in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RAW_DATA_X",
      "desc": "Index of the untransformed X value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RAW_DATA_Y",
      "desc": "Index of the untransformed Y value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "RAW_DATA_Z",
      "desc": "Index of the untransformed Z value in the array returned by android.hardware.SensorListener#onSensorChanged"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_ACCELEROMETER",
      "desc": "A constant describing an accelerometer."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_ALL",
      "desc": "A constant that includes all sensors"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_DELAY_FASTEST",
      "desc": "get sensor data as fast as possible"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_DELAY_GAME",
      "desc": "rate suitable for games"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_DELAY_NORMAL",
      "desc": "rate (default) suitable for screen orientation changes"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_DELAY_UI",
      "desc": "rate suitable for the user interface"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_LIGHT",
      "desc": "A constant describing an ambient light sensor See SensorListener for more details."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_MAGNETIC_FIELD",
      "desc": "A constant describing a magnetic sensor See SensorListener for more details."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_MAX",
      "desc": "Largest sensor ID"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_MIN",
      "desc": "Smallest sensor ID"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_ORIENTATION",
      "desc": "A constant describing an orientation sensor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_ORIENTATION_RAW",
      "desc": "A constant describing an orientation sensor."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_PROXIMITY",
      "desc": "A constant describing a proximity sensor See SensorListener for more details."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_STATUS_ACCURACY_HIGH",
      "desc": "This sensor is reporting data with maximum accuracy"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_STATUS_ACCURACY_LOW",
      "desc": "This sensor is reporting data with low accuracy, calibration with the environment is needed"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_STATUS_ACCURACY_MEDIUM",
      "desc": "This sensor is reporting data with an average level of accuracy, calibration with the environment may improve the readings"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_STATUS_NO_CONTACT",
      "desc": "The values returned by this sensor cannot be trusted because the sensor had no contact with what it was measuring (for example, the heart rate monitor is not in contact with the user)."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_STATUS_UNRELIABLE",
      "desc": "The values returned by this sensor cannot be trusted, calibration is needed or the environment doesn't allow readings"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_TEMPERATURE",
      "desc": "A constant describing a temperature sensor See SensorListener for more details."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "SENSOR_TRICORDER",
      "desc": "A constant describing a Tricorder See SensorListener for more details."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Float",
      "code": "STANDARD_GRAVITY",
      "desc": "Standard gravity (g) on Earth."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "cancelTriggerSensor(listener: TriggerEventListener!, sensor: Sensor!)",
      "desc": "Cancels receiving trigger events for a trigger sensor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SensorDirectChannel",
      "code": "createDirectChannel(mem: MemoryFile!)",
      "desc": "Create a sensor direct channel backed by shared memory wrapped in MemoryFile object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "SensorDirectChannel",
      "code": "createDirectChannel(mem: HardwareBuffer!)",
      "desc": "Create a sensor direct channel backed by shared memory wrapped in HardwareBuffer object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "flush(listener: SensorEventListener!)",
      "desc": "Flushes the FIFO of all the sensors registered for this listener."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getAltitude(p0: Float, p: Float)",
      "desc": "Computes the Altitude in meters from the atmospheric pressure and the pressure at sea level."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getAngleChange(angleChange: FloatArray!, R: FloatArray!, prevR: FloatArray!)",
      "desc": "Helper function to compute the angle change between two rotation matrices."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Sensor",
      "code": "getDefaultSensor(type: Int)",
      "desc": "Use this method to get the default sensor for a given type.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Sensor",
      "code": "getDefaultSensor(type: Int, wakeUp: Boolean)",
      "desc": "Return a Sensor with the given type and wakeUp properties.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getDynamicSensorList(type: Int)",
      "desc": "Use this method to get a list of available dynamic sensors of a certain type.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getInclination(I: FloatArray!)",
      "desc": "Computes the geomagnetic inclination angle in radians from the inclination matrix I returned by getRotationMatrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "FloatArray",
      "code": "getOrientation(R: FloatArray!, values: FloatArray!)",
      "desc": "Computes the device's orientation based on the rotation matrix.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getQuaternionFromVector(Q: FloatArray!, rv: FloatArray!)",
      "desc": "Helper function to convert a rotation vector to a normalized quaternion."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getRotationMatrix(R: FloatArray!, I: FloatArray!, gravity: FloatArray!, geomagnetic: FloatArray!)",
      "desc": "Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where:"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "getRotationMatrixFromVector(R: FloatArray!, rotationVector: FloatArray!)",
      "desc": "Helper function to convert a rotation vector to a rotation matrix."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "MutableList",
      "code": "getSensorList(type: Int)",
      "desc": "Use this method to get the list of available sensors of a certain type.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSensors()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isDynamicSensorDiscoverySupported()",
      "desc": "Tell if dynamic sensor discovery feature is supported by system."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "registerDynamicSensorCallback(callback: SensorManager.DynamicSensorCallback!)",
      "desc": "Add a  DynamicSensorCallback to receive dynamic sensor connection callbacks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "registerDynamicSensorCallback(callback: SensorManager.DynamicSensorCallback!, handler: Handler!)",
      "desc": "Add a  DynamicSensorCallback to receive dynamic sensor connection callbacks."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorListener!, sensors: Int)",
      "desc": "Registers a listener for given sensors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorListener!, sensors: Int, rate: Int)",
      "desc": "Registers a SensorListener for given sensors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorEventListener!, sensor: Sensor!, samplingPeriodUs: Int)",
      "desc": "Registers a SensorEventListener for the given sensor at the given sampling frequency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorEventListener!, sensor: Sensor!, samplingPeriodUs: Int, maxReportLatencyUs: Int)",
      "desc": "Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorEventListener!, sensor: Sensor!, samplingPeriodUs: Int, handler: Handler!)",
      "desc": "Registers a SensorEventListener for the given sensor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "registerListener(listener: SensorEventListener!, sensor: Sensor!, samplingPeriodUs: Int, maxReportLatencyUs: Int, handler: Handler!)",
      "desc": "Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "remapCoordinateSystem(inR: FloatArray!, X: Int, Y: Int, outR: FloatArray!)",
      "desc": "Rotates the supplied rotation matrix so it is expressed in a different coordinate system."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "requestTriggerSensor(listener: TriggerEventListener!, sensor: Sensor!)",
      "desc": "Requests receiving trigger events for a trigger sensor."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterDynamicSensorCallback(callback: SensorManager.DynamicSensorCallback!)",
      "desc": "Remove a  DynamicSensorCallback to stop sending dynamic sensor connection events to that callback."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterListener(listener: SensorListener!)",
      "desc": "Unregisters a listener for all sensors."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterListener(listener: SensorListener!, sensors: Int)",
      "desc": "Unregisters a listener for the sensors with which it is registered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterListener(listener: SensorEventListener!, sensor: Sensor!)",
      "desc": "Unregisters a listener for the sensors with which it is registered."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unregisterListener(listener: SensorEventListener!)",
      "desc": "Unregisters a listener for all sensors."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "DynamicSensorCallback",
      "desc": "Used for receiving notifications from the SensorManager when dynamic sensors are connected or disconnected."
    }
  ]
}