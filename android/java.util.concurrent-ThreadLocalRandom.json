{
  "path": "java.util.concurrent",
  "name": "ThreadLocalRandom",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ThreadLocalRandom",
      "code": "current()",
      "desc": "Returns the current thread's ThreadLocalRandom.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles()",
      "desc": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(streamSize: Long, randomNumberOrigin: Double, randomNumberBound: Double)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DoubleStream",
      "code": "doubles(randomNumberOrigin: Double, randomNumberBound: Double)",
      "desc": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom int values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints()",
      "desc": "Returns an effectively unlimited stream of pseudorandom int values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(streamSize: Long, randomNumberOrigin: Int, randomNumberBound: Int)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "IntStream",
      "code": "ints(randomNumberOrigin: Int, randomNumberBound: Int)",
      "desc": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(streamSize: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom long values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs()",
      "desc": "Returns an effectively unlimited stream of pseudorandom long values.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(streamSize: Long, randomNumberOrigin: Long, randomNumberBound: Long)",
      "desc": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "LongStream",
      "code": "longs(randomNumberOrigin: Long, randomNumberBound: Long)",
      "desc": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "nextBoolean()",
      "desc": "Returns a pseudorandom boolean value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextDouble()",
      "desc": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextDouble(bound: Double)",
      "desc": "Returns a pseudorandom double value between 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextDouble(origin: Double, bound: Double)",
      "desc": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "nextFloat()",
      "desc": "Returns a pseudorandom float value between zero (inclusive) and one (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Double",
      "code": "nextGaussian()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextInt()",
      "desc": "Returns a pseudorandom int value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextInt(bound: Int)",
      "desc": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextInt(origin: Int, bound: Int)",
      "desc": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "nextLong()",
      "desc": "Returns a pseudorandom long value."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "nextLong(bound: Long)",
      "desc": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "nextLong(origin: Long, bound: Long)",
      "desc": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSeed(seed: Long)",
      "desc": "Throws UnsupportedOperationException."
    },
    {
      "type": "method",
      "status": "protected"
    },
    {
      "type": "method",
      "status": "protected",
      "keyword": "open",
      "identifier": "Int",
      "code": "next(bits: Int)",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "Random"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "nextBytes(bytes: ByteArray!)"
    },
    {
      "type": "inherited-methods",
      "from": "nextBytes"
    },
    {
      "type": "inherited-methods",
      "from": "Random"
    }
  ]
}