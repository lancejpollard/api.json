{
  "path": "android.text",
  "name": "BoringLayout",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(source: CharSequence!, paint: TextPaint!, outerwidth: Int, align: Layout.Alignment!, spacingMult: Float, spacingAdd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean)"
    },
    {
      "type": "ctor",
      "ctor": "<init>(source: CharSequence!, paint: TextPaint!, outerWidth: Int, align: Layout.Alignment!, spacingMult: Float, spacingAdd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean, ellipsize: TextUtils.TruncateAt!, ellipsizedWidth: Int)"
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "draw(c: Canvas!, highlight: Path!, highlightpaint: Paint!, cursorOffset: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ellipsized(start: Int, end: Int)",
      "desc": "Callback for the ellipsizer to report what region it ellipsized."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getBottomPadding()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEllipsisCount(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEllipsisStart(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getEllipsizedWidth()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getLineContainsTab(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineCount()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineDescent(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Layout.Directions",
      "code": "getLineDirections(line: Int)",
      "desc": "",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineMax(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineStart(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineTop(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getLineWidth(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getParagraphDirection(line: Int)",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getTopPadding()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout.Metrics",
      "code": "isBoring(text: CharSequence!, paint: TextPaint!)",
      "desc": "Determine and compute metrics if given text can be handled by BoringLayout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout.Metrics",
      "code": "isBoring(text: CharSequence!, paint: TextPaint!, metrics: BoringLayout.Metrics!)",
      "desc": "Determine and compute metrics if given text can be handled by BoringLayout.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout",
      "code": "make(source: CharSequence!, paint: TextPaint!, outerWidth: Int, align: Layout.Alignment!, spacingMult: Float, spacingAdd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean)",
      "desc": "Utility function to construct a BoringLayout instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout",
      "code": "make(source: CharSequence!, paint: TextPaint!, outerWidth: Int, align: Layout.Alignment!, spacingmult: Float, spacingadd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean, ellipsize: TextUtils.TruncateAt!, ellipsizedWidth: Int)",
      "desc": "Utility function to construct a BoringLayout instance.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout",
      "code": "replaceOrMake(source: CharSequence!, paint: TextPaint!, outerwidth: Int, align: Layout.Alignment!, spacingMult: Float, spacingAdd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean)",
      "desc": "Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BoringLayout",
      "code": "replaceOrMake(source: CharSequence!, paint: TextPaint!, outerWidth: Int, align: Layout.Alignment!, spacingMult: Float, spacingAdd: Float, metrics: BoringLayout.Metrics!, includePad: Boolean, ellipsize: TextUtils.TruncateAt!, ellipsizedWidth: Int)",
      "desc": "Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable.",
      "symbol": "!"
    },
    {
      "type": "inherited-constants",
      "from": "Layout"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "BREAK_STRATEGY_BALANCED"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "BREAK_STRATEGY_HIGH_QUALITY"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "BREAK_STRATEGY_SIMPLE"
    },
    {
      "type": "inherited-constants",
      "from": "Float"
    },
    {
      "type": "inherited-constants",
      "from": "DEFAULT_LINESPACING_ADDITION"
    },
    {
      "type": "inherited-constants",
      "from": "Float"
    },
    {
      "type": "inherited-constants",
      "from": "DEFAULT_LINESPACING_MULTIPLIER"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "DIR_LEFT_TO_RIGHT"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "DIR_RIGHT_TO_LEFT"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "HYPHENATION_FREQUENCY_FULL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "HYPHENATION_FREQUENCY_NONE"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "HYPHENATION_FREQUENCY_NORMAL"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "JUSTIFICATION_MODE_INTER_WORD"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "JUSTIFICATION_MODE_NONE"
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "open",
      "code": "Metrics",
      "desc": ""
    },
    {
      "type": "inherited-methods",
      "from": "Layout"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "draw(c: Canvas!)"
    },
    {
      "type": "inherited-methods",
      "from": "Layout.Alignment!"
    },
    {
      "type": "inherited-methods",
      "from": "getAlignment()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "getCursorPath(point: Int, dest: Path!, editingBuffer: CharSequence!)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getDesiredWidth(source: CharSequence!, paint: TextPaint!)"
    },
    {
      "type": "inherited-methods",
      "from": "TextDirectionHeuristics#FIRSTSTRONG_LTR"
    },
    {
      "type": "inherited-methods",
      "from": "TextDirectionHeuristics#LTR"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getDesiredWidth(source: CharSequence!, start: Int, end: Int, paint: TextPaint!)"
    },
    {
      "type": "inherited-methods",
      "from": "TextDirectionHeuristics#FIRSTSTRONG_LTR"
    },
    {
      "type": "inherited-methods",
      "from": "TextDirectionHeuristics#LTR"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineAscent(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineBaseline(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineBottom(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineBounds(line: Int, bounds: Rect!)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineEnd(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineForOffset(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineForVertical(vertical: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getLineLeft(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getLineRight(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getLineVisibleEnd(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getOffsetForHorizontal(line: Int, horiz: Float)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getOffsetToLeftOf(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getOffsetToRightOf(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "TextPaint!"
    },
    {
      "type": "inherited-methods",
      "from": "getPaint()"
    },
    {
      "type": "inherited-methods",
      "from": "Layout.Alignment!"
    },
    {
      "type": "inherited-methods",
      "from": "getParagraphAlignment(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getParagraphLeft(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getParagraphRight(line: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getPrimaryHorizontal(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getSecondaryHorizontal(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "getSelectionPath(start: Int, end: Int, dest: Path!)"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getSpacingAdd()"
    },
    {
      "type": "inherited-methods",
      "from": "Float"
    },
    {
      "type": "inherited-methods",
      "from": "getSpacingMultiplier()"
    },
    {
      "type": "inherited-methods",
      "from": "CharSequence!"
    },
    {
      "type": "inherited-methods",
      "from": "getText()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "getWidth()"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "increaseWidthTo(wid: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isRtlCharAt(offset: Int)"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "isSpanned()"
    }
  ]
}