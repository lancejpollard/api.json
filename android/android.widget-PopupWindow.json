{
  "path": "android.widget",
  "name": "PopupWindow",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INPUT_METHOD_FROM_FOCUSABLE",
      "desc": "Mode for setInputMethodMode(int): the requirements for the input method should be based on the focusability of the popup."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INPUT_METHOD_NEEDED",
      "desc": "Mode for setInputMethodMode(int): this popup always needs to work with an input method, regardless of whether it is focusable."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "INPUT_METHOD_NOT_NEEDED",
      "desc": "Mode for setInputMethodMode(int): this popup never needs to work with an input method, regardless of whether it is focusable."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!)\n            Create a new empty, non focusable popup window of dimension (0,0)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!)\n            Create a new empty, non focusable popup window of dimension (0,0)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!, defStyleAttr: Int)\n            Create a new empty, non focusable popup window of dimension (0,0)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(context: Context!, attrs: AttributeSet!, defStyleAttr: Int, defStyleRes: Int)\n            Create a new, empty, non focusable popup window of dimension (0,0)."
    },
    {
      "type": "ctor",
      "ctor": "<init>()\n            Create a new empty, non focusable popup window of dimension (0,0)."
    },
    {
      "type": "ctor",
      "ctor": "<init>(contentView: View!)\n            Create a new non focusable popup window which can display the contentView."
    },
    {
      "type": "ctor",
      "ctor": "<init>(width: Int, height: Int)\n            Create a new empty, non focusable popup window."
    },
    {
      "type": "ctor",
      "ctor": "<init>(contentView: View!, width: Int, height: Int)\n            Create a new non focusable popup window which can display the contentView."
    },
    {
      "type": "ctor",
      "ctor": "<init>(contentView: View!, width: Int, height: Int, focusable: Boolean)\n            Create a new popup window which can display the contentView."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "dismiss()",
      "desc": "Disposes of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getAnimationStyle()",
      "desc": "Return the animation style to use the popup appears and disappears"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Drawable",
      "code": "getBackground()",
      "desc": "Return the drawable used as the popup window's background.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "View",
      "code": "getContentView()",
      "desc": "Return the view used as the content of the popup window.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Float",
      "code": "getElevation()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getEnterTransition()",
      "desc": "Returns the enter transition to be used when the popup window is shown.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Rect",
      "code": "getEpicenterBounds()",
      "desc": "Returns bounds which are used as a center of the enter and exit transitions.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Transition",
      "code": "getExitTransition()",
      "desc": "Returns the exit transition to be used when the popup window is dismissed.",
      "symbol": "?"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getHeight()",
      "desc": "Returns the popup's requested height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getInputMethodMode()",
      "desc": "Return the current value in setInputMethodMode(int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxAvailableHeight(anchor: View)",
      "desc": "Returns the maximum height that is available for the popup to be completely shown."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxAvailableHeight(anchor: View, yOffset: Int)",
      "desc": "Returns the maximum height that is available for the popup to be completely shown."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMaxAvailableHeight(anchor: View, yOffset: Int, ignoreBottomDecorations: Boolean)",
      "desc": "Returns the maximum height that is available for the popup to be completely shown, optionally ignoring any bottom decorations such as the input method."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getOverlapAnchor()",
      "desc": "Returns whether the popup window should overlap its anchor view when displayed as a drop-down."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getSoftInputMode()",
      "desc": "Returns the current value in setSoftInputMode(int)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWidth()",
      "desc": "Returns the popup's requested width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getWindowLayoutType()",
      "desc": "Returns the layout type for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAboveAnchor()",
      "desc": "Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isAttachedInDecor()",
      "desc": "Indicates whether the popup window will be attached in the decor frame of its parent window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClippedToScreen()",
      "desc": "Indicates whether this popup will be clipped to the screen and not to the containing window"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isClippingEnabled()",
      "desc": "Indicates whether clipping of the popup window is enabled."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isFocusable()",
      "desc": "Indicate whether the popup window can grab the focus."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isLaidOutInScreen()",
      "desc": "Indicates whether the popup window will be forced into using absolute screen coordinates for positioning."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isOutsideTouchable()",
      "desc": "Indicates whether the popup window will be informed of touch events outside of its window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isShowing()",
      "desc": "Indicate whether this popup window is showing on screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isSplitTouchEnabled()",
      "desc": "Indicates whether the popup window supports splitting touches."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTouchModal()",
      "desc": "Indicates whether outside touches will be sent to this window or other windows behind it"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "isTouchable()",
      "desc": "Indicates whether the popup window receives touch events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAnimationStyle(animationStyle: Int)",
      "desc": "Change the animation style resource for this popup."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAttachedInDecor(enabled: Boolean)",
      "desc": "This will attach the popup window to the decor frame of the parent window to avoid overlaping with screen decorations like the navigation bar."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setBackgroundDrawable(background: Drawable!)",
      "desc": "Specifies the background drawable for this popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setClippingEnabled(enabled: Boolean)",
      "desc": "Allows the popup window to extend beyond the bounds of the screen."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentView(contentView: View!)",
      "desc": "Change the popup's content."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setElevation(elevation: Float)",
      "desc": "Specifies the elevation for this popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEnterTransition(enterTransition: Transition?)",
      "desc": "Sets the enter transition to be used when the popup window is shown."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEpicenterBounds(bounds: Rect?)",
      "desc": "Sets the bounds used as the epicenter of the enter and exit transitions."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExitTransition(exitTransition: Transition?)",
      "desc": "Sets the exit transition to be used when the popup window is dismissed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFocusable(focusable: Boolean)",
      "desc": "Changes the focusability of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setHeight(height: Int)",
      "desc": "Sets the popup's requested height."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIgnoreCheekPress()",
      "desc": "Set the flag on popup to ignore cheek press events; by default this flag is set to false which means the popup will not ignore cheek press dispatch events."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setInputMethodMode(mode: Int)",
      "desc": "Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIsClippedToScreen(enabled: Boolean)",
      "desc": "Clip this popup window to the screen, but not to the containing window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setIsLaidOutInScreen(enabled: Boolean)",
      "desc": "Allows the popup window to force the flag WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN, overriding default behavior."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOnDismissListener(onDismissListener: PopupWindow.OnDismissListener!)",
      "desc": "Sets the listener to be called when the window is dismissed."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOutsideTouchable(touchable: Boolean)",
      "desc": "Controls whether the pop-up will be informed of touch events outside of its window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setOverlapAnchor(overlapAnchor: Boolean)",
      "desc": "Sets whether the popup window should overlap its anchor view when displayed as a drop-down."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSoftInputMode(mode: Int)",
      "desc": "Sets the operating mode for the soft input area."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setSplitTouchEnabled(enabled: Boolean)",
      "desc": "Allows the popup window to split touches across other windows that also support split touch."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTouchInterceptor(l: View.OnTouchListener!)",
      "desc": "Set a callback for all touch events being dispatched to the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTouchModal(touchModal: Boolean)",
      "desc": "Set whether this window is touch modal or if outside touches will be sent to other windows behind it."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setTouchable(touchable: Boolean)",
      "desc": "Changes the touchability of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWidth(width: Int)",
      "desc": "Sets the popup's requested width."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowLayoutMode(widthSpec: Int, heightSpec: Int)",
      "desc": "Change the width and height measure specs that are given to the window manager by the popup."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWindowLayoutType(layoutType: Int)",
      "desc": "Set the layout type for this window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "showAsDropDown(anchor: View!)",
      "desc": "Display the content view in a popup window anchored to the bottom-left corner of the anchor view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "showAsDropDown(anchor: View!, xoff: Int, yoff: Int)",
      "desc": "Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "showAsDropDown(anchor: View!, xoff: Int, yoff: Int, gravity: Int)",
      "desc": "Displays the content view in a popup window anchored to the corner of another view."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "showAtLocation(parent: View!, gravity: Int, x: Int, y: Int)",
      "desc": "Display the content view in a popup window at the specified location."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update()",
      "desc": "Updates the state of the popup window, if it is currently being displayed, from the currently set state."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update(width: Int, height: Int)",
      "desc": "Updates the dimension of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update(x: Int, y: Int, width: Int, height: Int)",
      "desc": "Updates the position and the dimension of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update(x: Int, y: Int, width: Int, height: Int, force: Boolean)",
      "desc": "Updates the position and the dimension of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update(anchor: View!, width: Int, height: Int)",
      "desc": "Updates the position and the dimension of the popup window."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "update(anchor: View!, xoff: Int, yoff: Int, width: Int, height: Int)",
      "desc": "Updates the position and the dimension of the popup window."
    },
    {
      "type": "nested-classes"
    },
    {
      "type": "nested-classes",
      "keyword": "abstract",
      "code": "OnDismissListener",
      "desc": "Listener that is called when this popup window is dismissed."
    }
  ]
}