{
  "path": "android.icu.text",
  "name": "UCharacterIterator",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "Int",
      "code": "DONE",
      "desc": "Indicator that we have reached the ends of the UTF16 text."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "clone()",
      "desc": "Creates a copy of this iterator, independent from other iterators."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "current()",
      "desc": "Returns the code unit at the current index."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "currentCodePoint()",
      "desc": "Returns the codepoint at the current index."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharacterIterator",
      "code": "getCharacterIterator()",
      "desc": "Returns a java.text.CharacterIterator object for the underlying text of this iterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getIndex()",
      "desc": "Gets the current index in text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: Replaceable!)",
      "desc": "Returns a UCharacterIterator object given a Replaceable object.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: String!)",
      "desc": "Returns a UCharacterIterator object given a source string.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: CharArray!)",
      "desc": "Returns a UCharacterIterator object given a source character array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: CharArray!, start: Int, limit: Int)",
      "desc": "Returns a UCharacterIterator object given a source character array.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: StringBuffer!)",
      "desc": "Returns a UCharacterIterator object given a source StringBuffer.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "UCharacterIterator",
      "code": "getInstance(source: CharacterIterator!)",
      "desc": "Returns a UCharacterIterator object given a CharacterIterator.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getLength()",
      "desc": "Returns the length of the text"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "getText(fillIn: CharArray!, offset: Int)",
      "desc": "Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a exception is thrown."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Int",
      "code": "getText(fillIn: CharArray!)",
      "desc": "Convenience override for getText(char[], int) that provides an offset of 0."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getText()",
      "desc": "Convenience method for returning the underlying text storage as as string",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "moveCodePointIndex(delta: Int)",
      "desc": "Moves the current position by the number of code points specified, either forward or backward depending on the sign of delta (positive or negative respectively)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "moveIndex(delta: Int)",
      "desc": "Moves the current position by the number of code units specified, either forward or backward depending on the sign of delta (positive or negative respectively)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "next()",
      "desc": "Returns the UTF16 code unit at index, and increments to the next code unit (post-increment semantics)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "nextCodePoint()",
      "desc": "Returns the code point at index, and increments to the next code point (post-increment semantics)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Int",
      "code": "previous()",
      "desc": "Decrement to the position of the previous code unit in the text, and return it (pre-decrement semantics)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "previousCodePoint()",
      "desc": "Retreat to the start of the previous code point in the text, and return it (pre-decrement semantics)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "abstract",
      "identifier": "Unit",
      "code": "setIndex(index: Int)",
      "desc": "Sets the index to the specified index in the text."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setToLimit()",
      "desc": "Sets the current index to the limit."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setToStart()",
      "desc": "Sets the current index to the start."
    }
  ]
}