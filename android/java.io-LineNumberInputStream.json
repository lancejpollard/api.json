{
  "path": "java.io",
  "name": "LineNumberInputStream",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(in: InputStream!)\n            Constructs a newline number input stream that reads its input from the specified input stream."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "available()",
      "desc": "Returns the number of bytes that can be read from this input stream without blocking."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getLineNumber()",
      "desc": "Returns the current line number."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "mark(readlimit: Int)",
      "desc": "Marks the current position in this input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read()",
      "desc": "Reads the next byte of data from this input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "read(b: ByteArray!, off: Int, len: Int)",
      "desc": "Reads up to len bytes of data from this input stream into an array of bytes."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "reset()",
      "desc": "Repositions this stream to the position at the time the mark method was last called on this input stream."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setLineNumber(lineNumber: Int)",
      "desc": "Sets the line number to the specified argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "skip(n: Long)",
      "desc": "Skips over and discards n bytes of data from this input stream."
    },
    {
      "type": "inherited-methods",
      "from": "FilterInputStream"
    },
    {
      "type": "inherited-methods",
      "from": "Unit"
    },
    {
      "type": "inherited-methods",
      "from": "close()"
    },
    {
      "type": "inherited-methods",
      "from": "in.close()"
    },
    {
      "type": "inherited-methods",
      "from": "Boolean"
    },
    {
      "type": "inherited-methods",
      "from": "markSupported()"
    },
    {
      "type": "inherited-methods",
      "from": "mark"
    },
    {
      "type": "inherited-methods",
      "from": "reset"
    },
    {
      "type": "inherited-methods",
      "from": "in.markSupported()"
    },
    {
      "type": "inherited-methods",
      "from": "Int"
    },
    {
      "type": "inherited-methods",
      "from": "read(b: ByteArray!)"
    },
    {
      "type": "inherited-methods",
      "from": "byte.length"
    },
    {
      "type": "inherited-methods",
      "from": "read(b, 0, b.length)"
    },
    {
      "type": "inherited-methods",
      "from": "in.read(b)"
    },
    {
      "type": "inherited-methods",
      "from": "FilterInputStream"
    }
  ]
}