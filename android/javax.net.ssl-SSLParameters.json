{
  "path": "javax.net.ssl",
  "name": "SSLParameters",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Constructs SSLParameters."
    },
    {
      "type": "ctor",
      "ctor": "<init>(cipherSuites: Array<String!>!)\n            Constructs SSLParameters from the specified array of ciphersuites."
    },
    {
      "type": "ctor",
      "ctor": "<init>(cipherSuites: Array<String!>!, protocols: Array<String!>!)\n            Constructs SSLParameters from the specified array of ciphersuites and protocols."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "AlgorithmConstraints",
      "code": "getAlgorithmConstraints()",
      "desc": "Returns the cryptographic algorithm constraints.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getApplicationProtocols()",
      "desc": "Returns a prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS protocols.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getCipherSuites()",
      "desc": "Returns a copy of the array of ciphersuites or null if none have been set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getEndpointIdentificationAlgorithm()",
      "desc": "Gets the endpoint identification algorithm.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getNeedClientAuth()",
      "desc": "Returns whether client authentication should be required."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "getProtocols()",
      "desc": "Returns a copy of the array of protocols or null if none have been set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableCollection",
      "code": "getSNIMatchers()",
      "desc": "Returns a Collection containing all SNIMatchers of the Server Name Indication (SNI) parameter, or null if none has been set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "MutableList",
      "code": "getServerNames()",
      "desc": "Returns a List containing all SNIServerNames of the Server Name Indication (SNI) parameter, or null if none has been set.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Boolean",
      "code": "getUseCipherSuitesOrder()",
      "desc": "Returns whether the local cipher suites preference should be honored."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getWantClientAuth()",
      "desc": "Returns whether client authentication should be requested."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setAlgorithmConstraints(constraints: AlgorithmConstraints!)",
      "desc": "Sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setApplicationProtocols(protocols: Array<String!>!)",
      "desc": "Sets the prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS protocols."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setCipherSuites(cipherSuites: Array<String!>!)",
      "desc": "Sets the array of ciphersuites."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEndpointIdentificationAlgorithm(algorithm: String!)",
      "desc": "Sets the endpoint identification algorithm."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setNeedClientAuth(needClientAuth: Boolean)",
      "desc": "Sets whether client authentication should be required."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setProtocols(protocols: Array<String!>!)",
      "desc": "Sets the array of protocols."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setSNIMatchers(matchers: MutableCollection<SNIMatcher!>!)",
      "desc": "Sets the SNIMatchers of the Server Name Indication (SNI) parameter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setServerNames(serverNames: MutableList<SNIServerName!>!)",
      "desc": "Sets the desired SNIServerNames of the Server Name Indication (SNI) parameter."
    },
    {
      "type": "method",
      "status": "public",
      "identifier": "Unit",
      "code": "setUseCipherSuitesOrder(honorOrder: Boolean)",
      "desc": "Sets whether the local cipher suites preference should be honored."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setWantClientAuth(wantClientAuth: Boolean)",
      "desc": "Sets whether client authentication should be requested."
    }
  ]
}