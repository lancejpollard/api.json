{
  "path": "android.content",
  "name": "ClipDescription",
  "values": [
    {
      "type": "constant"
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIMETYPE_TEXT_HTML",
      "desc": "The MIME type for a clip holding HTML text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIMETYPE_TEXT_INTENT",
      "desc": "The MIME type for a clip holding an Intent."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIMETYPE_TEXT_PLAIN",
      "desc": "The MIME type for a clip holding plain text."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIMETYPE_TEXT_URILIST",
      "desc": "The MIME type for a clip holding one or more URIs."
    },
    {
      "type": "constant",
      "keyword": "static",
      "identifier": "String",
      "code": "MIMETYPE_UNKNOWN",
      "desc": "The MIME type for data whose type is otherwise unknown."
    },
    {
      "type": "ctor",
      "ctor": "<init>(label: CharSequence!, mimeTypes: Array<String!>!)\n            Create a new clip."
    },
    {
      "type": "ctor",
      "ctor": "<init>(o: ClipDescription!)\n            Create a copy of a ClipDescription."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "compareMimeTypes(concreteType: String!, desiredType: String!)",
      "desc": "Helper to compare two MIME types, where one may be a pattern."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "describeContents()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Array",
      "code": "filterMimeTypes(mimeType: String!)",
      "desc": "Filter the clip description MIME types by the given MIME type.",
      "symbol": "<"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "PersistableBundle",
      "code": "getExtras()",
      "desc": "Retrieve extended data from the clip description.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "CharSequence",
      "code": "getLabel()",
      "desc": "Return the label for this clip.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "getMimeType(index: Int)",
      "desc": "Return one of the possible clip MIME types.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "getMimeTypeCount()",
      "desc": "Return the number of MIME types the clip is available in."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Long",
      "code": "getTimestamp()",
      "desc": "Return the timestamp at which the associated ClipData is copied to global clipboard in the System#currentTimeMillis() time base."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "hasMimeType(mimeType: String!)",
      "desc": "Check whether the clip description contains the given MIME type."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setExtras(extras: PersistableBundle!)",
      "desc": "Add extended data to the clip description."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "String",
      "code": "toString()",
      "desc": ""
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "writeToParcel(dest: Parcel!, flags: Int)",
      "desc": ""
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "CONTENTS_FILE_DESCRIPTOR"
    },
    {
      "type": "inherited-constants",
      "from": "describeContents()"
    },
    {
      "type": "inherited-constants",
      "from": "Int"
    },
    {
      "type": "inherited-constants",
      "from": "PARCELABLE_WRITE_RETURN_VALUE"
    },
    {
      "type": "inherited-constants",
      "from": "writeToParcel"
    },
    {
      "type": "inherited-constants",
      "from": "Parcelable someFunction()"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(out Parcelable)"
    },
    {
      "type": "inherited-constants",
      "from": "void someFunction(inout Parcelable)"
    }
  ]
}