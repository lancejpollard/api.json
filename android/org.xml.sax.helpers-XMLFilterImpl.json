{
  "path": "org.xml.sax.helpers",
  "name": "XMLFilterImpl",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>()\n            Construct an empty XML filter, with no parent."
    },
    {
      "type": "ctor",
      "ctor": "<init>(parent: XMLReader!)\n            Construct an XML filter with the specified parent."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "characters(ch: CharArray!, start: Int, length: Int)",
      "desc": "Filter a character data event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "endDocument()",
      "desc": "Filter an end document event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "endElement(uri: String!, localName: String!, qName: String!)",
      "desc": "Filter an end element event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "endPrefixMapping(prefix: String!)",
      "desc": "Filter an end Namespace prefix mapping event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "error(e: SAXParseException!)",
      "desc": "Filter an error event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "fatalError(e: SAXParseException!)",
      "desc": "Filter a fatal error event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ContentHandler",
      "code": "getContentHandler()",
      "desc": "Get the content event handler.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "DTDHandler",
      "code": "getDTDHandler()",
      "desc": "Get the current DTD event handler.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "EntityResolver",
      "code": "getEntityResolver()",
      "desc": "Get the current entity resolver.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ErrorHandler",
      "code": "getErrorHandler()",
      "desc": "Get the current error event handler.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "getFeature(name: String!)",
      "desc": "Look up the value of a feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "XMLReader",
      "code": "getParent()",
      "desc": "Get the parent reader.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Any",
      "code": "getProperty(name: String!)",
      "desc": "Look up the value of a property.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "ignorableWhitespace(ch: CharArray!, start: Int, length: Int)",
      "desc": "Filter an ignorable whitespace event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "notationDecl(name: String!, publicId: String!, systemId: String!)",
      "desc": "Filter a notation declaration event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parse(input: InputSource!)",
      "desc": "Parse a document."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "parse(systemId: String!)",
      "desc": "Parse a document."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "processingInstruction(target: String!, data: String!)",
      "desc": "Filter a processing instruction event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "InputSource",
      "code": "resolveEntity(publicId: String!, systemId: String!)",
      "desc": "Filter an external entity resolution.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setContentHandler(handler: ContentHandler!)",
      "desc": "Set the content event handler."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDTDHandler(handler: DTDHandler!)",
      "desc": "Set the DTD event handler."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setDocumentLocator(locator: Locator!)",
      "desc": "Filter a new document locator event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setEntityResolver(resolver: EntityResolver!)",
      "desc": "Set the entity resolver."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setErrorHandler(handler: ErrorHandler!)",
      "desc": "Set the error event handler."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setFeature(name: String!, value: Boolean)",
      "desc": "Set the value of a feature."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setParent(parent: XMLReader!)",
      "desc": "Set the parent reader."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "setProperty(name: String!, value: Any!)",
      "desc": "Set the value of a property."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "skippedEntity(name: String!)",
      "desc": "Filter a skipped entity event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startDocument()",
      "desc": "Filter a start document event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startElement(uri: String!, localName: String!, qName: String!, atts: Attributes!)",
      "desc": "Filter a start element event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "startPrefixMapping(prefix: String!, uri: String!)",
      "desc": "Filter a start Namespace prefix mapping event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "unparsedEntityDecl(name: String!, publicId: String!, systemId: String!, notationName: String!)",
      "desc": "Filter an unparsed entity declaration event."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Unit",
      "code": "warning(e: SAXParseException!)",
      "desc": "Filter a warning event."
    }
  ]
}