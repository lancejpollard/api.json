{
  "path": "java.util",
  "name": "Objects",
  "values": [
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "checkFromIndexSize(fromIndex: Int, size: Int, length: Int)",
      "desc": "Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "checkFromToIndex(fromIndex: Int, toIndex: Int, length: Int)",
      "desc": "Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "checkIndex(index: Int, length: Int)",
      "desc": "Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "compare(a: T, b: T, c: Comparator<in T>)",
      "desc": "Returns 0 if the arguments are identical and c.compare(a, b) otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "deepEquals(a: Any?, b: Any?)",
      "desc": "Returns true if the arguments are deeply equal to each other and false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "equals(a: Any?, b: Any?)",
      "desc": "Returns true if the arguments are equal to each other and false otherwise."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "hash(vararg values: Any!)",
      "desc": "Generates a hash code for a sequence of input values."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Int",
      "code": "hashCode(o: Any?)",
      "desc": "Returns the hash code of a non-null argument and 0 for a null argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "isNull(obj: Any?)",
      "desc": "Returns true if the provided reference is null otherwise returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "Boolean",
      "code": "nonNull(obj: Any?)",
      "desc": "Returns true if the provided reference is non-null otherwise returns false."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "T",
      "code": "requireNonNull(obj: T?)",
      "desc": "Checks that the specified object reference is not null."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "T",
      "code": "requireNonNull(obj: T?, message: String)",
      "desc": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "T",
      "code": "requireNonNull(obj: T?, messageSupplier: Supplier<String!>)",
      "desc": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "T",
      "code": "requireNonNullElse(obj: T?, defaultObj: T)",
      "desc": "Returns the first argument if it is non-null and otherwise returns the non-null second argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "T",
      "code": "requireNonNullElseGet(obj: T?, supplier: Supplier<out T>)",
      "desc": "Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get()."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toString(o: Any?)",
      "desc": "Returns the result of calling toString for a non-null argument and \"null\" for a null argument."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "static",
      "identifier": "String",
      "code": "toString(o: Any?, nullDefault: String)",
      "desc": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise."
    }
  ]
}