{
  "path": "java.security.spec",
  "name": "EllipticCurve",
  "values": [
    {
      "type": "ctor",
      "ctor": "<init>(field: ECField!, a: BigInteger!, b: BigInteger!)\n            Creates an elliptic curve with the specified elliptic field field and the coefficients a and b."
    },
    {
      "type": "ctor",
      "ctor": "<init>(field: ECField!, a: BigInteger!, b: BigInteger!, seed: ByteArray!)\n            Creates an elliptic curve with the specified elliptic field field, the coefficients a and b, and the seed used for curve generation."
    },
    {
      "type": "method",
      "status": "public"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Boolean",
      "code": "equals(other: Any?)",
      "desc": "Compares this elliptic curve for equality with the specified object."
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "getA()",
      "desc": "Returns the first coefficient a of the elliptic curve.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "BigInteger",
      "code": "getB()",
      "desc": "Returns the second coefficient b of the elliptic curve.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ECField",
      "code": "getField()",
      "desc": "Returns the finite field field that this elliptic curve is over.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "ByteArray",
      "code": "getSeed()",
      "desc": "Returns the seeding bytes seed used during curve generation.",
      "symbol": "!"
    },
    {
      "type": "method",
      "status": "public",
      "keyword": "open",
      "identifier": "Int",
      "code": "hashCode()",
      "desc": "Returns a hash code value for this elliptic curve."
    }
  ]
}